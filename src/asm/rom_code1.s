 .text
# ---------------------------------------------------------------------------
TEST_INT:                               # DATA XREF: ROM:00007B84↑o
                call    sub_77E34       # Label from official source
                ld      select0_flag, r15
                setbit  2, r15, r15
                st      r15, select0_flag
                ld      select1_flag, r15
                setbit  2, r15, r15
                st      r15, select1_flag
                mov     1, r4
                ld      mod_fa_enemy0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_enemy1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_key_play, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_key_record, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_sampling, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                ld      debug_flag, r12
                bbs     9, r12, loc_10EA8
                ld      INTERUPT_FLAGS_HELD, r15
                bbs     3, r15, loc_10EA8
                ld      INTERUPT_FLAGS_HELD, r15
                bbs     0x1B, r15, loc_10EA8
                call    sub_5905C
                mov     0, r15
                stib    r15, TEST_MENU_FLAG
                ret
# ---------------------------------------------------------------------------
loc_10EA8:                              # CODE XREF: TEST_INT+AC↑j
                mov     1, r4
                ld      mod_fa_nameentry, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_key_play, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_play, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_win0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_win1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_enemy0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_enemy1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_control0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_record, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      fa_rob0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      fa_rob1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_coli, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_key_record, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_sampling, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_game_info, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_obj0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      fa_camera, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_user, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_game_disp, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_sel_disp, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_effect, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_tobi, r3 # Projectile (tobi = flight)
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_sound, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_pol_string, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_stage_efc, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_kill_osage, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_pol_test, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                call    sub_5BB20
                lda     0xFF, r15       # Set TEST_MENU_FLAG to false
                stib    r15, TEST_MENU_FLAG
                ret
# End of function TEST_INT
# =============== S U B R O U T I N E =======================================
TEST_DSP:                               # DATA XREF: ROM:00007B8C↑o
                ldob    TEST_MENU_FLAG, r3 # Label from Fighting Vipers source (but it was obvious)
                cmpobe  0, r3, call_DEBUG_TESTS # branch if TEST_MENU_FLAG is 0
                addo    4, sp, sp
                st      g4, -4(sp)
                call    DISP_TEST_MENU
                ld      -4(sp), g4
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
call_DEBUG_TESTS:                       # CODE XREF: TEST_DSP+8↑j
                call    DEBUG_TEST_MODES
                ret
# End of function TEST_DSP
# ---------------------------------------------------------------------------
                .long 0x508037       # unreachable code
                .long 1
                .long 0
                .long 0x2B
                .long 0x508036
                .long 1
                .long 0
                .long 3
                .long 0x508034
                .long 2
                .long 0
                .long 0x206
# ---------------------------------------------------------------------------
RANK_INT:                               # DATA XREF: ROM:00007B94↑o
                ldos    rank_mode, r14  # Label from Fighting Vipers source (but it was obvious)
                bbc     9, r14, all_end
                mov     1, r4
                ld      fa_camera, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                call    scroll_all_init
                call    rank_mode_over_check
                ld      not_scr_bg_move, r15
                setbit  0xE, r15, r15
                st      r15, not_scr_bg_move
                mov     0, r15
                stis    r15, scrB_H_page
                mov     0, r15
                stis    r15, scrB_V_page
                addo    0x1F, 0x11, g0
                call    _Scroll_Initialize
                ld      mod_fa_game_disp, r3
                ld      0x0(r3), r15
                setbit  0x1E, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                setbit  0x19, r15, r15
                st      r15, 0x0(r3)
                ld      not_scr_bg_move, r15
                setbit  0xE, r15, r15
                st      r15, not_scr_bg_move
                lda     check_word4, r15
                stib    r15, draw_vs_routine_flag
                shlo    7, 5, r15
                st      r15, CTRL_TIMER
                ldib    mode, r15
                lda     1(r15), r15
                stib    r15, mode
                ret
# ---------------------------------------------------------------------------
RANK_DSP:                               # DATA XREF: ROM:00007B9C↑o
                lda     check_word4+1, r15 # Label from Fighting Vipers source (Though it was obvious)
                stib    r15, draw_vs_routine_flag
                ld      CTRL_TIMER, r15
                lda     -1(r15), r15
                st      r15, CTRL_TIMER
                shlo    6, 5, r13
                ld      CTRL_TIMER, r14
                cmpobl  r13, r14, loc_112F8
                ld      INTERUPT_FLAGS_MOMENTARY, r3
                bbs     8, r3, RANK_DSP_audio
                bbs     9, r3, RANK_DSP_audio
                bbs     10, r3, RANK_DSP_audio
                bbs     16, r3, RANK_DSP_audio
                bbs     17, r3, RANK_DSP_audio
                bbs     18, r3, RANK_DSP_audio
loc_112F8:                              # CODE XREF: ROM:000112D4↑j
                ld      CTRL_TIMER, r14
                cmpibl  0, r14, loc_11314
RANK_DSP_audio:                         # CODE XREF: ROM:000112E0↑j
                lda     0xA00360, g0
                call    sound_request_u
                b       all_end
# ---------------------------------------------------------------------------
loc_11314:                              # CODE XREF: ROM:00011300↑j
                ret
# =============== S U B R O U T I N E =======================================
init_event:                             # CODE XREF: ROM:00006A58↑p
                lda     event_data, g13 # Label from Fighting Vipers source
                lda     event_init_data, r9
                ld      event_count, r8
                lda     0x50C000, r10
                mov     0, r4
                mov     0, r5
                mov     0, r6
                mov     0, r7
loc_11348:                              # CODE XREF: init_event+90↓j
                ld      0x0(r9), r15
                st      r15, 0x0(g13)
                ld      4(r9), r3
                stib    r3, 4(g13)
                ld      8(r9), g0
                st      g0, 8(g13)
                ld      0xC(r9), r15
                st      r15, 0xC(g13)
                ld      0x14(r9), r3
                cmpobe  0, r3, loc_1137C # if 0x14(obj) is zero, jump down
                lda     (r3)[r3*4], r3
                lda     6(r3)[r3*4], r3
loc_1137C:                              # CODE XREF: init_event+54↑j
                st      r3, 0x38(g13)   # (On 11th loop) P1_PARTS+0x38 = r3
                ld      0x10(r9), r3
                st      g13, (r3)
                shlo    6, 1, r13
                addi    r13, r9, r9
                addo    g0, g13, g13
                stq     r4, (r10)
                stq     r4, 0x10(r10)
                addo    0x1F, 1, r13
                addi    r13, r10, r10
                cmpdeco 1, r8, r8
                bl      loc_11348
                ret
# End of function init_event
# =============== S U B R O U T I N E =======================================
event_loop:                             # CODE XREF: main_loop+64↑p
                mov     3, g0           # Label from official source
                call    set_mmode
                mov     1, g0
                call    set_mmode
                ld      not_scr_bg_move, r15
                bbs     16, r15, loc_114C4
                lda     event_data, g13
                lda     0x50C000, r10
                ld      debug_flag, r9
                lda     0xFFFFF, r8
                mov     0, r11
actual_event_loop:                      # CODE XREF: event_loop+104↓j
                st      r11, event
                bbs     9, r9, loc_11410 # branch if bit 9 set on debug flag (0x00018800)
                ld      fa_camera, r4
                ldob    0xDE(r4), r4    # load mod_fa_camera_add+0xDE to r4, r4=3
                bbs     2, r4, loc_11410
                call    dsp_exad        # Display executing event
loc_11410:                              # CODE XREF: event_loop+48↑j
                st      r8, TIMER_02
                ld      0x0(g13), r4
                bbc     31, r4, loc_11484
                ld      12(g13), r4
                callx   (r4)            # Execute event
                bbs     5, r9, loc_11498
                ldl     TIMER_02, r14   # r14 == 000FFF9D
                and     r8, r15, r3     # Init:
                subi    r3, r8, r3      # Init:
                st      r3, 0x10(r10)   # r3 == 00000062
                ld      0x38(g13), r15  # g13 = P1_PARTS
                cmpobe  0, r15, loc_11460 # Init:
                cmpobl  r3, r15, loc_11460
                ld      debug_flag, r15
set_bit_3_debug:
                setbit  3, r15, r15
                st      r15, debug_flag
loc_11460:                              # CODE XREF: event_loop+94↑j
                ldq     (r10), r4
                cmpo    1, 0
                addc    r3, r4, r4
                addc    0, r5, r5
                addo    1, r6, r6
                cmpibge r7, r3, loc_1147C
                mov     r3, r7
loc_1147C:                              # CODE XREF: event_loop+C4↑j
                stq     r4, (r10)
                b       loc_11498
# ---------------------------------------------------------------------------
loc_11484:                              # CODE XREF: event_loop+6C↑j
                ldl     TIMER_02, r14
                and     r8, r15, r3
                subi    r3, r8, r3
                st      r3, 0x10(r10)
loc_11498:                              # CODE XREF: event_loop+78↑j
                ld      8(g13), r13
                addi    r13, g13, g13
                addo    0x1F, 1, r13
                addi    r13, r10, r10
                addo    1, r11, r11     # event+1
                ld      event_count, r3
                cmpibl  r11, r3, actual_event_loop
                bbs     9, r9, loc_114C0
                call    del_exad        # "Display Event Loop"
loc_114C0:                              # CODE XREF: event_loop+108↑j
                ret
# ---------------------------------------------------------------------------
loc_114C4:                              # CODE XREF: event_loop+18↑j
                lda     ptr_mod_fa_game_disp, r5
                lda     dsp_exad, r6    # Display executing event
loc_114D4:                              # CODE XREF: event_loop+144↓j
                cmpobe  r5, r6, loc_114F8 # return
                ld      (r5), r3        # r3 = mod_fa_game_disp
                ld      (r3), g13       # g13 = mod_fa_game_disp_add
                ld      0x0(g13), r4
                bbc     31, r4, loc_114F0 # Check if bit 31 of mod_fa_game_disp_add is clear, if so branch
                ld      0xC(g13), r4    # mod_fa_game_disp_add+0xC
                callx   (r4)            # For Sonic, r4 = 0x79444
loc_114F0:                              # CODE XREF: event_loop+134↑j
                addo    4, r5, r5
                b       loc_114D4
# ---------------------------------------------------------------------------
loc_114F8:                              # CODE XREF: event_loop:loc_114D4↑j
                ret                     # return
# End of function event_loop
# ---------------------------------------------------------------------------
ptr_mod_fa_game_disp:.long mod_fa_game_disp
                .long mod_fa_unused
# =============== S U B R O U T I N E =======================================
# Display executing event
dsp_exad:                               # CODE XREF: event_loop+5C↑p
                ld      event, r3       # Label from Virtua Fighter 2 source
                shlo    6, 1, r4
                mulo    r3, r4, r3
                ldt     event_names(r3), r4 # 0 = fa_nameentry
                shlo    8, r6, r6
                shro    8, r6, r6
                lda     0x50E000, g0
                stt     r4, (g0)
                addo    3, g0, g0
                lda     0x100045C, g9
                call    print_mes
                ret
# End of function dsp_exad
# =============== S U B R O U T I N E =======================================
# "Display Event Loop"
del_exad:                               # CODE XREF: event_loop+10C↑p
                addo    4, sp, sp       # Label from Virtua Fighter 2 source
                st      g0, -4(sp)
                lda     0x100045C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aExad:          .asciz "           EXAD"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ret
# End of function del_exad
# =============== S U B R O U T I N E =======================================
interrupt_wait_b:                       # CODE XREF: main_loop+88↑p
                ldl     TIMER_03, r14   # Label from official source
                lda     0xFFFFF, r14
                and     r14, r15, r15
                subi    r15, r14, r15
                subo    0x12, r15, r15
                divo    0x19, r15, r3
                ldob    RAMBASE_START, r6
                cmpobne 0, r6, loc_115BC
                lda     0x43DB, r4
                subi    r3, r4, r5
                b       loc_115C0
# ---------------------------------------------------------------------------
loc_115BC:                              # CODE XREF: interrupt_wait_b+28↑j
                subi    r3, 0, r5
loc_115C0:                              # CODE XREF: interrupt_wait_b+38↑j
                st      r5, CPU_POWER
                ld      frame_counter, r3
                and     0x1F, r3, r3
                cmpobe  0, r3, loc_115E4
                ld      CPU_WORST, r3
                cmpibl  r3, r5, loc_115EC
loc_115E4:                              # CODE XREF: interrupt_wait_b+54↑j
                st      r5, CPU_WORST
loc_115EC:                              # CODE XREF: interrupt_wait_b+60↑j
                ldob    CPU_FAIL_flag, g0
                cmpobe  1, g0, cpu_fail_check
                cmpobe  2, g0, loc_11608
                ldob    RAMBASE_START, g0
                cmpobe  1, g0, loc_1163C
loc_11608:                              # CODE XREF: interrupt_wait_b+78↑j
                ldob    RAMBASE_START, g0
_idle:                                  # CODE XREF: interrupt_wait_b+98↓j
                ldob    RAMBASE_START, r3
                cmpibe  r3, g0, _idle
cpu_fail_check:                         # CODE XREF: interrupt_wait_b+74↑j
                ldob    RAMBASE_START, r4
                cmpobg  2, r4, loc_1163C
                ld      CPU_FAIL, r3
                addo    1, r3, r3
                st      r3, CPU_FAIL
loc_1163C:                              # CODE XREF: interrupt_wait_b+84↑j
                mov     0, r3
                stob    r3, RAMBASE_START
                ld      COPRO_STATUS_START, r3
                and     2, r3, r3
                cmpobe  0, r3, iwb_tgp_ok
iwb_tgp_ok:                             # CODE XREF: interrupt_wait_b+D4↑j
                call    change_poly_bank # Label from Fighting Vipers source
                call    sub_2435C
                ld      debug_flag, r15
                bbs     9, r15, loc_11740
                lda     0x10004DA, g9
                ldis    CTRL_TIMER, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aCtrlTimer:     .asciz "CTRL_TIMER"
                .byte 0
# ---------------------------------------------------------------------------
                ldis    game_timer, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aGameTimer:     .asciz "GAME_TIMER"
                .byte 0
# ---------------------------------------------------------------------------
                ldis    CPU_POWER, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aCpuPower:      .asciz "CPU_POWER"
                .short 0
# ---------------------------------------------------------------------------
                ldis    CPU_WORST, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aCpuWorst:      .asciz "CPU_WORST"
                .short 0
# ---------------------------------------------------------------------------
                ldis    CPU_FAIL, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aCpuFail:       .asciz "CPU_FAIL"
                .short 0
                .byte 0
# ---------------------------------------------------------------------------
                lda     0x1000956, g9
                ldis    POLYGON, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aPolygon_0:     .asciz "POLYGON"
# ---------------------------------------------------------------------------
                ldib    working_rate, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aWorkingRate:   .asciz "working_rate"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_11740:                              # CODE XREF: interrupt_wait_b+E8↑j
                ret
# End of function interrupt_wait_b
# =============== S U B R O U T I N E =======================================
# Useless. If check passes or fails, it will always ret.
start_check:                            # CODE XREF: main_loop+54↑p
                ld      debug_flag, r15 # Label from official source
                bbs     1, r15, loc_11784 # falls through
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      0x0(g7), r15
                bbs     5, r15, loc_11770 # falls through
                ld      0x0(g8), r15
                bbc     5, r15, loc_11784 # falls through if p2 is mirror
loc_11770:                              # CODE XREF: start_check+20↑j
                addo    0x1F, 0x11, r3  # r3 = 0x30
                ld      INTERUPT_FLAGS_MOMENTARY, r8 # P1 Start + P2 Start
                and     r8, r3, r3
                cmpibe  0, r3, loc_11784 # if r3 is 0, branch, and it does
loc_11784:                              # CODE XREF: start_check+8↑j
                ret
# End of function start_check
# ---------------------------------------------------------------------------
debug_sw_check:                         # CODE XREF: VsyncScr+80↑p
                ld      debug_flag, r9  # Label from Virtua Fighter 2 source
                ld      0x500710, r10
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                ld      INTERUPT_FLAGS_HELD, r7
                ldos    0x100A008, r14
                ldos    0x100A00A, r13
                chkbit  6, r10
                alterbit 15, r14, r14
                alterbit 15, r13, r13
                stos    r14, 0x100A008
                stos    r13, 0x100A00A
                clrbit  9, r9, r9
                bbs     0, r10, loc_11800 # falls through
                setbit  9, r9, r9
                ld      0x500714, r15
                bbc     0, r15, loc_11800 # hits
                lda     0x100045A, g9
                mov     0x12, g0
                mov     0xD, g1
                call    clr_pattern_s
loc_11800:                              # CODE XREF: ROM:000117D8↑j
                chkbit  1, r10
                alterbit 10, r9, r9
                bbc     14, r9, loc_11810
                setbit  10, r9, r9
loc_11810:                              # CODE XREF: ROM:00011808↑j
                shlo    4, 13, r13
                andnot  r13, r9, r9
                bbs     12, r9, potential_bars2
                bbs     2, r9, debug_clr_3_set_5
                bbs     3, r9, loc_11854
                bbc     9, r9, loc_1182C
                bbc     10, r9, loc_1183C
loc_1182C:                              # CODE XREF: ROM:00011824↑j
                bbs     24, r8, loc_11854
                bbs     24, r8, freezes_game
                bbc     18, r7, loc_1183C # P2 Barrier
                bbs     5, r8, loc_11854
loc_1183C:                              # CODE XREF: ROM:00011828↑j
                bbc     1, r9, r9_to_debug
                addo    0x1F, 0x11, r3  # r3 = 0x30
                and     r7, r3, r3
                cmpibne 0, r3, r9_to_debug
                clrbit  1, r9, r9
                b       r9_to_debug
# ---------------------------------------------------------------------------
loc_11854:                              # CODE XREF: ROM:00011820↑j
                ldos    0x100A008, r14
                ldos    0x100A00A, r13
                chkbit  6, r10
                alterbit 0xF, r14, r14
                alterbit 0xF, r13, r13
                clrbit  0xE, r14, r14
                clrbit  0xE, r13, r13
                clrbit  0xD, r14, r14
                clrbit  0xD, r13, r13
                stos    r14, 0x100A008
                stos    r13, 0x100A00A
                mov     0, r15
                stis    r15, 0x100A000
                mov     0, r15
                stis    r15, 0x100A002
                lda     0xA6, r13
                or      r13, r9, r9
                ld      debug_flag, r15
                bbs     9, r15, loc_118F0
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000000, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aDebugMode:     .asciz "debug_mode"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
loc_118F0:                              # CODE XREF: ROM:000118B8↑j
                b       r9_to_debug
# ---------------------------------------------------------------------------
debug_clr_3_set_5:                      # CODE XREF: ROM:0001181C↑j
                clrbit  3, r9, r9
                setbit  5, r9, r9
                bbs     8, r9, debug_flag_manip
                bbs     0x18, r8, debug_flag_manip
                bbc     5, r7, loc_1190C
                b       r9_to_debug
# ---------------------------------------------------------------------------
loc_1190C:                              # CODE XREF: ROM:00011904↑j
                ld      0x59E008, r15
                bbs     3, r15, r9_to_debug
                bbs     0x19, r8, loc_11920
                bbc     4, r8, r9_to_debug
loc_11920:                              # CODE XREF: ROM:00011918↑j
                clrbit  5, r9, r9
                setbit  6, r9, r9
                b       r9_to_debug
# ---------------------------------------------------------------------------
debug_flag_manip:                       # CODE XREF: ROM:000118FC↑j
                clrbit  8, r9, r9
                clrbit  2, r9, r9
                setbit  4, r9, r9
                clrbit  5, r9, r9
                setbit  6, r9, r9
                ld      debug_flag, r15
                bbs     9, r15, r9_to_debug
                lda     0x1000000, g9
                mov     0xA, g0
                mov     1, g1
                call    clr_pattern_s
                b       r9_to_debug
# ---------------------------------------------------------------------------
freezes_game:                           # CODE XREF: ROM:00011830↑j
                setbit  12, r9, r9
                setbit  13, r9, r9
                b       r9_to_debug
# ---------------------------------------------------------------------------
potential_bars2:                        # CODE XREF: ROM:00011818↑j
                setbit  13, r9, r9
                bbs     0x18, r8, loc_11984
                bbc     0x19, r8, r9_to_debug
                clrbit  0xD, r9, r9
                b       r9_to_debug
# ---------------------------------------------------------------------------
loc_11984:                              # CODE XREF: ROM:00011974↑j
                clrbit  0xC, r9, r9
                clrbit  0xD, r9, r9
r9_to_debug:                            # CODE XREF: ROM:loc_1183C↑j
                st      r9, debug_flag
                ret
# =============== S U B R O U T I N E =======================================
variable_diff_init:                     # CODE XREF: ROM:00006AFC↑p
                mov     0, r3           # Label from Fighitng Vipers source
                st      r3, 0x50D000
                stob    r3, working_rate
                stob    r3, var_diff    # vairable diff
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3000(r4), r4  # save_working
                ldob    vd_measure, r3  # vairable diff measure
                shlo    r3, 1, r3
                mulo    r4, r3, r4
                shro    8, r4, r4
                shlo    0x10, r4, r3
                or      r4, r3, r4
                mov     r4, r5
                mov     r4, r6
                mov     r4, r7
                addo    0x1F, 1, r8
                lda     0x50D0F0, r9
loc_119F8:                              # CODE XREF: variable_diff_init+68↓j
                stq     r4, (r9)[r8*16]
                cmpdeco 1, r8, r8
                bl      loc_119F8
variable_diff_calc:                     # CODE XREF: main_loop+90↑p
                ld      mode_flag, r4   # Label from official source
                shlo    0x10, 1, r3
                lda     0x20000(r3), r3
                and     r4, r3, r3
                cmpobne 0, r3, loc_11B44 # return
                lda     0xFF, r8
                lda     0x50D100, r9
                ld      0x50D000, r6
                addo    1, r6, r3
                st      r3, 0x50D000
                ldob    vd_measure, r5  # vairable diff measure
                shro    r5, r6, r7
                and     r8, r7, r7
                shlo    r5, 1, r3
                subo    1, r3, r3
                and     r6, r3, r3
                cmpobne 0, r3, loc_11AE0
                mov     0, g0
                mov     r8, r10
loc_11A68:                              # CODE XREF: variable_diff_init+DC↓j
                ldos    (r9)[r10*2], r3
                addo    g0, r3, g0
                cmpdeci 0, r10, r10
                bl      loc_11A68
                addo    5, r5, r3
                shro    r3, g0, r4
                mov     7, r3
                cmpible r4, r3, loc_11A8C
                mov     r3, r4
loc_11A8C:                              # CODE XREF: variable_diff_init+EC↑j
                stob    r4, working_rate
                addo    0, r5, r3
                shro    r3, g0, g0
                lda     0xFF, r3
                cmpible g0, r3, loc_11AA8
                mov     r3, g0
loc_11AA8:                              # CODE XREF: variable_diff_init+108↑j
                stob    g0, save_working_bk
                stob    g0, save_working
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3342(r3), r3  # r3 = BACKUP_RAM_TO_RAM+0x3342
                ldob    byte_11BD4(r4)[r3*8], r3
                stob    r3, var_diff    # vairable diff
                mov     0, r15
                stis    r15, (r9)[r7*2]
loc_11AE0:                              # CODE XREF: variable_diff_init+C4↑j
                ld      mode_flag, r4
                shlo    6, 1, r3
                lda     0x80(r3), r3
                lda     0x100(r3), r3
                lda     0x200(r3), r3
                lda     0x400(r3), r3
                lda     0x800(r3), r3
                lda     0x1000(r3), r3
                lda     0x2000(r3), r3
                lda     0x4000(r3), r3
                lda     0x8000(r3), r3
                lda     loc_40000(r3), r3
                lda     loc_80000(r3), r3
                and     r4, r3, r3
                cmpobe  0, r3, loc_11B44 # return
                ldos    (r9)[r7*2], r14
                addi    1, r14, r15
                stos    r15, (r9)[r7*2]
loc_11B44:                              # CODE XREF: variable_diff_init+84↑j
                ret                     # return
# End of function variable_diff_init
# =============== S U B R O U T I N E =======================================
set_game_setting:                       # CODE XREF: ROM:00006B00↑p
                ldob    var_diff, r4    # Label from Fighting Vipers source
                ld      add_BACKUP_RAM_TO_RAM, r5
                ldob    0x3342(r5), r5  # r5 = BACKUP_RAM_TO_RAM+0x3342
                ldib    working_rate, r15
                stib    r15, use_working
                ld      float_5_0[r4*4], r8 # Always float 5.0
                ld      float_5_1[r4*4], r9 # Always float 5.0
                ld      add_BACKUP_RAM_TO_RAM, r10
                ldob    0x3344(r10), r10 # r10 = BACKUP_RAM_TO_RAM+0x3344
                ld      add_BACKUP_RAM_TO_RAM, r11
                ldob    0x3343(r11), r11 # r11 = BACKUP_RAM_TO_RAM+0x3343
                ldos    max_energy_vs_list[r10*2], r10 # r10 = 1; then r10 = 140
                ldos    max_energy_1p_list[r11*2], r11
                st      r8, float_5_0_ram # These 5.0 floats are never ref'd anywhere
                st      r9, float_5_1_ram
                stos    r10, val_vs_energy_max
                stos    r11, val_1p_energy_max
                ret
# End of function set_game_setting
# ---------------------------------------------------------------------------
byte_11BD4:     .byte 0, 0, 0, 0, 0, 0, 0, 0
                .byte 0, 0, 0, 0, 1, 1, 1, 1
                .byte 0, 0, 1, 1, 2, 2, 2, 2
                .byte 0, 0, 1, 2, 3, 3, 3, 3
float_5_0:      .float 5.0              # DATA XREF: set_game_setting+28↑r
                .float 5.0
                .float 5.0
                .float 5.0
float_5_1:      .float 5.0              # DATA XREF: set_game_setting+30↑r
                .float 5.0
                .float 5.0
                .float 5.0
max_energy_vs_list:.short 160           # DATA XREF: set_game_setting+58↑r
                .short 140
                .short 130
                .short 120
max_energy_1p_list:.short 160           # DATA XREF: set_game_setting+60↑r
                .short 140
                .short 130
                .short 120
# =============== S U B R O U T I N E =======================================
init_pol_color:                         # CODE XREF: ROM:00006A5C↑p
                lda     POLY_PALETTE_DATA_ROM, r5 # Label from Fighting Vipers source
                lda     POLY_PALETTE_DATA, r6 # 0x000000
                shlo    0xA, 1, r4      # 1024
loc_11C38:                              # CODE XREF: init_pol_color+28↓j
                ldos    (r5), r3
                stos    r3, (r6)
                addo    2, r5, r5
                addo    2, r6, r6
                cmpdeco 1, r4, r4
                bl      loc_11C38
                ret
# End of function init_pol_color
# ---------------------------------------------------------------------------
                xor     r14, r14, g0    # unreachable code in StF, FV, and VF2!
                ldob    0, r5
                ld      ptr_texture_check_data[r5*4], g5
                call    sub_11C84
                ret
# ---------------------------------------------------------------------------
                xor     r14, r14, r14   # unreachable code in StF, FV, and VF2!
                not     r14, g0
                lda     0x2600000, g5
                call    sub_11C84
                ret
# =============== S U B R O U T I N E =======================================
sub_11C84:                              # CODE XREF: ROM:00011C64↑p
                ld      texram_0_1, r7  # unreachable code
                ld      texram_1, r8
                mov     g0, r13
                shlo    0x11, 3, r9
                cmpibne 0, r13, loc_11CAC
                ld      texram_0_1, r5
                b       loc_11CD8
# ---------------------------------------------------------------------------
loc_11CAC:                              # CODE XREF: sub_11C84+18↑j
                ld      texram_1, r5
loc_11CB4:                              # CODE XREF: sub_11C84+4C↓j
                ldos    (g5), r3
                stos    r3, (r5)
                addo    2, g5, g5
                addo    2, r5, r5
                addo    2, r7, r7
                addo    2, r8, r8
                cmpdeco 1, r9, r9
                bl      loc_11CB4
                b       loc_11CF8
# ---------------------------------------------------------------------------
loc_11CD8:                              # CODE XREF: sub_11C84+24↑j
                ldos    (g5), r3
                stos    r3, (r5)
                addo    2, g5, g5
                addo    2, r5, r5
                addo    2, r7, r7
                addo    2, r8, r8
                cmpdeco 1, r9, r9
                bl      loc_11CD8
loc_11CF8:                              # CODE XREF: sub_11C84+50↑j
                not     g0, g0
                mov     0, r9
                shlo    7, 1, r4
                mov     r4, r6
loc_11D08:                              # CODE XREF: sub_11C84+EC↓j
                shlo    9, 1, r12
                mov     1, r10
                mov     g0, r13
                ld      dword_11D90[r10*4], r11 # Always 256
loc_11D1C:                              # CODE XREF: sub_11C84+E4↓j
                ldos    (g5), r3
                cmpibne 0, r13, loc_11D2C
                stos    r3, (r7)
                b       loc_11D30
# ---------------------------------------------------------------------------
loc_11D2C:                              # CODE XREF: sub_11C84+9C↑j
                stos    r3, (r8)
loc_11D30:                              # CODE XREF: sub_11C84+A4↑j
                addo    2, g5, g5
                addo    2, r7, r7
                addo    2, r8, r8
                cmpibe  0, r9, loc_11D64
                cmpdeco 1, r11, r11
                bl      loc_11D64
                addo    1, r10, r10
                ld      dword_11D90[r10*4], r11
                cmpo    r10, r9
                ble     loc_11D60
                shlo    1, r11, r11
loc_11D60:                              # CODE XREF: sub_11C84+D4↑j
                not     r13, r13
loc_11D64:                              # CODE XREF: sub_11C84+B8↑j
                cmpdeco 1, r12, r12
                bl      loc_11D1C
                cmpdeco 1, r6, r6
                bl      loc_11D08
                cmpi    1, r4
                be      loc_11D80
                shro    1, r4, r4
loc_11D80:                              # CODE XREF: sub_11C84+F4↑j
                mov     r4, r6
                cmpinco 8, r9, r9
                bg      loc_11D08
                ret
# End of function sub_11C84
# ---------------------------------------------------------------------------
dword_11D90:    .long 512               # DATA XREF: sub_11C84+90↑r
                .long 256
                .long 128
                .long 64
                .long 32
                .long 16
                .long 8
                .long 4
                .long 2
                .long 1
ptr_texture_check_data:.long texture_check_data
                .long texture_check_data
                .long texture_check_data
                .long texture_check_data
# =============== S U B R O U T I N E =======================================
# just return for disco mode
essential_color_handling:               # CODE XREF: ROM:00006A80↑p
                ld      luma_ram, g0
                lda     add_TILE_DATA_START, g1
                ld      0x20D0008, g2
loc_11DE0:                              # CODE XREF: essential_color_handling+38↓j
                shlo    7, 1, g3
loc_11DE4:                              # CODE XREF: essential_color_handling+30↓j
                ldob    (g1), r3
                stos    r3, (g0)
                addo    1, g1, g1
                addo    2, g0, g0
                cmpdeco 1, g3, g3
                bl      loc_11DE4
                cmpdeco 1, g2, g2
                bl      loc_11DE0
                ret
# End of function essential_color_handling
# =============== S U B R O U T I N E =======================================
sub_11E08:                              # CODE XREF: ROM:00006A88↑p
                lda     dword_8EBD4, g1
                lda     0xB1, g2
                mov     0, g3
                ld      (g1), g4
                addo    4, g1, g1
                lda     0x5A, g5
                mov     0x10, g6
                mov     0, r6
                mov     4, r9
loc_11E30:                              # CODE XREF: sub_11E08+98↓j
                shlo    2, r6, r7
                shlo    0xB, 1, r8
                addo    r8, r6, r6
                mov     0, r3
                st      g14, mmode
                lda     loc_1414, g14
                st      g14, 0x140(g10)
                ld      mmode, g14
                st      r7, (g10)[g12*1]
                st      r8, (g10)[g12*1]
loc_11E64:                              # CODE XREF: sub_11E08+64↓j
                call    sub_11EA8
                cmpdeco 1, r8, r8
                bl      loc_11E64
                mov     0, r3
                st      g14, mmode
                lda     off_1010, g14
                st      g14, 0x100(g10)
                ld      mmode, g14
                st      r3, (g10)[g12*1]
                call    set_end_mark
                call    interrupt_wait
                cmpdeco 1, r9, r9
                bl      loc_11E30
                ret
# End of function sub_11E08
# =============== S U B R O U T I N E =======================================
sub_11EA8:                              # CODE XREF: sub_11E08:loc_11E64↑p
                mov     0, r14
                mov     4, r11
loc_11EB0:                              # CODE XREF: sub_11EA8+44↓j
                cmpdeco 1, g5, g5
                bl      loc_11EE0
                and     3, g4, r13
                addo    r13, g2, g2
                mov     g2, g5
                addo    1, g3, g3
                shro    2, g4, g4
                cmpdeco 1, g6, g6
                bl      loc_11EE0
                mov     0x10, g6
                ld      (g1), g4
                addo    4, g1, g1
loc_11EE0:                              # CODE XREF: sub_11EA8+C↑j
                or      g3, r14, r14
                rotate  0x18, r14, r14
                cmpdeco 1, r11, r11
                bl      loc_11EB0
                st      r14, (g10)[g12*1]
                ret
# End of function sub_11EA8
# =============== S U B R O U T I N E =======================================
sub_11EF8:                              # CODE XREF: ROM:00006A98↑p
                lda     0x6468000, g1
                lda     0, g2
                mov     0x10, g4
loc_11F08:                              # CODE XREF: sub_11EF8+7C↓j
                lda     0x800, g5
                st      g14, mmode
                lda     0x505, g14
                st      g14, 0x50(g10)
                ld      mmode, g14
                st      g2, (g10)[g12*1]
                st      g5, (g10)[g12*1]
                addo    g5, g2, g2
loc_11F30:                              # CODE XREF: sub_11EF8+48↓j
                ld      (g1), r3
                st      r3, (g10)[g12*1]
                addo    4, g1, g1
                cmpdeco 1, g5, g5
                bl      loc_11F30
                mov     0, r3
                st      g14, mmode
                lda     off_1010, g14
                st      g14, 0x100(g10)
                ld      mmode, g14
                st      r3, (g10)[g12*1]
                call    set_end_mark
                call    interrupt_wait
                cmpdeco 1, g4, g4
                bl      loc_11F08
                ret
# End of function sub_11EF8
# =============== S U B R O U T I N E =======================================
geometry_stuff:                         # CODE XREF: ROM:00006A7C↑p
                lda     word_12068, g0
                lda     GEO_START, g1
                call    sub_11FE4
                lda     word_12070, g0
                lda     0x801000, g1
                call    sub_11FE4
                lda     word_12078, g0
                lda     0x802000, g1
                call    sub_11FE4
                lda     word_12080, g0
                lda     0x803000, g1
                call    sub_11FE4
                lda     word_12088, g0
                lda     GEO_PROGRAM_START, g1
                call    sub_11FE4
                ret
# End of function geometry_stuff
# =============== S U B R O U T I N E =======================================
sub_11FE4:                              # CODE XREF: geometry_stuff+10↑p
                mov     g0, r9
                shlo    0xC, 1, r10
                st      g14, mmode
                lda     0x404, g14
                st      g14, 0x40(g10)
                ld      mmode, g14
                mov     g1, r12
                st      r12, (g10)[g12*1]
                st      r10, (g10)[g12*1]
                shro    2, r10, r10
loc_12014:                              # CODE XREF: sub_11FE4+54↓j
                ldos    0x0(r9), r3
                ldos    2(r9), r4
                ldos    4(r9), r5
                ldos    6(r9), r6
                st      r3, (g10)[g12*1]
                st      r4, (g10)[g12*1]
                st      r5, (g10)[g12*1]
                st      r6, (g10)[g12*1]
                cmpdeco 1, r10, r10
                bl      loc_12014
                st      g14, mmode
                lda     off_1010, g14
                st      g14, 0x100(g10)
                ld      mmode, g14
                st      r3, (g10)[g12*1]
                call    set_end_mark
                call    interrupt_wait
                ret
# End of function sub_11FE4
# ---------------------------------------------------------------------------
word_12068:     .short 0x4000           # DATA XREF: geometry_stuff↑o
                .short 0
                .short 0x1A00
                .short 0x400
word_12070:     .short 0x4000           # DATA XREF: geometry_stuff+14↑o
                .short 0
                .short 0x1A00
                .short 0x2940
word_12078:     .short 0x4000           # DATA XREF: geometry_stuff+28↑o
                .short 0
                .short 0x1A00
                .short 0x3E00
word_12080:     .short 0x4000           # DATA XREF: geometry_stuff+3C↑o
                .short 0
                .short 0x1A00
                .short 0x26C0
word_12088:     .short 0x4000           # DATA XREF: geometry_stuff+50↑o
                .short 0
                .short 0x1A00
                .short 0xB140
# =============== S U B R O U T I N E =======================================
sub_12090:                              # CODE XREF: ROM:00006A9C↑p
                lda     0x6460000, g1
                lda     0x808000, g2
                mov     8, g4
loc_120A4:                              # CODE XREF: sub_12090+A0↓j
                mov     0, r3
                shlo    0xB, 1, g5
                st      g14, mmode
                lda     0x404, g14
                st      g14, 0x40(g10)
                ld      mmode, g14
                st      g2, (g10)[g12*1]
                st      g5, (g10)[g12*1]
                addo    g5, g2, g2
                shro    2, g5, g5
loc_120D4:                              # CODE XREF: sub_12090+6C↓j
                ldos    0x0(g1), r3
                ldos    2(g1), r4
                ldos    4(g1), r5
                ldos    6(g1), r6
                st      r3, (g10)[g12*1]
                st      r4, (g10)[g12*1]
                st      r5, (g10)[g12*1]
                st      r6, (g10)[g12*1]
                addo    8, g1, g1
                cmpdeco 1, g5, g5
                bl      loc_120D4
                mov     0, r3
                st      g14, mmode
                lda     off_1010, g14
                st      g14, 0x100(g10)
                ld      mmode, g14
                st      r3, (g10)[g12*1]
                call    set_end_mark
                call    interrupt_wait
                cmpdeco 1, g4, g4
                bl      loc_120A4
                ret
# End of function sub_12090
# =============== S U B R O U T I N E =======================================
sub_12138:                              # CODE XREF: ROM:00006AA0↑p
                lda     0x6464000, g1
                lda     0x80C000, g2
                mov     8, g4
loc_1214C:                              # CODE XREF: sub_12138+90↓j
                mov     0, r3
                shlo    0xB, 1, g5
                st      g14, mmode
                lda     0x404, g14
                st      g14, 0x40(g10)
                ld      mmode, g14
                st      g2, (g10)[g12*1]
                st      g5, (g10)[g12*1]
                addo    g5, g2, g2
                shro    1, g5, g5
loc_1217C:                              # CODE XREF: sub_12138+5C↓j
                ldos    0x0(g1), r3
                ldos    2(g1), r4
                st      r3, (g10)[g12*1]
                st      r4, (g10)[g12*1]
                addo    4, g1, g1
                cmpdeco 1, g5, g5
                bl      loc_1217C
                mov     0, r3
                st      g14, mmode
                lda     off_1010, g14
                st      g14, 0x100(g10)
                ld      mmode, g14
                st      r3, (g10)[g12*1]
                call    set_end_mark
                call    interrupt_wait
                cmpdeco 1, g4, g4
                bl      loc_1214C
                ret
# End of function sub_12138
# =============== S U B R O U T I N E =======================================
init_scroll:                            # CODE XREF: ROM:00003690↑p
                mov     0, g0           # Label from official source
                stob    g0, 0x503001
                lda     0x1008000, g0
                mov     0, g1
                shlo    0xB, 1, g2
loc_121EC:                              # CODE XREF: init_scroll+28↓j
                stis    g1, (g0)
                addi    2, g0, g0
                cmpdeco 1, g2, g2
                bl      loc_121EC
                lda     0x100A000, g0
                mov     0, g1
                mov     8, g2
loc_1220C:                              # CODE XREF: init_scroll+48↓j
                stis    g1, (g0)
                addi    2, g0, g0
                cmpdeco 1, g2, g2
                bl      loc_1220C
                stib    g1, 0x503000
                lda     0x100C000, g0
                mov     0, g1
                shlo    0xC, 1, g2
loc_12234:                              # CODE XREF: init_scroll+70↓j
                stis    g1, (g0)
                addi    2, g0, g0
                cmpdeco 1, g2, g2
                bl      loc_12234
                lda     STAGE_PALETTE_DATA, g0 # 0x0031E6
                lda     0xFC00, g1
                shlo    0xC, 1, g2
loc_12258:                              # CODE XREF: init_scroll+94↓j
                stis    g1, (g0)
                addi    2, g0, g0
                cmpdeco 1, g2, g2
                bl      loc_12258
                lda     scrB_V_page, r4
                xor     r3, r3, r3
                stos    r3, (r4)
                stos    r3, 2(r4)
                ret
# End of function init_scroll
# =============== S U B R O U T I N E =======================================
init_fix:                               # CODE XREF: ROM:00006A64↑p
                call    clr_first_group_cg # Label from official source
                ld      0x2800000, g0
                mov     g0, r7
                ld      (r7), g0        # 0x2801304 to g0
                call    _ScrollCG_Initialize_old
                addi    4, r7, r7
                ld      (r7), g0        # 0x2802998 to g0
                call    _ScrollColor_Initialize_old
                addi    4, r7, r7
                call    set_scroll_color
                mov     6, r3
                st      r3, 0x503004
                mov     9, r3
                st      r3, 0x503008
                mov     15, r3
                ld      0x503002, r4
                setbit  r3, r4, r4
                st      r4, 0x503002
                mov     14, r3
                ld      0x503002, r4
                clrbit  r3, r4, r4
                st      r4, 0x503002
                lda     64770, g0
                call    bg_col_set
                ret
# End of function init_fix
# =============== S U B R O U T I N E =======================================
set_scroll_color:                       # CODE XREF: init_fix+28↑p
                lda     word_8EBA8, r3  # Label from official source
loc_1230C:                              # CODE XREF: set_scroll_color+34↓j
                ld      (r3), r4
                addi    4, r3, r3
                cmpibe  0, r4, loc_1233C
                ld      (r3), r5
                addi    4, r3, r3
loc_12320:                              # CODE XREF: set_scroll_color+30↓j
                ldis    (r3), r6
                stis    r6, (r4)
                addi    2, r3, r3
                addi    2, r4, r4
                cmpdeci 1, r5, r5
                bl      loc_12320
                b       loc_1230C
# ---------------------------------------------------------------------------
loc_1233C:                              # CODE XREF: set_scroll_color+10↑j
                ret
# End of function set_scroll_color
# =============== S U B R O U T I N E =======================================
clr_first_group_cg:                     # CODE XREF: init_fix↑p
                lda     TMAPGFXBASE_START, g0 # Label from official source
                shlo    0xB, 1, g1      # Init counter: 2048 (0x800) to g1
                xor     g2, g2, g2
loc_12350:                              # CODE XREF: clr_first_group_cg+1C↓j
                st      g2, (g0)
                addi    4, g0, g0       # TMAPGFXBASE_START+4, etc..
                cmpdeco 1, g1, g1       # 2048-1, count down
                bl      loc_12350
loc_12360:                              # DATA XREF: ROM:off_48CAC↓o
                ret
# End of function clr_first_group_cg
# =============== S U B R O U T I N E =======================================
bg_col_set:                             # CODE XREF: ADV_SEGA_PIC_DSP+34↑p
                lda     stage_palette_data_increment_64, g1 # Label from official source
                mov     5, g2
loc_12370:                              # CODE XREF: bg_col_set+2C↓j
                ldis    (g1), g4
                addi    2, g1, g1
                subo    1, 0, r3
                cmpi    g4, r3
                be      loc_12394
                shlo    g2, g4, g4
                stis    g0, STAGE_PALETTE_DATA(g4) # 0x0031E6
                b       loc_12370
# ---------------------------------------------------------------------------
loc_12394:                              # CODE XREF: bg_col_set+1C↑j
                ret
# End of function bg_col_set
# =============== S U B R O U T I N E =======================================
action_init:                            # CODE XREF: ADV_REPLAY_INT+394↑p
                mov     g13, g7         # Label from official source
                ldob    0x1B0(g7), r3   # r3 = P1_PARTS+0x1B0 or P2_PARTS+0x1B0
                ld      CHAR_PARTS[r3*4], g5 # This loads the character data, even in char select
                st      g5, 0x190(g7)   # P1_PARTS+0x190 = P1_CHAR_PARTS and P2_PARTS+0x190 = P2_CHAR_PARTS
                ld      0xC(g5), g6     # ex SONIC+0xC = g6 so g6 = ANIMATIONS
                st      g6, 0x1A0(g7)   # P1_PARTS+0x1A0 = P1_ANIMATIONS and P2_PARTS+0x1A0 = P2_ANIMATIONS
                ldos    0x762(g7), r14  # P1_PARTS+0x762 and P2_PARTS+0x762
                cmpobne 0, r14, efc_rob_set_set
                ldob    also_mode, r3
                lda     start_ip_add+1, r4
                cmpobe  r4, r3, efc_rob_set_set
                lda     check_word1, r4
                cmpobe  r4, r3, efc_rob_barrier_set
                lda     check_word1+1, r4
                cmpobe  r4, r3, efc_rob_barrier_set
                ldob    curr_round_num, r3
                cmpobl  1, r3, efc_rob_barrier_set
efc_rob_set_set:                        # CODE XREF: action_init+20↑j
                ld      fa_rob0, r3     # Label from Fighting Vipers source
                mov     0, r4
                stos    r4, 0x1F48(r3)  # P1_PARTS+0x1F48 = 0
                stos    r4, 0x1F60(r3)
                stos    r4, 0x1F62(r3)
                stos    r4, 0x1F64(r3)
                stos    r4, 0x1F66(r3)
                st      r4, 0x1F4C(r3)
                st      r4, 0x1F50(r3)
                st      r4, 0x1F54(r3)
                st      r4, 0x1F58(r3)
                stos    r4, 0x2A90(r3)
                st      r4, 0x2A8C(r3)
                ld      0x0(r3), r15
                clrbit  28, r15, r15
                st      r15, 0x0(r3)
                ld      fa_rob1, r3
                st      r4, 0x1F4C(r3)
                st      r4, 0x1F50(r3)
                st      r4, 0x1F54(r3)
                st      r4, 0x1F58(r3)
                stos    r4, 0x1F48(r3)
                stos    r4, 0x1F60(r3)
                stos    r4, 0x1F62(r3)
                stos    r4, 0x1F64(r3)
                stos    r4, 0x1F66(r3)
                stos    r4, 0x2A90(r3)
                st      r4, 0x2A8C(r3)
                ld      0x0(r3), r15
                clrbit  0x1C, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(g5), r4
                lda     (r4), r14
                lda     0x40(g7), r13
                mov     0x10, r12
load_player_parts:                      # CODE XREF: action_init+15C↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      load_player_parts
                ld      8(g5), r4
                lda     (r4), r14
                lda     0x1B4(g7), r13
                mov     0x10, r12
loc_12508:                              # CODE XREF: action_init+184↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_12508
                ld      4(g5), r4
                lda     (r4), r14
                lda     0x8C(g7), r13
                addo    0x1F, 0xE, r12
loc_12530:                              # CODE XREF: action_init+1AC↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_12530
                ldob    4(g7), r15
                cmpobe  1, r15, loc_1255C
                lda     0x520000, r15
                b       loc_12564
# ---------------------------------------------------------------------------
loc_1255C:                              # CODE XREF: action_init+1B4↑j
                lda     0x5207C8, r15
loc_12564:                              # CODE XREF: action_init+1C0↑j
                st      r15, 0xBD8(g7)
                ld      0x28(g5), r6
                ldob    num_rounds_to_win, r12
                ldob    num_rounds_to_win, r13
                ld      0x0(r6), r14
                mulo    r13, r14, r15
                st      r15, 0xAF0(g13)
                ldob    num_rounds_to_win, r13
                ld      4(r6), r14
                mulo    r13, r14, r15
                st      r15, 0xAF4(g13)
                ld      8(r6), r15
                st      r15, 0xAF8(g13)
                ld      0x18(g5), r3
                ld      0x0(r3), r15
                st      r15, 0x784(g13)
                ldis    4(r3), r15
                stis    r15, 0x788(g13)
                ldis    6(r3), r15
                stis    r15, 0x78A(g13)
                ld      8(r3), r15
                st      r15, 0x78C(g13)
                ld      0xC(r3), r15
                st      r15, 0x790(g13)
                ld      0x10(r3), r15
                st      r15, 0x794(g13)
                ldis    0x14(r3), r15
                stis    r15, 0x798(g13)
                ldis    0x16(r3), r15
                stis    r15, 0x79A(g13)
                ldis    0x18(r3), r15
                stis    r15, 0x79C(g13)
                ldis    0x1A(r3), r15
                stis    r15, 0x79E(g13)
                ldis    0x1C(r3), r15
                stis    r15, 0x7A0(g13)
                ldis    0x1E(r3), r15
                stis    r15, 0x7A2(g13)
                ld      0x20(r3), r15
                st      r15, 0x7A4(g13)
                ld      0x24(r3), r15
                st      r15, 0x7A8(g13)
                ld      0x28(r3), r15
                st      r15, 0x7AC(g13)
                ldis    0x2C(r3), r15
                stis    r15, 0x7B0(g13)
                ldis    0x2E(r3), r15
                stis    r15, 0x7B2(g13)
                ldis    0x30(r3), r15
                stis    r15, 0x7B4(g13)
                ldis    0x32(r3), r15
                stis    r15, 0x7B6(g13)
                ldis    0x34(r3), r15
                stis    r15, 0x7F8(g13)
                mov     0, r15
                stis    r15, 0x7BC(g13)
                mov     0, r15
                stis    r15, 0x7BE(g13)
                mov     0, r15
                st      r15, 0x7C0(g13)
                mov     0, r15
                st      r15, 0x7C4(g13)
                ld      0x0(g13), r15
                clrbit  0x1B, r15, r15
                st      r15, 0x0(g13)
                mov     0, r15
                stib    r15, 0x7CA(g13)
                mov     0, r15
                stib    r15, 0x7CB(g13)
                mov     0, r15
                st      r15, 0xAFC(g13)
                ld      0x1C(g5), r3
                ld      (r3), r15
                st      r15, 0x7CC(g13)
                ld      0x14(g5), r15
                st      r15, 0x7DC(g7)
                call    sub_3261C
                st      g0, 0x7D8(g7)
                stos    g1, 0x7E8(g7)
                stos    g1, 0x7EA(g7)
                ld      0x7DC(g7), r3
                addr    g0, r3, r3
                st      r3, 0x5D8(g7)
efc_rob_barrier_set:                    # CODE XREF: action_init+40↑j
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3353(r4), r3  # r3 = BACKUP_RAM_TO_RAM+0x3353
                bbs     3, r3, init_barrier_count_for_player_per_match
                ldob    curr_round_num, r14
                cmpobne 0, r14, loc_126E8
init_barrier_count_for_player_per_match: # CODE XREF: action_init+334↑j
                ld      barrier_default_num, r15
                st      r15, 0xC70(g7)  # P1_PARTS+0xC70 or P2_PARTS+0xC70
loc_126E8:                              # CODE XREF: action_init+340↑j
                ld      0x0(g7), r15
                clrbit  0x12, r15, r15
                st      r15, 0x0(g7)
                ld      0x0(g7), r15
                clrbit  0x1D, r15, r15
                st      r15, 0x0(g7)
                lda     0x140(g7), r14
                mov     0, r15
                addo    0x1F, 9, r13
loc_1270C:                              # CODE XREF: action_init+380↓j
                stis    r15, (r14)
                addo    2, r14, r14
                cmpdeco 1, r13, r13
                bl      loc_1270C
loc_1271C:                              # DATA XREF: ROM:00072880↓o
                ldt     0x18(g7), r4
# ---------------------------------------------------------------------------
                addr    1.0,r5,r5   #.long 0x78294F96
# ---------------------------------------------------------------------------
                stt     r4, 0x1F4(g7)
                stt     r4, 0x6FC(g7)
                stt     r4, 0x1004(g7)
                stt     r4, 0x1010(g7)
                stt     r4, 0x101C(g7)
                stt     r4, 0x1028(g7)
                ldis    0x26(g7), r15
                stis    r15, 0x616(g7)
                mov     0, r3
                st      r3, 0x198(g7)
                st      r3, 0x194(g7)
                st      r3, 0x684(g7)
                st      r3, 0x19C(g7)
                st      r3, 0x1A4(g7)
                st      r3, 0x804(g7)
                st      r3, 0xBD4(g7)
                st      r3, 0xC30(g7)
                st      r3, 0xC58(g7)
                st      r3, 0xC5C(g7)
                st      r3, 0xC6C(g7)
                st      r3, 0xC78(g7)
                st      r3, 0x2C(g7)
                st      r3, 0x30(g7)
                st      r3, 0x34(g7)
                st      r3, 0x5C8(g7)
                st      r3, 0x5CC(g7)
                st      r3, 0x5D0(g7)
                st      r3, 0x5D4(g7)
                st      r3, 0x620(g7)
                st      r3, 0x1224(g7)
                st      r3, 0x1222(g7)
                st      r3, 0x1248(g7)
                st      r3, 0x678(g7)
                st      r3, 0x6D4(g7)
                st      r3, 0x1064(g7)
                stob    r3, 0x60C(g7)
                stos    r3, 0xC7C(g7)
                stos    r3, 0xC7E(g7)
                stos    r3, 0x6D0(g7)
                stos    r3, 0x6D8(g7)
                stos    r3, 0x6F0(g7)
                stos    r3, 0x614(g7)
                stos    r3, 0x624(g7)
                stos    r3, 0x61C(g7)
                stos    r3, 0x60E(g7)
                stos    r3, 0x618(g7)
                stos    r3, 0x1A8(g7)
                stos    r3, 0x1AA(g7)
                stos    r3, 0xC4C(g7)
                stob    r3, 0x6F4(g7)
                stob    r3, 0x6F5(g7)
                stos    r3, 0x7D0(g7)
                stos    r3, 0xBE6(g7)
                stob    r3, nagerenai_timer # nagerenai = "can't throw"
                stob    r3, 0x7D2(g7)
                stos    r3, 0xA0E(g7)
                stob    r3, 0xA29(g7)
                stob    r3, 0x1A18(g7)
                st      r3, 0x768(g7)
                st      r3, 0xAC8(g7)
                lda     0xB54(g7), r14
                mov     0, r15
                mov     0x15, r13
loc_12848:                              # CODE XREF: action_init+4BC↓j
                st      r15, (r14)
                lda     4(r14), r14
                cmpdeco 1, r13, r13
                bl      loc_12848
                ld      mod_fa_coli, r3
                mov     0, r15
                st      r15, 0x2AC(r3)
                mov     1, r15
                stob    r15, 0xBE4(g7)
                ld      0x0(g7), r15
                clrbit  0x1A, r15, r15
                st      r15, 0x0(g7)
                ld      not_scr_bg_move, r15
                bbc     4, r15, loc_12894
                mov     1, r15
                stis    r15, 0x1AC(g7)  # p1_energy or p2_energy
                b       loc_128A0
# ---------------------------------------------------------------------------
loc_12894:                              # CODE XREF: action_init+4EC↑j
                ldis    energy_max, r15
                stis    r15, 0x1AC(g7)  # Store energy_max to the CPU player
loc_128A0:                              # CODE XREF: action_init+4F8↑j
                ld      0x24(g5), r15
                st      r15, 0x6C8(g7)
                ld      0x2C(g5), r15
                st      r15, 0xC68(g7)
                ld      0x10(g5), r3
                ld      0x0(r3), r15
                st      r15, 0x62C(g7)
                ld      4(r3), r15
                st      r15, 0x698(g7)
                ld      8(r3), r15
                st      r15, 0x630(g7)
                ld      0xC(r3), r15
                st      r15, 0x634(g7)
                ld      0x20(g5), r3
                ld      4(r3), r15
                st      r15, 0x724(g7)
                ld      8(r3), r15
                st      r15, 0x728(g7)
                ld      0xC(r3), r15
                st      r15, 0x72C(g7)
                ld      0x10(r3), r15
                st      r15, 0x730(g7)
                ldos    displacement(g6), g0
                ld      0x0(g7), r15
                bbc     29, r15, loc_12910
                ldos    (displacement2)(g6), g0
loc_12910:                              # CODE XREF: action_init+56C↑j
                call    set_motion
                ld      0x0(g7), r15
                setbit  0x1A, r15, r15
                st      r15, 0x0(g7)
                call    set_kamae_ram   # Set Stance Ram
                lda     0x501500, r15
                st      r15, 0x10(g7)
                lda     rob_action, r15
                st      r15, 0xC(g7)
                ldob    also_mode, r15
                lda     prcb+2, r14
                cmpobe  r14, r15, loc_1295C
                lda     prcb+3, r14
                cmpobe  r14, r15, loc_1295C
loc_1295C:                              # CODE XREF: action_init+5B4↑j
                ld      0x0(g7), r14
                setbit  0x15, r14, r14
                st      r14, 0x0(g7)
                call    send_init_ram_coli_data
                mov     0, r15
                stis    r15, 0x762(g7)
rob_action:                             # DATA XREF: action_init+598↑o
                ldob    0x530005, r14 # Label from official source
                cmpobe  0, r14, loc_12990
                mov     0, r15
                stib    r15, 0x530005
                b       action_init
# ---------------------------------------------------------------------------
loc_12990:                              # CODE XREF: action_init+5E4↑j
                mov     g13, g7
                ldob    4(g7), r13
                subi    r13, 1, r12
                ld      fa_rob0[r12*4], g8
                ld      0x1A0(g7), g6
                ldos    0x7D0(g7), r3
                cmpdeco 0, r3, r3
                be      loc_129B8
                stos    r3, 0x7D0(g7)
loc_129B8:                              # CODE XREF: action_init+618↑j
                ld      debug_flag, r15
                bbs     5, r15, calc_rob_angle_cont_call # Should always branch (may be the other way around)
                ld      0x0(g7), r15    # If we get here, player models will be broken and unable to move
                clrbit  11, r15, r15
                st      r15, 0x0(g7)
                ldob    4(g7), r14
                cmpobne 0, r14, loc_129DC
                call    decide_command
loc_129DC:                              # CODE XREF: action_init+63C↑j
                ld      0x0(g7), r5
                st      r5, 0x7EC(g7)
                ldis    0x1AC(g7), r15
                stis    r15, 0x6D2(g7)
                clrbit  0, r5, r5
                ld      0x1A4(g7), r3
                st      r3, 0x1E18(g7)
                ld      0x70C(g7), r3
                st      r3, 0x1E24(g7)
                ldos    0x1A8(g7), r3
                stos    r3, 0x1E1C(g7)
                cmpobe  0, r3, loc_12A44
                ld      0x0(g7), r15
                bbc     7, r15, loc_12A48
                ldos    0x1AA(g7), r4
                stos    r4, 0xC4E(g7)
                addo    1, r4, r4
                ldos    0x1AE(g7), r14
                addi    1, r14, r15
                stos    r15, 0x1AE(g7)
                stos    r4, 0x1AA(g7)
                ldos    0x800(g7), r3
                cmpoble r4, r3, loc_12A48
loc_12A44:                              # CODE XREF: action_init+67C↑j
                setbit  0, r5, r5
loc_12A48:                              # CODE XREF: action_init+684↑j
                st      r5, 0x0(g7)     # Somewhere in here moves get written
                call    original_combo_control
                call    air_mot_control
                call    exec_command
                mov     0, r15
                st      r15, 0x194(g7)
                call    exec_action
                call    shift_mot_control
                call    play_motion
                call    rob_revise_yang
                call    rob_spd_control
                b       skip_calc_rob_angle_cont
# ---------------------------------------------------------------------------
calc_rob_angle_cont_call:               # CODE XREF: action_init+628↑j
                call    calc_rob_angle_cont # Why is this bypassed
skip_calc_rob_angle_cont:               # CODE XREF: action_init+6DC↑j
                call    calc_unit_mat
                call    action_after
                ld      0x0(g7), r15
                setbit  7, r15, r15
                st      r15, 0x0(g7)
                ret
# End of function action_init
# =============== S U B R O U T I N E =======================================
decide_command:                         # CODE XREF: action_init+640↑p
                mov     g7, r10         # Label from official source
                mov     g8, r11
                call    decide_my_command
                mov     r11, g7
                mov     r10, g8
                call    decide_my_command
                mov     r10, g7
                mov     r11, g8
                ldob    0x19B(g7), r14
                cmpobe  0xC, r14, loc_12F80
                ldob    0x19B(g8), r14
                cmpobe  0xC, r14, loc_12F80
                ldob    0x197(g7), r7
                ldob    0x197(g8), r8
                cmpobe  0x14, r7, loc_12ADC
                cmpobne 0x14, r8, loc_12B08
                mov     r11, g7
                mov     r10, g8
loc_12ADC:                              # CODE XREF: decide_command+38↑j
                ldob    0x19F(g8), r6
                cmpobe  0x15, r6, loc_12AE8
                cmpobne 0x12, r6, loc_12B00
loc_12AE8:                              # CODE XREF: decide_command+4C↑j
                shlo    0x18, 1, r15
                st      r15, 0x194(g8)
                ld      0x1A4(g8), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g8)
                b       loc_12F80
# ---------------------------------------------------------------------------
loc_12B00:                              # CODE XREF: decide_command+50↑j
                mov     r10, g7
                mov     r11, g8
loc_12B08:                              # CODE XREF: decide_command+3C↑j
                cmpobe  0x15, r7, loc_12B18
                cmpobne 0x15, r8, loc_12B90
                mov     r11, g7
                mov     r10, g8
loc_12B18:                              # CODE XREF: decide_command:loc_12B08↑j
                ldos    0x194(g7), g0
                call    set_motion
                mov     1, r15
                stis    r15, 0x1AA(g7)
                ldis    0x1A8(g8), r15
                stis    r15, 0x61E(g7)
                ldos    0x858(g7), r13
                ldos    0x808(g8), r14
                subi    r13, r14, r4
                stos    r4, 0x626(g7)
                ldib    0x822(g7), r15
                stib    r15, 0x822(g8)
                shlo    0x18, 0xD, r13
                ldos    0x828(g7), r14
                addi    r13, r14, r5
                ld      0x0(g7), r3
                shlo    4, r3, r3
                ld      0x0(g8), r13
                xor     r13, r3, r3
                chkbit  0xA, r3
                alterbit 0xF, r5, r5
                subo    1, r4, r3
                ldos    0x1AA(g8), r13
                cmpobl  r13, r3, loc_12B80
                st      r5, 0x194(g8)
                b       loc_12F80
# ---------------------------------------------------------------------------
loc_12B80:                              # CODE XREF: decide_command+E0↑j
                st      r5, 0x684(g8)
                stos    r3, 0x62A(g8)
                mov     r10, g7
                mov     r11, g8
loc_12B90:                              # CODE XREF: decide_command+78↑j
                cmpobe  0x17, r7, loc_12BA4
                cmpobne 0x17, r8, loc_12BB0
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
loc_12BA4:                              # CODE XREF: decide_command:loc_12B90↑j
                mov     0xC, r15
                stib    r15, 0x197(g7)
                b       loc_12E40
# ---------------------------------------------------------------------------
loc_12BB0:                              # CODE XREF: decide_command+100↑j
                addo    0x1F, 3, r13
                cmpobne r13, r7, loc_12BD0
                addo    0x1F, 3, r13
                cmpobne r13, r8, loc_12BE4
                ld      game_timer, r15
                bbc     0, r15, loc_12BE4
                b       loc_12BD8
# ---------------------------------------------------------------------------
loc_12BD0:                              # CODE XREF: decide_command+120↑j
                addo    0x1F, 3, r13
                cmpobne r13, r8, loc_12C9C
loc_12BD8:                              # CODE XREF: decide_command+138↑j
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
loc_12BE4:                              # CODE XREF: decide_command+128↑j
                ldos    0x194(g7), g0
                mov     5, g1
                call    calc_mht_adr
                ldos    1(g0), r3
                lda     0x23004000, r13
                addi    r13, r3, r15
                st      r15, 0x194(g8)
                ld      0x2C(g8), r15
                st      r15, 0xA10(g7)
                ld      0x34(g8), r15
                st      r15, 0xA18(g7)
                ld      0x1A4(g8), r15
                bbs     0xC, r15, loc_12C44
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                call    fix_hara
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ld      0x1A4(g8), r15
                setbit  12, r15, r15
                st      r15, 0x1A4(g8)
loc_12C44:                              # CODE XREF: decide_command+184↑j
                ldob    3(g0), r3
                lda     aAirn, g0       # "airn    "
                stob    r3, 0x822(g8)
                ld      debug_flag, r15
                bbs     9, r15, loc_12C6C
                lda     0x10006E8, g9
                call    print_mes
loc_12C6C:                              # CODE XREF: decide_command+1C8↑j
                ld      0x1A4(g8), r15
                clrbit  0x15, r15, r15
                st      r15, 0x1A4(g8)
                ld      0x1A4(g7), r3
                shro    0xF, r3, r3
                ld      0x0(g7), r13
                xor     r13, r3, r3
                ld      0x0(g8), r4
                chkbit  6, r3
                alterbit 6, r4, r4
                st      r4, 0x0(g8)
                b       loc_12F80
# ---------------------------------------------------------------------------
loc_12C9C:                              # CODE XREF: decide_command+140↑j
                addo    0x1F, 1, r13
                cmpobne r13, r7, loc_12CBC
                addo    0x1F, 1, r13
                cmpobne r13, r8, loc_12CD0
                ld      game_timer, r15
                bbc     0, r15, loc_12CD0
                b       loc_12CC4
# ---------------------------------------------------------------------------
loc_12CBC:                              # CODE XREF: decide_command+20C↑j
                addo    0x1F, 1, r13
                cmpobne r13, r8, loc_12D48
loc_12CC4:                              # CODE XREF: decide_command+224↑j
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
loc_12CD0:                              # CODE XREF: decide_command+214↑j
                ldos    0x194(g7), g0
                mov     5, g1
                call    calc_mht_adr
                ldos    1(g0), r3
                lda     0x21004000, r13
                addi    r13, r3, r15
                st      r15, 0x194(g8)
                ldob    3(g0), r3
                lda     aAirn, g0       # "airn    "
                stob    r3, 0x822(g8)
                ld      debug_flag, r15
                bbs     9, r15, loc_12D18
                lda     0x10006E8, g9
                call    print_mes
loc_12D18:                              # CODE XREF: decide_command+274↑j
                ld      0x1A4(g8), r15
                clrbit  0x15, r15, r15
                st      r15, 0x1A4(g8)
                ld      0x1A4(g7), r3
                shro    0xF, r3, r3
                ld      0x0(g7), r13
                xor     r13, r3, r3
                ld      0x0(g8), r4
                chkbit  6, r3
                alterbit 6, r4, r4
                st      r4, 0x0(g8)
                b       loc_12F80
# ---------------------------------------------------------------------------
loc_12D48:                              # CODE XREF: decide_command+22C↑j
                cmpobne 0x1E, r7, loc_12D60
                cmpobne 0x1E, r8, loc_12D70
                ld      game_timer, r15
                bbc     0, r15, loc_12D70
                b       loc_12D64
# ---------------------------------------------------------------------------
loc_12D60:                              # CODE XREF: decide_command:loc_12D48↑j
                cmpobne 0x1E, r8, loc_12E18
loc_12D64:                              # CODE XREF: decide_command+2C8↑j
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
loc_12D70:                              # CODE XREF: decide_command+2B8↑j
                ldos    0x194(g7), g0
                mov     5, g1
                call    calc_mht_adr
                ldos    1(g0), r3
                lda     0x1F004000, r13
                addi    r13, r3, r15
                st      r15, 0x194(g8)
                ld      0x1A4(g8), r15
                bbs     0xC, r15, loc_12DC0
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                call    fix_hara
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ld      0x1A4(g8), r15
                setbit  0xC, r15, r15
                st      r15, 0x1A4(g8)
loc_12DC0:                              # CODE XREF: decide_command+300↑j
                ldob    3(g0), r3
                lda     aAirn, g0       # "airn    "
                stob    r3, 0x822(g8)
                ld      debug_flag, r15
                bbs     9, r15, loc_12DE8
                lda     0x10006E8, g9
                call    print_mes
loc_12DE8:                              # CODE XREF: decide_command+344↑j
                ld      0x1A4(g8), r15
                clrbit  0x15, r15, r15
                st      r15, 0x1A4(g8)
                ld      0x1A4(g7), r3
                shro    0xF, r3, r3
                ld      0x0(g7), r13
loc_12E00:                              # DATA XREF: sub_4FBDC+C4↓o
                xor     r13, r3, r3
                ld      0x0(g8), r4
                chkbit  6, r3
                alterbit 6, r4, r4
                st      r4, 0x0(g8)
                b       loc_12F80
# ---------------------------------------------------------------------------
loc_12E18:                              # CODE XREF: decide_command:loc_12D60↑j
                cmpobne 0xC, r7, loc_12E30
                cmpobne 0xC, r8, loc_12E40
                ld      game_timer, r15
                bbc     0, r15, loc_12E40
                b       loc_12E34
# ---------------------------------------------------------------------------
loc_12E30:                              # CODE XREF: decide_command:loc_12E18↑j
                cmpobne 0xC, r8, loc_12ECC
loc_12E34:                              # CODE XREF: decide_command+398↑j
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
loc_12E40:                              # CODE XREF: decide_command+118↑j
                ldos    0x194(g7), g0
                mov     5, g1
                call    calc_mht_adr
                ldos    1(g0), r3
                shlo    0x18, 0xD, r13
                addi    r13, r3, r15
                st      r15, 0x194(g8)
                ldob    3(g0), r3
                lda     aNage, g0       # "nage    "
                stob    r3, 0x822(g8)
                ld      debug_flag, r15
                bbs     9, r15, loc_12E84
                lda     0x10008E8, g9
                call    print_mes
loc_12E84:                              # CODE XREF: decide_command+3E0↑j
                ld      0x1A4(g8), r15
                clrbit  0x15, r15, r15
                st      r15, 0x1A4(g8)
                ld      0x1A4(g7), r3
                shro    0xF, r3, r3
                ld      0x0(g7), r13
                xor     r13, r3, r3
                ld      0x0(g8), r4
                chkbit  6, r3
                alterbit 6, r4, r4
                st      r4, 0x0(g8)
                b       loc_12F80
# ---------------------------------------------------------------------------
loc_12EB4:                              # CODE XREF: decide_command+470↓j
                shlo    0x18, 1, r15
                st      r15, 0x194(g7)
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                b       loc_12F80
# ---------------------------------------------------------------------------
loc_12ECC:                              # CODE XREF: decide_command:loc_12E30↑j
                addo    0x1F, 5, r13
                cmpobne r13, r7, loc_12EEC
                addo    0x1F, 5, r13
                cmpobne r13, r8, loc_12F00
                ld      game_timer, r15
                bbc     0, r15, loc_12F00
                b       loc_12EF4
# ---------------------------------------------------------------------------
loc_12EEC:                              # CODE XREF: decide_command+43C↑j
                addo    0x1F, 5, r13
                cmpobne r13, r8, loc_12F80
loc_12EF4:                              # CODE XREF: decide_command+454↑j
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
loc_12F00:                              # CODE XREF: decide_command+444↑j
                ld      0x0(g8), r15
                bbs     5, r15, loc_12EB4
                ldos    0x194(g7), g0
                mov     5, g1
                call    calc_mht_adr
                ldos    1(g0), r3
                lda     0x25000000, r13
                addi    r13, r3, r15
                st      r15, 0x194(g8)
                ldob    3(g0), r3
                lda     aNage, g0       # "nage    "
                stob    r3, 0x822(g8)
                ld      debug_flag, r15
                bbs     9, r15, loc_12F50
                lda     0x10008E8, g9
                call    print_mes
loc_12F50:                              # CODE XREF: decide_command+4AC↑j
                ld      0x1A4(g8), r15
                clrbit  0x15, r15, r15
                st      r15, 0x1A4(g8)
                ld      0x1A4(g7), r3
                shro    0xF, r3, r3
                ld      0x0(g7), r13
                xor     r13, r3, r3
                ld      0x0(g8), r4
                chkbit  6, r3
                alterbit 6, r4, r4
                st      r4, 0x0(g8)
                b       loc_12F80
# ---------------------------------------------------------------------------
loc_12F80:                              # CODE XREF: decide_command+24↑j
                mov     r10, g7
                mov     r11, g8
                mov     0, r3
                st      r3, 0x198(g7)
                st      r3, 0x198(g8)
                ret
# End of function decide_command
# =============== S U B R O U T I N E =======================================
decide_my_command:                      # CODE XREF: decide_command+8↑p
                ld      0x198(g7), r3   # Label from Fighting Vipers source
                cmpobne 0, r3, loc_13030
                ld      0x684(g7), r3
                cmpobe  0, r3, loc_12FB4
                ldos    0x1AA(g7), r13
                ldos    0x62A(g7), r14
                cmpobe  r13, r14, loc_13030
loc_12FB4:                              # CODE XREF: decide_my_command+C↑j
                ldob    0x197(g7), r3
                cmpobne 0x17, r3, loc_12FEC
                ldos    0x194(g7), g0
                mov     0xF, g1
                call    calc_mht_adr
                ldob    1(g0), r4
                ldob    2(g0), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                subo    1, r4, r4
                stos    r4, 0x62A(g7)
                ld      0x194(g7), r15
                st      r15, 0x684(g7)
                b       loc_13010
# ---------------------------------------------------------------------------
loc_12FEC:                              # CODE XREF: decide_my_command+20↑j
                cmpobne 0x18, r3, loc_13000
                ldos    0x1AA(g7), r3
                addo    3, r3, r3
                stos    r3, 0x1AA(g7)
                b       loc_13010
# ---------------------------------------------------------------------------
loc_13000:                              # CODE XREF: decide_my_command:loc_12FEC↑j
                ld      0x0(g7), r15
                bbc     4, r15, loc_1301C
                cmpobe  9, r3, loc_1301C
                cmpobe  0x1C, r3, loc_1301C
loc_13010:                              # CODE XREF: decide_my_command+50↑j
                mov     0, r15
                st      r15, 0x194(g7)
                ret
# ---------------------------------------------------------------------------
loc_1301C:                              # CODE XREF: decide_my_command+6C↑j
                ld      0x194(g7), r14
                cmpobe  0, r14, loc_1302C
                mov     0, r15
                st      r15, 0x684(g7)
loc_1302C:                              # CODE XREF: decide_my_command+88↑j
                ret
# ---------------------------------------------------------------------------
loc_13030:                              # CODE XREF: decide_my_command+4↑j
                st      r3, 0x194(g7)
                mov     0, r15
                st      r15, 0x684(g7)
                ret
# End of function decide_my_command
# =============== S U B R O U T I N E =======================================
exec_command:                           # CODE XREF: action_init+6BC↑p
                ld      0x194(g7), r11  # Label from official source
                cmpobe  0, r11, loc_13058 # if action = 0 then branch (return)
                ldob    0x197(g7), r3   # r3 = p1_command or p2_command
                ld      SOMETHING_MOVES[r3*8], r4 # r4=(p1_command*8)+SOMETHING_MOVES or (p2_command*8)+SOMETHING_MOVES
                bx      (r4)
# ---------------------------------------------------------------------------
loc_13058:                              # CODE XREF: exec_command+4↑j
                ret                     # return
# End of function exec_command
# =============== S U B R O U T I N E =======================================
sub_1305C:                              # DATA XREF: ROM:0001D12C↓o
                ldob    0x19F(g7), r14
                cmpobe  0x1C, r14, loc_13448
                mov     0, r15
                stib    r15, 0x1B2(g7)
                st      r11, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_13074:                              # DATA XREF: ROM:0001D074↓o
                ldos    (check_word2+2)(g6), g0
                ld      0x0(g7), r15
                bbc     0x1D, r15, loc_130C8
                ldos    check_word3(g6), g0
                b       loc_130C8
# ---------------------------------------------------------------------------
loc_13090:                              # DATA XREF: ROM:0001D0C4↓o
                ldos    0x1AA(g7), r14
                cmpobl  0x16, r14, loc_130A4
                ldob    0x197(g7), r13
                ldob    0x19F(g7), r14
                cmpobe  r13, r14, loc_13134
loc_130A4:                              # CODE XREF: sub_1305C+38↑j
                ldos    (check_word1+2)(g6), g0
                ld      0x5F4(g7), r3
                lda     0x3FE66666, r4
                cmpr    r4, r3
                bg      loc_130C8
                ldos    check_word2(g6), g0
loc_130C8:                              # CODE XREF: sub_1305C+24↑j
                call    set_motion
                st      r11, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
                ldob    0x197(g7), r13
                ldob    0x19F(g7), r14
                cmpobe  r13, r14, loc_13134
                b       loc_13120
# ---------------------------------------------------------------------------
loc_130E4:                              # DATA XREF: ROM:0001D084↓o
                ld      0x1A4(g7), r15
                bbs     0x1A, r15, loc_13134
                b       loc_13120
# ---------------------------------------------------------------------------
selected_player_check:                  # DATA XREF: ROM:0001D05C↓o
                ldob    0x1B1(g7), r14
                cmpobe  5, r14, loc_13134 # If Bark
                ldob    0x1B1(g7), r14
                cmpobe  8, r14, loc_13134 # If Eggman (mechless)
                ldob    0x1B1(g7), r14
                cmpobe  9, r14, loc_13134 # If Big Eggman
                ldob    0x1B1(g7), r14
                cmpobe  11, r14, loc_13134 # If Boss Eggman
                b       loc_13120
# ---------------------------------------------------------------------------
loc_13114:                              # DATA XREF: ROM:0001D0BC↓o
                ldob    0x197(g7), r13
                ldob    0x19F(g7), r14
                cmpobe  r13, r14, loc_13134
loc_13120:                              # CODE XREF: sub_1305C+84↑j
                st      r11, 0x19C(g7)  # store r11 to P1_PARTS+0x19C
                mov     0, r15
                stib    r15, 0x1B2(g7)  # store 0 to P1_PARTS+0x1B2
                mov     0, r15
                stis    r15, 0x1AE(g7)  # P1_PARTS+0x1AE = 0
loc_13134:                              # CODE XREF: sub_1305C+44↑j
                ret
# ---------------------------------------------------------------------------
loc_13138:                              # DATA XREF: ROM:0001D0B4↓o
                ld      0x1A4(g7), r15
                bbc     0xD, r15, loc_13160
                ld      0x70C(g7), r15
                bbs     0x18, r15, loc_13160
                mov     0x13, r15
                st      r15, 0xC6C(g7)
                ld      0xC70(g7), r4
                cmpobe  0, r4, loc_1315C
                subo    1, r4, r4
loc_1315C:                              # CODE XREF: sub_1305C+F8↑j
                st      r4, 0xC70(g7)
loc_13160:                              # CODE XREF: sub_1305C+E0↑j
                st      r11, 0x19C(g7)
                mov     0, r15
                stib    r15, 0x1B2(g7)
                mov     0, r15
                stis    r15, 0x1AE(g7)
                ret
# ---------------------------------------------------------------------------
loc_13178:                              # DATA XREF: ROM:0001D18C↓o
                ldos    0x194(g7), g0   # Loads animation move data
                cmpobe  0, g0, loc_13184
                call    set_motion
loc_13184:                              # CODE XREF: sub_1305C+120↑j
                st      r11, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_1318C:                              # DATA XREF: ROM:0001D184↓o
                ldob    0x19F(g7), r14
                cmpobne 6, r14, loc_131A8
                ldos    0x194(g7), g0
                cmpobe  0, g0, loc_131A8
                call    set_motion
                mov     0xF, r15
                stis    r15, 0x1AA(g7)
loc_131A8:                              # CODE XREF: sub_1305C+134↑j
                st      r11, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_131B0:                              # DATA XREF: ROM:0001D17C↓o
                ldos    0x194(g7), g0
                cmpobe  0, g0, p1_move_thing
                call    set_motion
p1_move_thing:                          # CODE XREF: sub_1305C+158↑j
                ld      0x1F4(g8), r15
                st      r15, 0x600(g7)
                ld      0x1F8(g8), r15
                st      r15, 0x604(g7)
                ld      0x1FC(g8), r15
                st      r15, 0x608(g7)
                st      r11, 0x19C(g7)  # Writes move to P1
                mov     0, r15
                stib    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_131E4:                              # DATA XREF: ROM:0001D07C↓o
                addo    0x1F, 0xB, r13
                ldob    0x19F(g7), r14
                cmpobne r13, r14, loc_1320C
                lda     0xFFFFFF, r13
                and     r13, r11, r11
                shlo    0x19, 0x15, r13
                addi    r13, r11, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_1320C:                              # CODE XREF: sub_1305C+190↑j
                ld      0x1A4(g7), r7
                ld      0x0(g7), r6
                mov     0, r5
                ldob    0x197(g7), r13
                ldob    0x19F(g7), r14
                cmpobne r13, r14, loc_13240
                bbc     0xC, r7, loc_13240
                ldob    0x1B2(g7), r14
                cmpobl  1, r14, loc_133A0
                mov     1, r5
                ld      0x19C(g7), r3
                or      r3, r11, r11
                b       loc_13270
# ---------------------------------------------------------------------------
loc_13240:                              # CODE XREF: sub_1305C+1C4↑j
                mov     0, r15
                stis    r15, 0x1A8(g7)
                mov     0, r15
                stib    r15, 0x1B2(g7)
                lda     0x3F800000, r3
                bbs     0x10, r11, loc_1326C
                lda     0xBF800000, r3
                bbs     0x11, r11, loc_1326C
                mov     0, r3
loc_1326C:                              # CODE XREF: sub_1305C+1FC↑j
                st      r3, 0x5C4(g7)
loc_13270:                              # CODE XREF: sub_1305C+1E0↑j
                ld      0x0(g7), r15
                bbc     0x1D, r15, loc_1328C
                ld      0x190(g7), r3
                ld      0x20(r3), r3
                ldob    1(r3), r3
                stob    r3, 0x5BE(g7)
                b       loc_132B0
# ---------------------------------------------------------------------------
loc_1328C:                              # CODE XREF: sub_1305C+218↑j
                ld      0x190(g7), r3
                ld      0x20(r3), r3
                ldob    0x0(r3), r3
                stob    r3, 0x5BE(g7)
                bbc     0x12, r11, loc_132B0
                ld      0x190(g7), r3
                ld      0x20(r3), r3
                ldob    1(r3), r3
                stob    r3, 0x5BE(g7)
loc_132B0:                              # CODE XREF: sub_1305C+22C↑j
                ldos    (displacement64)(g6), g0
                ld      0x0(g7), r15
                bbs     0x1D, r15, loc_1332C
                ldos    0x194(g7), g0
                cmpobe  0, g0, loc_132F0
                mov     3, g1
                call    calc_mht_adr
                ldob    1(g0), r3
                ldob    2(g0), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                cmpobe  0, r3, loc_132EC
                ldos    0x194(g7), g0
                b       loc_1332C
# ---------------------------------------------------------------------------
loc_132EC:                              # CODE XREF: sub_1305C+284↑j
                setbit  1, r5, r5
loc_132F0:                              # CODE XREF: sub_1305C+268↑j
                ldos    (displacement56)(g6), g0
                bbs     0x15, r11, loc_1331C
                bbc     0x12, r11, loc_1332C
                ldos    (displacement60)(g6), g0
                ld      0x19C(g7), r15
                bbc     0x11, r15, loc_1332C
                ldos    (displacement62)(g6), g0
                b       loc_1332C
# ---------------------------------------------------------------------------
loc_1331C:                              # CODE XREF: sub_1305C+29C↑j
                ld      0x19C(g7), r15
                bbs     0x11, r15, loc_1332C
                ldos    (displacement58)(g6), g0
loc_1332C:                              # CODE XREF: sub_1305C+260↑j
                ldos    0x1A8(g7), r13
                cmpobe  r13, g0, loc_13370
                ldos    0x1AA(g7), r3
                call    set_motion
                ld      0x1A4(g7), r15
loc_13340:                              # DATA XREF: MAIN_DATA:02820734↓o
                bbs     0xC, r15, loc_1335C
                mov     0, r15
                stis    r15, 0x1AA(g7)
                lda     0x6040000, r13
                andnot  r13, r11, r11
                b       loc_13410
# ---------------------------------------------------------------------------
loc_1335C:                              # CODE XREF: sub_1305C:loc_13340↑j
                bbc     0, r5, loc_13370
                ldos    0x80E(g7), r4
                cmpible r3, r4, loc_1336C
                mov     r4, r3
loc_1336C:                              # CODE XREF: sub_1305C+308↑j
                stos    r3, 0x1AA(g7)
loc_13370:                              # CODE XREF: sub_1305C+2D4↑j
                ld      0x0(g7), r15
                bbs     0x1D, r15, loc_13410
                bbc     0x14, r11, loc_13394
                ld      0x1F4(g8), r15
                st      r15, 0x600(g7)
                ld      0x1F8(g8), r15
                st      r15, 0x604(g7)
                ld      0x1FC(g8), r15
                st      r15, 0x608(g7)
loc_13394:                              # CODE XREF: sub_1305C+31C↑j
                bbs     1, r5, loc_13410
                bbc     0x13, r11, loc_13410
                b       loc_133C8
# ---------------------------------------------------------------------------
loc_133A0:                              # CODE XREF: sub_1305C+1D0↑j
                ld      0xA08(g7), r15
                bbs     9, r15, loc_13414
                ld      0xA08(g7), r15
                bbs     0x19, r15, loc_133F0
                ldos    0x194(g7), g0
                cmpobe  0, g0, loc_13410
                bbs     0x13, r11, loc_133C8
                bbs     0x17, r11, loc_133EC
                call    set_motion
                b       loc_13410
# ---------------------------------------------------------------------------
loc_133C8:                              # CODE XREF: sub_1305C+340↑j
                ldos    0x194(g7), g0
                mov     3, g1
                call    calc_mht_adr
                ldob    5(g0), r3
                ldob    6(g0), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                stos    r3, 0x5C0(g7)
                b       loc_13410
# ---------------------------------------------------------------------------
loc_133EC:                              # CODE XREF: sub_1305C+360↑j
                b       loc_13410
# ---------------------------------------------------------------------------
loc_133F0:                              # CODE XREF: sub_1305C+350↑j
                ldos    0x194(g7), g0
                cmpobe  0, g0, loc_13410
                bbs     0x16, r11, loc_13408
                bbs     0x17, r11, loc_1340C
                bbs     0x13, r11, loc_133C8
                b       loc_13410
# ---------------------------------------------------------------------------
loc_13408:                              # CODE XREF: sub_1305C+39C↑j
                b       loc_13410
# ---------------------------------------------------------------------------
loc_1340C:                              # CODE XREF: sub_1305C+3A0↑j
                b       loc_13410
# ---------------------------------------------------------------------------
loc_13410:                              # CODE XREF: sub_1305C+2FC↑j
                st      r11, 0x19C(g7)
loc_13414:                              # CODE XREF: sub_1305C+348↑j
                ret
# ---------------------------------------------------------------------------
loc_13418:                              # DATA XREF: ROM:0001D094↓o
                ldob    0x19F(g7), r14
                cmpobne 9, r14, loc_1343C
                ldos    0x194(g7), r13
                ldos    0x5DC(g7), r14
                addi    r13, r14, r15
                stos    r15, 0x5DC(g7)
                ldob    0x196(g7), r14
                cmpobne 1, r14, loc_13444
                b       loc_13448
# ---------------------------------------------------------------------------
loc_1343C:                              # CODE XREF: sub_1305C+3C0↑j
                mov     0, r15
                stib    r15, 0x1B2(g7)
loc_13444:                              # CODE XREF: sub_1305C+3D8↑j
                st      r11, 0x19C(g7)
loc_13448:                              # CODE XREF: sub_1305C+4↑j
                ret
# End of function sub_1305C
# =============== S U B R O U T I N E =======================================
sub_1344C:                              # DATA XREF: ROM:0001D0CC↓o
                ldos    0x194(g7), r3
                mov     r3, g0
                call    search_shift_data_adr
                cmpobe  0, g0, loc_13460
                stob    r3, 0x60C(g7)
loc_13460:                              # CODE XREF: sub_1344C+C↑j
                ret
# End of function sub_1344C
# =============== S U B R O U T I N E =======================================
sub_13464:                              # DATA XREF: ROM:0001D134↓o
                st      r11, 0x19C(g7)
                ret
# End of function sub_13464
# =============== S U B R O U T I N E =======================================
sub_1346C:                              # DATA XREF: ROM:0001D19C↓o
                ldos    0x194(g7), g0
                cmpobe  0, g0, loc_1348C
                ld      0xA08(g7), r15
                bbs     0xA, r15, loc_134A0
                call    set_motion
                lda     0xFFFF0000, r13
                and     r13, r11, r11
loc_1348C:                              # CODE XREF: sub_1346C+4↑j
                ld      0xA08(g7), r15
                setbit  0xA, r15, r15
                st      r15, 0xA08(g7)
                mov     0, r15
                stib    r15, 0x1B2(g7)
loc_134A0:                              # CODE XREF: sub_1346C+C↑j
                st      r11, 0x19C(g7)
                ret
# End of function sub_1346C
# =============== S U B R O U T I N E =======================================
sub_134A8:                              # DATA XREF: ROM:0001D1A4↓o
                lda     0x3F800000, r3
                bbs     0x10, r11, loc_134C4
                lda     0xBF800000, r3
                bbs     0x11, r11, loc_134C4
                mov     0, r3
loc_134C4:                              # CODE XREF: sub_134A8+8↑j
                st      r3, 0x5C4(g7)
                ld      0x190(g7), r3
                ld      0x20(r3), r3
                ldob    0x0(r3), r3
                stob    r3, 0x5BE(g7)
                lda     0xFFFF, r13
                and     r13, r11, g0
                call    set_motion
                ld      0x1A4(g7), r15
                setbit  0, r15, r15
                st      r15, 0x1A4(g7)
                lda     0xFFFF0000, r13
                and     r13, r11, r11
                mov     0, r15
                stib    r15, 0x1B2(g7)
                st      r11, 0x19C(g7)
                ret
# End of function sub_134A8
# =============== S U B R O U T I N E =======================================
exec_action:                            # CODE XREF: action_init+6C8↑p
                ld      0x19C(g7), r14  # Label from official source
                cmpobe  0, r14, ACT_RC_SHIFT # if move 0 return
                ldob    0x19F(g7), r3   # r3 = P1_PARTS+0x19F
                ld      ACTUAL_MOVES[r3*8], r4 # Sonic Punch is 0x13C18
                bx      (r4)
# ---------------------------------------------------------------------------
ACT_RC_SHIFT:                           # CODE XREF: exec_action+4↑j
                ret                     # Label from official source
# End of function exec_action
# =============== S U B R O U T I N E =======================================
ACT_RC_MOTION:                          # DATA XREF: ROM:ACTUAL_MOVES↓o
                ldob    0x1B2(g7), r14  # Label from official source
                cmpobe  0, r14, load_player_action
                b       load_player_motion
# ---------------------------------------------------------------------------
load_player_action:                     # CODE XREF: ACT_RC_MOTION+4↑j
                ldos    0x19C(g7), g0   # g0 = P1_PARTS+0x19C
                call    set_motion
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
load_player_motion:                     # CODE XREF: ACT_RC_MOTION+8↑j
                ldos    0x1A8(g7), r14  # r14 = p1_mot_num
                cmpibne 0, r14, load_player_motion_is_0
                mov     0, r15
                st      r15, 0x19C(g7)  # p1_action = 0
load_player_motion_is_0:                # CODE XREF: ACT_RC_MOTION+24↑j
                ret
# End of function ACT_RC_MOTION
# ---------------------------------------------------------------------------
# START OF FUNCTION CHUNK FOR ACT_RC_KAESHI
ACT_RC_KAMAE:                           # CODE XREF: ACT_RC_KAESHI+44↓j
                ld      0x1A4(g7), r7   # Label from official source
                ld      0x0(g7), r6     # r6 = P1_PARTS
                bbs     3, r7, loc_135C4
                bbs     9, r7, loc_135F8
                ldos    0x802(g7), r14  # r14 = p1_motd_next
                cmpobne 0, r14, loc_1357C
                bbs     0, r6, loc_135DC
loc_1357C:                              # CODE XREF: ACT_RC_KAESHI-1960↑j
                ldos    prcb(g6), r13
                ldos    0x1A8(g7), r14  # r14 = p1_motion_num
                cmpibe  r13, r14, loc_135F8
                ldos    0x810(g7), r14  # r14 = P1_PARTS+0x810
                bbs     7, r14, loc_135B4
                ld      0x804(g7), r15
                bbs     0xD, r15, loc_135A4
                bbs     2, r7, loc_135F8
                b       loc_135DC
# ---------------------------------------------------------------------------
loc_135A4:                              # CODE XREF: ACT_RC_KAESHI-193C↑j
                ldos    start_ip_add(g6), g0
                bbc     1, r7, loc_135F4
                b       loc_135D4
# ---------------------------------------------------------------------------
loc_135B4:                              # CODE XREF: ACT_RC_KAESHI-1944↑j
                ldos    prcb(g6), g0
                call    sub_1CEA8
                ret
# ---------------------------------------------------------------------------
loc_135C4:                              # CODE XREF: ACT_RC_KAESHI-196C↑j
                ldos    prcb(g6), g0
                ldos    0x810(g7), r14
                bbs     7, r14, loc_135F4
loc_135D4:                              # CODE XREF: ACT_RC_KAESHI-1924↑j
                call    sub_1CE94
                ret
# ---------------------------------------------------------------------------
loc_135DC:                              # CODE XREF: ACT_RC_KAESHI-195C↑j
                ldos    displacement(g6), g0
                ld      0x0(g7), r15
                bbc     0x1D, r15, loc_135F4
                ldos    (displacement2)(g6), g0
loc_135F4:                              # CODE XREF: ACT_RC_KAESHI-1928↑j
                call    set_motion
loc_135F8:                              # CODE XREF: ACT_RC_KAESHI-1968↑j
                ret
# END OF FUNCTION CHUNK FOR ACT_RC_KAESHI
# =============== S U B R O U T I N E =======================================
ACT_RC_SYAGAMI:                         # DATA XREF: ROM:0001D060↓o
                ld      0x1A4(g7), r7   # Label from official source
                ld      0x0(g7), r6
                bbc     3, r7, loc_13640
                bbs     9, r7, loc_1366C
                bbs     0, r6, loc_13660
                ldos    (prcb+2)(g6), r13
                ldos    0x1A8(g7), r14
                cmpibe  r13, r14, syagami_yoke
                ldos    0x810(g7), r14
                bbc     7, r14, loc_13630
                bbs     2, r7, loc_1366C
                b       loc_13660
# ---------------------------------------------------------------------------
loc_13630:                              # CODE XREF: ACT_RC_SYAGAMI+28↑j
                ldos    (prcb+2)(g6), g0
                call    sub_1CEA8
                b       syagami_yoke
# ---------------------------------------------------------------------------
loc_13640:                              # CODE XREF: ACT_RC_SYAGAMI+8↑j
                ldos    (prcb+2)(g6), g0
                ldos    0x810(g7), r14
                bbs     7, r14, loc_13658
                call    set_motion
                b       syagami_yoke
# ---------------------------------------------------------------------------
loc_13658:                              # CODE XREF: ACT_RC_SYAGAMI+50↑j
                call    sub_1CE94
                b       syagami_yoke
# ---------------------------------------------------------------------------
loc_13660:                              # CODE XREF: ACT_RC_SYAGAMI+10↑j
                ldos    displacement8(g6), g0
                call    set_motion
loc_1366C:                              # CODE XREF: ACT_RC_SYAGAMI+C↑j
                ret
# ---------------------------------------------------------------------------
syagami_yoke:                           # CODE XREF: ACT_RC_SYAGAMI+20↑j
                ld      0x1A4(g8), r15  # Label from official source
                bbc     8, r15, loc_136A8
                ldos    0x1AA(g7), r7
                ldos    0x800(g7), r6
                subo    r7, r6, r5
                ldos    0x1AA(g8), r13
                ldos    0x808(g8), r14
                subi    r13, r14, r4
                ldob    4(g7), r13
                addi    r13, r4, r4
                cmpibge 1, r4, loc_136A4
                divo    r4, r5, r6
                addo    r7, r6, r6
loc_136A4:                              # CODE XREF: ACT_RC_SYAGAMI+9C↑j
                stos    r6, 0x1AA(g7)
loc_136A8:                              # CODE XREF: ACT_RC_SYAGAMI+78↑j
                ret
# End of function ACT_RC_SYAGAMI
# =============== S U B R O U T I N E =======================================
ACT_RC_WALK:                            # DATA XREF: ROM:0001D068↓o
                ld      0x1A4(g7), r7   # Label from official source
                ld      0x0(g7), r6
                bbs     0x1D, r6, loc_136FC
                bbc     0xA, r7, loc_136C4
                bbs     0xB, r7, loc_136C8
                b       loc_136E0
# ---------------------------------------------------------------------------
loc_136C4:                              # CODE XREF: ACT_RC_WALK+C↑j
                bbs     0, r6, loc_136C8
loc_136C8:                              # CODE XREF: ACT_RC_WALK+10↑j
                ldos    (displacement34)(g6), g0
                bbc     0xA, r6, loc_13734
                ldos    (check_word3+2)(g6), g0
                b       loc_13734
# ---------------------------------------------------------------------------
loc_136E0:                              # CODE XREF: ACT_RC_WALK+14↑j
                bbc     0, r6, loc_13738
                ldos    (displacement38)(g6), g0
                bbc     1, r7, loc_13734
                ldos    (displacement34)(g6), g0
                b       loc_13734
# ---------------------------------------------------------------------------
loc_136FC:                              # CODE XREF: ACT_RC_WALK+8↑j
                bbc     0xA, r7, loc_13720
                bbs     0xB, r7, loc_13720
                bbc     0, r6, loc_13738
                ldos    displacement40(g6), g0
                bbc     1, r7, loc_13734
                ldos    displacement36(g6), g0
                b       loc_13734
# ---------------------------------------------------------------------------
loc_13720:                              # CODE XREF: ACT_RC_WALK:loc_136FC↑j
                ldos    displacement36(g6), g0
                bbc     0xA, r6, loc_13734
                ldos    check_word4(g6), g0
loc_13734:                              # CODE XREF: ACT_RC_WALK+24↑j
                call    set_motion
loc_13738:                              # CODE XREF: ACT_RC_WALK:loc_136E0↑j
                ret
# End of function ACT_RC_WALK
# =============== S U B R O U T I N E =======================================
ACT_RC_BWALK:                           # DATA XREF: ROM:0001D070↓o
                ld      0x1A4(g7), r7   # Label from official source
                ld      0x0(g7), r6
                bbs     0x1D, r6, loc_1378C
                bbc     0xA, r7, loc_13754
                bbc     0xB, r7, loc_13758
                b       loc_13770
# ---------------------------------------------------------------------------
loc_13754:                              # CODE XREF: ACT_RC_BWALK+C↑j
                bbs     0, r6, loc_13758
loc_13758:                              # CODE XREF: ACT_RC_BWALK+10↑j
                ldos    (displacement42)(g6), g0
                bbc     0xA, r6, loc_137C4
                ldos    (check_word4+2)(g6), g0
                b       loc_137C4
# ---------------------------------------------------------------------------
loc_13770:                              # CODE XREF: ACT_RC_BWALK+14↑j
                bbc     0, r6, loc_137C8
                ldos    (displacement46)(g6), g0
                bbc     1, r7, loc_137C4
                ldos    (displacement42)(g6), g0
                b       loc_137C4
# ---------------------------------------------------------------------------
loc_1378C:                              # CODE XREF: ACT_RC_BWALK+8↑j
                bbc     0xA, r7, loc_137B0
                bbc     0xB, r7, loc_137B0
                bbc     0, r6, loc_137C8
                ldos    displacement48(g6), g0
                bbc     1, r7, loc_137C4
                ldos    displacement44(g6), g0
                b       loc_137C4
# ---------------------------------------------------------------------------
loc_137B0:                              # CODE XREF: ACT_RC_BWALK:loc_1378C↑j
                ldos    displacement44(g6), g0
                bbc     0xA, r6, loc_137C4
                ldos    displacement32(g6), g0
loc_137C4:                              # CODE XREF: ACT_RC_BWALK+24↑j
                call    set_motion
loc_137C8:                              # CODE XREF: ACT_RC_BWALK:loc_13770↑j
                ret
# End of function ACT_RC_BWALK
# =============== S U B R O U T I N E =======================================
ACT_RC_FUMIKOMI:                        # DATA XREF: ROM:0001D078↓o
                ldos    0x1AA(g7), r13  # Label from official source
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_137E0
                mov     0, r15
                st      r15, 0x19C(g7)
loc_137E0:                              # CODE XREF: ACT_RC_FUMIKOMI+8↑j
                ret
# End of function ACT_RC_FUMIKOMI
# =============== S U B R O U T I N E =======================================
ACT_RC_RUN:                             # DATA XREF: ROM:0001D100↓o
                ldob    0x1B2(g7), r3   # Label from official source
                cmpobe  0, r3, loc_137F4
                cmpobe  1, r3, loc_13850
                cmpobe  2, r3, loc_13898
loc_137F4:                              # CODE XREF: ACT_RC_RUN+4↑j
                ldos    (start_ip_add+2)(g6), g0
                ldos    0x1A8(g7), r14
                cmpobe  g0, r14, loc_13844
                ld      0x5F4(g7), r3
                lda     0x40400000, r4
                cmpr    r4, r3
                bg      loc_13828
                ldos    check_word1(g6), g0
                ldos    0x1A8(g7), r14
                cmpobe  g0, r14, loc_13844
loc_13828:                              # CODE XREF: ACT_RC_RUN+30↑j
                addo    4, sp, sp
                st      g6, -4(sp)
                call    set_motion
                ld      -4(sp), g6
                subo    4, sp, sp
loc_13844:                              # CODE XREF: ACT_RC_RUN+1C↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_13850:                              # CODE XREF: ACT_RC_RUN+8↑j
                ldos    0x1AA(g7), r14
                cmpobg  8, r14, loc_13908
                ld      0x5B8(g7), r15
                bbc     2, r15, loc_138E4
                ldos    (displacement50)(g6), g0
                addo    4, sp, sp
                st      g6, -4(sp)
                call    set_motion
                ld      -4(sp), g6
                subo    4, sp, sp
                mov     0xA, r15
                stis    r15, 0x1AA(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_13898:                              # CODE XREF: ACT_RC_RUN+C↑j
                ld      0x0(g7), r15
                bbc     0, r15, loc_13908
                ld      0x5B8(g7), r15
                bbc     2, r15, loc_138D0
                ldos    (displacement52)(g6), g0
                ld      0x1A4(g7), r3
                shro    0xF, r3, r3
                ld      0x0(g7), r4
                xor     r3, r4, r3
                bbs     6, r3, loc_138DC
                ldos    (displacement54)(g6), g0
                b       loc_138DC
# ---------------------------------------------------------------------------
loc_138D0:                              # CODE XREF: ACT_RC_RUN+C0↑j
                shlo    0x18, 3, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_138DC:                              # CODE XREF: ACT_RC_RUN+DC↑j
                call    set_motion
                ret
# ---------------------------------------------------------------------------
loc_138E4:                              # CODE XREF: ACT_RC_RUN+78↑j
                ldos    (start_ip_add+2)(g6), r3
                ldos    0x1A8(g7), r14
                cmpobne r3, r14, loc_13900
                ldos    0x1AA(g7), r14
                cmpobl  0xF, r14, loc_13900
                ret
# ---------------------------------------------------------------------------
loc_13900:                              # CODE XREF: ACT_RC_RUN+10C↑j
                mov     0, r15
                st      r15, 0x19C(g7)
loc_13908:                              # CODE XREF: ACT_RC_RUN+70↑j
                ret
# End of function ACT_RC_RUN
# ---------------------------------------------------------------------------
ACT_RC_TA_GUARD:                        # DATA XREF: ROM:0001D088↓o
                ld      0x1A4(g7), r7   # Label from official source
                ld      0x0(g7), r6
                ldos    (displacement10)(g6), g0
                ld      0x804(g7), r15
                bbs     0xD, r15, loc_1392C
                bbs     0, r6, loc_1393C
                b       loc_1393C
# ---------------------------------------------------------------------------
loc_1392C:                              # CODE XREF: ROM:00013920↑j
                setbit  0xD, r6, r6
                ldos    0x802(g7), r14
                cmpobne 0, r14, loc_13940
                bbc     0, r6, loc_13940
loc_1393C:                              # CODE XREF: ROM:00013924↑j
                call    set_motion
loc_13940:                              # CODE XREF: ROM:00013934↑j
                ret
# ---------------------------------------------------------------------------
ACT_RC_GUARD:                           # DATA XREF: ROM:0001D0A0↓o
                ld      flt_1CFE0, r13  # Label from official source
                ld      0x5D4(g7), r14
                addr    r13, r14, r15
                st      r15, 0x5D4(g7)
                ldis    0x5DE(g7), r5
                subi    1, r5, r5
                stis    r5, 0x5DE(g7)
                ldob    0x19E(g7), r14
                cmpobne 1, r14, loc_13970
                call    sub_1CED4
loc_13970:                              # CODE XREF: ROM:00013968↑j
                ldob    0x1B2(g7), r3
                cmpobe  0, r3, loc_13984
                cmpobe  1, r3, loc_13A48
                cmpobe  2, r3, loc_13A64
                cmpobe  3, r3, loc_13A90
loc_13984:                              # CODE XREF: ROM:00013974↑j
                ld      0x0(g7), r15
                setbit  4, r15, r15
                st      r15, 0x0(g7)
                ld      0x5E0(g7), r13
                ld      flt_1CFE4, r14
                mulr    r13, r14, r15
                st      r15, 0x2C(g7)
                ld      0x5E8(g7), r13
                ld      flt_1CFE4, r14
                mulr    r13, r14, r15
                st      r15, 0x34(g7)
                ld      0x5E0(g7), r13
                ld      flt_1CFE8, r14
                mulr    r13, r14, r15
                st      r15, 0x5C8(g7)
                ld      0x5E8(g7), r13
                ld      flt_1CFE8, r14
                mulr    r13, r14, r15
                st      r15, 0x5D0(g7)
                ldos    0x19C(g7), g0
                cmpobne 0, g0, loc_139F0
                ldos    (displacement10)(g6), g0
loc_139F0:                              # CODE XREF: ROM:000139E4↑j
                call    set_motion
                ld      0x1A4(g7), r15
                setbit  0, r15, r15
                st      r15, 0x1A4(g7)
                ldob    0xA00(g7), r14
                cmpobne 0, r14, loc_13A24
                mov     1, r3
                stos    r3, 0x808(g7)
                addo    1, r3, r3
                stos    r3, 0x80A(g7)
                addo    1, r3, r3
                stos    r3, 0x80C(g7)
                b       loc_13A3C
# ---------------------------------------------------------------------------
loc_13A24:                              # CODE XREF: ROM:00013A04↑j
                ldos    0x80C(g7), r3
                ldos    0x800(g7), r4
                cmpoble r3, r4, loc_13A34
                stos    r4, 0x80C(g7)
loc_13A34:                              # CODE XREF: ROM:00013A2C↑j
                ldos    0x808(g7), r3
                stos    r3, 0x1AA(g7)
loc_13A3C:                              # CODE XREF: ROM:00013A20↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_13A48:                              # CODE XREF: ROM:00013978↑j
                ldos    0x80A(g7), r14
                subi    1, r14, r3
                ldos    0x1AA(g7), r13
                cmpobl  r13, r3, loc_13AE4
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_13A64:                              # CODE XREF: ROM:0001397C↑j
                ldos    0x80C(g7), r13
                subi    r13, r5, r4
                ldos    0x80A(g7), r3
                subi    1, r3, r3
                addi    r3, r4, r4
                cmpibg  0, r4, loc_13A84
                stos    r3, 0x1AA(g7)
                b       loc_13AB4
# ---------------------------------------------------------------------------
loc_13A84:                              # CODE XREF: ROM:00013A78↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_13A90:                              # CODE XREF: ROM:00013980↑j
                cmpibl  0, r5, loc_13AB4
                mov     0, r15
                st      r15, 0x19C(g7)
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
loc_13AB4:                              # CODE XREF: ROM:00013A80↑j
                ldos    0x6D0(g8), r10
                ldos    0x6D8(g7), r13
                cmpobe  r13, r10, loc_13AE4
                ld      0x6D4(g8), r3
                bbs     0, r3, loc_13ACC
                bbc     1, r3, loc_13AE4
loc_13ACC:                              # CODE XREF: ROM:00013AC4↑j
                call    sub_1CED4
                cmpobe  0, g0, loc_13AE4
                mov     1, r15
                stib    r15, 0x19E(g7)
                mov     3, r15
                stib    r15, 0x1B2(g7)
loc_13AE4:                              # CODE XREF: ROM:00013A54↑j
                ret
# ---------------------------------------------------------------------------
ACT_RC_YARARE:                          # DATA XREF: ROM:0001D0A8↓o
                ld      flt_1CFEC, r13  # Label from official source
                ld      0x5D4(g7), r14
                addr    r13, r14, r15
                st      r15, 0x5D4(g7)
                ldis    0x5DE(g7), r5
                subi    1, r5, r5
                cmpible 0, r5, loc_13B0C
                mov     0, r5
loc_13B0C:                              # CODE XREF: ROM:00013B04↑j
                stis    r5, 0x5DE(g7)
                ldob    0x1B2(g7), r3
                cmpobe  0, r3, loc_13B24
                cmpobe  1, r3, loc_13BA4
                cmpobe  2, r3, loc_13BC0
                cmpobe  3, r3, loc_13BF8
loc_13B24:                              # CODE XREF: ROM:00013B14↑j
                ld      0x0(g7), r15
                setbit  4, r15, r15
                st      r15, 0x0(g7)
                ldob    0x19E(g7), r14
                cmpobe  1, r14, loc_13B88
                ld      0x5E0(g7), r13
                ld      flt_1CFF0, r14
                mulr    r13, r14, r15
                st      r15, 0x2C(g7)
                ld      0x5E8(g7), r13
                ld      flt_1CFF0, r14
                mulr    r13, r14, r15
                st      r15, 0x34(g7)
                ld      0x5E0(g7), r13
                ld      flt_1CFF4, r14
                mulr    r13, r14, r15
                st      r15, 0x5C8(g7)
                ld      0x5E8(g7), r13
                ld      flt_1CFF4, r14
                mulr    r13, r14, r15
                st      r15, 0x5D0(g7)
loc_13B88:                              # CODE XREF: ROM:00013B34↑j
                ldos    0x19C(g7), g0
                cmpobe  0, g0, loc_13B94
                call    comp_set_motion
loc_13B94:                              # CODE XREF: ROM:00013B8C↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_13BA4:                              # CODE XREF: ROM:00013B18↑j
                ldos    0x80A(g7), r14
                subi    1, r14, r3
                ldos    0x1AA(g7), r13
                cmpobl  r13, r3, loc_13C14
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_13BC0:                              # CODE XREF: ROM:00013B1C↑j
                ldos    0x80C(g7), r13
                subi    r13, r5, r4
                ldos    0x80A(g7), r3
                subi    1, r3, r3
                addi    r3, r4, r4
                cmpibg  0, r4, loc_13BE0
                stos    r3, 0x1AA(g7)
                ret
# ---------------------------------------------------------------------------
loc_13BE0:                              # CODE XREF: ROM:00013BD4↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_13BF8:                              # CODE XREF: ROM:00013B20↑j
                cmpibl  0, r5, loc_13C14
                mov     0, r15
                st      r15, 0x19C(g7)
                ld      0x1A4(g7), r3
                bbs     0x18, r3, loc_13C14
                clrbit  0, r3, r3
                st      r3, 0x1A4(g7)
loc_13C14:                              # CODE XREF: ROM:00013BB0↑j
                ret
# ---------------------------------------------------------------------------
ACT_RC_DOWN_ATTACK:                     # DATA XREF: ROM:0001D180↓o
                ldob    0x1B2(g7), r3   # Label from official source
                cmpobe  0, r3, loc_13C28
                cmpobe  1, r3, loc_13C34
                cmpobe  2, r3, loc_13DA4
loc_13C28:                              # CODE XREF: ROM:00013C1C↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_13C34:                              # CODE XREF: ROM:00013C20↑j
                ldob    0x5BE(g7), r6
                cvtir   r6, r6
                ldis    0x1AC(g7), r13
                ldis    0x1AC(g8), r14
                subi    r13, r14, r3
                shli    1, r3, r3
                addo    0x1F, 0x13, r4
                cmpibge r4, r3, loc_13C5C
                mov     r4, r3
                b       loc_13C68
# ---------------------------------------------------------------------------
loc_13C5C:                              # CODE XREF: ROM:00013C50↑j
                subo    0x14, 0, r4
                cmpible r4, r3, loc_13C68
                mov     r4, r3
loc_13C68:                              # CODE XREF: ROM:00013C58↑j
                cvtir   r3, r3
                lda     0x3C23D70A, r13
                mulr    r13, r3, r3
                lda     0x3F800000, r13
                addr    r13, r3, r3
                lda     0x40400000, r5
                ld      add_BACKUP_RAM_TO_RAM, r14
                ldob    0x3353(r14), r14
                bbs     7, r14, loc_13CB0
                ld      0x1A4(g8), r15
                bbs     4, r15, loc_13CB0
                ld      0x1A4(g7), r15
                bbs     0x1F, r15, loc_13CB8
loc_13CB0:                              # CODE XREF: ROM:00013C9C↑j
                lda     0x3F000000, r5
loc_13CB8:                              # CODE XREF: ROM:00013CAC↑j
                mulr    r3, r5, r5
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x830(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x834(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                ld      (g11)[g12*1], r4
                ld      0x600(g7), r14
                subr    r3, r14, r3
                ld      0x608(g7), r14
                subr    r4, r14, r4
                ld      0x1F4(g7), r13
                subr    r13, r3, r3
                ld      0x1FC(g7), r13
                subr    r13, r4, r4
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], g0
                cmpible g0, r5, loc_13D3C
                lda     0x3ECCCCCD, g1
                subr    g1, r5, r5
                divr    g0, r5, g0
                mulr    g0, r3, r3
                mulr    g0, r4, r4
loc_13D3C:                              # CODE XREF: ROM:00013D20↑j
                divr    r6, r3, r15
                st      r15, 0x2C(g7)
                divr    r6, r4, r15
                st      r15, 0x34(g7)
                mov     0, r5
                st      r5, 0x30(g7)
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                stis    r6, 0x5C2(g7)
                call    sub_1980C
                ldos    0x1AA(g7), r13
                ldos    0x5BE(g7), r14
                cmpobl  r13, r14, loc_13DA4
                mov     0, r15
                st      r15, 0x2C(g7)
                mov     0, r15
                st      r15, 0x34(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_13DA4:                              # CODE XREF: ROM:00013C24↑j
                ldos    0x1AA(g7), r13
                ldos    0x80C(g7), r14
                cmpibg  r13, r14, loc_13DBC
                ld      0x1A4(g7), r15
                setbit  0, r15, r15
                st      r15, 0x1A4(g7)
loc_13DBC:                              # CODE XREF: ROM:00013DAC↑j
                ret
# ---------------------------------------------------------------------------
ACT_RC_JUMP:                            # DATA XREF: ROM:0001D080↓o
                ldob    0x1B2(g7), r3   # Label from official source
                cmpobe  0, r3, loc_13DD0
                cmpobe  1, r3, loc_13DDC
                cmpobe  2, r3, loc_1410C
loc_13DD0:                              # CODE XREF: ROM:00013DC4↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_13DDC:                              # CODE XREF: ROM:00013DC8↑j
                ldos    0x1AA(g7), r13
                ldos    0x80E(g7), r14
                cmpobl  r13, r14, loc_148E0
                ld      0x1A4(g7), r15
                clrbit  1, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x0(g7), r15
                bbs     0x1D, r15, loc_13E2C
                ldos    0x19C(g7), g0
                cmpobe  0, g0, loc_13E2C
                ldos    0x1A8(g7), r14
                cmpobe  g0, r14, loc_13E2C
                ld      0x19C(g7), r3
                bbc     0x13, r3, loc_13E28
                ldos    0x5BC(g7), r13
                ldos    0x5C0(g7), r14
                cmpibg  r13, r14, loc_13E2C
                clrbit  0x13, r3, r3
                st      r3, 0x19C(g7)
loc_13E28:                              # CODE XREF: ROM:00013E10↑j
                call    set_motion
loc_13E2C:                              # CODE XREF: ROM:00013DF8↑j
                ldob    0x5BE(g7), r6
                stos    r6, 0x5BC(g7)
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                ld      0x5CC(g7), r13
                ld      0x50A000, r14
                subr    r13, r14, r3
                lda     0x3F800000, r13
                addr    r13, r6, r4
                mulr    r3, r4, r3
                lda     0x3F000000, r13
                mulr    r13, r3, r3
                ld      0x1F8(g7), r13
                ld      0x81C(g7), r14
                subr    r13, r14, r4
                divr    r6, r4, r4
                addr    r3, r4, r15
                st      r15, 0x30(g7)
                ld      0x19C(g7), r15
                bbs     0x14, r15, loc_13FF4
                ld      0x5C4(g7), r7
                ld      0x724(g7), r13
                mulr    r13, r6, r5
                ld      0x19C(g7), r15
                bbs     0x11, r15, loc_13EE4
                ld      0x19C(g7), r15
                bbc     0x12, r15, loc_13ECC
                ld      0x728(g7), r13
                mulr    r13, r6, r5
                ld      0x19C(g7), r15
                bbc     0x15, r15, loc_13EE4
                ld      0x730(g7), r13
                mulr    r13, r6, r5
                b       loc_13EE4
# ---------------------------------------------------------------------------
loc_13ECC:                              # CODE XREF: ROM:00013EAC↑j
                ld      0x724(g7), r13
                mulr    r13, r6, r5
                ld      0x19C(g7), r15
                bbc     0x15, r15, loc_13EE4
                ld      0x72C(g7), r13
                mulr    r13, r6, r5
loc_13EE4:                              # CODE XREF: ROM:00013EA4↑j
                cmpobe  0, r7, loc_13F98
                bbs     0x1F, r7, loc_13F04
                ld      0x5F8(g7), r8
                ld      0x5F4(g7), r9
                ld      0x5B8(g7), r15
                bbc     0, r15, loc_13F18
                setbit  0x1F, r9, r9
                b       loc_13F18
# ---------------------------------------------------------------------------
loc_13F04:                              # CODE XREF: ROM:00013EE8↑j
                ld      0x5FC(g7), r8
                ld      0x5F4(g7), r9
                ld      0x5B8(g7), r15
                bbs     0, r15, loc_13F18
                setbit  0x1F, r9, r9
loc_13F18:                              # CODE XREF: ROM:00013EF8↑j
                ld      0x19C(g7), r15
                bbs     0x15, r15, loc_13F98
                lda     0x3ECCCCCD, r4
                addr    r4, r9, r3
                cmpibge r5, r3, loc_13F40
                subr    r4, r9, r3
                cmpible r5, r3, loc_13F40
                mov     r3, r5
                b       loc_13F98
# ---------------------------------------------------------------------------
loc_13F40:                              # CODE XREF: ROM:00013F2C↑j
                lda     0x3F4CCCCD, r4
                ld      0x5F4(g7), r3
                cmpr    r4, r3
                bl      loc_13F98
                ld      0x710(g8), r3
                lda     0x3FACCCCD, r4
                cmpr    r4, r3
                bg      loc_13F98
                lda     0x3ECCCCCD, r4
                bbs     0x1F, r9, loc_13F88
                subr    r4, r9, r3
                cmpr    r5, r3
                bl      loc_13F98
                mov     r3, r5
                b       loc_13F98
# ---------------------------------------------------------------------------
loc_13F88:                              # CODE XREF: ROM:00013F70↑j
                addr    r4, r9, r3
                cmpr    r5, r3
                bg      loc_13F98
                mov     r3, r5
loc_13F98:                              # CODE XREF: ROM:loc_13EE4↑j
                divr    r6, r5, r3
                mulr    r7, r3, r3
                ldis    0x26(g7), r4
                mov     r4, r12
                bbc     0x1F, r3, loc_13FB0
                notbit  0xF, r4, r12
loc_13FB0:                              # CODE XREF: ROM:00013FA8↑j
                stis    r12, 0x5C2(g7)
                subi    r4, 0, r12
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x2C(g7)
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x34(g7)
                b       loc_140CC
# ---------------------------------------------------------------------------
loc_13FF4:                              # CODE XREF: ROM:00013E90↑j
                ld      0x6C8(g7), r5
                ldos    0x26(g7), r7
                ld      0x5B8(g7), r15
                bbc     0, r15, loc_14018
                shlo    0xF, 1, r13
                addi    r13, r7, r7
                lda     0xFFFF, r13
                and     r13, r7, r7
loc_14018:                              # CODE XREF: ROM:00014000↑j
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      0x830(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x834(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                ld      (g11)[g12*1], r4
                ld      0x600(g7), r14
                subr    r3, r14, r3
                ld      0x608(g7), r14
                subr    r4, r14, r4
                ld      0x1F4(g7), r13
                subr    r13, r3, r3
                ld      0x1FC(g7), r13
                subr    r13, r4, r4
loc_14060:                              # DATA XREF: set_motion:loc_1B250↓o
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], g0
                cmpible g0, r5, loc_14094
                lda     0x3ECCCCCD, g1
                subr    g1, r5, r5
                divr    g0, r5, g0
                mulr    g0, r3, r3
                mulr    g0, r4, r4
loc_14094:                              # CODE XREF: ROM:00014078↑j
                divr    r6, r3, r15
                st      r15, 0x2C(g7)
                divr    r6, r4, r15
                st      r15, 0x34(g7)
                mov     0, r5
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                stis    r6, 0x5C2(g7)
loc_140CC:                              # CODE XREF: ROM:00013FF0↑j
                call    fix_hara
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ld      0x19C(g7), r15
                bbs     18, r15, loc_140F8 # sd_jump_2
                lda     0xAE1100, g0    # sd_jump_1
                call    check_same_sound
                call    sound_request_u
                ret
# ---------------------------------------------------------------------------
loc_140F8:                              # CODE XREF: ROM:000140E0↑j
                lda     0xAE1101, g0    # sd_jump_2
                call    check_same_sound
                call    sound_request_u
                ret
# ---------------------------------------------------------------------------
loc_1410C:                              # CODE XREF: ROM:00013DCC↑j
                ld      0x0(g7), r15
                bbs     0x1D, r15, loc_14144
                ld      0xA08(g7), r15
                bbs     0x19, r15, loc_14144
                ld      0x19C(g7), r15
                bbc     0x13, r15, loc_14144
                ldos    0x5BC(g7), r13
                ldos    0x5C0(g7), r14
                cmpibg  r13, r14, loc_14144
                ldos    0x19C(g7), g0
                call    set_motion
                ld      0x19C(g7), r15
                clrbit  0x13, r15, r15
                st      r15, 0x19C(g7)
loc_14144:                              # CODE XREF: ROM:00014110↑j
                ld      0x0(g7), r15
                bbc     2, r15, loc_14870
                ld      0x0(g7), r15
                bbs     0x1D, r15, loc_14174
                ld      0xA08(g7), r15
                bbs     0x1A, r15, loc_148E0
                ld      0xA08(g7), r15
                bbs     6, r15, loc_144E4
                ld      0xA08(g7), r15
                bbs     0xC, r15, loc_14560
                ld      0xA08(g7), r15
                bbs     0x19, r15, loc_14410
loc_14174:                              # CODE XREF: ROM:00014150↑j
                ld      0x0(g7), r15
                bbs     3, r15, loc_14224
                ld      0xA08(g7), r15
                bbs     0x1D, r15, loc_14224
                ld      0x1A4(g8), r15
                bbs     0xD, r15, loc_141A0
                bbs     8, r15, loc_14224
                bbs     0x11, r15, loc_14224
                bbs     0xE, r15, loc_14224
                ld      0x1A4(g7), r15
                bbs     8, r15, loc_14224
loc_141A0:                              # CODE XREF: ROM:00014188↑j
                ld      mod_fa_coli, r3
                ld      0x164(r3), r14
                cmpobe  0, r14, loc_14224
                ld      0xA08(g7), r15
                setbit  0x1D, r15, r15
                st      r15, 0xA08(g7)
                ldt     0x2C(g7), r4
                lda     0x3F000000, r7
                mulr    r7, r4, r4
                mulr    r7, r6, r6
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                lda     0x3D4CCCCD, r9
                cmpr    r9, r8
                bge     loc_14204
                divr    r8, r9, r9
                mulr    r9, r4, r4
                mulr    r9, r6, r6
loc_14204:                              # CODE XREF: ROM:000141F4↑j
                ld      0xA08(g7), r13
                ld      0xA08(g8), r15
                xor     r13, r15, r11
                bbs     0x10, r11, loc_14220
                bbs     0x11, r11, loc_14220
                notbit  0x1F, r4, r4
                notbit  0x1F, r6, r6
loc_14220:                              # CODE XREF: ROM:00014210↑j
                stt     r4, 0x2C(g7)
loc_14224:                              # CODE XREF: ROM:00014178↑j
                ld      0x0(g7), r15
                bbs     0x1D, r15, loc_148E0
                ld      0xA08(g7), r15
                bbc     0x1E, r15, loc_148E0
                ld      0x644(g7), r3
                ld      0x64C(g7), r4
                or      r3, r4, r3
                cmpobe  0, r3, loc_148E0
                ldos    0x5BC(g7), r14
                cmpibge 1, r14, loc_148E0
                ld      0x70C(g7), r15
                bbc     3, r15, loc_148E0
                ldob    4(g7), r3
                ld      mod_fa_coli, r4
                ldos    0x1F4(r4)[r3*2], r3
                clrbit  3, r3, r3
                cmpobl  3, r3, loc_148E0
                ld      0x1F8(g7), r3
                lda     0x3FB33333, r4
                cmpr    r3, r4
                bl      loc_148E0
                ld      0xA08(g7), r3
                shro    1, r3, r4
                or      r3, r4, r3
                bbc     0x10, r3, loc_148E0
                ld      0xA08(g7), r15
                bbc     0x1F, r15, loc_142A4
                ld      0xA08(g7), r15
                bbc     0, r15, loc_148E0
loc_142A4:                              # CODE XREF: ROM:00014298↑j
                ld      0x2C(g7), r3
                clrbit  0x1F, r3, r4
                lda     0x3DB851EC, r10
                cmpr    r10, r4
                bg      loc_142D0
                lda     0x80000000, r13
                and     r13, r3, r3
                or      r3, r10, r3
                st      r3, 0x2C(g7)
loc_142D0:                              # CODE XREF: ROM:000142B8↑j
                ld      0x34(g7), r3
                clrbit  0x1F, r3, r4
                cmpr    r10, r4
                bg      loc_142F4
                lda     0x80000000, r13
                and     r13, r3, r3
                or      r3, r10, r3
                st      r3, 0x34(g7)
loc_142F4:                              # CODE XREF: ROM:000142DC↑j
                ld      0x19C(g7), r15
                bbc     0x17, r15, loc_143AC
                ld      0x19C(g7), r15
                clrbit  0x17, r15, r15
                st      r15, 0x19C(g7)
                ldos    0x19C(g7), g0
                call    set_motion
                ld      0xA08(g7), r15
                clrbit  0x13, r15, r15
                st      r15, 0xA08(g7)
                ld      0xA08(g7), r15
                bbc     0x11, r15, loc_14390
                lda     0x80000000, r4
                lda     0x3E99999A, r12
                ld      0x644(g7), r3
                cmpobe  0, r3, loc_14358
                not     r3, r3
                and     r4, r3, r3
                or      r3, r12, r12
                ld      0x18(g7), r5
                addr    r12, r5, r5
                st      r5, 0x18(g7)
                b       loc_14378
# ---------------------------------------------------------------------------
loc_14358:                              # CODE XREF: ROM:00014338↑j
                ld      0x64C(g7), r3
                cmpobe  0, r3, loc_14378
                not     r3, r3
                and     r4, r3, r3
                or      r3, r12, r12
                ld      0x20(g7), r5
                addr    r12, r5, r5
                st      r5, 0x20(g7)
loc_14378:                              # CODE XREF: ROM:00014354↑j
                ldos    0x26(g7), r14
                notbit  0xF, r14, r15
                stos    r15, 0x26(g7)
                ldos    0x61A(g7), r14
                notbit  0xF, r14, r15
                stos    r15, 0x61A(g7)
loc_14390:                              # CODE XREF: ROM:00014320↑j
                shlo    0x17, 5, r13
                ld      0xA08(g7), r14
                or      r13, r14, r15
                st      r15, 0xA08(g7)
                ldt     0x2C(g7), r4
                stt     r4, 0xA10(g7)
                b       loc_144E4
# ---------------------------------------------------------------------------
loc_143AC:                              # CODE XREF: ROM:000142F8↑j
                lda     0x2800020, r13
                ld      0xA08(g7), r14
                or      r13, r14, r15
                st      r15, 0xA08(g7)
                mov     6, r15
                stis    r15, 0xA0E(g7)
                ldt     0x2C(g7), r4
                stt     r4, 0xA10(g7)
                movt    0, r4
                stt     r4, 0x2C(g7)
                ldos    (displacement66)(g6), r3
                ldob    4(g7), r5
                ld      mod_fa_coli, r4
                ldos    0x1F4(r4)[r5*2], r5
                bbc     3, r5, loc_14400
                ldos    (displacement68)(g6), r3
loc_14400:                              # CODE XREF: ROM:000143F4↑j
                mov     0x1F, r15
                stib    r15, 0x60C(g7)
                stos    r3, 0x852(g7)
                b       loc_148E0
# ---------------------------------------------------------------------------
loc_14410:                              # CODE XREF: ROM:00014170↑j
                ldos    0xA0E(g7), r14
                cmpobe  0, r14, loc_1466C
                ld      0x19C(g7), r15
                bbc     0x17, r15, loc_148E0
                ld      0x19C(g7), r15
                clrbit  0x17, r15, r15
                st      r15, 0x19C(g7)
                ld      0x804(g7), r3
                ldos    0x19C(g7), g0
                call    set_motion
                ld      0xA08(g7), r15
                bbc     0x11, r15, loc_144AC
loc_14440:                              # DATA XREF: MAIN_DATA:02810EFC↓o
                lda     0x80000000, r4
                lda     0x3E99999A, r12
                ld      0x644(g7), r3
                cmpobe  0, r3, loc_14474
                not     r3, r3
                and     r4, r3, r3
                or      r3, r12, r12
                ld      0x18(g7), r5
                addr    r12, r5, r5
                st      r5, 0x18(g7)
                b       loc_14494
# ---------------------------------------------------------------------------
loc_14474:                              # CODE XREF: ROM:00014454↑j
                ld      0x64C(g7), r3
                cmpobe  0, r3, loc_14494
                not     r3, r3
                and     r4, r3, r3
                or      r3, r12, r12
                ld      0x20(g7), r5
                addr    r12, r5, r5
                st      r5, 0x20(g7)
loc_14494:                              # CODE XREF: ROM:00014470↑j
                ldos    0x26(g7), r14
                notbit  0xF, r14, r15
                stos    r15, 0x26(g7)
                ldos    0x61A(g7), r14
                notbit  0xF, r14, r15
                stos    r15, 0x61A(g7)
loc_144AC:                              # CODE XREF: ROM:0001443C↑j
                bbc     0x14, r3, loc_144C8
                ldos    0x26(g7), r14
                notbit  0xF, r14, r15
                stos    r15, 0x26(g7)
                ldos    0x61A(g7), r14
                notbit  0xF, r14, r15
                stos    r15, 0x61A(g7)
loc_144C8:                              # CODE XREF: ROM:loc_144AC↑j
                shlo    0x17, 5, r13
                ld      0xA08(g7), r14
                or      r13, r14, r15
                st      r15, 0xA08(g7)
                ldt     0x2C(g7), r4
                stt     r4, 0xA10(g7)
                b       loc_144E4
# ---------------------------------------------------------------------------
loc_144E4:                              # CODE XREF: ROM:00014160↑j
                ld      0x70C(g7), r15
                clrbit  3, r15, r15
                st      r15, 0x70C(g7)
                ldis    0x800(g7), r15
                stis    r15, 0xA0E(g7)
                ldos    0xA0E(g7), r14
                subi    1, r14, r15
                stos    r15, 0xA0E(g7)
                ld      0xA08(g7), r15
                clrbit  9, r15, r15
                st      r15, 0xA08(g7)
                ld      0xA08(g7), r15
                setbit  0xC, r15, r15
                st      r15, 0xA08(g7)
                ld      cage_height, r15
                ld      0x81C(g7), r5
                addr    r15, r5, r5
                st      r5, 0xA3C(g7)
                ldt     0x18(g7), r8
                stt     r8, 0xA2C(g7)
                subr    r9, r5, r5
                ldos    0x80A(g7), r3
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                divr    r4, r5, r5
                st      r5, 0xA44(g7)
                b       loc_148E0
# ---------------------------------------------------------------------------
loc_14560:                              # CODE XREF: ROM:00014168↑j
                ldos    0xA0E(g7), r8
                cmpobe  0, r8, loc_145D4
                ldt     0x80(g7), r4
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r6
                ld      0xA44(g7), r5
                ldos    0x80A(g7), r7
                ldos    0x1AA(g7), r15
                cmpobge r15, r7, loc_145A4
                mov     r15, r7
loc_145A4:                              # CODE XREF: ROM:0001459C↑j
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                mulr    r7, r5, r5
                ldt     0xA2C(g7), r8
                addr    r8, r4, r4
                addr    r9, r5, r5
                addr    r10, r6, r6
                stt     r4, 0x18(g7)
                b       loc_148E0
# ---------------------------------------------------------------------------
loc_145D4:                              # CODE XREF: ROM:00014564↑j
                lda     displacement, r15
                st      r15, 0x30(g7)
                ld      0x81C(g7), g0
                call    calc_land_time
                stos    g1, 0x5BC(g7)
                shlo    1, g1, g1
                stob    g1, 0x5BE(g7)
                ld      0xA08(g7), r15
                clrbit  0xC, r15, r15
                clrbit  0x19, r15, r15
                setbit  0x1A, r15, r15
                st      r15, 0xA08(g7)
                ld      0x70C(g7), r15
                clrbit  3, r15, r15
                st      r15, 0x70C(g7)
                ld      0x19C(g7), r15
                bbc     0x16, r15, loc_1463C
                ldos    0x19C(g7), g0
                call    set_motion
                mov     0, r15
                st      r15, 0x5CC(g7)
                ld      0x19C(g7), r15
                clrbit  0x16, r15, r15
                st      r15, 0x19C(g7)
                b       loc_14648
# ---------------------------------------------------------------------------
loc_1463C:                              # CODE XREF: ROM:00014618↑j
                ldos    (displacement70)(g6), g0
                call    set_motion
loc_14648:                              # CODE XREF: ROM:00014638↑j
                ld      0xA08(g7), r12
                and     0xF, r12, r11
                ld      flt_16B1C[r11*8], r4
                ldis    flt_16B20[r11*8], r5
                ld      0xA08(g7), r15
                bbc     0x13, r15, loc_14708
                b       loc_14790
# ---------------------------------------------------------------------------
loc_1466C:                              # CODE XREF: ROM:00014414↑j
                ld      0xA08(g7), r15
                clrbit  0x19, r15, r15
                st      r15, 0xA08(g7)
                ld      0x70C(g7), r15
                clrbit  3, r15, r15
                st      r15, 0x70C(g7)
                ld      0xA08(g7), r15
                setbit  0x1A, r15, r15
                st      r15, 0xA08(g7)
                mov     0x1F, r15
                stib    r15, 0x60C(g7)
                ld      0xA08(g7), r12
                and     0xF, r12, r11
                ld      flt_16B1C[r11*8], r4
                lda     0x3F0E353F, r3
                ld      0xA08(g7), r15
                bbc     0x12, r15, loc_146BC
                mulr    r3, r4, r4
loc_146BC:                              # CODE XREF: ROM:000146B4↑j
                ldis    flt_16B20[r11*8], r5
                bbc     2, r12, loc_146D8
                ld      0xA08(g7), r15
                setbit  0xD, r15, r15
                st      r15, 0xA08(g7)
                b       loc_146F8
# ---------------------------------------------------------------------------
loc_146D8:                              # CODE XREF: ROM:000146C4↑j
                bbc     3, r12, loc_146EC
                ld      0xA08(g7), r15
                setbit  0xD, r15, r15
                st      r15, 0xA08(g7)
                b       loc_146F8
# ---------------------------------------------------------------------------
loc_146EC:                              # CODE XREF: ROM:loc_146D8↑j
                ld      0xA08(g7), r15
                setbit  0xE, r15, r15
                st      r15, 0xA08(g7)
loc_146F8:                              # CODE XREF: ROM:000146D4↑j
                ldos    (displacement70)(g6), r3
                stos    r3, 0x852(g7)
                bbs     0x13, r12, loc_1474C
loc_14708:                              # CODE XREF: ROM:00014664↑j
                ld      0xA10(g7), r3
                notbit  0x1F, r3, r3
                mulr    r3, r4, r3
                st      r3, 0x2C(g7)
                ld      0xA18(g7), r3
                notbit  0x1F, r3, r3
                mulr    r3, r4, r3
                st      r3, 0x34(g7)
                cmpibg  0, r5, loc_1473C
                mov     r5, g0
                call    sub_16A4C
                cmpobne 0, g1, loc_14774
                b       loc_148E0
# ---------------------------------------------------------------------------
loc_1473C:                              # CODE XREF: ROM:00014728↑j
                lda     0xBCF5C28F, r8
                st      r8, 0x30(g7)
                b       loc_148E0
# ---------------------------------------------------------------------------
loc_1474C:                              # CODE XREF: ROM:00014704↑j
                ld      0xA08(g7), r15
                setbit  0x16, r15, r15
                st      r15, 0xA08(g7)
                cmpibg  0, r5, loc_14708
                mov     r5, g0
                call    sub_16A4C
                cmpobe  0, g1, loc_14790
                ld      0xA08(g7), r15
                clrbit  0x16, r15, r15
                st      r15, 0xA08(g7)
loc_14774:                              # CODE XREF: ROM:00014734↑j
                mov     0, r3
                st      r3, 0x2C(g7)
                st      r3, 0x34(g7)
                lda     0x3CF5C28F, r8
                st      r8, 0x30(g7)
                b       loc_148E0
# ---------------------------------------------------------------------------
loc_14790:                              # CODE XREF: ROM:00014668↑j
                ld      0xA08(g7), r15
                bbs     0x18, r15, loc_148E0
                ld      mod_fa_coli, r3
                ld      0x164(r3), r14
                cmpobe  0, r14, loc_147B8
                ld      0xA08(g7), r15
                setbit  0x18, r15, r15
                st      r15, 0xA08(g7)
                b       loc_148E0
# ---------------------------------------------------------------------------
loc_147B8:                              # CODE XREF: ROM:000147A4↑j
                ld      0x1F4(g7), r5
                ld      0x1FC(g7), r6
                ld      0x1F4(g8), r7
                ld      0x1FC(g8), r8
                subr    r5, r7, r3
                subr    r6, r8, r4
                or      r3, r4, r5
                clrbit  0x1F, r5, r5
                cmpobne 0, r5, loc_147EC
                lda     displacement, r3
                lda     0x3F800000, r4
loc_147EC:                              # CODE XREF: ROM:000147D8↑j
                lda     0x2D005A5A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                ld      (g11)[g12*1], r4
                ldos    0x5BC(g7), r6
                cmpobne 0, r6, loc_14814
                mov     1, r6
loc_14814:                              # CODE XREF: ROM:0001480C↑j
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                ld      0x5F4(g7), r7
                ld      stage_x, r11
                cmpr    r7, r11
                bl      loc_14840
                mov     r11, r7
loc_14840:                              # CODE XREF: ROM:00014838↑j
                lda     0x3F333333, r11
                subr    r11, r7, r7
                bbc     0x1F, r7, loc_14854
                mov     0, r7
loc_14854:                              # CODE XREF: ROM:0001484C↑j
                mulr    r7, r3, r3
                mulr    r7, r4, r4
                divr    r6, r3, r3
                divr    r6, r4, r4
                st      r3, 0x2C(g7)
                st      r4, 0x34(g7)
                b       loc_148E0
# ---------------------------------------------------------------------------
loc_14870:                              # CODE XREF: ROM:00014148↑j
                ld      0x19C(g7), r15
                bbs     0x12, r15, loc_14884
                mov     1, g0
                call    stage_contact_sound
                b       loc_1488C
# ---------------------------------------------------------------------------
loc_14884:                              # CODE XREF: ROM:00014874↑j
                mov     2, g0
                call    stage_contact_sound
loc_1488C:                              # CODE XREF: ROM:00014880↑j
                ld      0xA08(g7), r15
                bbs     0x1D, r15, loc_148A8
                mov     0, r3
                st      r3, 0x2C(g7)
                st      r3, 0x30(g7)
                st      r3, 0x34(g7)
                b       loc_148C0
# ---------------------------------------------------------------------------
loc_148A8:                              # CODE XREF: ROM:00014890↑j
                ldt     0x2C(g7), r4
                lda     0x3F4CCCCD, r7
                mulr    r7, r4, r4
                mulr    r7, r6, r6
                stt     r4, 0x2C(g7)
loc_148C0:                              # CODE XREF: ROM:000148A4↑j
                mov     0, r15
                st      r15, 0x19C(g7)
                ldos    0x1AA(g7), r13
                ldos    0x80C(g7), r14
                cmpibg  r13, r14, loc_148E0
                ld      0x1A4(g7), r15
                setbit  0, r15, r15
                st      r15, 0x1A4(g7)
loc_148E0:                              # CODE XREF: ROM:00013DE4↑j
                ret
# ---------------------------------------------------------------------------
                .float 1.0              # unreachable code
                .float 0.0
                .float -1.0
                .float 0.0
                .float 0.0
                .float 1.0
                .float 0.0
                .float -1.0
                .float 0.0
                .float 1.0
                .float 0.0
                .float 1.0
                .float 1.0
                .float 0.0
                .float 1.0
                .float 0.0
# =============== S U B R O U T I N E =======================================
ACT_RC_UKEMI:                           # DATA XREF: ROM:0001D130↓o
                ldob    0x1B2(g7), r3   # Label from official source
                cmpibe  0, r3, loc_1493C
                cmpibe  1, r3, loc_14960
                cmpibe  2, r3, loc_149E8
                cmpibe  3, r3, loc_14B08
                cmpibe  4, r3, loc_14B28
loc_1493C:                              # CODE XREF: ACT_RC_UKEMI+4↑j
                ld      0x0(g7), r14
                setbit  4, r14, r15
                st      r15, 0x0(g7)
                ldob    0x843(g8), r14
                ldos    0x19C(g7), g0
                call    comp_set_motion
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_14960:                              # CODE XREF: ACT_RC_UKEMI+8↑j
                ldos    0x1AA(g7), r13
                ldos    0x80E(g7), r14
                cmpobl  r13, r14, loc_14B6C
                ldob    0x843(g8), r14
                cmpobe  4, r14, loc_149C4
                ldob    0x86A(g7), r3
                bbc     1, r3, loc_149B4
                ldob    0x843(g8), r14
                lda     flt_1D294[r14*8], r4
                ldob    0x6F4(g7), r14
                cmpobge 1, r14, loc_14994
                addo    4, r4, r4
loc_14994:                              # CODE XREF: ACT_RC_UKEMI+68↑j
                ld      (r4), r4
                ld      0x2C(g7), r14
                mulr    r4, r14, r15
                st      r15, 0x2C(g7)
                ld      0x34(g7), r14
                mulr    r4, r14, r15
                st      r15, 0x34(g7)
                b       loc_149C4
# ---------------------------------------------------------------------------
loc_149B4:                              # CODE XREF: ACT_RC_UKEMI+54↑j
                bbc     0, r3, loc_149C4
                mov     0, r4
                st      r4, 0x2C(g7)
                st      r4, 0x34(g7)
loc_149C4:                              # CODE XREF: ACT_RC_UKEMI+4C↑j
                ldob    0x86A(g7), r3
                bbc     2, r3, loc_149D8
                lda     0x3ECCCCCD, r3
                st      r3, 0x30(g7)
loc_149D8:                              # CODE XREF: ACT_RC_UKEMI+A4↑j
                call    fix_hara
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_149E8:                              # CODE XREF: ACT_RC_UKEMI+C↑j
                ld      0x0(g7), r15
                bbs     2, r15, loc_149FC
                ldis    0x818(g7), r15
                stis    r15, 0x1AA(g7)
                b       loc_14B14
# ---------------------------------------------------------------------------
loc_149FC:                              # CODE XREF: ACT_RC_UKEMI+C8↑j
                ld      0x644(g7), r10
                ld      0x64C(g7), r11
                or      r10, r11, r10
                clrbit  0x1F, r10, r10
                cmpobe  0, r10, loc_14A60
                ld      0x2C(g7), r3
                clrbit  0x1F, r3, r4
                lda     0x3DB851EC, r10
                cmpr    r10, r4
                bg      loc_14A3C
                lda     0x80000000, r13
                and     r13, r3, r3
                or      r3, r10, r3
                st      r3, 0x2C(g7)
loc_14A3C:                              # CODE XREF: ACT_RC_UKEMI+100↑j
                ld      0x34(g7), r3
                clrbit  0x1F, r3, r4
                cmpr    r10, r4
                bg      loc_14A60
                lda     0x80000000, r13
                and     r13, r3, r3
                or      r3, r10, r3
                st      r3, 0x34(g7)
loc_14A60:                              # CODE XREF: ACT_RC_UKEMI+E8↑j
                ldos    0x1AA(g7), r13
                ld      0xAF8(g7), r14
                cmpobl  r13, r14, loc_14B6C
                ld      0xA08(g7), r15
                bbs     1, r15, loc_14B6C
                ld      0x1F8(g7), r3
                lda     0x3F99999A, r4
                cmpr    r3, r4
                bl      loc_14B6C
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_14B6C
                mov     0, r3
                st      r3, 0x19C(g7)
                mov     6, r3
                stob    r3, 0x19F(g7)
                mov     2, r3
                stob    r3, 0x1B2(g7)
                ld      0x1A4(g7), r15
                setbit  0xC, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x70C(g7), r15
                clrbit  2, r15, r15
                st      r15, 0x70C(g7)
                addo    0x1F, 0xF, r15
                stib    r15, 0x5BE(g7)
                ld      0xA08(g7), r15
                setbit  0x1F, r15, r15
                st      r15, 0xA08(g7)
                ld      0xA08(g7), r15
                setbit  0x11, r15, r15
                st      r15, 0xA08(g7)
                ld      0xA08(g7), r15
                setbit  0x15, r15, r15
                st      r15, 0xA08(g7)
                b       loc_14B6C
# ---------------------------------------------------------------------------
loc_14B08:                              # CODE XREF: ACT_RC_UKEMI+10↑j
                ldos    0x1AA(g7), r13
                ldos    0x818(g7), r14
                cmpobl  r13, r14, loc_14B6C
loc_14B14:                              # CODE XREF: ACT_RC_UKEMI+D4↑j
                mov     1, g0
                call    stage_contact_sound
                b       loc_14B20
# ---------------------------------------------------------------------------
loc_14B20:                              # CODE XREF: ACT_RC_UKEMI+1F8↑j
                mov     4, r15
                stib    r15, 0x1B2(g7)
loc_14B28:                              # CODE XREF: ACT_RC_UKEMI+14↑j
                ldos    0x1AA(g7), r13
                ldos    0x80C(g7), r14
                cmpobl  r13, r14, loc_14B6C
                mov     0, r3
                st      r3, 0x2C(g7)
                st      r3, 0x30(g7)
                st      r3, 0x34(g7)
                ld      0x1A4(g7), r14
                clrbit  0, r14, r15
                st      r15, 0x1A4(g7)
                ld      0x0(g7), r14
                clrbit  4, r14, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                mov     0, r15
                stib    r15, 0x6F5(g7)
loc_14B6C:                              # CODE XREF: ACT_RC_UKEMI+44↑j
                ret
# End of function ACT_RC_UKEMI
# ---------------------------------------------------------------------------
un_14BA8_alt:                           # unreachable code
                ld      0x0(g7), r14
                clrbit  4, r14, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                mov     0, r15
                stib    r15, 0x6F5(g7)
                ret
# =============== S U B R O U T I N E =======================================
ACT_RC_DOWN:                            # DATA XREF: ROM:0001D090↓o
                ldob    0x1B2(g7), r3   # Label from official source
                cmpibe  0, r3, loc_14BA8
                cmpibe  1, r3, loc_14BE8
                cmpibe  2, r3, loc_14C1C
                cmpibe  3, r3, loc_14C3C
                cmpibe  4, r3, loc_14CC8
loc_14BA8:                              # CODE XREF: ACT_RC_DOWN+4↑j
                ld      0x0(g7), r14
                setbit  4, r14, r15
                st      r15, 0x0(g7)
                mov     0, r3
                st      r3, 0x2C(g7)
                st      r3, 0x30(g7)
                st      r3, 0x34(g7)
                ldos    0x19C(g7), g0
                ldob    0x19E(g7), r14
                cmpobe  1, r14, loc_14C84
                call    comp_set_motion
                ldob    0x19E(g7), r14
                cmpobe  2, r14, loc_14CC0
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_14BE8:                              # CODE XREF: ACT_RC_DOWN+8↑j
                ldos    0x1AA(g7), r13
                ldos    0x80E(g7), r14
                cmpobl  r13, r14, loc_14CE4
                ld      0x5E0(g7), r15
                st      r15, 0x2C(g7)
                ld      0x5E4(g7), r15
                st      r15, 0x30(g7)
                ld      0x5E8(g7), r15
                st      r15, 0x34(g7)
                call    fix_hara
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_14C1C:                              # CODE XREF: ACT_RC_DOWN+C↑j
                ld      0x0(g7), r15
                bbs     2, r15, loc_14CE4
                ldis    0x818(g7), r15
                stis    r15, 0x1AA(g7)
                call    sub_32948
                b       loc_14C48
# ---------------------------------------------------------------------------
                mov     3, r15
                stib    r15, 0x1B2(g7)
loc_14C3C:                              # CODE XREF: ACT_RC_DOWN+10↑j
                ldos    0x1AA(g7), r13
                ldos    0x818(g7), r14
                cmpobl  r13, r14, loc_14CE4
loc_14C48:                              # CODE XREF: ACT_RC_DOWN+A0↑j
                mov     0, g0
                call    stage_contact_sound
                mov     0, r15
                stib    r15, 0x6F5(g7)
                lda     0xC2C80000, r12
                ld      0x1C(g7), r11
                cmpr    r11, r12
                bg      loc_14CC0
                ld      fa_camera, r3
                lda     0x3E19999A, r15
                st      r15, 0xFC(r3)
                b       loc_14CC0
# ---------------------------------------------------------------------------
loc_14C84:                              # CODE XREF: ACT_RC_DOWN+3C↑j
                ld      0x1A4(g7), r15
                clrbit  6, r15, r15
                st      r15, 0x1A4(g7)
                ldis    0x616(g7), r4
                lda     0x520, r5
                ld      0x0(g7), r15
                bbc     6, r15, loc_14CA8
                lda     0xFFFFFAE0, r5
loc_14CA8:                              # CODE XREF: ACT_RC_DOWN+10C↑j
                subi    r5, r4, r4
                ld      0x1A4(g7), r15
                bbc     0xB, r15, loc_14CB8
                notbit  0xF, r4, r4
loc_14CB8:                              # CODE XREF: ACT_RC_DOWN+120↑j
                stis    r4, 0x26(g7)
                call    comp_set_motion
loc_14CC0:                              # CODE XREF: ACT_RC_DOWN+48↑j
                mov     4, r15
                stib    r15, 0x1B2(g7)
loc_14CC8:                              # CODE XREF: ACT_RC_DOWN+14↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_14CE4
                ld      0x1A4(g7), r15
                bbs     0xF, r15, loc_14CE8
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_14CE4:                              # CODE XREF: ACT_RC_DOWN+60↑j
                ret
# ---------------------------------------------------------------------------
loc_14CE8:                              # CODE XREF: ACT_RC_DOWN+148↑j
                ld      0x0(g7), r14
                clrbit  4, r14, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# End of function ACT_RC_DOWN
# =============== S U B R O U T I N E =======================================
ACT_RC_RISE:                            # DATA XREF: ROM:0001D098↓o
                mov     0, g0           # Label from official source
                ldob    0x1B2(g7), r3
                ld      0x5B8(g7), r6
                ld      0x1A4(g7), r7
                cmpibe  0, r3, loc_14D28
                cmpibe  1, r3, loc_14D54
                cmpibe  2, r3, loc_14D7C
                cmpibe  3, r3, loc_14DC4
                cmpibe  4, r3, loc_14E98
                cmpibe  5, r3, loc_14EC8
loc_14D28:                              # CODE XREF: ACT_RC_RISE+10↑j
                mov     0, r15
                stos    r15, 0x5DC(g7)
                st      r15, 0x1218(g7)
                mov     0, r15
                stib    r15, 0x6F5(g7)
                setbit  0x10, r7, r15
                st      r15, 0x1A4(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_14D54:                              # CODE XREF: ACT_RC_RISE+14↑j
                ld      0x0(g7), r3
                bbc     0, r3, loc_14EBC
                bbs     5, r3, loc_14EC8
                ldis    0x1AC(g7), r14
                cmpibge 0, r14, loc_14EC8
                ldos    (displacement80)(g6), g0
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_14D7C:                              # CODE XREF: ACT_RC_RISE+18↑j
                ldis    0x5DE(g7), r5
                cmpibge 0, r5, loc_14D9C
                ldos    0x5DC(g7), r14
                mulo    4, r14, r3
                cmpibge r3, r5, loc_14D9C
                subi    1, r5, r15
                stis    r15, 0x5DE(g7)
                b       loc_14EBC
# ---------------------------------------------------------------------------
loc_14D9C:                              # CODE XREF: ACT_RC_RISE+80↑j
                mov     0, r15
                stis    r15, 0x5DE(g7)
                ld      0x0(g7), r14
                clrbit  4, r14, r15
                st      r15, 0x0(g7)
                mov     0, r15
                stis    r15, 0x1AE(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_14DC4:                              # CODE XREF: ACT_RC_RISE+1C↑j
                ldob    0x19E(g7), r10
                cmpobne 0, r10, loc_14DD8
                addo    0x1F, 9, r13
                ldos    0x1AE(g7), r14
                cmpobg  r13, r14, loc_14EBC
loc_14DD8:                              # CODE XREF: ACT_RC_RISE+C8↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ld      0x0(g7), r14
                clrbit  6, r14, r15
                st      r15, 0x0(g7)
                cmpobe  6, r10, loc_14E04
                cmpobe  5, r10, loc_14E58
                cmpobe  9, r10, loc_14E20
                cmpobe  0xA, r10, loc_14E3C
                b       loc_14E74
# ---------------------------------------------------------------------------
loc_14E04:                              # CODE XREF: ACT_RC_RISE+F0↑j
                bbs     0, r6, loc_14E14
                ldos    (displacement86)(g6), g0
                b       loc_14E90
# ---------------------------------------------------------------------------
loc_14E14:                              # CODE XREF: ACT_RC_RISE:loc_14E04↑j
                ldos    (displacement88)(g6), g0
                b       loc_14E90
# ---------------------------------------------------------------------------
loc_14E20:                              # CODE XREF: ACT_RC_RISE+F8↑j
                bbs     0, r6, loc_14E30
                ldos    (displacement94)(g6), g0
                b       loc_14E90
# ---------------------------------------------------------------------------
loc_14E30:                              # CODE XREF: ACT_RC_RISE:loc_14E20↑j
                ldos    (displacement96)(g6), g0
                b       loc_14E90
# ---------------------------------------------------------------------------
loc_14E3C:                              # CODE XREF: ACT_RC_RISE+FC↑j
                bbs     0, r6, loc_14E4C
                ldos    (displacement98)(g6), g0
                b       loc_14E90
# ---------------------------------------------------------------------------
loc_14E4C:                              # CODE XREF: ACT_RC_RISE:loc_14E3C↑j
                ldos    (displacement100)(g6), g0
                b       loc_14E90
# ---------------------------------------------------------------------------
loc_14E58:                              # CODE XREF: ACT_RC_RISE+F4↑j
                bbs     0, r6, loc_14E68
                ldos    (displacement90)(g6), g0
                b       loc_14E90
# ---------------------------------------------------------------------------
loc_14E68:                              # CODE XREF: ACT_RC_RISE:loc_14E58↑j
                ldos    (displacement92)(g6), g0
                b       loc_14E90
# ---------------------------------------------------------------------------
loc_14E74:                              # CODE XREF: ACT_RC_RISE+100↑j
                bbs     0, r6, loc_14E84
                ldos    (displacement82)(g6), g0
                b       loc_14E90
# ---------------------------------------------------------------------------
loc_14E84:                              # CODE XREF: ACT_RC_RISE:loc_14E74↑j
                ldos    (displacement84)(g6), g0
                b       loc_14E90
# ---------------------------------------------------------------------------
loc_14E90:                              # CODE XREF: ACT_RC_RISE+110↑j
                call    set_motion
                ret
# ---------------------------------------------------------------------------
loc_14E98:                              # CODE XREF: ACT_RC_RISE+20↑j
                bbs     2, r7, loc_14EB0
                ld      0x0(g7), r15
                bbc     0xF, r15, loc_14EBC
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
loc_14EB0:                              # CODE XREF: ACT_RC_RISE:loc_14E98↑j
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_14EBC:                              # CODE XREF: ACT_RC_RISE+58↑j
                cmpobe  0, g0, loc_14EC4
                call    set_motion
loc_14EC4:                              # CODE XREF: ACT_RC_RISE:loc_14EBC↑j
                ret
# ---------------------------------------------------------------------------
loc_14EC8:                              # CODE XREF: ACT_RC_RISE+24↑j
                ldis    0x800(g7), r15
                stis    r15, 0x1AA(g7)
                ret
# End of function ACT_RC_RISE
# =============== S U B R O U T I N E =======================================
ACT_RC_KAESHI:                          # DATA XREF: ROM:0001D0E0↓o
# FUNCTION CHUNK AT 00013560 SIZE 0000009C BYTES
                ldob    0x1B2(g7), r3   # Label from official source
                cmpibe  0, r3, loc_14EE0
                cmpibe  1, r3, loc_14EF4
loc_14EE0:                              # CODE XREF: ACT_RC_KAESHI+4↑j
                ldis    0x1A8(g8), r15
                stis    r15, 0x61E(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_14EF4:                              # CODE XREF: ACT_RC_KAESHI+8↑j
                ld      0x1A4(g8), r15
                bbc     8, r15, loc_14F1C
                ldos    0x1A8(g8), r3
                cmpobe  0, r3, loc_14F1C
                ldos    0x61E(g7), r14
                cmpobne r3, r14, loc_14F1C
                ld      0x0(g7), r15
                setbit  0xC, r15, r15
                st      r15, 0x0(g7)
                b       ACT_RC_KAMAE
# ---------------------------------------------------------------------------
loc_14F1C:                              # CODE XREF: ACT_RC_KAESHI+24↑j
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# End of function ACT_RC_KAESHI
# =============== S U B R O U T I N E =======================================
ACT_RC_KAWASHI:                         # DATA XREF: ROM:0001D0F8↓o
                ldob    0x19F(g8), r14  # Label from official source
                cmpobe  0xD, r14, loc_14FC4
                ldob    4(g8), r13
                ldos    0x1AA(g8), r14
                addi    r13, r14, r5
                ldos    0x626(g7), r14
                subi    r5, r14, r5
                ldos    0x1AE(g7), r4
                addo    1, r4, r4
                addo    r4, r5, r5
                mov     1, r3
                cmpibge r5, r3, loc_14F68
                mov     r3, r5
loc_14F68:                              # CODE XREF: ACT_RC_KAWASHI+2C↑j
                ldob    0x84D(g7), r6
                subo    1, r6, r3
                mulo    r3, r4, r7
                divo    r5, r7, r7
                addo    1, r7, r7
                stos    r7, 0x1AA(g7)
                cmpobe  r6, r7, loc_14FCC
                ret
# ---------------------------------------------------------------------------
                lda     TEXTURE_BUFFER, g1 # Unreachable code
                ldos    0x626(g7), r15
                st      r15, 0x0(sp)
                mov     1, r15
                balx    sub_4ED24, r14
# ---------------------------------------------------------------------------
                .long 0x5F676174        # tag_en_coma error\n
                .long 0x635F6E65
                .long 0x20616D6F
                .long 0x6F727265
                .long 0xD0A3F72
                .long 0x6425
# ---------------------------------------------------------------------------
                mov     1, r5
                b       loc_14F68
# ---------------------------------------------------------------------------
loc_14FC4:                              # CODE XREF: ACT_RC_KAWASHI+4↑j
                ldob    0x84D(g7), r6
                stos    r6, 0x1AA(g7)
loc_14FCC:                              # CODE XREF: ACT_RC_KAWASHI+4C↑j
                ld      0x1A4(g7), r15
                setbit  0x12, r15, r15
                st      r15, 0x1A4(g7)
                shlo    0x1A, 3, r15
                st      r15, 0x19C(g7)
                mov     0, r15
                stib    r15, 0x1B2(g7)
                b       loc_15234
# ---------------------------------------------------------------------------
                ld      0x0(g7), r14
                clrbit  4, r14, r15
                st      r15, 0x0(g7)
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
ACT_RC_DOWN_NAGE_TOUCH:                 # DATA XREF: ROM:0001D190↓o
                ld      0x0(g8), r15    # Label from official source
                bbs     0x1D, r15, loc_150D0
                ld      0x720(g7), r15
                bbc     6, r15, loc_1502C
                ld      0x19C(g7), r15
                bbs     0x11, r15, loc_15040
                b       loc_150D0
# ---------------------------------------------------------------------------
loc_1502C:                              # CODE XREF: ACT_RC_KAWASHI+E8↑j
                ld      0x720(g7), r15
                bbc     7, r15, loc_150D0
                ld      0x19C(g7), r15
                bbs     0x10, r15, loc_15040
                b       loc_150D0
# ---------------------------------------------------------------------------
loc_15040:                              # CODE XREF: ACT_RC_KAWASHI+F0↑j
                ld      0x1A4(g7), r15
                bbs     1, r15, loc_150D0
                ld      0x1A4(g7), r15
                bbc     8, r15, loc_150D0
                ld      mod_fa_coli, r3
                ld      0x164(r3), r14
                cmpobe  0, r14, loc_150D0
                ldob    0x820(g7), r11
                ld      dword_CE020[r11*4], r11
loc_1506C:                              # CODE XREF: ACT_RC_KAWASHI+154↓j
                scanbit r11, r10
                bbs     0x1F, r10, loc_150D0
                clrbit  r10, r11, r11
                ldob    4(g7), r15
                cmpobe  1, r15, loc_15090
                ld      0x90F600[r10*4], r13
                cmpobe  0, r13, loc_1506C
                b       loc_150AC
# ---------------------------------------------------------------------------
loc_15090:                              # CODE XREF: ACT_RC_KAWASHI+148↑j
                mov     0xF, r4
loc_15094:                              # CODE XREF: ACT_RC_KAWASHI+170↓j
                ld      0x90F600[r4*4], r5
                bbs     r10, r5, loc_150AC
                cmpdeci 1, r4, r4
                ble     loc_15094
                b       loc_1506C
# ---------------------------------------------------------------------------
loc_150AC:                              # CODE XREF: ACT_RC_KAWASHI+158↑j
                ld      0xC64(g7), r3
                cmpobe  0, r3, loc_150D0
                mov     0, r15
                st      r15, 0xC64(g7)
                lda     0xC004000, r13
                addi    r13, r3, r15
                st      r15, 0x194(g7)
                b       loc_150FC
# ---------------------------------------------------------------------------
loc_150D0:                              # CODE XREF: ACT_RC_KAWASHI+E0↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_150FC
                ld      0x0(g7), r14
                clrbit  4, r14, r15
                st      r15, 0x0(g7)
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
loc_150FC:                              # CODE XREF: ACT_RC_KAWASHI+198↑j
                ret
# ---------------------------------------------------------------------------
ACT_RC_NAGE_TOUCH:                      # DATA XREF: ROM:0001D198↓o
                ld      0x720(g7), r15  # Label from official source
                bbc     0xC, r15, loc_151E0
                ld      0x19C(g7), r15
                bbs     0x12, r15, loc_15118
                ld      0x1A4(g8), r15
                bbs     0xD, r15, loc_151E0
loc_15118:                              # CODE XREF: ACT_RC_KAWASHI+1D8↑j
                ld      0x1A4(g7), r15
                bbs     1, r15, loc_151E0
                ld      0x1A4(g7), r15
                bbc     8, r15, loc_151E0
                ld      0x0(g8), r15
                bbs     5, r15, loc_151E0
                ld      0x0(g8), r15
                bbs     0x1D, r15, loc_151E0
                ld      0x1A4(g8), r15
                bbs     0xE, r15, loc_151E0
                ld      mod_fa_coli, r3
                ld      0x164(r3), r14
                cmpobe  0, r14, loc_151E0
                ldob    0x820(g7), r11
                ld      dword_CE020[r11*4], r11
loc_1515C:                              # CODE XREF: ACT_RC_KAWASHI+244↓j
                scanbit r11, r10
                bbs     0x1F, r10, loc_151E0
                clrbit  r10, r11, r11
                ldob    4(g7), r15
                cmpobe  1, r15, loc_15180
                ld      0x90F600[r10*4], r13
                cmpobe  0, r13, loc_1515C
                b       loc_1519C
# ---------------------------------------------------------------------------
loc_15180:                              # CODE XREF: ACT_RC_KAWASHI+238↑j
                mov     0xF, r4
loc_15184:                              # CODE XREF: ACT_RC_KAWASHI+260↓j
                ld      0x90F600[r4*4], r5
                bbs     r10, r5, loc_1519C
                cmpdeci 1, r4, r4
                ble     loc_15184
                b       loc_1515C
# ---------------------------------------------------------------------------
loc_1519C:                              # CODE XREF: ACT_RC_KAWASHI+248↑j
                addo    0x1F, 0xA, r13
                ldob    0x19F(g8), r14
                cmpobne r13, r14, loc_151BC
                ldos    game_timer, r12
                and     1, r12, r12
                ldob    4(g7), r13
                cmpobne r13, r12, loc_151E0
loc_151BC:                              # CODE XREF: ACT_RC_KAWASHI+270↑j
                ld      0xC64(g7), r3
                cmpobe  0, r3, loc_151E0
                mov     0, r15
                st      r15, 0xC64(g7)
                lda     0xC004000, r13
                addi    r13, r3, r15
                st      r15, 0x194(g7)
                b       loc_1520C
# ---------------------------------------------------------------------------
loc_151E0:                              # CODE XREF: ACT_RC_KAWASHI+1D0↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_1520C
                ld      0x0(g7), r14
                clrbit  4, r14, r15
                st      r15, 0x0(g7)
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
loc_1520C:                              # CODE XREF: ACT_RC_KAWASHI+2A8↑j
                ret
# ---------------------------------------------------------------------------
ACT_RC_NAGE:                            # DATA XREF: ROM:0001D0B0↓o
                ldob    0x1B2(g7), r3   # Label from official source
                cmpibe  0, r3, loc_15220
                cmpibe  1, r3, loc_15254
                cmpibe  2, r3, loc_152C0
loc_15220:                              # CODE XREF: ACT_RC_KAWASHI+2E0↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                ldos    0x19C(g7), g0
                call    set_motion
loc_15234:                              # CODE XREF: ACT_RC_KAWASHI+B4↑j
                mov     0, r3
                st      r3, 0x2C(g7)
                st      r3, 0x30(g7)
                st      r3, 0x34(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15254:                              # CODE XREF: ACT_RC_KAWASHI+2E4↑j
                ld      0x1A4(g7), r15
                bbc     1, r15, loc_152A0
                ld      0x18(g7), r5
                ld      0x20(g7), r6
                ld      0x18(g8), r14
                subr    r5, r14, r3
                ld      0x20(g8), r14
                subr    r6, r14, r4
                lda     0x3F000000, r13
                mulr    r13, r3, r3
                lda     0x3F000000, r13
                mulr    r13, r4, r4
                addr    r5, r3, r15
                st      r15, 0x18(g7)
                addr    r6, r4, r15
                st      r15, 0x20(g7)
                ret
# ---------------------------------------------------------------------------
loc_152A0:                              # CODE XREF: ACT_RC_KAWASHI+324↑j
                ldt     0x18(g8), r4
                stt     r4, 0x18(g7)
                ldis    0x26(g8), r15
                stis    r15, 0x26(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_152C0:                              # CODE XREF: ACT_RC_KAWASHI+2E8↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_152F0
                ldob    0x814(g7), r14
                cmpobe  4, r14, loc_152E0
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_152E0:                              # CODE XREF: ACT_RC_KAWASHI+39C↑j
                mov     2, r15
                stis    r15, 0x5DE(g7)
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_152F0:                              # CODE XREF: ACT_RC_KAWASHI+394↑j
                ret
# End of function ACT_RC_KAWASHI
# =============== S U B R O U T I N E =======================================
ACT_RC_NAGERARE:                        # CODE XREF: j_ACT_RC_NAGERARE↓j
                ldob    0x1B2(g7), r3   # Label from official source
                cmpibe  0, r3, loc_15308
                cmpibe  1, r3, loc_1533C
                cmpibe  2, r3, loc_1536C
                cmpibe  3, r3, loc_1543C
loc_15308:                              # CODE XREF: ACT_RC_NAGERARE+4↑j
                ldos    0x19C(g7), g0
                call    comp_set_motion
                ld      0x0(g7), r15
                setbit  4, r15, r15
                st      r15, 0x0(g7)
loc_1531C:                              # CODE XREF: ROM:00016158↓j
                mov     0, r3
                st      r3, 0x2C(g7)
                st      r3, 0x30(g7)
                st      r3, 0x34(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_1533C:                              # CODE XREF: ACT_RC_NAGERARE+8↑j
                ldos    0x1AA(g7), r13
                ldos    0x872(g7), r14
                cmpobge r13, r14, loc_15354
                ld      0x1A4(g8), r15
                bbs     0x12, r15, loc_15484
                b       loc_15484
# ---------------------------------------------------------------------------
loc_15354:                              # CODE XREF: ACT_RC_NAGERARE+50↑j
                ld      0x0(g7), r15
                clrbit  3, r15, r15
                st      r15, 0x0(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_1536C:                              # CODE XREF: ACT_RC_NAGERARE+C↑j
                ld      0x0(g7), r15
                bbc     2, r15, loc_15380
                ldis    0x872(g7), r15
                stis    r15, 0x1AA(g7)
                ret
# ---------------------------------------------------------------------------
loc_15380:                              # CODE XREF: ACT_RC_NAGERARE+7C↑j
                ld      0x1A4(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x1A4(g7)
                ldob    0x822(g7), g0
                mov     g0, r4
                ldob    0xA28(g7), r5
                bbc     0, r5, loc_153A4
                ldos    0x5DE(g7), r3
                addo    r3, r4, r4
loc_153A4:                              # CODE XREF: ACT_RC_NAGERARE+A4↑j
                stos    r4, 0x5DE(g7)
                cmpobne 0, g0, loc_153BC
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_153BC:                              # CODE XREF: ACT_RC_NAGERARE+B4↑j
                call    damage_calculation # g7 = damage reciever
                ld      fa_camera, r3
                lda     0x3E19999A, r15
                st      r15, 0xFC(r3)
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_15430
                ldos    0x1AC(g7), r14
                cmpobne 0, r14, loc_15418
                mov     3, r3
                mov     r3, g0
                call    search_shift_data_adr
                cmpobe  0, g0, loc_15408
                stob    r3, 0x60C(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15408:                              # CODE XREF: ACT_RC_NAGERARE+FC↑j
                lda     0x80000E1, r15
                st      r15, 0x198(g7)
                ret
# ---------------------------------------------------------------------------
loc_15418:                              # CODE XREF: ACT_RC_NAGERARE+EC↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_15430:                              # CODE XREF: ACT_RC_NAGERARE+E4↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_1543C:                              # CODE XREF: ACT_RC_NAGERARE+10↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_15484
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_1547C
                ldos    0x802(g7), r14
                cmpobne 0, r14, loc_15464
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
loc_15464:                              # CODE XREF: ACT_RC_NAGERARE+160↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_1547C:                              # CODE XREF: ACT_RC_NAGERARE+158↑j
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_15484:                              # CODE XREF: ACT_RC_NAGERARE+58↑j
                ret
# End of function ACT_RC_NAGERARE
# =============== S U B R O U T I N E =======================================
ACT_RC_KABE_NAGE:                       # DATA XREF: ROM:0001D170↓o
                ldob    0x1B2(g7), r3   # Label from official source
                cmpibe  0, r3, loc_15498
                cmpibe  1, r3, loc_154CC
                cmpibe  2, r3, loc_15540
loc_15498:                              # CODE XREF: ACT_RC_KABE_NAGE+4↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                ldos    0x19C(g7), g0
                call    set_motion
                mov     0, r3
                st      r3, 0x2C(g7)
                st      r3, 0x30(g7)
                st      r3, 0x34(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_154CC:                              # CODE XREF: ACT_RC_KABE_NAGE+8↑j
                ld      0x1A4(g7), r15
                bbc     1, r15, loc_15518
                ld      0x18(g7), r5
                ld      0x20(g7), r6
                ld      0x18(g8), r14
                subr    r5, r14, r3
                ld      0x20(g8), r14
                subr    r6, r14, r4
                lda     0x3F000000, r13
                mulr    r13, r3, r3
                lda     0x3F000000, r13
                mulr    r13, r4, r4
                addr    r5, r3, r15
                st      r15, 0x18(g7)
                addr    r6, r4, r15
                st      r15, 0x20(g7)
                ret
# ---------------------------------------------------------------------------
loc_15518:                              # CODE XREF: ACT_RC_KABE_NAGE+48↑j
                ld      0x18(g8), r4
                ld      0x20(g8), r6
                st      r4, 0x18(g7)
                st      r6, 0x20(g7)
                ldis    0x26(g8), r15
                stis    r15, 0x26(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15540:                              # CODE XREF: ACT_RC_KABE_NAGE+C↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobge r13, r14, loc_155E0
                ldos    0x1A8(g7), g0
                mov     5, g1
                call    calc_mht_adr
                ldob    0xC(g0), r10
                ldob    0xD(g0), r15
                shlo    8, r15, r15
                addo    r15, r10, r10
                ldob    0xA(g0), r11
                ldob    0xB(g0), r15
                shlo    8, r15, r15
                addo    r15, r11, r11
                ldos    0x1AA(g7), r13
                cmpobge r13, r10, loc_15604
                ldos    0x1AA(g7), r13
                cmpobl  r13, r11, loc_15604
                subo    r11, r10, r10
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r10
                ldl     0x754(g7), r4
                divr    r10, r4, r4
                divr    r10, r5, r5
                ld      0x18(g7), r14
                addr    r4, r14, r15
                st      r15, 0x18(g7)
                ld      0x20(g7), r14
                addr    r5, r14, r15
                st      r15, 0x20(g7)
                ld      0x18(g8), r14
                addr    r4, r14, r15
                st      r15, 0x18(g8)
                ld      0x20(g8), r14
                addr    r5, r14, r15
                st      r15, 0x20(g8)
                b       loc_15604
# ---------------------------------------------------------------------------
loc_155E0:                              # CODE XREF: ACT_RC_KABE_NAGE+C0↑j
                ldob    0x814(g7), r14
                cmpobe  4, r14, loc_155F4
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_155F4:                              # CODE XREF: ACT_RC_KABE_NAGE+15C↑j
                mov     2, r15
                stis    r15, 0x5DE(g7)
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_15604:                              # CODE XREF: ACT_RC_KABE_NAGE+F4↑j
                ret
# End of function ACT_RC_KABE_NAGE
# =============== S U B R O U T I N E =======================================
# Attributes: thunk
j_ACT_RC_NAGERARE:                      # DATA XREF: ROM:0001D178↓o
                b       ACT_RC_NAGERARE
# End of function j_ACT_RC_NAGERARE
# ---------------------------------------------------------------------------
loc_1560C:                              # DATA XREF: ROM:0001D140↓o
                ldob    0x1B2(g7), r3
                cmpibe  0, r3, loc_15620
                cmpibe  1, r3, loc_1565C
                cmpibe  2, r3, loc_15694
                cmpibe  3, r3, loc_156B8
loc_15620:                              # CODE XREF: ROM:00015610↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                ldos    0x19C(g7), g0
                call    set_motion
                ld      0x0(g7), r15
                bbs     3, r15, loc_1564C
                mov     0, r3
                st      r3, 0x2C(g7)
                st      r3, 0x30(g7)
                st      r3, 0x34(g7)
loc_1564C:                              # CODE XREF: ROM:00015638↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_1565C:                              # CODE XREF: ROM:00015614↑j
                ld      0x0(g7), r15
                bbs     2, r15, loc_156E8
                ld      0x1A4(g7), r15
                clrbit  0xC, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x1A4(g7), r15
                clrbit  1, r15, r15
                st      r15, 0x1A4(g7)
                ldis    0x818(g7), r15
                stis    r15, 0x1AA(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                b       loc_156E8
# ---------------------------------------------------------------------------
loc_15694:                              # CODE XREF: ROM:00015618↑j
                ld      0x0(g7), r8
                ld      0x0(g8), r9
                or      r8, r9, r10
                bbs     2, r10, loc_156E8
                ldis    0x1AA(g8), r15
                stis    r15, 0x1AA(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_156B8:                              # CODE XREF: ROM:0001561C↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_156E8
                ldob    0x814(g7), r14
                cmpobe  4, r14, loc_156D8
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_156D8:                              # CODE XREF: ROM:000156C8↑j
                mov     2, r15
                stis    r15, 0x5DE(g7)
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_156E8:                              # CODE XREF: ROM:00015660↑j
                ret
# ---------------------------------------------------------------------------
loc_156EC:                              # DATA XREF: ROM:0001D148↓o
                ldob    0x1B2(g7), r3
                cmpibe  0, r3, loc_156FC
                cmpibe  1, r3, loc_15720
                cmpibe  2, r3, loc_15998
loc_156FC:                              # CODE XREF: ROM:000156F0↑j
                ldos    0x19C(g7), g0
                call    comp_set_motion
                ld      0x0(g7), r15
                setbit  4, r15, r15
                st      r15, 0x0(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15720:                              # CODE XREF: ROM:000156F4↑j
                ld      0x80(g8), r6
                ld      0x88(g8), r7
                ldos    0x1A8(g7), g0
                mov     0x18, g1
                call    calc_mht_adr
                cmpobe  0, g0, loc_15748
                ld      1(g0), r8
                ld      9(g0), r9
                addr    r8, r6, r6
                addr    r9, r7, r7
loc_15748:                              # CODE XREF: ROM:00015734↑j
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g8), r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                ld      (g11)[g12*1], r4
                ld      0x18(g8), r14
                subr    r3, r14, r3
                ld      0x20(g8), r14
                subr    r4, r14, r4
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x80(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x88(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                ld      (g11)[g12*1], r9
                ld      0x18(g7), r14
                subr    r8, r14, r8
                ld      0x20(g7), r14
                subr    r9, r14, r9
                subr    r8, r3, r3
                subr    r9, r4, r4
                ld      0x84(g8), r13
                ld      0x84(g7), r14
                subr    r13, r14, r5
                ld      0x0(g7), r8
                ld      0x0(g8), r9
                or      r8, r9, r10
                and     r8, r9, r11
                ld      0x1A4(g7), r15
                bbc     1, r15, loc_1582C
                lda     0x3F19999A, r13
                mulr    r13, r3, r3
                lda     0x3F19999A, r13
                mulr    r13, r4, r4
                lda     0x3F19999A, r13
                mulr    r13, r5, r5
                bbs     2, r8, loc_15850
                ldis    0x818(g7), r15
                stis    r15, 0x1AA(g7)
                ld      0x1A4(g7), r15
                clrbit  0xC, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x1A4(g7), r15
                clrbit  1, r15, r15
                st      r15, 0x1A4(g7)
loc_1582C:                              # CODE XREF: ROM:000157E0↑j
                bbc     2, r10, loc_158B0
                bbs     2, r11, loc_15850
                bbs     2, r8, loc_159AC
                ldis    0x818(g7), r15
                stis    r15, 0x1AA(g7)
                ld      0x1A4(g7), r15
                clrbit  0xC, r15, r15
                st      r15, 0x1A4(g7)
                b       loc_158C0
# ---------------------------------------------------------------------------
loc_15850:                              # CODE XREF: ROM:00015808↑j
                ld      0x0(g8), r15
                bbc     2, r15, loc_15870
                ld      0x2C(g8), r15
                st      r15, 0x2C(g7)
                ld      0x30(g8), r15
                st      r15, 0x30(g7)
                ld      0x34(g8), r15
                st      r15, 0x34(g7)
loc_15870:                              # CODE XREF: ROM:00015854↑j
                ld      0x18(g7), r14
                addr    r3, r14, r15
                st      r15, 0x18(g7)
                ld      0x20(g7), r14
                addr    r4, r14, r15
                st      r15, 0x20(g7)
                ld      0x1C(g8), r14
                addr    r5, r14, r15
                st      r15, 0x1C(g7)
                ldob    4(g7), r14
                cmpobe  0, r14, loc_159AC
                ld      0x30(g7), r13
                ld      0x1C(g7), r14
                subr    r13, r14, r15
                st      r15, 0x1C(g7)
                ret
# ---------------------------------------------------------------------------
loc_158B0:                              # CODE XREF: ROM:loc_1582C↑j
                ldt     0x18(g8), r4
                stt     r4, 0x18(g7)
                ldis    0x26(g8), r15
                stis    r15, 0x26(g7)
loc_158C0:                              # CODE XREF: ROM:0001584C↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                mov     0, r4
                st      r4, 0x2C(g7)
                st      r4, 0x34(g7)
                mov     0, r4
                st      r4, 0x2C(g8)
                st      r4, 0x34(g8)
                ldob    0x822(g7), g0
                mov     g0, r4
                ldob    0xA28(g7), r5
                bbc     0, r5, loc_158FC
                ldos    0x5DE(g7), r3
                addo    r3, r4, r4
loc_158FC:                              # CODE XREF: ROM:000158F0↑j
                stos    r4, 0x5DE(g7)
                cmpobne 0, g0, loc_15924
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_15928
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_15924:                              # CODE XREF: ROM:00015900↑j
                call    damage_calculation # g7 = damage reciever
loc_15928:                              # CODE XREF: ROM:00015908↑j
                ld      fa_camera, r3
                lda     0x3E19999A, r15
                st      r15, 0xFC(r3)
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_15998
                ldos    0x1AC(g7), r14
                cmpobne 0, r14, loc_15980
                mov     3, r3
                mov     r3, g0
                call    search_shift_data_adr
                cmpobe  0, g0, loc_15970
                stob    r3, 0x60C(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15970:                              # CODE XREF: ROM:00015958↑j
                lda     0x80000E1, r15
                st      r15, 0x198(g7)
                ret
# ---------------------------------------------------------------------------
loc_15980:                              # CODE XREF: ROM:00015948↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_15998:                              # CODE XREF: ROM:000156F8↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_159AC
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_159AC:                              # CODE XREF: ROM:00015834↑j
                ret
# ---------------------------------------------------------------------------
loc_159B0:                              # DATA XREF: ROM:0001D188↓o
                ld      0x1A4(g7), r15
                bbs     1, r15, loc_15A48
                ld      0x1A4(g7), r15
                bbc     8, r15, loc_15A48
                ld      0x0(g7), r15
                bbc     2, r15, loc_15A10
                ld      0x0(g8), r15
                bbs     2, r15, loc_15A48
                ld      0x720(g7), r15
                bbc     0x12, r15, loc_15A48
                ld      mod_fa_coli, r3
                ld      0x164(r3), r14
                cmpobe  0, r14, loc_15A48
                ldos    0x1A8(g7), g0
                mov     0x16, g1
                call    calc_mht_adr
                cmpobe  0, g0, loc_15A48
                ld      1(g0), r3
                lda     0x20004000, r13
                addi    r13, r3, r15
                st      r15, 0x194(g7)
                b       loc_15A48
# ---------------------------------------------------------------------------
loc_15A10:                              # CODE XREF: ROM:000159C4↑j
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_15A3C
                mov     1, g0
                call    stage_contact_sound
                mov     0, r3
                st      r3, 0x2C(g7)
                st      r3, 0x30(g7)
                st      r3, 0x34(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                b       loc_15A48
# ---------------------------------------------------------------------------
loc_15A3C:                              # CODE XREF: ROM:00015A14↑j
                mov     8, r15
                stib    r15, 0x19F(g7)
                b       loc_14CC0
# ---------------------------------------------------------------------------
loc_15A48:                              # CODE XREF: ROM:000159B4↑j
                ret
# ---------------------------------------------------------------------------
loc_15A4C:                              # DATA XREF: ROM:0001D150↓o
                ldob    0x1B2(g7), r3
                cmpibe  0, r3, loc_15A5C
                cmpibe  1, r3, loc_15A88
                cmpibe  2, r3, loc_15C14
loc_15A5C:                              # CODE XREF: ROM:00015A50↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                ldos    0x19C(g7), g0
                call    set_motion
                movt    0, r4
                stt     r4, 0x2C(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15A88:                              # CODE XREF: ROM:00015A54↑j
                ld      0x0(g7), r15
                bbs     2, r15, loc_15B30
                ld      0x1A4(g7), r15
                bbc     1, r15, loc_15B10
                ld      0x18(g7), r5
                ld      0x20(g7), r6
                ld      0x18(g8), r14
                subr    r5, r14, r3
                ld      0x20(g8), r14
                subr    r6, r14, r4
                ldos    0x80A(g7), r10
                ldos    0x1AA(g7), r11
                cmpobe  r11, r10, loc_15B10
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r10
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                subr    r11, r10, r10
                divr    r10, r3, r3
                divr    r10, r4, r4
                addr    r5, r3, r15
                st      r15, 0x18(g7)
                addr    r6, r4, r15
                st      r15, 0x20(g7)
                ld      0x1A4(g7), r15
                clrbit  0xC, r15, r15
                st      r15, 0x1A4(g7)
                b       loc_15C44
# ---------------------------------------------------------------------------
loc_15B10:                              # CODE XREF: ROM:00015A94↑j
                ldt     0x18(g8), r4
                stt     r4, 0x18(g7)
                ldis    0x26(g8), r15
                stis    r15, 0x26(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15B30:                              # CODE XREF: ROM:00015A8C↑j
                ld      0x1A4(g7), r15
                bbs     1, r15, loc_15B48
                call    sub_1980C
                movt    0, r4
                stt     r4, 0x2C(g7)
                b       loc_15B10
# ---------------------------------------------------------------------------
loc_15B48:                              # CODE XREF: ROM:00015B34↑j
                ld      0x18(g8), r3
                ld      0x20(g8), r4
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x80(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x88(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                ld      (g11)[g12*1], r9
                ld      0x18(g7), r14
                subr    r8, r14, r8
                ld      0x20(g7), r14
                subr    r9, r14, r9
                subr    r8, r3, r3
                subr    r9, r4, r4
                ld      0x84(g7), r13
                ld      0x1C(g7), r14
                subr    r13, r14, r5
                ldos    0x808(g7), r10
                ldos    0x1AA(g7), r11
                cmpobge r11, r10, loc_15BE4
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r10
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                subr    r11, r10, r10
                divr    r10, r3, r3
                divr    r10, r4, r4
                divr    r10, r5, r5
loc_15BE4:                              # CODE XREF: ROM:00015BA8↑j
                ld      0x18(g7), r14
                addr    r3, r14, r15
                st      r15, 0x18(g7)
                ld      0x20(g7), r14
                addr    r4, r14, r15
                st      r15, 0x20(g7)
                ld      0x84(g7), r8
                ld      0x1C(g7), r9
                cmpr    r8, r9
                bl      loc_15C44
                st      r8, 0x1C(g7)
                b       loc_15C44
# ---------------------------------------------------------------------------
loc_15C14:                              # CODE XREF: ROM:00015A58↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_15C44
                ldob    0x814(g7), r14
                cmpobe  4, r14, loc_15C34
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_15C34:                              # CODE XREF: ROM:00015C24↑j
                mov     2, r15
                stis    r15, 0x5DE(g7)
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_15C44:                              # CODE XREF: ROM:00015B0C↑j
                ret
# ---------------------------------------------------------------------------
loc_15C48:                              # DATA XREF: ROM:0001D158↓o
                ldob    0x1B2(g7), r3
                cmpibe  0, r3, loc_15C5C
                cmpibe  1, r3, loc_15C98
                cmpibe  2, r3, loc_15D04
                cmpibe  3, r3, loc_15DE4
loc_15C5C:                              # CODE XREF: ROM:00015C4C↑j
                ldos    0x19C(g7), g0
                shlo    0xE, 1, r13
                addi    r13, g0, g0
                call    comp_set_motion
                ld      0x0(g7), r15
                setbit  4, r15, r15
                st      r15, 0x0(g7)
                mov     0, r3
                st      r3, 0x2C(g7)
                st      r3, 0x30(g7)
                st      r3, 0x34(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15C98:                              # CODE XREF: ROM:00015C50↑j
                ldos    0x1AA(g7), r13
                ldos    0x872(g7), r14
                cmpobge r13, r14, loc_15CEC
                ld      0x1A4(g8), r15
                bbs     0x12, r15, loc_15DF8
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                shlo    0x18, 1, r15
                st      r15, 0x198(g7)
                ld      0x1A4(g7), r15
                clrbit  6, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x804(g7), r15
                bbc     0x14, r15, loc_15DF8
                ld      0x1A4(g7), r15
                setbit  6, r15, r15
                st      r15, 0x1A4(g7)
                shlo    0xF, 1, r15
                stis    r15, 0x812(g7)
                b       loc_15DF8
# ---------------------------------------------------------------------------
loc_15CEC:                              # CODE XREF: ROM:00015CA0↑j
                ld      0x0(g7), r15
                clrbit  3, r15, r15
                st      r15, 0x0(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_15D04:                              # CODE XREF: ROM:00015C54↑j
                ld      0x0(g7), r15
                bbc     2, r15, loc_15D18
                ldis    0x872(g7), r15
                stis    r15, 0x1AA(g7)
                ret
# ---------------------------------------------------------------------------
loc_15D18:                              # CODE XREF: ROM:00015D08↑j
                ld      0x1A4(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x1A4(g7)
                ldob    0x822(g7), g0
                mov     g0, r4
                ldob    0xA28(g7), r5
                bbc     0, r5, loc_15D3C
                ldos    0x5DE(g7), r3
                addo    r3, r4, r4
loc_15D3C:                              # CODE XREF: ROM:00015D30↑j
                stos    r4, 0x5DE(g7)
                cmpobne 0, g0, loc_15D64
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_15D68
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_15D64:                              # CODE XREF: ROM:00015D40↑j
                call    damage_calculation # g7 = damage reciever
loc_15D68:                              # CODE XREF: ROM:00015D48↑j
                ld      fa_camera, r3
                lda     0x3E19999A, r15
                st      r15, 0xFC(r3)
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_15DD8
                ldos    0x1AC(g7), r14
                cmpobne 0, r14, loc_15DC0
                mov     3, r3
                mov     r3, g0
                call    search_shift_data_adr
                cmpobe  0, g0, loc_15DB0
                stob    r3, 0x60C(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15DB0:                              # CODE XREF: ROM:00015D98↑j
                lda     0x80000E1, r15
                st      r15, 0x198(g7)
                ret
# ---------------------------------------------------------------------------
loc_15DC0:                              # CODE XREF: ROM:00015D88↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_15DD8:                              # CODE XREF: ROM:00015D80↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_15DE4:                              # CODE XREF: ROM:00015C58↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_15DF8
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_15DF8:                              # CODE XREF: ROM:00015CA8↑j
                ret
# ---------------------------------------------------------------------------
loc_15DFC:                              # DATA XREF: ROM:0001D160↓o
                ldob    0x1B2(g7), r3
                cmpibe  0, r3, loc_15E10
                cmpibe  1, r3, loc_15E44
                cmpibe  2, r3, loc_15E6C
                cmpibe  3, r3, loc_15EB4
loc_15E10:                              # CODE XREF: ROM:00015E00↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                ldos    0x19C(g7), g0
                call    set_motion
                mov     0, r15
                st      r15, 0x2C(g7)
                mov     0, r15
                st      r15, 0x34(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15E44:                              # CODE XREF: ROM:00015E04↑j
                ld      0x1A4(g7), r15
                bbs     1, r15, loc_15EE4
                ld      0xA10(g7), r15
                st      r15, 0x2C(g7)
                ld      0xA18(g7), r15
                st      r15, 0x34(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15E6C:                              # CODE XREF: ROM:00015E08↑j
                lda     0x3F733333, r13
                ld      0x2C(g7), r14
                mulr    r13, r14, r15
                st      r15, 0x2C(g7)
                lda     0x3F733333, r13
                ld      0x34(g7), r14
                mulr    r13, r14, r15
                st      r15, 0x34(g7)
                ldos    0x1AA(g7), r13
                ldos    0x80A(g7), r14
                cmpobg  r13, r14, loc_15EA4
                ret
# ---------------------------------------------------------------------------
loc_15EA4:                              # CODE XREF: ROM:00015E9C↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15EB4:                              # CODE XREF: ROM:00015E0C↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_15EE4
                ldob    0x814(g7), r14
                cmpobe  4, r14, loc_15ED4
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_15ED4:                              # CODE XREF: ROM:00015EC4↑j
                mov     2, r15
                stis    r15, 0x5DE(g7)
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_15EE4:                              # CODE XREF: ROM:00015E48↑j
                ret
# ---------------------------------------------------------------------------
loc_15EE8:                              # DATA XREF: ROM:0001D168↓o
                ldob    0x1B2(g7), r3
                cmpibe  0, r3, loc_15EFC
                cmpibe  1, r3, loc_15F20
                cmpibe  2, r3, loc_16040
                cmpibe  3, r3, loc_16108
loc_15EFC:                              # CODE XREF: ROM:00015EEC↑j
                ldos    0x19C(g7), g0
                call    comp_set_motion
                ld      0x0(g7), r15
                setbit  4, r15, r15
                st      r15, 0x0(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_15F20:                              # CODE XREF: ROM:00015EF0↑j
                ld      0x0(g7), r15
                bbs     2, r15, loc_15F58
                ldos    0x1AA(g7), r13
                ldos    0x872(g7), r14
                cmpobge r13, r14, loc_15F38
                b       loc_1611C
# ---------------------------------------------------------------------------
loc_15F38:                              # CODE XREF: ROM:00015F30↑j
                ldt     0x18(g7), r4
                stt     r4, 0x18(g8)
                ldis    0x26(g7), r15
                stis    r15, 0x26(g8)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                b       loc_16040
# ---------------------------------------------------------------------------
loc_15F58:                              # CODE XREF: ROM:00015F24↑j
                ld      0x1A4(g7), r15
                bbs     1, r15, loc_15F70
                mov     0, r15
                st      r15, 0x2C(g7)
                mov     0, r15
                st      r15, 0x2C(g7)
loc_15F70:                              # CODE XREF: ROM:00015F5C↑j
                ld      0x18(g8), r3
                ld      0x20(g8), r4
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x80(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x88(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                ld      (g11)[g12*1], r9
                ld      0x18(g7), r14
                subr    r8, r14, r8
                ld      0x20(g7), r14
                subr    r9, r14, r9
                subr    r8, r3, r3
                subr    r9, r4, r4
                lda     0x3F19999A, r13
                mulr    r13, r3, r3
                lda     0x3F19999A, r13
                mulr    r13, r4, r4
                ld      0x18(g7), r14
                addr    r3, r14, r15
                st      r15, 0x18(g7)
                ld      0x20(g7), r14
                addr    r4, r14, r15
                st      r15, 0x20(g7)
                ld      0x1A4(g7), r15
                bbs     1, r15, loc_16008
                ld      0x30(g7), r13
                ld      0x84(g7), r14
                subr    r13, r14, r15
                st      r15, 0x1C(g7)
                b       loc_1611C
# ---------------------------------------------------------------------------
loc_16008:                              # CODE XREF: ROM:00015FF0↑j
                ld      0x84(g7), r13
                ld      0x1C(g7), r14
                subr    r13, r14, r5
                lda     0x3F19999A, r13
                mulr    r13, r5, r5
                ld      0x1C(g7), r14
                subr    r5, r14, r15
                st      r15, 0x1C(g7)
                ld      0x30(g7), r13
                ld      0x1C(g7), r14
                subr    r13, r14, r15
                st      r15, 0x1C(g7)
                b       loc_1611C
# ---------------------------------------------------------------------------
loc_16040:                              # CODE XREF: ROM:00015EF4↑j
                ldis    0x872(g7), r15
                stis    r15, 0x1AA(g7)
                ldob    0x822(g7), g0
                mov     g0, r4
                ldob    0xA28(g7), r5
                bbc     0, r5, loc_16060
                ldos    0x5DE(g7), r3
                addo    r3, r4, r4
loc_16060:                              # CODE XREF: ROM:00016054↑j
                stos    r4, 0x5DE(g7)
                cmpobne 0, g0, loc_16088
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_1608C
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_16088:                              # CODE XREF: ROM:00016064↑j
                call    damage_calculation # g7 = damage reciever
loc_1608C:                              # CODE XREF: ROM:0001606C↑j
                ld      fa_camera, r3
                lda     0x3E19999A, r15
                st      r15, 0xFC(r3)
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_160FC
                ldos    0x1AC(g7), r14
                cmpobne 0, r14, loc_160E4
                mov     3, r3
                mov     r3, g0
                call    search_shift_data_adr
                cmpobe  0, g0, loc_160D4
                stob    r3, 0x60C(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
loc_160D4:                              # CODE XREF: ROM:000160BC↑j
                lda     0x80000E1, r15
                st      r15, 0x198(g7)
                ret
# ---------------------------------------------------------------------------
loc_160E4:                              # CODE XREF: ROM:000160AC↑j
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_160FC:                              # CODE XREF: ROM:000160A4↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_16108:                              # CODE XREF: ROM:00015EF8↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_1611C
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_1611C:                              # CODE XREF: ROM:00015F34↑j
                ret
# ---------------------------------------------------------------------------
loc_16120:                              # DATA XREF: ROM:0001D0E8↓o
                ld      0x1A4(g7), r15
                clrbit  8, r15, r15
                st      r15, 0x1A4(g7)
                ldos    0x1AA(g7), r13
                ldos    0x808(g7), r14
                cmpobl  r13, r14, loc_16164
                ld      0x5F4(g7), r13
                ld      0x824(g7), r14
                cmpibg  r13, r14, loc_1615C
                ldos    0x19C(g7), g0
                shlo    0x18, 0xD, r13
                addi    r13, g0, r15
                st      r15, 0x19C(g7)
                call    set_motion
                b       loc_1531C
# ---------------------------------------------------------------------------
loc_1615C:                              # CODE XREF: ROM:00016140↑j
                mov     0, r15
                st      r15, 0x19C(g7)
loc_16164:                              # CODE XREF: ROM:00016134↑j
                ret
# ---------------------------------------------------------------------------
ACT_RC_KABEHIT:                         # DATA XREF: ROM:0001D128↓o
                ldob    0x1B2(g7), r3   # Label from Fighting Vipers source
                cmpibe  0, r3, arkh_0
                cmpibe  1, r3, arkh_1
                cmpibe  2, r3, loc_16344
                cmpibe  3, r3, loc_16368
arkh_0:                                 # CODE XREF: ROM:0001616C↑j
                ldos    0x19C(g7), g0   # Label from Fighting Vipers source
                call    comp_set_motion
                ld      0x0(g7), r15
                setbit  4, r15, r15
                st      r15, 0x0(g7)
                ldob    0x7D2(g8), r14
                bbc     0, r14, loc_161DC
                xor     r3, r3, r3
                st      r3, 0x2C(g7)
                st      r3, 0x34(g7)
                lda     0x3D4CCCCD, r3
                st      r3, 0x30(g7)
                ldob    0x7D2(g8), r14
                bbs     1, r14, loc_1622C
                ldob    0x7D2(g8), r14
                bbs     3, r14, loc_1622C
                ldob    0x7D2(g8), r14
                clrbit  2, r14, r15
                stob    r15, 0x7D2(g8)
                ldob    0x7D2(g8), r14
                setbit  3, r14, r15
                stob    r15, 0x7D2(g8)
                b       loc_1622C
# ---------------------------------------------------------------------------
loc_161DC:                              # CODE XREF: ROM:00016194↑j
                ld      0x2C(g7), r3
                lda     0x3E800000, r13
                mulr    r13, r3, r3
                notbit  0x1F, r3, r3
                st      r3, 0x2C(g7)
                ld      0x34(g7), r3
                lda     0x3E800000, r13
                mulr    r13, r3, r3
                notbit  0x1F, r3, r3
                st      r3, 0x34(g7)
                lda     0x3F000000, r15
                st      r15, 0x30(g7)
                ldob    0x6F5(g7), r3
                cmpobge 0, r3, loc_1622C
                lda     0x3DCCCCCD, r15
                st      r15, 0x30(g7)
loc_1622C:                              # CODE XREF: ROM:000161B4↑j
                call    fix_hara
                ld      fa_camera, r3
                lda     0x3E19999A, r15
                st      r15, 0xFC(r3)
                ldt     0x1A00(g7), r4
                stt     r4, 0x1A0C(g7)
                lda     0x42700000, r7
                lda     0xC1A00000, r10
                lda     0x41A00000, r11
                ld      0x5D8(g7), r8
                subr    r7, r8, r9
                cmpr    r10, r9
                bl      loc_16284
                mov     r10, r9
                b       loc_16290
# ---------------------------------------------------------------------------
loc_16284:                              # CODE XREF: ROM:00016278↑j
                cmpr    r11, r9
                bg      loc_16290
                mov     r11, r9
loc_16290:                              # CODE XREF: ROM:00016280↑j
                divr    r7, r9, r7
                lda     0x41100000, r3
                mulr    r3, r7, r7
                lda     0xC001818, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                mov     7, r8
                addo    r8, r7, r7
                and     0xF, r7, r7
                stos    r7, 0xA0E(g7)
                ldob    0x7D2(g8), r14
                bbc     0, r14, loc_162D4
                mov     0x1E, r15
                stis    r15, 0xA0E(g7)
loc_162D4:                              # CODE XREF: ROM:000162C8↑j
                ld      0x2C(g7), r15
                st      r15, 0xA10(g7)
                ld      0x30(g7), r15
                st      r15, 0xA14(g7)
                ld      0x34(g7), r15
                st      r15, 0xA18(g7)
                movt    0, r4
                stt     r4, 0x2C(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                ret
# ---------------------------------------------------------------------------
arkh_1:                                 # CODE XREF: ROM:00016170↑j
                ldt     0x1A0C(g7), r4  # Label from Fighting Vipers source
                stt     r4, 0x18(g7)
                ldos    0xA0E(g7), r14
                cmpobne 0, r14, loc_1639C
                ld      0xA10(g7), r15
                st      r15, 0x2C(g7)
                ld      0xA14(g7), r15
                st      r15, 0x30(g7)
                ld      0xA18(g7), r15
                st      r15, 0x34(g7)
                movt    0, r4
                stt     r4, 0xA10(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_16344:                              # CODE XREF: ROM:00016174↑j
                ldos    0x1AA(g7), r13
                ldos    0x818(g7), r14
                cmpobl  r13, r14, loc_1639C
                call    sub_32948
                mov     0, g0
                call    stage_contact_sound
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_16368:                              # CODE XREF: ROM:00016178↑j
                ldos    0x1AA(g7), r13
                ldos    0x80C(g7), r14
                cmpobl  r13, r14, loc_1639C
                ld      0x804(g7), r15
                bbs     0xE, r15, loc_16394
                shlo    0x18, 1, r15
                st      r15, 0x198(g7)
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                b       loc_1639C
# ---------------------------------------------------------------------------
loc_16394:                              # CODE XREF: ROM:00016378↑j
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
loc_1639C:                              # CODE XREF: ROM:00016314↑j
                ret
# ---------------------------------------------------------------------------
loc_163A0:                              # DATA XREF: ROM:0001D0D8↓o
                ldob    0x1B2(g7), r3
                cmpibe  0, r3, loc_163B0
                cmpibe  1, r3, loc_163DC
                cmpibe  2, r3, loc_164A0
loc_163B0:                              # CODE XREF: ROM:000163A4↑j
                ldos    0x19C(g7), g0
                call    set_motion
                ld      0x1F4(g8), r15
                st      r15, 0x600(g7)
                ld      0x1F8(g8), r15
                st      r15, 0x604(g7)
                ld      0x1FC(g8), r15
                st      r15, 0x608(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_163DC:                              # CODE XREF: ROM:000163A8↑j
                ldos    0x1AA(g7), r13
                ldos    0x81A(g7), r14
                cmpobl  r13, r14, loc_164D8
                ldis    0x5B6(g7), r7
                stis    r7, 0x61A(g7)
                ld      0x0(g7), r15
                setbit  9, r15, r15
                st      r15, 0x0(g7)
                ld      0x1F4(g7), r13
                ld      0x600(g7), r14
                subr    r13, r14, r4
                ld      0x1FC(g7), r13
                ld      0x608(g7), r14
                subr    r13, r14, r5
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                ld      0x824(g7), r6
                cmpible r3, r6, loc_16440
                divr    r3, r6, r6
                mulr    r6, r4, r4
                mulr    r6, r5, r5
loc_16440:                              # CODE XREF: ROM:00016430↑j
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      0x830(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x834(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], g0
                ld      (g11)[g12*1], g1
                subr    g0, r4, r4
                subr    g1, r5, r5
                ldos    0x808(g7), r3
                ldos    0x1AA(g7), r13
                subi    r13, r3, r3
                addo    1, r3, r3
                cvtir   r3, r3
                divr    r3, r4, r15
                st      r15, 0x638(g7)
                divr    r3, r5, r15
                st      r15, 0x63C(g7)
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_164A0:                              # CODE XREF: ROM:000163AC↑j
                ldos    0x1AA(g7), r13
                ldos    0x808(g7), r14
                cmpobg  r13, r14, loc_164D0
                ld      0x638(g7), r13
                ld      0x18(g7), r14
                addr    r13, r14, r15
                st      r15, 0x18(g7)
                ld      0x63C(g7), r13
                ld      0x20(g7), r14
                addr    r13, r14, r15
                st      r15, 0x20(g7)
                ret
# ---------------------------------------------------------------------------
loc_164D0:                              # CODE XREF: ROM:000164A8↑j
                mov     0, r15
                st      r15, 0x19C(g7)
loc_164D8:                              # CODE XREF: ROM:000163E4↑j
                ret
# ---------------------------------------------------------------------------
loc_164DC:                              # DATA XREF: ROM:0001D0F0↓o
                ld      0x1A4(g7), r15
                clrbit  8, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x1A4(g7), r15
                clrbit  1, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x1A4(g7), r15
                setbit  2, r15, r15
                st      r15, 0x1A4(g7)
                ldib    0x842(g7), r15
                ldis    0x1AA(g7), r3
                cmpi    0, r15
                be      loc_16520
                cmpi    r15, r3
                bge     loc_16540
                mov     0, r15
                stib    r15, 0x842(g7)
loc_16520:                              # CODE XREF: ROM:0001650C↑j
                subi    2, r3, r3
                stis    r3, 0x1AA(g7)
                cmpibg  2, r3, loc_16544
                ldib    0x841(g7), r13
                cmpibl  r13, r3, loc_16540
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
loc_16540:                              # CODE XREF: ROM:00016514↑j
                ret
# ---------------------------------------------------------------------------
loc_16544:                              # CODE XREF: ROM:00016528↑j
                mov     0, g0
                call    set_motion
                mov     0, r15
                st      r15, 0x19C(g7)
                ret
# ---------------------------------------------------------------------------
loc_16558:                              # DATA XREF: ROM:0001D118↓o
                ldob    0x1B2(g7), r3
                cmpibe  0, r3, loc_16564
                cmpibe  1, r3, loc_1657C
loc_16564:                              # CODE XREF: ROM:0001655C↑j
                ldos    (check_word3+2)(g6), g0
                call    set_motion
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_1657C:                              # CODE XREF: ROM:00016560↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_16590
                shlo    0x18, 3, r15
                st      r15, 0x19C(g7)
loc_16590:                              # CODE XREF: ROM:00016584↑j
                ret
# ---------------------------------------------------------------------------
loc_16594:                              # DATA XREF: ROM:0001D120↓o
                ldob    0x1B2(g7), r3
                cmpibe  0, r3, loc_165A0
                cmpibe  1, r3, loc_165B8
loc_165A0:                              # CODE XREF: ROM:00016598↑j
                ldos    (check_word4+2)(g6), g0
                call    set_motion
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_165B8:                              # CODE XREF: ROM:0001659C↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                cmpobl  r13, r14, loc_165CC
                shlo    0x1A, 1, r15
                st      r15, 0x19C(g7)
loc_165CC:                              # CODE XREF: ROM:000165C0↑j
                ret
# =============== S U B R O U T I N E =======================================
sub_165D0:                              # DATA XREF: ROM:0001D138↓o
                ret
# End of function sub_165D0
# =============== S U B R O U T I N E =======================================
sub_165D4:                              # DATA XREF: ROM:0001D1A0↓o
                ldob    0x1B2(g7), r3
                cmpibe  0, r3, loc_165E0
                cmpibe  2, r3, loc_16648
loc_165E0:                              # CODE XREF: sub_165D4+4↑j
                call    fix_hara
                ldis    0x800(g7), r15
                stis    r15, 0xA0E(g7)
                ldt     0x18(g7), r4
                stt     r4, 0xA38(g7)
                ld      cage_height, r15
                ld      0x81C(g7), r9
                addr    r15, r9, r9
                st      r9, 0xA30(g7)
                subr    r5, r9, r5
                ldos    0x80A(g7), r3
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                divr    r4, r5, r5
                st      r5, 0xA44(g7)
                ldob    0x1B2(g7), r14
                addi    2, r14, r15
                stob    r15, 0x1B2(g7)
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                b       loc_168D8
# ---------------------------------------------------------------------------
loc_16648:                              # CODE XREF: sub_165D4+8↑j
                ldos    0xA0E(g7), r8
                cmpobe  0, r8, loc_166BC
                ldt     0x80(g7), r4
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r6
                ld      0xA44(g7), r5
                ldos    0x80A(g7), r7
                ldos    0x1AA(g7), r15
                cmpobge r15, r7, loc_1668C
                mov     r15, r7
loc_1668C:                              # CODE XREF: sub_165D4+B0↑j
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                mulr    r7, r5, r5
                ldt     0xA38(g7), r8
                addr    r8, r4, r4
                addr    r9, r5, r5
                addr    r10, r6, r6
                stt     r4, 0x18(g7)
                b       loc_168D8
# ---------------------------------------------------------------------------
loc_166BC:                              # CODE XREF: sub_165D4+78↑j
                addo    0x1F, 0xF, r15
                stib    r15, 0x5BE(g7)
                ldis    0x5B6(g7), r3
                stis    r3, 0x26(g7)
                ld      0xA08(g7), r15
                bbs     0x13, r15, loc_16760
                lda     0x3DCCCCCD, r6
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                notbit  0x1F, r4, r4
                ld      0xA08(g7), r12
                and     0xF, r12, r11
                ld      flt_16B1C[r11*8], r7
                ldis    flt_16B20[r11*8], g0
                mulr    r7, r4, r4
                mulr    r7, r5, r5
                st      r4, 0x2C(g7)
                st      r5, 0x34(g7)
                mov     0, r15
                st      r15, 0x30(g7)
                cmpibg  0, g0, loc_16750
                call    sub_16A4C
                cmpobne 0, g1, loc_1675C
                b       loc_1675C
# ---------------------------------------------------------------------------
loc_16750:                              # CODE XREF: sub_165D4+16C↑j
                lda     0xBCF5C28F, r8
                st      r8, 0x30(g7)
loc_1675C:                              # CODE XREF: sub_165D4+174↑j
                b       loc_16840
# ---------------------------------------------------------------------------
loc_16760:                              # CODE XREF: sub_165D4+FC↑j
                mov     0, r15
                st      r15, 0x30(g7)
                mov     6, g0
                call    sub_16A4C
                ld      0x1F4(g7), r5
                ld      0x1FC(g7), r6
                ld      0x1F4(g8), r7
                ld      0x1FC(g8), r8
                subr    r5, r7, r3
                subr    r6, r8, r4
                or      r3, r4, r5
                clrbit  0x1F, r5, r5
                cmpobne 0, r5, loc_167A4
                lda     displacement, r3
                lda     0x3F800000, r4
loc_167A4:                              # CODE XREF: sub_165D4+1BC↑j
                lda     0x2D005A5A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                ld      (g11)[g12*1], r4
                ldos    0x5BC(g7), r6
                cmpobne 0, r6, loc_167CC
                mov     1, r6
loc_167CC:                              # CODE XREF: sub_165D4+1F0↑j
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                ldos    0x19C(g7), g0
                mov     9, g1
                call    calc_mht_adr
                cmpobe  0, g0, loc_167FC
                lda     0x3F000000, r13
                mulr    r13, r6, r6
loc_167FC:                              # CODE XREF: sub_165D4+218↑j
                ld      0x5F4(g7), r7
                ld      stage_x, r11
                cmpr    r7, r11
                bl      loc_16814
                mov     r11, r7
loc_16814:                              # CODE XREF: sub_165D4+238↑j
                lda     0x3F333333, r11
                subr    r11, r7, r7
                bbc     0x1F, r7, loc_16828
                mov     0, r7
loc_16828:                              # CODE XREF: sub_165D4+24C↑j
                mulr    r7, r3, r3
                mulr    r7, r4, r4
                divr    r6, r3, r3
                divr    r6, r4, r4
                st      r3, 0x2C(g7)
                st      r4, 0x34(g7)
loc_16840:                              # CODE XREF: sub_165D4:loc_1675C↑j
                ldos    (displacement70)(g6), r3
                stos    r3, 0x852(g7)
                mov     0x1F, r15
                stib    r15, 0x60C(g7)
                mov     6, r3
                stob    r3, 0x19F(g7)
                mov     2, r3
                stob    r3, 0x1B2(g7)
                ld      0x1A4(g7), r15
                setbit  0xC, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x0(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g7)
                ld      0xA08(g7), r15
                setbit  0x15, r15, r15
                st      r15, 0xA08(g7)
                ld      0xA08(g7), r15
                clrbit  0xA, r15, r15
                st      r15, 0xA08(g7)
                ld      0xA08(g7), r15
                setbit  0x1A, r15, r15
                st      r15, 0xA08(g7)
                ld      0x19C(g7), r15
                bbs     0x13, r15, loc_168B8
                ldos    0x19C(g7), g0
                cmpobe  0, g0, loc_168D8
                call    set_motion
                b       loc_168D8
# ---------------------------------------------------------------------------
loc_168B8:                              # CODE XREF: sub_165D4+2D0↑j
                ldos    0x19C(g7), g0
                mov     3, g1
                call    calc_mht_adr
                ldob    5(g0), r3
                ldob    6(g0), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                stos    r3, 0x5C0(g7)
loc_168D8:                              # CODE XREF: sub_165D4+70↑j
                ret
# End of function sub_165D4
# =============== S U B R O U T I N E =======================================
sub_168DC:                              # DATA XREF: ROM:0001D1A8↓o
                ldob    0x1B2(g7), r3
                cmpobe  0, r3, loc_168EC
                cmpobe  1, r3, loc_168F8
                cmpobe  2, r3, loc_16A48
loc_168EC:                              # CODE XREF: sub_168DC+4↑j
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
loc_168F8:                              # CODE XREF: sub_168DC+8↑j
                ldos    0x1AA(g7), r13
                ldos    0x80E(g7), r14
                cmpobl  r13, r14, loc_16A48
                ld      0x1A4(g7), r15
                clrbit  1, r15, r15
                st      r15, 0x1A4(g7)
                ldob    0x5BE(g7), r6
                stos    r6, 0x5BC(g7)
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                ld      0x5CC(g7), r13
                ld      0x50A000, r14
                subr    r13, r14, r3
                lda     0x3F800000, r13
                addr    r13, r6, r4
                mulr    r3, r4, r3
                lda     0x3F000000, r13
                mulr    r13, r3, r3
                ld      0x1F8(g7), r13
                ld      0x81C(g7), r14
                subr    r13, r14, r4
                divr    r6, r4, r4
                addr    r3, r4, r15
                st      r15, 0x30(g7)
                ld      0x5C4(g7), r7
                ld      0x724(g7), r13
                mulr    r13, r6, r5
                divr    r6, r5, r3
                mulr    r7, r3, r3
                ldis    0x26(g7), r4
                mov     r4, r12
                bbc     0x1F, r3, loc_16994
                notbit  0xF, r4, r12
loc_16994:                              # CODE XREF: sub_168DC+B0↑j
                stis    r12, 0x5C2(g7)
                subi    r4, 0, r12
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x2C(g7)
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x34(g7)
                call    fix_hara
                ldob    0x1B2(g7), r14
                addi    1, r14, r15
                stob    r15, 0x1B2(g7)
                lda     0xAE1100, g0    # sd_jump_1
                call    check_same_sound
                call    sound_request_u
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                lda     0x50080200, r15
                st      r15, 0xA08(g7)
                ld      0x19C(g7), r15
                bbs     0x11, r15, loc_16A24
                ld      0xA08(g7), r15
                setbit  0x10, r15, r15
                st      r15, 0xA08(g7)
                b       loc_16A30
# ---------------------------------------------------------------------------
loc_16A24:                              # CODE XREF: sub_168DC+134↑j
                ld      0xA08(g7), r15
                setbit  0x11, r15, r15
                st      r15, 0xA08(g7)
loc_16A30:                              # CODE XREF: sub_168DC+144↑j
                ldos    (displacement74)(g6), r11
                lda     0x6804000, r13
                addi    r13, r11, r11
                st      r11, 0x19C(g7)
loc_16A48:                              # CODE XREF: sub_168DC+C↑j
                ret
# End of function sub_168DC
# =============== S U B R O U T I N E =======================================
sub_16A4C:                              # CODE XREF: ROM:00014730↑p
                ldob    0x5BE(g7), r12
                addo    g0, r12, r12
                stob    r12, 0x5BE(g7)
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                ld      0x5CC(g7), r13
                ld      0x50A000, r14
                subr    r13, r14, r3
                lda     0x3F800000, r13
                addr    r13, r6, r4
                mulr    r3, r4, r3
                lda     0x3F000000, r13
                mulr    r13, r3, r3
                lda     0x3F99999A, r13
                ld      0x81C(g7), r14
                subr    r13, r14, r4
                divr    r6, r4, r4
                addr    r3, r4, r8
                ld      0x50A000, r5
                ld      0x1A4(g7), r15
                bbc     0xE, r15, loc_16AD4
                ld      flt_1D290, r13
                ld      0x50A000, r14
                mulr    r13, r14, r5
loc_16AD4:                              # CODE XREF: sub_16A4C+70↑j
                ld      0x1C(g7), r9
                lda     0x3F99999A, r10
                mov     0, r11
loc_16AE4:                              # CODE XREF: sub_16A4C+B0↓j
                addr    r8, r10, r10
                subr    r5, r8, r8
                addo    1, r11, r11
                shlo    2, 0x19, r13
                cmpobe  r13, r11, loc_16B14
                cmpr    r9, r10
                bg      loc_16AE4
                st      r8, 0x30(g7)
                subo    r11, r12, r12
                stos    r12, 0x5BC(g7)
                mov     0, g1
                ret
# ---------------------------------------------------------------------------
loc_16B14:                              # CODE XREF: sub_16A4C+A8↑j
                mov     1, g1
                ret
# End of function sub_16A4C
# ---------------------------------------------------------------------------
flt_16B1C:      .float 1.0              # DATA XREF: ROM:00014650↑r
flt_16B20:      .float 0.0              # DATA XREF: ROM:00014658↑r
                .float 1.3
                .float 0.0
                .float 0.2
                .float 0.0
                .float 0.0
                .float 0.0
                .float 1.0
                .long 0xA
                .float 1.3
                .long 0xA
                .float 0.2
                .long 0xA
                .float 0.0
                .float 0.0
                .float 1.0
                .long 0xFFFF
                .float 1.3
                .long 0xFFFF
                .float 0.2
                .long 0xFFFF
                .float 0.0
                .float 0.0
                .float 0.0
                .float 0.0
                .float 0.0
                .float 0.0
                .float 0.0
                .float 0.0
                .float 0.0
                .float 0.0
# =============== S U B R O U T I N E =======================================
get_game_info:                          # DATA XREF: CONTINUE_DSP-4E58↑o
                ld      fa_rob0, g7     # Label from Virtua Fighter 2 source
                ld      fa_rob1, g8
                ld      0x0(g7), r7
                ld      0x0(g8), r8
                bbc     0x1F, r7, loc_16BBC
                call    get_my_info_new
loc_16BBC:                              # CODE XREF: get_game_info+18↑j
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                bbc     0x1F, r8, loc_16BD4
                call    get_my_info_new
loc_16BD4:                              # CODE XREF: get_game_info+30↑j
                and     r7, r8, r3
                bbc     0x1F, r3, loc_16C04
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                call    get_en_info
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                call    get_en_info
loc_16C04:                              # CODE XREF: get_game_info+3C↑j
                ld      debug_flag, r15
                bbs     5, r15, loc_16C40 # return
                mov     0, r15
                stib    r15, 0x1200(g7)
                mov     0, r15
                stib    r15, 0x1200(g8)
                ldob    nagerenai_timer, r3 # nagerenai = "can't throw"
                cmpobe  0, r3, loc_16C40 # return
                subo    1, r3, r3
                stob    r3, nagerenai_timer # nagerenai = "can't throw"
loc_16C40:                              # CODE XREF: get_game_info+70↑j
                ret                     # return
# End of function get_game_info
# =============== S U B R O U T I N E =======================================
calc_unit_mat:                          # CODE XREF: action_init:skip_calc_rob_angle_cont↑p
                ld      debug_flag, r15 # Label from official source
                bbs     5, r15, loc_16CE4
                lda     0x3F807F7F, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x70C(g7), r15
                bbc     0x17, r15, loc_16CE4
                ldos    0x1AA(g7), r14
                cmpoble 2, r14, loc_16C84
                ldt     0x1F4(g7), r4
                stt     r4, 0x1E28(g7)
                b       loc_16CE4
# ---------------------------------------------------------------------------
loc_16C84:                              # CODE XREF: calc_unit_mat+2C↑j
                ldos    0x1AA(g7), r14
                cmpobg  0xE, r14, loc_16CE4
                ldos    0x1AA(g7), r14
                cmpobg  0x18, r14, loc_16CA4
                ld      0x70C(g7), r15
                clrbit  0x17, r15, r15
                st      r15, 0x70C(g7)
                b       loc_16CE4
# ---------------------------------------------------------------------------
loc_16CA4:                              # CODE XREF: calc_unit_mat+4C↑j
                ldt     0x1F4(g7), r4
                ldt     0x1E28(g7), r8
                subr    r8, r4, r4
                subr    r9, r5, r5
                subr    r10, r10, r6
                lda     0x3ECCCCCD, r11
                mulr    r11, r4, r4
                mulr    r11, r5, r5
                mulr    r11, r6, r6
                addr    r8, r4, r4
                addr    r9, r5, r5
                addr    r10, r6, r6
                stt     r4, 0x1E28(g7)
loc_16CE4:                              # CODE XREF: calc_unit_mat+8↑j
                lda     0x1C003838, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x7000E0E, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                ld      0x678(g7), r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x18(g7), r12
                stt     r12, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x9001212, r15
                st      r15, (g11)[g12*1]
                lda     0x501024, r15
                ldt     (g11)[g12*1], r12
                stt     r12, (r15)
                ldt     (g11)[g12*1], r12
                stt     r12, 0xC(r15)
                ldt     (g11)[g12*1], r12
                stt     r12, 0x18(r15)
                ld      0x0(g7), r15
                bbc     2, r15, loc_16DFC
                ldob    0x83F(g7), r14
                bbc     0, r14, loc_16E18
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      0x80(g7), r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                ld      0x88(g7), r15
                st      r15, (g11)[g12*1]
                b       loc_16E18
# ---------------------------------------------------------------------------
loc_16DFC:                              # CODE XREF: calc_unit_mat+180↑j
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x80(g7), r12
                ld      0xC50(g7), r15
                addr    r15, r13, r13
                stt     r12, (g11)[g12*1]
loc_16E18:                              # CODE XREF: calc_unit_mat+188↑j
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x34806969, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_16E4C
                shlo    9, 0x1D, r15
                b       loc_16E54
# ---------------------------------------------------------------------------
loc_16E4C:                              # CODE XREF: calc_unit_mat+1FC↑j
                lda     0x3B00, r15
loc_16E54:                              # CODE XREF: calc_unit_mat+204↑j
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mov     0, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x1F4(g7)
                mov     0, g0
                call    set_coli_ball_data
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x8C(g7), r12
                stt     r12, (g11)[g12*1]
                lda     0x34806969, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_16ED8
                lda     0x3A0C, r15
                b       loc_16EE0
# ---------------------------------------------------------------------------
loc_16ED8:                              # CODE XREF: calc_unit_mat+284↑j
                lda     0x3B0C, r15
loc_16EE0:                              # CODE XREF: calc_unit_mat+290↑j
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0xBE6(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x1FEC(g7), g3
                call    dented_cnt
                movt    g0, r4
                mov     1, g3
                call    scale_parts_cnt
                addr    r4, g0, r4
                addr    r5, g1, r5
                addr    r6, g2, r6
                ldt     player_model_y_scale, g0
                addr    r4, g0, g0
                addr    r5, g1, g1
                addr    r6, g2, g2
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g2, (g11)[g12*1]
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mov     0xC, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x200(g7)
                mov     1, g0
                call    set_coli_ball_data
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x98(g7), r12
                stt     r12, (g11)[g12*1]
                lda     0x1F803F3F, r15
                st      r15, (g11)[g12*1]
                ldis    0xBB2(g7), r12
                ldis    0xBB0(g7), r13
                ldis    0xBAE(g7), r14
                stt     r12, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0xC0E(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0xC0C(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0xC10(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x1F803F3F, r15
                st      r15, (g11)[g12*1]
                ldis    0x150(g7), r12
                ldis    0x14E(g7), r13
                ldis    0x14C(g7), r14
                stt     r12, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0xBE6(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x1F88(g7), g3
                call    dented_cnt
                movt    g0, r4
                mov     0, g3
                call    scale_parts_cnt
                addr    r4, g0, r4
                addr    r5, g1, r5
                addr    r6, g2, r6
                ldt     player_model_y_scale, g0
                addr    r4, g0, g0
                addr    r5, g1, g1
                addr    r6, g2, g2
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g2, (g11)[g12*1]
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mov     0x18, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x20C(g7)
                mov     2, g0
                call    set_coli_ball_data
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0xA4(g7), r12
                stt     r12, (g11)[g12*1]
                mov     r15, r15
                lda     0x34806969, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_17114
                lda     0x3A24, r15
                b       loc_1711C
# ---------------------------------------------------------------------------
loc_17114:                              # CODE XREF: calc_unit_mat+4C0↑j
                lda     loc_3B24, r15
loc_1711C:                              # CODE XREF: calc_unit_mat+4CC↑j
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                addo    0x1F, 5, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x218(g7)
                mov     3, g0
                call    set_coli_ball_data
                mov     r15, r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0xB0(g7), r12
                stt     r12, (g11)[g12*1]
                mov     r15, r15
                lda     0x34806969, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_171A0
                lda     0x3A30, r15
                b       loc_171A8
# ---------------------------------------------------------------------------
loc_171A0:                              # CODE XREF: calc_unit_mat+54C↑j
                lda     0x3B30, r15
loc_171A8:                              # CODE XREF: calc_unit_mat+558↑j
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                addo    0x1F, 0x11, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x224(g7)
                mov     4, g0
                call    set_coli_ball_data
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0xBC(g7), r12
                stt     r12, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x15E(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x15C(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x15A(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0xBEA(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0xBE8(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0xBEC(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x0(g7), r4
                chkbit  6, r4
                alterbit 0, 0, r4
                mov     3, g3
                subo    r4, g3, g3
                call    scale_parts_cnt
                ld      player_model_y_scale, r4
                addr    r4, g0, g0
                addr    r4, g1, g1
                addr    r4, g2, g2
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g2, (g11)[g12*1]
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                addo    0x1F, 0x1D, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x230(g7)
                mov     5, g0
                call    set_coli_ball_data
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0xC8(g7), r12
                stt     r12, (g11)[g12*1]
                mov     r15, r15
                lda     0x34806969, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_17340
                lda     loc_3A48, r15
                b       loc_17348
# ---------------------------------------------------------------------------
loc_17340:                              # CODE XREF: calc_unit_mat+6EC↑j
                lda     power_test_check, r15
loc_17348:                              # CODE XREF: calc_unit_mat+6F8↑j
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                shlo    3, 9, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x23C(g7)
                mov     6, g0
                call    set_coli_ball_data
                mov     r15, r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0xD4(g7), r12
                stt     r12, (g11)[g12*1]
                mov     r15, r15
                lda     0x34806969, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_173CC
                lda     0x3A54, r15
                b       loc_173D4
# ---------------------------------------------------------------------------
loc_173CC:                              # CODE XREF: calc_unit_mat+778↑j
                lda     loc_3B54, r15
loc_173D4:                              # CODE XREF: calc_unit_mat+784↑j
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                shlo    2, 0x15, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x248(g7)
                mov     7, g0
                call    set_coli_ball_data
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0xE0(g7), r12
                stt     r12, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x16C(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x16A(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x168(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0xBF0(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0xBEE(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0xBF2(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x0(g7), r4
                chkbit  6, r4
                alterbit 0, 0, r4
                mov     2, g3
                addo    r4, g3, g3
                call    scale_parts_cnt
                ld      player_model_y_scale, r4
                addr    r4, g0, g0
                addr    r4, g1, g1
                addr    r4, g2, g2
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g2, (g11)[g12*1]
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                shlo    5, 3, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x254(g7)
                mov     8, g0
                call    set_coli_ball_data
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x70C(g7), r15
                bbc     0x17, r15, loc_17558
                ldt     0x1E28(g7), r4
                lda     0x7000E0E, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
loc_17558:                              # CODE XREF: calc_unit_mat+8F0↑j
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0xEC(g7), r12
                stt     r12, (g11)[g12*1]
                lda     0x1F803F3F, r15
                st      r15, (g11)[g12*1]
                ldis    0xBC4(g7), r12
                ldis    0xBC2(g7), r13
                ldis    0xBC0(g7), r14
                stt     r12, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0xC20(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0xC1E(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0xC22(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x172(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x170(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                shlo    2, 0x1B, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x260(g7)
                mov     9, g0
                call    set_coli_ball_data
                ld      0x190(g7), r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                mov     r15, r15
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                mov     r15, r15
                mov     r15, r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0xF8(g7), r12
                stt     r12, (g11)[g12*1]
                mov     r15, r15
                lda     0x34806969, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_176C4
                lda     loc_3A78, r15
                b       loc_176CC
# ---------------------------------------------------------------------------
loc_176C4:                              # CODE XREF: calc_unit_mat+A70↑j
                lda     loc_3B78, r15
loc_176CC:                              # CODE XREF: calc_unit_mat+A7C↑j
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                shlo    3, 0xF, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x26C(g7)
                mov     0xA, g0
                call    set_coli_ball_data
                mov     r15, r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x104(g7), r12
                stt     r12, (g11)[g12*1]
                mov     r15, r15
                lda     0x34806969, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_17750
                lda     loc_3A84, r15
                b       loc_17758
# ---------------------------------------------------------------------------
loc_17750:                              # CODE XREF: calc_unit_mat+AFC↑j
                lda     loc_3B84, r15
loc_17758:                              # CODE XREF: calc_unit_mat+B08↑j
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x84, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x278(g7)
                mov     0xB, g0
                call    set_coli_ball_data
                mov     r15, r15
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x110(g7), r12
                stt     r12, (g11)[g12*1]
                lda     0x8801111, r15
                st      r15, (g11)[g12*1]
                lda     0x501024, r15
                ldt     (r15), r12
                stt     r12, (g11)[g12*1]
                ldt     0xC(r15), r12
                stt     r12, (g11)[g12*1]
                ldt     0x18(r15), r12
                stt     r12, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x180(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x17E(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x17C(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0xBF6(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0xBF4(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0xBF8(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x0(g7), r4
                chkbit  6, r4
                alterbit 0, 0, r4
                mov     5, g3
                subo    r4, g3, g3
                call    scale_parts_cnt
                ld      player_model_y_scale, r4
                addr    r4, g0, g0
                addr    r4, g1, g1
                addr    r4, g2, g2
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g2, (g11)[g12*1]
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                shlo    4, 9, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x284(g7)
                mov     0xC, g0
                call    set_coli_ball_data
                mov     r15, r15
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x11C(g7), r12
                stt     r12, (g11)[g12*1]
                mov     r15, r15
                lda     0x34806969, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_1793C
                lda     0x3A9C, r15
                b       loc_17944
# ---------------------------------------------------------------------------
loc_1793C:                              # CODE XREF: calc_unit_mat+CE8↑j
                lda     loc_3B9C, r15
loc_17944:                              # CODE XREF: calc_unit_mat+CF4↑j
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x9C, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x290(g7)
                mov     0xD, g0
                call    set_coli_ball_data
                mov     r15, r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x128(g7), r12
                stt     r12, (g11)[g12*1]
                mov     r15, r15
                lda     0x34806969, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_179C8
                lda     loc_3AA8, r15
                b       loc_179D0
# ---------------------------------------------------------------------------
loc_179C8:                              # CODE XREF: calc_unit_mat+D74↑j
                lda     loc_3BA8, r15
loc_179D0:                              # CODE XREF: calc_unit_mat+D80↑j
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                mov     r15, r15
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                shlo    3, 0x15, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x29C(g7)
                mov     0xE, g0
                call    set_coli_ball_data
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x134(g7), r12
                stt     r12, (g11)[g12*1]
                lda     0x8801111, r15
                st      r15, (g11)[g12*1]
                lda     0x501024, r15
                ldt     (r15), r12
                stt     r12, (g11)[g12*1]
                ldt     0xC(r15), r12
                stt     r12, (g11)[g12*1]
                ldt     0x18(r15), r12
                stt     r12, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x18E(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x18C(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x18A(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0xBFC(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0xBFA(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0xBFE(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x0(g7), r4
                chkbit  6, r4
                alterbit 0, 0, r4
                mov     4, g3
                addo    r4, g3, g3
                call    scale_parts_cnt
                ld      player_model_y_scale, r4
                addr    r4, g0, g0
                addr    r4, g1, g1
                addr    r4, g2, g2
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g2, (g11)[g12*1]
                lda     0x1A803535, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                lda     0xB4, r15
                st      r15, (g11)[g12*1]
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0x2A8(g7)
                mov     0xF, g0
                call    set_coli_ball_data
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                call    rob_ball_data_make
                ld      debug_flag, r15
                bbs     5, r15, loc_17C10
                ldt     0x1F4(g7), r8
                ldt     0x6FC(g7), r12
                stt     r12, 0x1E0C(g7)
                stt     r8, 0x6FC(g7)
                subr    r12, r8, r8
                subr    r14, r10, r10
                ldt     0x1E00(g7), r4
                lda     mode9, r3
                ldob    also_mode, r14
                cmpobne r3, r14, loc_17C10
                lda     sub_mode9, r3
                ldob    also_sub_mode, r14
                cmpobne r3, r14, loc_17C10
                ld      0x0(g7), r15
                bbc     7, r15, loc_17C10
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x3F333333, r3
                cmpr    r4, r3
                bl      loc_17C10
                ld      0x1A4(g7), r3
                bbs     0xE, r3, loc_17C10
                bbs     0x11, r3, loc_17C10
                bbs     0x12, r3, loc_17C10
                bbs     0x13, r3, loc_17C10
loc_17C10:                              # CODE XREF: calc_unit_mat+F38↑j
                ret
# End of function calc_unit_mat
# =============== S U B R O U T I N E =======================================
set_coli_ball_data:                     # CODE XREF: calc_unit_mat+250↑p
                ld      0x1D0C(g7), r3  # Label from official source
                ld      0x1D00(g7), r11
                ld      0x1D14(g7), r8
                lda     (r8)[g0*8], r8
                ld      0x1D20(g7), r9
                ldob    (r9)[g0], r9
                mov     0, r12
                ld      mod_fa_coli, r14
                ld      0x0(r14), r14
loc_17C4C:                              # CODE XREF: set_coli_ball_data+84↓j
                cmpobe  0, r9, loc_17C9C
                ldob    (r8)[r12], r10
                ldq     0x0(r3)[r10*4], r4
                ld      (r11)[r10*4], r7
                shro    2, r10, r13
                lda     0x1C803939, r15
                st      r15, (g11)[g12*1]
                stt     r4, (g11)[g12*1]
                mulo    3, r13, r15
                st      r15, (g11)[g12*1]
                bbs     0x1F, r14, loc_17C94
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                stt     r4, (g11)[g12*1]
                ldt     (g11)[g12*1], r4
loc_17C94:                              # CODE XREF: set_coli_ball_data+68↑j
                addo    1, r12, r12
                cmpobne r12, r9, loc_17C4C
loc_17C9C:                              # CODE XREF: set_coli_ball_data:loc_17C4C↑j
                ret
# End of function set_coli_ball_data
# =============== S U B R O U T I N E =======================================
rob_revise_yang:                        # CODE XREF: action_init+6D4↑p
                ld      mod_fa_coli, r3 # Label from official source
                ld      0x0(r3), r15
                bbc     0x1F, r15, loc_17F74
                ldis    0x5B6(g7), r9
                ld      0x1A4(g7), r7
                ld      0x1A4(g8), r8
                bbc     8, r7, loc_17CD0
                ldob    0x821(g7), r3
                cmpobne 4, r3, loc_17CD0
                ldos    0x760(g7), r9
                b       loc_17E90
# ---------------------------------------------------------------------------
loc_17CD0:                              # CODE XREF: rob_revise_yang+1C↑j
                ld      0x0(g7), r15
                bbc     9, r15, loc_17CDC
                ldos    0x61A(g7), r9
loc_17CDC:                              # CODE XREF: rob_revise_yang+34↑j
                ld      0x70C(g7), r15
                bbs     2, r15, loc_17EAC
                bbs     0x19, r7, loc_17F74
                ld      0x0(g7), r15
                bbs     0x16, r15, loc_17F74
                bbs     0xD, r7, loc_17E58
                ld      0x860(g7), r15
                bbc     0x14, r15, loc_17D00
                b       loc_17E58
# ---------------------------------------------------------------------------
loc_17D00:                              # CODE XREF: rob_revise_yang+58↑j
                ld      0x860(g7), r15
                bbc     0x13, r15, loc_17D0C
                b       loc_17E58
# ---------------------------------------------------------------------------
loc_17D0C:                              # CODE XREF: rob_revise_yang+64↑j
                bbc     0x1F, r7, loc_17D1C
                ld      0x804(g7), r15
                bbs     8, r15, loc_17E58
                b       loc_17E74
# ---------------------------------------------------------------------------
loc_17D1C:                              # CODE XREF: rob_revise_yang:loc_17D0C↑j
                bbc     0x1F, r8, loc_17D2C
                bbs     2, r8, loc_17D2C
                bbs     8, r8, loc_17D2C
                b       loc_17F74
# ---------------------------------------------------------------------------
loc_17D2C:                              # CODE XREF: rob_revise_yang:loc_17D1C↑j
                ld      0x860(g8), r15
                bbc     0x15, r15, loc_17D38
                b       loc_17E58
# ---------------------------------------------------------------------------
loc_17D38:                              # CODE XREF: rob_revise_yang+90↑j
                ld      0x804(g7), r15
                bbc     0xF, r15, loc_17D44
                b       loc_17E58
# ---------------------------------------------------------------------------
loc_17D44:                              # CODE XREF: rob_revise_yang+9C↑j
                bbs     0xE, r7, loc_17F74
                bbc     0x10, r7, loc_17D58
                bbs     8, r7, loc_17D58
                bbc     8, r8, loc_17D58
                bbs     4, r8, loc_17F74
loc_17D58:                              # CODE XREF: rob_revise_yang+A8↑j
                bbc     0x13, r7, loc_17D60
                b       loc_17F74
# ---------------------------------------------------------------------------
loc_17D60:                              # CODE XREF: rob_revise_yang:loc_17D58↑j
                bbc     0x12, r7, loc_17D6C
                bbs     1, r7, loc_17DD8
                b       loc_17F74
# ---------------------------------------------------------------------------
loc_17D6C:                              # CODE XREF: rob_revise_yang:loc_17D60↑j
                bbs     0x11, r7, loc_17E58
                bbs     0xE, r7, loc_17E58
                bbs     2, r7, loc_17E3C
                bbs     0xA, r7, loc_17DE8
                lda     off_1010, r13
                and     r13, r7, r3
                shlo    0xC, 1, r13
                cmpobe  r13, r3, loc_17DE8
                lda     0x4010, r3
                and     r3, r8, r4
                cmpobe  r3, r4, loc_17E3C
                bbc     1, r7, loc_17DB0
                bbs     0xF, r8, loc_17F74
                bbs     0x1F, r8, loc_17E00
                b       loc_17E58
# ---------------------------------------------------------------------------
loc_17DB0:                              # CODE XREF: rob_revise_yang+100↑j
                bbc     0x1C, r7, loc_17DB8
                b       loc_17E00
# ---------------------------------------------------------------------------
loc_17DB8:                              # CODE XREF: rob_revise_yang:loc_17DB0↑j
                b       loc_17F74
# ---------------------------------------------------------------------------
                ldis    0x26(g7), r13
                subi    r13, r9, r9
                b       loc_17E44
# ---------------------------------------------------------------------------
                ldis    0x26(g7), r13
                subi    r13, r9, r9
                lda     0x38E, r6
                b       loc_17EEC
# ---------------------------------------------------------------------------
loc_17DD8:                              # CODE XREF: rob_revise_yang+C4↑j
                ldis    0x26(g7), r13
                ldis    0x26(g8), r14
                subi    r13, r14, r9
                b       loc_17E44
# ---------------------------------------------------------------------------
loc_17DE8:                              # CODE XREF: rob_revise_yang+D8↑j
                addo    0x1F, 0xE, r6
                ld      0x0(g8), r15
                bbs     9, r15, loc_17DFC
                bbc     0xF, r8, loc_17E3C
                lda     0x5B, r6
loc_17DFC:                              # CODE XREF: rob_revise_yang+150↑j
                b       loc_17E04
# ---------------------------------------------------------------------------
loc_17E00:                              # CODE XREF: rob_revise_yang+108↑j
                lda     0x16C, r6
loc_17E04:                              # CODE XREF: rob_revise_yang:loc_17DFC↑j
                ldis    0x5B4(g7), r13
                subi    r13, r9, r9
                lda     loc_2AA8, r7
                mov     1, r5
                b       loc_17EC8
# ---------------------------------------------------------------------------
                ldis    0x5B4(g7), r13
                subi    r13, r9, r9
                lda     0x3FFC, r7
                ldis    word_1D004, r6
                mov     0, r5
                b       loc_17EC8
# ---------------------------------------------------------------------------
loc_17E3C:                              # CODE XREF: rob_revise_yang+D4↑j
                ldis    0x5B4(g7), r13
                subi    r13, r9, r9
loc_17E44:                              # CODE XREF: rob_revise_yang+124↑j
                lda     0x5FFA, r7
                lda     0x38E, r6
                mov     0, r5
                b       loc_17EC8
# ---------------------------------------------------------------------------
loc_17E58:                              # CODE XREF: rob_revise_yang+50↑j
                ldis    0x5B4(g7), r13
                subi    r13, r9, r9
                lda     0x5FFA, r7
                lda     0x71C, r6
                mov     0, r5
                b       loc_17EC8
# ---------------------------------------------------------------------------
loc_17E74:                              # CODE XREF: rob_revise_yang+78↑j
                ldis    0x5B4(g7), r13
                subi    r13, r9, r9
                lda     loc_BFF4, r7
                lda     0x71C, r6
                mov     0, r5
                b       loc_17EC8
# ---------------------------------------------------------------------------
loc_17E90:                              # CODE XREF: rob_revise_yang+2C↑j
                ldis    0x26(g7), r13
                subi    r13, r9, r9
                lda     loc_BFF4, r7
                lda     0x71C, r6
                mov     0, r5
                b       loc_17EC8
# ---------------------------------------------------------------------------
loc_17EAC:                              # CODE XREF: rob_revise_yang+40↑j
                ldis    0x26(g7), r13
                subi    r13, r9, r9
                lda     loc_7FF8, r7
                lda     0xE38, r6
                mov     0, r5
                b       loc_17EC8
# ---------------------------------------------------------------------------
loc_17EC8:                              # CODE XREF: rob_revise_yang+178↑j
                shlo    0x10, r9, r15
                shri    0x10, r15, r9
                subi    r7, 0, r3
                cmpi    r9, r3
                concmpi r9, r7
                be      loc_17EF4
                cmpobne 0, r5, loc_17F74
                shlo    0xF, 1, r13
                addi    r13, r9, r9
loc_17EEC:                              # CODE XREF: rob_revise_yang+134↑j
                shlo    0x10, r9, r15
                shri    0x10, r15, r9
loc_17EF4:                              # CODE XREF: rob_revise_yang+23C↑j
                subi    r6, 0, r3
                cmpible r3, r9, loc_17F00
                mov     r3, r9
loc_17F00:                              # CODE XREF: rob_revise_yang+258↑j
                cmpibge r6, r9, loc_17F08
                mov     r6, r9
loc_17F08:                              # CODE XREF: rob_revise_yang:loc_17F00↑j
                ld      0x0(g7), r15
                bbc     2, r15, loc_17F18
                ldob    0x83F(g7), r14
                bbs     0, r14, loc_17F68
loc_17F18:                              # CODE XREF: rob_revise_yang+26C↑j
                ld      0x1F4(g7), r13
                ld      0x18(g7), r14
                subr    r13, r14, r3
                ld      0x1FC(g7), r13
                ld      0x20(g7), r14
                subr    r13, r14, r4
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r6
                ld      0x1F4(g7), r13
                addr    r13, r5, r15
                st      r15, 0x18(g7)
                ld      0x1FC(g7), r13
                addr    r13, r6, r15
                st      r15, 0x20(g7)
loc_17F68:                              # CODE XREF: rob_revise_yang+274↑j
                ldis    0x26(g7), r14
                addi    r9, r14, r15
                stis    r15, 0x26(g7)
loc_17F74:                              # CODE XREF: rob_revise_yang+C↑j
                ret
# End of function rob_revise_yang
# =============== S U B R O U T I N E =======================================
rob_spd_control:                        # CODE XREF: action_init+6D8↑p
                ldt     0x18(g7), r4    # Label from official source
                stt     r4, 0xA4C(g7)
                stt     r4, 0x50E000
                ld      0x50A004, r13
                ld      0x50A000, r14
                mulr    r13, r14, r5
                lda     0x3E800000, r13
                mulr    r13, r5, r5
                ld      0x5D8(g7), r13
                mulr    r13, r5, r5
                lda     0x3C888888, r13
                mulr    r13, r5, r5
                lda     0x3F800000, r13
                ld      0x5D4(g7), r14
                addr    r13, r14, r3
                mulr    r3, r5, r5
                ld      0x50A008, r13
                mulr    r13, r5, r6
                mov     0, r7
                ld      0x1A4(g7), r15
                bbs     4, r15, rsc_fric_end
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                ld      0x2C(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x34(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                cmpible r3, r5, rsc_stop
                divr    r3, r5, r5
                lda     0x3F800000, r14
                subr    r5, r14, r5
                ld      0x2C(g7), r14
                mulr    r5, r14, r15
                st      r15, 0x2C(g7)
                ld      0x34(g7), r14
                mulr    r5, r14, r15
                st      r15, 0x34(g7)
                mov     1, r7
                b       rsc_fric_end
# ---------------------------------------------------------------------------
rsc_stop:                               # CODE XREF: rob_spd_control+90↑j
                mov     0, r3           # Label from official source
                st      r3, 0x2C(g7)
                st      r3, 0x34(g7)
rsc_fric_end:                           # CODE XREF: rob_spd_control+6C↑j
                lda     0x16802D2D, r15 # Label from official source
                st      r15, (g11)[g12*1]
                ld      0x5C8(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x5D0(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                cmpible r3, r6, rsc_estop
                divr    r3, r6, r6
                lda     0x3F800000, r14
                subr    r6, r14, r6
                ld      0x5C8(g7), r14
                mulr    r6, r14, r15
                st      r15, 0x5C8(g7)
                ld      0x5D0(g7), r14
                mulr    r6, r14, r15
                st      r15, 0x5D0(g7)
                b       rsc_espd_end
# ---------------------------------------------------------------------------
rsc_estop:                              # CODE XREF: rob_spd_control+F0↑j
                mov     0, r3           # Label from official source
                st      r3, 0x5C8(g7)
                st      r3, 0x5D0(g7)
                cmpobne 0, r7, rsc_espd_end
                st      r3, 0x5D4(g7)
rsc_espd_end:                           # CODE XREF: rob_spd_control+11C↑j
                ldos    0xA0E(g7), r3   # Label from official source
                cmpobe  0, r3, rsc_gra_chk
                subo    1, r3, r3
                stos    r3, 0xA0E(g7)
                cmpobne 0, r3, loc_181D4
                ldt     0xA10(g7), r8
                stt     r8, 0x2C(g7)
rsc_gra_chk:                            # CODE XREF: rob_spd_control+138↑j
                ld      0x0(g7), r15    # Label from official source
                bbs     2, r15, rsc_gra_calc
                ldos    0x61C(g7), r14  # P1_PARTS+0x61C or P2_PARTS+0x61C
                cmpobne 0, r14, rsc_no_gra
                ld      0x1F4(g7), r3
                ld      0x1FC(g7), r5
                ld      stage_soko, r4
                mov     1, r6
                ld      stage_x, r14
                clrbit  0x1F, r3, r13
                cmpr    r13, r14
                bge     loc_18114
                clrbit  0x1F, r5, r13
                cmpr    r13, r14
                bge     loc_18114
                mov     0, r4
                mov     0, r6
loc_18114:                              # CODE XREF: rob_spd_control+184↑j
                cmpobe  0, r6, rsc_no_gra
                b       rsc_no_gra
# ---------------------------------------------------------------------------
rsc_gra_calc:                           # CODE XREF: rob_spd_control+154↑j
                ld      0x50A000, r3  # Label from official source
                ld      0x1A4(g7), r15
                bbc     0xE, r15, rsc_normal_gravity
                ld      flt_1D290, r13
                ld      0x50A000, r14
                mulr    r13, r14, r3
rsc_normal_gravity:                     # CODE XREF: rob_spd_control+1B0↑j
                ld      0x30(g7), r14   # Label from official source
                subr    r3, r14, r15
                st      r15, 0x30(g7)
                ld      0x5CC(g7), r13
                ld      0x30(g7), r14
                addr    r13, r14, r15
                st      r15, 0x30(g7)
rsc_no_gra:                             # CODE XREF: rob_spd_control+15C↑j
                ld      0x2C(g7), r13   # Label from official source
                ld      0x18(g7), r14
                addr    r13, r14, r15
                st      r15, 0x18(g7)
                ld      0x30(g7), r13
                ld      0x1C(g7), r14
                addr    r13, r14, r15
                st      r15, 0x1C(g7)
                ld      0x34(g7), r13
                ld      0x20(g7), r14
                addr    r13, r14, r15
                st      r15, 0x20(g7)
                ld      not_scr_bg_move, r15
                ld      0x5C8(g7), r13
                ld      0x18(g7), r14
                addr    r13, r14, r15
                st      r15, 0x18(g7)
                ld      0x5D0(g7), r13
                ld      0x20(g7), r14
                addr    r13, r14, r15
                st      r15, 0x20(g7)
                ldt     0x18(g7), r4
                ldt     0x50E000, r8
                subr    r8, r4, r4
                subr    r9, r5, r5
                subr    r10, r6, r6
                stt     r4, 0x1E00(g7)
loc_181D4:                              # CODE XREF: rob_spd_control+144↑j
                ret
# End of function rob_spd_control
# =============== S U B R O U T I N E =======================================
rob_check_stage:                        # CODE XREF: get_my_info_new+524↓p
                ld      0x0(g7), r15    # Label from official source
                bbc     7, r15, loc_183CC
                ld      debug_flag, r15
                bbs     5, r15, loc_183CC
                ld      0x0(g7), r15
                clrbit  0xD, r15, r15
                st      r15, 0x0(g7)
                mov     0, r10
                ld      0x1F4(g7), r3
                ld      0x1FC(g7), r5
                ld      0x1A4(g7), r15
                bbc     4, r15, loc_18214
                ld      0x18(g7), r3
                ld      0x20(g7), r5
loc_18214:                              # CODE XREF: rob_check_stage+30↑j
                ld      stage_soko, g4
                mov     1, r11
                ld      stage_x, r14
                clrbit  0x1F, r3, r13
                cmpr    r13, r14
                bge     loc_18248
                clrbit  0x1F, r5, r13
                cmpr    r13, r14
                bge     loc_18248
                mov     0, g4
                mov     0, r11
loc_18248:                              # CODE XREF: rob_check_stage+58↑j
                st      r11, 0x620(g7)
                ld      0x0(g7), r15
                bbs     2, r15, loc_18300
                cmpobe  0, r11, loc_1827C
                ldos    0x624(g7), r14
                cmpobne 0, r14, loc_18264
                b       loc_183CC
# ---------------------------------------------------------------------------
loc_18264:                              # CODE XREF: rob_check_stage+84↑j
                ld      0x1A4(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x1A4(g7)
                mov     0, r15
                st      r15, 0x30(g7)
                b       loc_183CC
# ---------------------------------------------------------------------------
loc_1827C:                              # CODE XREF: rob_check_stage+7C↑j
                ldos    0x614(g7), r14
                cmpobne 0, r14, loc_182C4
                shlo    9, 1, r13
                ld      0x1A4(g7), r14
                cmpobne r13, r14, loc_182AC
                ldob    also_mode, r3
                lda     mode9, r4
                cmpobne r4, r3, loc_182AC
                mov     0, r15
                st      r15, 0x1C(g7)
loc_182AC:                              # CODE XREF: rob_check_stage+B4↑j
                ld      0x804(g7), r15
                bbc     4, r15, loc_183CC
                ld      0x1A4(g7), r15
                setbit  4, r15, r15
                st      r15, 0x1A4(g7)
                b       loc_183CC
# ---------------------------------------------------------------------------
loc_182C4:                              # CODE XREF: rob_check_stage+A8↑j
                ld      0x1A4(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x1A4(g7)
                mov     0, r15
                st      r15, 0x30(g7)
                ld      0x1C(g7), r15
                bbc     0x1F, r15, loc_183CC
                ldob    also_mode, r3
                lda     mode9, r4
                cmpobne r4, r3, loc_183CC
                mov     0, r15
                st      r15, 0x1C(g7)
                b       loc_183CC
# ---------------------------------------------------------------------------
loc_18300:                              # CODE XREF: rob_check_stage+78↑j
                ld      0x0(g7), r15
                bbs     3, r15, loc_183CC
                cmpobe  0, r11, loc_18364
                ldos    0x624(g7), r14
                cmpobne 0, r14, loc_18334
                lda     0xBF800000, r3
                ld      0x1C(g7), r4
                cmpr    r3, r4
                bl      loc_183CC
                ldob    0x7D2(g8), r14
                bbc     0, r14, loc_183CC
                b       loc_183CC
# ---------------------------------------------------------------------------
loc_18334:                              # CODE XREF: rob_check_stage+138↑j
                ldob    0xA29(g7), r14
                cmpobe  0, r14, loc_183CC
                ldob    0x7D2(g8), r14
                bbc     0, r14, loc_18344
loc_18344:                              # CODE XREF: rob_check_stage+168↑j
                ld      0x0(g7), r15
                setbit  0xD, r15, r15
                st      r15, 0x0(g7)
                st      g4, 0x1C(g7)
                mov     0, r15
                st      r15, 0x30(g7)
                call    sub_1980C
                b       loc_183CC
# ---------------------------------------------------------------------------
loc_18364:                              # CODE XREF: rob_check_stage+130↑j
                lda     0x3CA3D70A, r13
                addr    r13, g4, r5
                ld      0x1C(g7), r6
                ld      0x81C(g7), r14
                addr    r5, r14, r3
                cmpr    r6, r3
                bge     loc_183BC
                setbit  0, r10, r10
                ld      0x84(g7), r14
                addr    r5, r14, r3
                cmpr    r6, r3
                bge     loc_183BC
loc_18398:                              # CODE XREF: rob_check_stage+1EC↓j
                ld      0x0(g7), r15
                setbit  0xD, r15, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0x1C(g7)
                mov     0, r15
                st      r15, 0x30(g7)
                call    sub_1980C
                b       loc_183CC
# ---------------------------------------------------------------------------
loc_183BC:                              # CODE XREF: rob_check_stage+1A8↑j
                ldos    0x614(g7), r14
                cmpobe  0, r14, loc_183CC
                bbs     0, r10, loc_18398
                b       loc_183CC
# ---------------------------------------------------------------------------
loc_183CC:                              # CODE XREF: rob_check_stage+4↑j
                ld      0x1E18(g7), r15
                bbs     8, r15, loc_18400
                ld      0x1A4(g7), r15
                bbc     8, r15, loc_18400
                ld      mod_fa_coli, r3
                ld      0x1E0(r3), r6
                ldob    4(g7), r14
                cmpobe  0, r14, loc_183FC
                shlo    0xF, 1, r13
                addi    r13, r6, r6
loc_183FC:                              # CODE XREF: rob_check_stage+218↑j
                stis    r6, 0x760(g7)
loc_18400:                              # CODE XREF: rob_check_stage+1FC↑j
                ret
# End of function rob_check_stage
# =============== S U B R O U T I N E =======================================
action_after:                           # CODE XREF: action_init+6E8↑p
                ldis    0x26(g7), r4    # Label from official source
                ld      0x1A4(g7), r15
                bbc     6, r15, loc_18418
                ldis    0x812(g7), r13
                addi    r13, r4, r4
loc_18418:                              # CODE XREF: action_after+8↑j
                stis    r4, 0x5B4(g7)
                ld      0x70C(g7), r15
                bbs     2, r15, loc_1843C
                ld      0x1A4(g7), r15
                bbs     0, r15, loc_1843C
                ld      0x0(g7), r15
                bbs     4, r15, loc_1843C
                mov     0, r15
                stib    r15, 0x6F4(g7)
loc_1843C:                              # CODE XREF: action_after+1C↑j
                ret
# End of function action_after
# =============== S U B R O U T I N E =======================================
get_my_info_new:                        # CODE XREF: get_game_info+1C↑p
                mov     0, r15          # Guessed from Fighting Viper Source
                st      r15, 0x1250(g7)
                lda     0x650(g7), r3
                mov     0, r4
                mov     0, r12
                lda     0x42C80000, r6
loc_18460:                              # CODE XREF: get_my_info_new+3C↓j
                ld      (r3), r5
                cmpr    r6, r5
                bl      loc_18474
                mov     r5, r6
                mov     r4, r12
loc_18474:                              # CODE XREF: get_my_info_new+28↑j
                addo    4, r3, r3
                addo    1, r4, r4
                cmpobne 4, r4, loc_18460
                lda     0x40133333, r3
                cmpr    r6, r3
                bg      loc_184E8
                shlo    0xC, 1, r13
                ldos    0x26(g7), r3
                and     3, r12, r12
                ldos    word_196BC[r12*2], r4
                cmpobne 0, r4, loc_184C4
                shlo    0xF, 1, r5
                addo    r5, r4, r4
                addo    r5, r3, r3
                lda     0xFFFF, r5
                and     r5, r4, r4
                and     r5, r3, r3
loc_184C4:                              # CODE XREF: get_my_info_new+64↑j
                addo    r13, r4, r14
                cmpobl  r14, r3, loc_184E8
                subo    r13, r4, r14
                cmpobg  r14, r3, loc_184E8
                ld      0x1250(g7), r15
                setbit  0, r15, r15
                st      r15, 0x1250(g7)
loc_184E8:                              # CODE XREF: get_my_info_new+4C↑j
                lda     0x650(g7), r3
                mov     0, r4
                mov     0, r12
                lda     0x42C80000, r6
loc_184FC:                              # CODE XREF: get_my_info_new+D8↓j
                ld      (r3), r5
                cmpr    r6, r5
                bl      loc_18510
                mov     r5, r6
                mov     r4, r12
loc_18510:                              # CODE XREF: get_my_info_new+C4↑j
                addo    4, r3, r3
                addo    1, r4, r4
                cmpobne 4, r4, loc_184FC
                lda     0x40133333, r3
                cmpr    r6, r3
                bg      get_my_info
                shlo    0xC, 1, r13
                ldos    0x26(g7), r3
                and     3, r12, r12
                ldos    word_196C4[r12*2], r4
                cmpobne 0, r4, loc_18560
                shlo    0xF, 1, r5
                addo    r5, r4, r4
                addo    r5, r3, r3
                lda     0xFFFF, r5
                and     r5, r4, r4
                and     r5, r3, r3
loc_18560:                              # CODE XREF: get_my_info_new+100↑j
                addo    r13, r4, r14
                cmpobl  r14, r3, get_my_info
                subo    r13, r4, r14
                cmpobg  r14, r3, get_my_info
                ld      0x1250(g7), r15
                setbit  1, r15, r15
                st      r15, 0x1250(g7)
get_my_info:                            # CODE XREF: get_my_info_new+E8↑j
                ldob    0xA00(g7), r14  # Label from Fighting Vipers source
                cmpobne 4, r14, loc_185B4
                mov     0, r15
                stib    r15, 0xA00(g7)
                ld      0x1A4(g7), r5
                bbc     0xF, r5, loc_185B4
                clrbit  0xF, r5, r5
                ldob    rise_base, r3
                stob    r3, nagerenai_timer # nagerenai = "can't throw"
                st      r5, 0x1A4(g7)
loc_185B4:                              # CODE XREF: get_my_info_new+148↑j
                ldos    0x614(g7), r3   # P1_PARTS+0x614 P1_PARTS+0x624
                ldos    0x624(g7), r4
                or      r3, r4, r5
                ldos    0x61C(g7), r6
                stos    r5, 0x61C(g7)
                stos    r6, 0x60E(g7)
                ldos    0x618(g7), r4
                andnot  r5, r4, r3
                stos    r3, 0x628(g7)
                ld      0x1A4(g7), r4
                bbs     0xE, r4, loc_185EC
                bbs     0x10, r4, loc_185EC
                ldis    0x26(g7), r11
                bbc     6, r4, loc_18918
loc_185EC:                              # CODE XREF: get_my_info_new+19C↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1B003636, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mov     0xC, r15
                st      r15, (g11)[g12*1]
                lda     0x6800D0D, r15
                st      r15, (g11)[g12*1]
                lda     flt_1CFB0, g0
                lda     0x50E000, g1
                call    calc_gyang_from_fu_vec
                mov     g0, r11
                lda     0x1B003636, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                lda     0xB4, r15
                st      r15, (g11)[g12*1]
                lda     0x6800D0D, r15
                st      r15, (g11)[g12*1]
                lda     flt_1CFC8, g0
                call    calc_gyang_from_fu_vec2
                mov     g0, g2
                lda     0x1B003636, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                shlo    4, 9, r15
                st      r15, (g11)[g12*1]
                lda     0x6800D0D, r15
                st      r15, (g11)[g12*1]
                lda     flt_1CFC8, g0
                call    calc_gyang_from_fu_vec2
                mov     g0, g3
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x1A4(g7), r3
                bbs     0xE, r3, loc_186C0
                bbc     0x10, r3, loc_186F4
loc_186C0:                              # CODE XREF: get_my_info_new+278↑j
                ld      0x50E004, r4
                lda     0x3ECCCCCD, r5
                ld      0x804(g7), r15
                bbs     0xB, r15, loc_186DC
                setbit  0x1F, r5, r5
loc_186DC:                              # CODE XREF: get_my_info_new+294↑j
                cmpr    r4, r5
                ble     loc_186EC
                clrbit  0xB, r3, r3
                b       loc_186F0
# ---------------------------------------------------------------------------
loc_186EC:                              # CODE XREF: get_my_info_new+2A0↑j
                setbit  0xB, r3, r3
loc_186F0:                              # CODE XREF: get_my_info_new+2A8↑j
                st      r3, 0x1A4(g7)
loc_186F4:                              # CODE XREF: get_my_info_new+27C↑j
                ldt     0x2A8(g7), r4
                ldt     0x284(g7), r8
                ldt     0x1F4(g7), r12
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                st      r7, 0x69C(g7)
                mov     0, g0
                ld      gyang_ha_d, r15
                subr    r13, r5, r3
                clrbit  0x1F, r3, r3
                cmpibg  r3, r15, loc_18740
                or      1, g0, g0
loc_18740:                              # CODE XREF: get_my_info_new+2F8↑j
                subr    r13, r9, r3
                clrbit  0x1F, r3, r3
                cmpibg  r3, r15, loc_18750
                or      2, g0, g0
loc_18750:                              # CODE XREF: get_my_info_new+308↑j
                cmpobe  3, g0, loc_1887C
                cmpobe  0, g0, loc_18770
                ld      0x1A4(g7), r3
                bbs     0xE, r3, loc_18764
                bbc     0x10, r3, loc_18770
loc_18764:                              # CODE XREF: get_my_info_new+31C↑j
                cmpobe  2, g0, loc_1889C
                movt    r4, r8
                b       loc_1889C
# ---------------------------------------------------------------------------
loc_18770:                              # CODE XREF: get_my_info_new+314↑j
                ld      gyang_asi_h, r15
                subr    r5, r9, r3
                clrbit  0x1F, r3, r3
                st      r3, 0x6A0(g7)
                cmpibl  r3, r15, loc_18794
                ld      gyang_asi_d, r15
                cmpibg  r7, r15, loc_187B8
loc_18794:                              # CODE XREF: get_my_info_new+344↑j
                mov     1, r15
                stob    r15, 0x60D(g7)
                b       loc_18868
# ---------------------------------------------------------------------------
                ld      gyang_asi_d, r15
                cmpibg  r7, r15, loc_187B8
                mov     3, r15
                stob    r15, 0x60D(g7)
                b       loc_18868
# ---------------------------------------------------------------------------
loc_187B8:                              # CODE XREF: get_my_info_new+350↑j
                mov     0, r15
                stob    r15, 0x60D(g7)
                cmpr    r5, r9
                bg      loc_187EC
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                b       loc_18918
# ---------------------------------------------------------------------------
loc_187EC:                              # CODE XREF: get_my_info_new+384↑j
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                b       loc_18918
# ---------------------------------------------------------------------------
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                ldos    0x50A0C8, r12
                subi    r12, 0, r15
                cmpi    r3, r15
                concmpi r3, r12
                be      loc_18850
                notbit  0xF, r3, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                subi    r12, 0, r15
                cmpi    r3, r15
                concmpi r3, r12
                bne     loc_18860
                notbit  0xF, r7, r7
loc_18850:                              # CODE XREF: get_my_info_new+3EC↑j
                mov     0, r15
                stob    r15, 0x60D(g7)
                mov     r7, r11
                b       loc_18918
# ---------------------------------------------------------------------------
loc_18860:                              # CODE XREF: get_my_info_new+408↑j
                mov     1, r15
                stob    r15, 0x60D(g7)
loc_18868:                              # CODE XREF: get_my_info_new+35C↑j
                subo    g2, g3, r3
                shlo    0x10, r3, r3
                shri    0x11, r3, r3
                addo    g2, r3, r11
                b       loc_18918
# ---------------------------------------------------------------------------
loc_1887C:                              # CODE XREF: get_my_info_new:loc_18750↑j
                addr    r4, r8, r8
                addr    r6, r10, r10
                lda     0x3F000000, r13
                mulr    r13, r8, r8
                lda     0x3F000000, r13
                mulr    r13, r10, r10
loc_1889C:                              # CODE XREF: get_my_info_new:loc_18764↑j
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                mov     2, r15
                stob    r15, 0x60D(g7)
                mov     0, r11
                ld      0x50E004, r3
                chkbit  0x1F, r3
                alterbit 0xF, r11, r11
                ldt     0x50E00C, r4
                subr    r12, r8, r8
                mulr    r4, r8, r4
                subr    r14, r10, r10
                mulr    r6, r10, r6
                addr    r4, r6, r4
                bbs     0x1F, r4, loc_188FC
                notbit  0xF, r11, r11
loc_188FC:                              # CODE XREF: get_my_info_new+4B4↑j
                ld      0x1A4(g7), r3
                bbs     0xE, r3, loc_18908
                bbc     0x10, r3, loc_18914
loc_18908:                              # CODE XREF: get_my_info_new+4C0↑j
                chkbit  0xF, r11
                alterbit 0xB, r3, r3
                st      r3, 0x1A4(g7)
loc_18914:                              # CODE XREF: get_my_info_new+4C4↑j
                addo    r7, r11, r11
loc_18918:                              # CODE XREF: get_my_info_new+1A8↑j
                stis    r11, 0x616(g7)
                ld      0x1A4(g7), r3
                ld      0x0(g7), r4
                shro    0xF, r3, r3
                xor     r4, r3, r3
                chkbit  6, r3
                alterbit 0xA, r4, r4
                st      r4, 0x0(g7)
                lda     0x1F8(g7), r5
                ld      (r5), r4
                mov     0xF, r6
loc_18944:                              # CODE XREF: get_my_info_new+51C↓j
                addo    0xC, r5, r5
                ld      (r5), r3
                cmpr    r4, r3
                ble     loc_18958
                mov     r3, r4
loc_18958:                              # CODE XREF: get_my_info_new+510↑j
                cmpdeco 1, r6, r6
                bl      loc_18944
                st      r4, 0x6A4(g7)
                call    rob_check_stage
                ldis    0x5B4(g7), g0
                call    calc_stage_limit_dist
                st      g1, 0x5F8(g7)
                notbit  0xF, g0, g0
                call    calc_stage_limit_dist
                st      g1, 0x5FC(g7)
                ld      stage_x, r7
                ld      0x1F4(g7), r4
                ld      0x1FC(g7), r6
loc_18990:                              # DATA XREF: MAIN_DATA:026F329C↓o
                clrbit  0x1F, r4, r4
                clrbit  0x1F, r6, r6
                cmpibge r4, r6, loc_189A0
                mov     r6, r4
loc_189A0:                              # CODE XREF: get_my_info_new+558↑j
                subr    r4, r7, r3
                st      r3, 0x6A8(g7)
                ld      0x81C(g7), g0
                call    calc_land_time
                stos    g1, 0x5BC(g7)
                ld      fa_camera, r6
                ldis    0x26(r6), r13
                ldis    0x5B4(g7), r14
                subi    r13, r14, r4
                ld      0x0(g7), r5
                notbit  0xF, r4, r12
                chkbit  0xF, r12
                alterbit 1, r5, r5
                st      r5, 0x0(g7)
                mov     0, r11
                ld      0x1A4(g7), r7
                ldob    0x821(g7), r9
                ldos    0x828(g7), r10
                bbc     8, r7, loc_18A44
                ld      off_189FC[r9*4], r3
                bx      (r3)
# ---------------------------------------------------------------------------
off_189FC:      .long loc_18A20         # DATA XREF: get_my_info_new+5B0↑r
                .long loc_18A24
                .long loc_18A30
                .long loc_18A24
                .long loc_18A24
                .long loc_18A30
                .long loc_18A30
                .long loc_18A24
                .long loc_18A24
# ---------------------------------------------------------------------------
loc_18A20:                              # DATA XREF: get_my_info_new:off_189FC↑o
                setbit  2, r11, r11
loc_18A24:                              # DATA XREF: get_my_info_new+5C0↑o
                bbs     9, r10, loc_18A3C
                setbit  0, r11, r11
                b       loc_18A3C
# ---------------------------------------------------------------------------
loc_18A30:                              # DATA XREF: get_my_info_new+5C4↑o
                setbit  3, r11, r11
                bbs     9, r10, loc_18A3C
                setbit  1, r11, r11
loc_18A3C:                              # CODE XREF: get_my_info_new:loc_18A24↑j
                cmpobne 0, r11, loc_18A44
                setbit  0xF, r11, r11
loc_18A44:                              # CODE XREF: get_my_info_new+5AC↑j
                st      r11, 0x6D4(g7)
                ld      0x864(g7), r14
                cmpobe  0, r14, turn_on_me_muken
                ldos    0x868(g7), r13
                ldos    0x5BC(g7), r14
                cmpibge r13, r14, turn_on_me_muken
                ldos    0x878(g7), r13
                ldos    0x1AA(g7), r14
                cmpobg  r13, r14, turn_on_me_muken
                ld      0x0(g7), r14
                setbit  0xE, r14, r15
                st      r15, 0x0(g7)
                b       loc_18A84
# ---------------------------------------------------------------------------
turn_on_me_muken:                       # CODE XREF: get_my_info_new+60C↑j
                ld      0x0(g7), r14    # r14 = P1_PARTS or P2_PARTS
                clrbit  14, r14, r15
                st      r15, 0x0(g7)
loc_18A84:                              # CODE XREF: get_my_info_new+634↑j
                ret
# End of function get_my_info_new
# =============== S U B R O U T I N E =======================================
get_en_info:                            # CODE XREF: get_game_info+50↑p
                mov     0, r10          # Label from Virtua Fighter 2 source
                mov     0, r12
                mov     0, g1
                ld      0x1A4(g7), r7
                ld      0x1A4(g8), r8
                ld      0x190(g7), g0
                ld      0x10(g0), g0
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                ld      0x1F4(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x1F4(g8), r15
                st      r15, (g11)[g12*1]
                ld      0x1FC(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x1FC(g8), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                ld      0x5F4(g7), r15
                st      r15, 0x7D4(g7)
                st      r9, 0x5F4(g7)
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                ld      0x1F4(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x1E0C(g8), r15
                st      r15, (g11)[g12*1]
                ld      0x1FC(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x1E14(g8), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                ld      0x5F4(g7), r4
                lda     0x447A0000, r13
                mulr    r13, r3, r3
                lda     0x447A0000, r13
                mulr    r13, r4, r4
                lda     0xC001818, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xC001818, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x3A83126F, r13
                mulr    r13, r3, r3
                lda     0x3A83126F, r13
                mulr    r13, r4, r4
                cmpr    r3, r4
                bg      loc_18BB0
                be      loc_18BB4
                setbit  8, r10, r10
                b       loc_18BB4
# ---------------------------------------------------------------------------
loc_18BB0:                              # CODE XREF: get_en_info+118↑j
                setbit  7, r10, r10
loc_18BB4:                              # CODE XREF: get_en_info+11C↑j
                bbc     4, r8, loc_18C5C
                ld      0x1F8(g8), r3
                ld      0x1E10(g8), r4
                lda     0x447A0000, r13
                mulr    r13, r3, r3
                lda     0x447A0000, r13
                mulr    r13, r4, r4
                lda     0xC001818, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xC001818, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x3A83126F, r13
                mulr    r13, r3, r3
                lda     0x3A83126F, r13
                mulr    r13, r4, r4
                cmpr    r3, r4
                bg      loc_18C58
                be      loc_18C5C
                setbit  0xA, r10, r10
                b       loc_18C5C
# ---------------------------------------------------------------------------
loc_18C58:                              # CODE XREF: get_en_info+1C0↑j
                setbit  9, r10, r10
loc_18C5C:                              # CODE XREF: get_en_info:loc_18BB4↑j
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                ld      0x1FC(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x1FC(g8), r15
                st      r15, (g11)[g12*1]
                ld      0x1F4(g8), r15
                st      r15, (g11)[g12*1]
                ld      0x1F4(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                lda     0x3ECCCCCD, r3
                cmpibg  r9, r3, loc_18D00
                bbc     4, r7, loc_18CAC
                ld      0x2C(g7), r4
                ld      0x34(g7), r5
                cmpobne 0, r4, loc_18CC0
                cmpobne 0, r5, loc_18CC0
loc_18CAC:                              # CODE XREF: get_en_info+210↑j
                bbc     4, r8, loc_18D00
                ld      0x2C(g7), r4
                ld      0x34(g7), r5
                cmpobne 0, r4, loc_18CC0
                cmpobe  0, r5, loc_18D00
loc_18CC0:                              # CODE XREF: get_en_info+21C↑j
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                mov     0, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                subo    r11, r3, r4
                shlo    0xE, 1, r13
                addi    r13, r4, r4
                bbc     0xF, r4, loc_18CF8
                notbit  0xF, r3, r3
loc_18CF8:                              # CODE XREF: get_en_info+268↑j
                mov     r3, r11
                b       loc_18D0C
# ---------------------------------------------------------------------------
loc_18D00:                              # CODE XREF: get_en_info+20C↑j
                ld      en_ang_dist, r3
                cmpible r9, r3, loc_18D10
loc_18D0C:                              # CODE XREF: get_en_info+274↑j
                stis    r11, 0x5B6(g7)
loc_18D10:                              # CODE XREF: get_en_info+280↑j
                ld      0x1A4(g7), r15
                bbc     4, r15, loc_18D70
                ldt     0x1F4(g7), r4
                stt     r4, 0x734(g7)
                ld      0x30(g7), r4
                ld      0x5CC(g7), r5
                ld      0x50A000, r6
                ld      0x3C(g0), r3
loc_18D34:                              # CODE XREF: get_en_info+2E4↓j
                ld      0x2C(g7), r13
                ld      0x734(g7), r14
                addr    r13, r14, r15
                st      r15, 0x734(g7)
                ld      0x34(g7), r13
                ld      0x73C(g7), r14
                addr    r13, r14, r15
                st      r15, 0x73C(g7)
                subr    r6, r4, r4
                addr    r5, r4, r4
                ld      0x738(g7), r14
                addr    r4, r14, r15
                st      r15, 0x738(g7)
                cmpdeco 1, r3, r3
                bl      loc_18D34
loc_18D70:                              # CODE XREF: get_en_info+28C↑j
                ld      0x1A4(g8), r15
                bbc     4, r15, loc_18DD0
                ldt     0x1F4(g8), r4
                stt     r4, 0x734(g8)
                ld      0x30(g8), r4
                ld      0x5CC(g8), r5
                ld      0x50A000, r6
                ld      0x3C(g0), r3
loc_18D94:                              # CODE XREF: get_en_info+344↓j
                ld      0x2C(g8), r13
                ld      0x734(g8), r14
                addr    r13, r14, r15
                st      r15, 0x734(g8)
                ld      0x34(g8), r13
                ld      0x73C(g8), r14
                addr    r13, r14, r15
                st      r15, 0x73C(g8)
                subr    r6, r4, r4
                addr    r5, r4, r4
                ld      0x738(g8), r14
                addr    r4, r14, r15
                st      r15, 0x738(g8)
                cmpdeco 1, r3, r3
                bl      loc_18D94
loc_18DD0:                              # CODE XREF: get_en_info+2EC↑j
                ld      0x1F4(g7), r3
                ld      0x1FC(g7), r4
                ld      0x1A4(g7), r15
                bbc     4, r15, loc_18DE8
                ld      0x734(g7), r3
                ld      0x73C(g7), r4
loc_18DE8:                              # CODE XREF: get_en_info+354↑j
                ld      0x1F4(g8), r5
                ld      0x1FC(g8), r6
                ld      0x1A4(g8), r15
                bbc     4, r15, loc_18E00
                ld      0x734(g8), r5
                ld      0x73C(g8), r6
loc_18E00:                              # CODE XREF: get_en_info+36C↑j
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                st      r3, 0x740(g7)
                st      r3, 0x740(g8)
                ld      0x0(g8), r15
                bbc     0x1D, r15, loc_18E34
                setbit  6, r10, r10
loc_18E34:                              # CODE XREF: get_en_info+3A4↑j
                ldis    0x5B4(g7), r6
                subi    r6, r11, r4
                shlo    0xE, 1, r13
                addi    r13, r4, r4
                bbc     0xF, r4, loc_18E8C
                setbit  0, r10, r10
                ld      0x5B8(g7), r3
                bbs     0, r3, loc_18E8C
                xor     r10, r3, r3
                bbc     0, r10, loc_18E8C
                ld      0x5F4(g7), r3
                lda     0x3ECCCCCD, r4
                cmpr    r3, r4
                bg      loc_18E8C
                or      r7, r8, r3
                bbs     4, r3, loc_18E88
                ld      mod_fa_coli, r3
                ld      0x164(r3), r3
                cmpobe  0, r3, loc_18E8C
loc_18E88:                              # CODE XREF: get_en_info+3EC↑j
                clrbit  0, r10, r10
loc_18E8C:                              # CODE XREF: get_en_info+3BC↑j
                ldis    0x5B4(g8), r6
                subi    r6, r11, r4
                shlo    0xE, 1, r13
                addi    r13, r4, r4
                bbs     0xF, r4, loc_18EA4
                setbit  1, r10, r10
loc_18EA4:                              # CODE XREF: get_en_info+414↑j
                addo    0x1F, 8, r13
                ldob    0x19F(g7), r14
                cmpobne r13, r14, loc_18EB4
                bbs     0x12, r12, loc_18EE0
loc_18EB4:                              # CODE XREF: get_en_info+424↑j
                addo    0x1F, 9, r13
                ldob    0x19F(g7), r14
                cmpobne r13, r14, loc_18EC4
                bbs     6, r12, loc_18EE0
loc_18EC4:                              # CODE XREF: get_en_info+434↑j
                addo    0x1F, 9, r13
                ldob    0x19F(g7), r14
                cmpobne r13, r14, loc_18ED4
                bbs     7, r12, loc_18EE0
loc_18ED4:                              # CODE XREF: get_en_info+444↑j
                addo    0x1F, 0xA, r13
                ldob    0x19F(g7), r14
                cmpobne r13, r14, loc_18EF8
loc_18EE0:                              # CODE XREF: get_en_info+428↑j
                mov     1, g1
                bbs     1, r7, loc_18EF8
                bbc     8, r7, loc_18EF8
                ld      0x0(g8), r15
                bbs     0x1D, r15, loc_18EF8
                setbit  0xF, r12, r12
loc_18EF8:                              # CODE XREF: get_en_info+454↑j
                lda     0x4003D010, r13
                and     r13, r7, r3
                cmpobne 0, r3, loc_18F8C
                lda     0x40009010, r13
                and     r13, r8, r3
                cmpobne 0, r3, loc_18F8C
                ldos    0x1244(g7), r14
                cmpobe  0, r14, loc_18F8C
                ld      0x70C(g7), r15
                bbs     2, r15, loc_18F8C
                ld      0x70C(g8), r15
                bbs     2, r15, loc_18F8C
                ldis    0x5B4(g7), r14
                subi    r11, r14, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                lda     0x1554, r4
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                bne     loc_18F8C
                ldis    0x5B4(g8), r14
                subi    r11, r14, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                be      loc_18F84
                setbit  0xA, r12, r12
                b       loc_18F8C
# ---------------------------------------------------------------------------
loc_18F84:                              # CODE XREF: get_en_info+4F0↑j
                setbit  0xB, r12, r12
                b       loc_18F8C
# ---------------------------------------------------------------------------
loc_18F8C:                              # CODE XREF: get_en_info+47C↑j
                bbs     4, r7, loc_19260
                ld      0x0(g8), r15
                bbs     0x1D, r15, loc_19260
                ld      0x70C(g8), r15
                bbs     2, r15, loc_19260
                lda     0x40089008, r13
                and     r13, r8, r3
                cmpobne 0, r3, loc_19260
                shlo    0xE, 5, r13
                and     r13, r8, r3
                cmpobne 0, r3, loc_1918C
                bbs     0xF, r12, loc_18FCC
                ldob    nagerenai_timer, r14 # nagerenai = "can't throw"
                cmpobne 0, r14, loc_19260
loc_18FCC:                              # CODE XREF: get_en_info+534↑j
                ldis    0x5B4(g8), r13
                ldis    0x5B4(g7), r14
                subi    r13, r14, r3
                shlo    0xF, 1, r13
                addi    r13, r3, r3
                lda     0xFFFF, r13
                and     r13, r3, r3
                lda     loc_5550, r13
                cmpobg  r13, r3, loc_19008
                lda     loc_AAA0, r13
                cmpobl  r13, r3, loc_19008
                b       loc_19068
# ---------------------------------------------------------------------------
loc_19008:                              # CODE XREF: get_en_info+56C↑j
                bbc     1, r8, loc_1900C
loc_1900C:                              # CODE XREF: get_en_info:loc_19008↑j
                cmpobe  0, g1, loc_19068
                lda     off_1018, r13
                and     r13, r8, r3
                cmpobne 0, r3, loc_19068
                b       loc_19050
# ---------------------------------------------------------------------------
                lda     0x4003614, r13
                and     r13, r8, r3
                cmpobe  0, r3, loc_19068
                and     0x10, r8, r3
                cmpobne 0, r3, loc_19068
                shlo    0xC, 1, r13
                and     r13, r8, r3
                cmpobne 0, r3, loc_19068
                ld      0x0(g8), r15
                bbs     8, r15, loc_19068
loc_19050:                              # CODE XREF: get_en_info+598↑j
                ld      0x0(g0), r3
                ld      0x5F4(g7), r4
                cmpr    r4, r3
                bg      loc_19068
                cmpobe  0, g1, loc_19068
                setbit  0xC, r12, r12
loc_19068:                              # CODE XREF: get_en_info+57C↑j
                ldis    0x5B4(g7), r14
                subi    r11, r14, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                lda     0x1554, r4
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                bne     loc_19260
                ldis    0x5B4(g8), r14
                subi    r11, r14, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                be      loc_1914C
                notbit  0xF, r3, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                bne     loc_19260
                mov     0, r4
                bbc     1, r8, loc_190DC
                ld      0x844(g8), r15
                bbs     0x1B, r15, loc_1911C
loc_190DC:                              # CODE XREF: get_en_info+648↑j
                lda     0x4003614, r13
                and     r13, r8, r3
                cmpobe  0, r3, loc_19260
                and     0x10, r8, r3
                cmpobne 0, r3, loc_19224
                shlo    0xC, 1, r13
                and     r13, r8, r3
                cmpobne 0, r3, loc_19260
                ld      0x0(g8), r15
                bbs     8, r15, loc_19134
                setbit  5, r12, r12
                ld      0x0(g0), r3
                ld      0x5F4(g7), r4
                cmpr    r4, r3
                bg      loc_19120
loc_1911C:                              # CODE XREF: get_en_info+650↑j
                setbit  0, r12, r12
loc_19120:                              # CODE XREF: get_en_info+690↑j
                ld      4(g0), r3
                cmpr    r4, r3
                bg      loc_19260
                setbit  1, r12, r12
                b       loc_19260
# ---------------------------------------------------------------------------
loc_19134:                              # CODE XREF: get_en_info+67C↑j
                ld      8(g0), r3
                ld      0x5F4(g7), r4
                cmpr    r4, r3
                bg      loc_19260
                setbit  2, r12, r12
                b       loc_19260
# ---------------------------------------------------------------------------
loc_1914C:                              # CODE XREF: get_en_info+624↑j
                lda     0x4003614, r13
                and     r13, r8, r3
                cmpobe  0, r3, loc_19260
                and     0x10, r8, r3
                cmpobne 0, r3, loc_19260
                ld      0xC(g0), r3
                ld      0x5F4(g7), r4
                cmpr    r4, r3
                bg      loc_19260
                ld      0x0(g8), r15
                bbs     8, r15, loc_19184
                setbit  3, r12, r12
                b       loc_19260
# ---------------------------------------------------------------------------
loc_19184:                              # CODE XREF: get_en_info+6F0↑j
                setbit  4, r12, r12
                b       loc_19260
# ---------------------------------------------------------------------------
loc_1918C:                              # CODE XREF: get_en_info+530↑j
                bbc     0x10, r8, loc_19260
                ldis    0x5B4(g7), r14
                subi    r11, r14, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                lda     loc_2AA8, r4
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                bne     loc_19260
                ldis    0x5B4(g8), r14
                subi    r11, r14, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                be      loc_1920C
                notbit  0xF, r3, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                bne     loc_19260
                ld      0x38(g0), r3
                ld      0x5F4(g7), r4
                cmpr    r4, r3
                bg      loc_19260
                setbit  6, r12, r12
                b       loc_19260
# ---------------------------------------------------------------------------
loc_1920C:                              # CODE XREF: get_en_info+74C↑j
                ld      0x38(g0), r3
                ld      0x5F4(g7), r4
                cmpr    r4, r3
                bg      loc_19260
                setbit  7, r12, r12
                b       loc_19260
# ---------------------------------------------------------------------------
loc_19224:                              # CODE XREF: get_en_info+668↑j
                ld      0x2C(g0), r3
                ld      0x740(g7), r4
                cmpr    r4, r3
                bg      loc_19260
                ld      0x0(g8), r15
                bbs     3, r15, loc_19260
                ld      0x738(g8), r3
                ld      0x30(g0), r4
                cmpr    r3, r4
                bg      loc_19260
                ld      0x34(g0), r4
                cmpr    r3, r4
                bl      loc_19260
                setbit  0x14, r12, r12
                b       loc_19260
# ---------------------------------------------------------------------------
loc_19260:                              # CODE XREF: get_en_info:loc_18F8C↑j
                subo    1, 0, r15
                st      r15, 0x750(g7)
                or      r7, r8, r15
                lda     0x650(g8), r3
                mov     0, r4
                mov     0, r15
                lda     0x42C80000, r6
loc_19280:                              # CODE XREF: get_en_info+814↓j
                ld      (r3), r5
                cmpr    r6, r5
                bl      loc_19294
                mov     r5, r6
                mov     r4, r15
loc_19294:                              # CODE XREF: get_en_info+800↑j
                addo    4, r3, r3
                addo    1, r4, r4
                cmpobne 4, r4, loc_19280
                lda     0x3F800000, r3
                cmpr    r6, r3
                bg      loc_19324
                shlo    0xC, 1, r13
                ld      mod_fa_coli, r3
                ldos    0x1E0(r3), r3
                ldos    word_196BC[r15*2], r4
                ldob    4(g7), r14
                cmpobe  0, r14, loc_192D8
                ldos    word_196CC[r15*2], r4
loc_192D8:                              # CODE XREF: get_en_info+844↑j
                cmpobne 0, r4, loc_192F8
                shlo    0xF, 1, r5
                addo    r5, r4, r4
                addo    r5, r3, r3
                lda     0xFFFF, r5
                and     r5, r4, r4
                and     r5, r3, r3
loc_192F8:                              # CODE XREF: get_en_info:loc_192D8↑j
                addo    r13, r4, r14
                cmpobl  r14, r3, loc_19324
                subo    r13, r4, r14
                cmpobg  r14, r3, loc_19324
                st      r15, 0x750(g7)
                ldl     word_1969C[r15*8], r4
                mulr    r4, r6, r4
                mulr    r5, r6, r5
                stl     r4, 0x754(g7)
                setbit  8, r12, r12
loc_19324:                              # CODE XREF: get_en_info+824↑j
                lda     0x650(g7), r3
                mov     0, r4
                mov     0, r15
                lda     0x42C80000, r6
loc_19338:                              # CODE XREF: get_en_info+8CC↓j
                ld      (r3), r5
                cmpr    r6, r5
                bl      loc_1934C
                mov     r5, r6
                mov     r4, r15
loc_1934C:                              # CODE XREF: get_en_info+8B8↑j
                addo    4, r3, r3
                addo    1, r4, r4
                cmpobne 4, r4, loc_19338
                lda     0x3F800000, r3
                cmpr    r6, r3
                bg      loc_193DC
                shlo    0xC, 1, r13
                ld      mod_fa_coli, r3
                ldos    0x1E0(r3), r3
                ldos    word_196C4[r15*2], r4
                ldob    4(g7), r14
                cmpobe  0, r14, loc_19390
                ldos    word_196D4[r15*2], r4
loc_19390:                              # CODE XREF: get_en_info+8FC↑j
                cmpobne 0, r4, loc_193B0
                shlo    0xF, 1, r5
                addo    r5, r4, r4
                addo    r5, r3, r3
                lda     0xFFFF, r5
                and     r5, r4, r4
                and     r5, r3, r3
loc_193B0:                              # CODE XREF: get_en_info:loc_19390↑j
                addo    r13, r4, r14
                cmpobl  r14, r3, loc_193DC
                subo    r13, r4, r14
                cmpobg  r14, r3, loc_193DC
                st      r15, 0x750(g7)
                ldl     word_1969C[r15*8], r4
                mulr    r4, r6, r4
                mulr    r5, r6, r5
                stl     r4, 0x754(g7)
                setbit  9, r12, r12
loc_193DC:                              # CODE XREF: get_en_info+8DC↑j
                bbs     0xF, r8, loc_19404
                bbs     8, r8, loc_19404
                bbs     0x10, r8, loc_19400
                ld      0x70C(g8), r15
                bbs     2, r15, loc_19400
                bbc     0xE, r8, loc_19404
                bbc     4, r8, loc_19400
                ldos    0x5BC(g7), r14
                cmpobne 0, r14, loc_19404
loc_19400:                              # CODE XREF: get_en_info+95C↑j
                setbit  5, r10, r10
loc_19404:                              # CODE XREF: get_en_info:loc_193DC↑j
                bbc     8, r8, loc_194A8
                bbc     1, r8, loc_194A8
                ldis    0x5B4(g7), r14
                subi    r11, r14, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                lda     0x1554, r4
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                bne     loc_194A8
                ldis    0x5B4(g8), r14
                subi    r11, r14, r3
                notbit  0xF, r3, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                bne     loc_194A8
                lda     0x3FF8000, r5
                lda     0x40000000, r3
                cmpible r9, r3, loc_19474
                clrbit  0x16, r5, r5
                clrbit  0x17, r5, r5
loc_19474:                              # CODE XREF: get_en_info+9E0↑j
                lda     0x3FE66666, r3
                cmpible r9, r3, loc_1948C
                clrbit  0x12, r5, r5
                clrbit  0x15, r5, r5
                clrbit  0x13, r5, r5
loc_1948C:                              # CODE XREF: get_en_info+9F4↑j
                lda     0x3FCCCCCD, r3
                cmpible r9, r3, loc_1949C
                clrbit  0x14, r5, r5
loc_1949C:                              # CODE XREF: get_en_info+A0C↑j
                ld      0x844(g8), r3
                and     r5, r3, r3
                or      r3, r10, r10
loc_194A8:                              # CODE XREF: get_en_info:loc_19404↑j
                shlo    0x1A, 0xF, r13
                ld      0x844(g8), r14
                and     r13, r14, r3
                cmpobe  0, r3, loc_194C8
                ldos    0x84E(g8), r13
                ldos    0x1AA(g8), r14
                cmpobl  r13, r14, loc_194C8
                or      r3, r10, r10
loc_194C8:                              # CODE XREF: get_en_info+A2C↑j
                lda     0xC0000000, r13
                ld      0x844(g8), r14
                and     r13, r14, r3
                or      r3, r10, r10
                shlo    0xC, r10, r3
                shro    5, r10, r3
                ld      0x0(g7), r4
                xor     r4, r3, r3
                chkbit  0xA, r3
                alterbit 3, r10, r10
                ld      0x5B8(g8), r15
                bbs     1, r15, loc_19514
                bbc     0xE, r8, loc_19504
                bbs     4, r8, loc_19514
loc_19504:                              # CODE XREF: get_en_info+A74↑j
                ld      0x5F4(g7), r13
                ld      flt_1D000, r14
                cmpibl  r13, r14, loc_19518
loc_19514:                              # CODE XREF: get_en_info+A70↑j
                setbit  2, r10, r10
loc_19518:                              # CODE XREF: get_en_info+A88↑j
                ld      0x0(g7), r3
                ld      0x0(g8), r4
                xor     r3, r4, r3
                shlo    0xF, r3, r3
                xor     r7, r3, r3
                xor     r8, r3, r3
                bbc     0x15, r3, loc_19538
                setbit  4, r10, r10
loc_19538:                              # CODE XREF: get_en_info+AA8↑j
                ld      0x1A4(g7), r15
                bbc     4, r15, loc_19668
                ld      0x0(g8), r15
                bbs     0x1D, r15, loc_19668
                ldis    0x5B4(g7), r14
                subi    r11, r14, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                lda     0x1554, r4
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                bne     loc_19668
                ldis    0x5B4(g8), r14
                subi    r11, r14, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                be      loc_19668
                notbit  0xF, r3, r3
                shlo    0x10, r3, r15
                shri    0x10, r15, r3
                subi    r4, 0, r15
                cmpi    r3, r15
                concmpi r3, r4
                bne     loc_19668
                lda     dword_DD010, r13
                and     r13, r8, r3
                cmpobne 0, r3, loc_195F8
                ld      0x20(g0), r3
                ld      0x5F4(g7), r4
                cmpr    r4, r3
                bg      loc_19664
                ld      0x0(g7), r15
                bbs     3, r15, loc_19668
                ld      0x24(g0), r3
                ld      0x1F8(g7), r4
                cmpr    r4, r3
                bg      loc_19668
                ld      0x28(g0), r3
                cmpr    r4, r3
                bl      loc_19668
                setbit  0x12, r12, r12
                b       loc_19668
# ---------------------------------------------------------------------------
loc_195F8:                              # CODE XREF: get_en_info+B30↑j
                shlo    0xF, 0x1B, r13
                and     r13, r8, r3
                cmpobne 0, r3, loc_19668
                and     0x10, r8, r3
                cmpobe  0, r3, loc_19668
                ld      0x10(g0), r3
                ld      0x5F4(g7), r4
                cmpr    r4, r3
                bg      loc_19664
                ld      0x1C(g0), r3
                ld      0x1F8(g8), r4
                cmpr    r4, r3
                bl      loc_19664
                ld      0x14(g0), r3
                ld      0x0(g7), r15
                bbs     3, r15, loc_1963C
                ld      0x18(g0), r3
loc_1963C:                              # CODE XREF: get_en_info+BAC↑j
                ld      0x1F8(g7), r4
                cmpr    r4, r3
                bl      loc_19664
                ld      0x1F8(g8), r3
                subr    r4, r3, r3
                clrbit  0x1F, r3, r3
                ld      0x40(g0), r4
                cmpr    r3, r4
                bg      loc_19664
                setbit  0x10, r12, r12
loc_19664:                              # CODE XREF: get_en_info+B40↑j
                b       loc_19668
# ---------------------------------------------------------------------------
loc_19668:                              # CODE XREF: get_en_info+AB4↑j
                st      r10, 0x5B8(g7)
                st      r12, 0x720(g7)
                ldob    0x19F(g8), r14
                cmpobne 0x12, r14, loc_19698 # return
                ldos    0x1AA(g7), r3
                ldos    0x80A(g7), r4
                subo    1, r4, r4
                cmpobne r3, r4, loc_19698 # return
                lda     0x3FB33333, r3
                cmpibg  r9, r3, loc_19698 # return
                call    sub_19888
loc_19698:                              # CODE XREF: get_en_info+BEC↑j
                ret                     # return
# End of function get_en_info
# ---------------------------------------------------------------------------
word_1969C:     .short 0                # DATA XREF: get_en_info+884↑r
                .short 0x3F80
                .short 0
                .short 0
                .short 0
                .short 0xBF80
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0x3F80
                .short 0
                .short 0
                .short 0
                .short 0xBF80
word_196BC:     .short 0xC000           # DATA XREF: get_my_info_new+5C↑r
                .short 0x4000
                .short 0
                .short 0x8000
word_196C4:     .short 0x4000           # DATA XREF: get_my_info_new+F8↑r
                .short 0xC000
                .short 0x8000
                .short 0
word_196CC:     .short 0x4000           # DATA XREF: get_en_info+848↑r
                .short 0xC000
                .short 0x8000
                .short 0
word_196D4:     .short 0xC000           # DATA XREF: get_en_info+900↑r
                .short 0x4000
                .short 0
                .short 0x8000
# =============== S U B R O U T I N E =======================================
# g7 = damage reciever
# g8 = damage dealer
damage_calculation:                     # CODE XREF: ACT_RC_NAGERARE:loc_153BC↑p
                call    ketchup         # g7 = damage reciever
                stos    g0, 0x1F70(g8)  # P2_PARTS+0x1F70 or P1_PARTS+0x1F70
                ldis    game_timer, r14
                cmpibge 0, r14, loc_1972C # return
                ldob    0x1B1(g7), r14  # P1_SELECTED or P2_SELECTED
                cmpobe  16, r14, loc_1972C # if player is Super Sonic, branch (return)
                ldis    0x1AC(g7), r14  # p1_energy or p2_energy
                subi    g0, r14, r3     # store calculated energy to r3
                stos    g0, 0xC54(g7)   # P1_PARTS+0xC54 or P2_PARTS+0xC54
                cmpibl  0, r3, loc_1971C # branch if 0 is less than calculated damage
                ld      0x0(g7), r15
                setbit  5, r15, r15
                st      r15, 0x0(g7)
                mov     0, r3
loc_1971C:                              # CODE XREF: damage_calculation+2C↑j
                stos    r3, 0x1AC(g7)   # p1_energy or p2_energy
                cmpo    0, g0           # if the damage calculated is 0 then return
                be      loc_1972C       # return
                call    ring_tobitiri_set # Ring Scatter
loc_1972C:                              # CODE XREF: damage_calculation+14↑j
                ret                     # return
# End of function damage_calculation
# =============== S U B R O U T I N E =======================================
sub_19730:                              # CODE XREF: ROM:0002B404↓p
                ldis    0x1AC(g7), r7
                ldis    0x1AC(g8), r8
                subi    r7, r8, r3
                b       loc_1974C
# End of function sub_19730
# =============== S U B R O U T I N E =======================================
# g7 = damage reciever
# g8 = damage dealer
ketchup:                                # CODE XREF: damage_calculation↑p
                ldis    0x1AC(g8), r7   # p1_energy or p2_energy
                ldis    0x1AC(g7), r8   # p2_energy or p1_energy
                subi    r7, r8, r3
loc_1974C:                              # CODE XREF: sub_19730+C↑j
                ld      add_BACKUP_RAM_TO_RAM, r14
                ldob    0x3353(r14), r14 # BACKUP_RAM_TO_RAM+0x3353
                bbc     7, r14, loc_19764
                ret
# ---------------------------------------------------------------------------
loc_19764:                              # CODE XREF: ketchup+1C↑j
                ldis    energy_max, r9
                subi    r8, r9, r9
                shri    1, r9, r9
                addo    0x1F, 0x13, r4
                subi    r9, r4, r4
                cmpible 0, r4, loc_19784
                mov     0, r4
loc_19784:                              # CODE XREF: ketchup+3C↑j
                cmpibge r4, r3, loc_19790
                mov     r4, r3
                b       loc_1979C
# ---------------------------------------------------------------------------
loc_19790:                              # CODE XREF: ketchup:loc_19784↑j
                subo    0x1E, 0, r4
                cmpible r4, r3, loc_1979C
                mov     r4, r3
loc_1979C:                              # CODE XREF: ketchup+4C↑j
                cvtir   r3, r3
                cvtir   g0, r4
                lda     0x3C23D70A, r13 # Float 0.01
                mulr    r13, r3, r3
                lda     0x3F800000, r13 # Float 1.0
                addr    r13, r3, r3
                mulr    r3, r4, r4
                cvtri   r4, g0
                ret
# End of function ketchup
# =============== S U B R O U T I N E =======================================
fix_hara:                               # CODE XREF: decide_command+194↑p
                ld      0x0(g7), r9     # Label from Fighting Vipers source
                bbs     2, r9, loc_197F4
                ld      0x1F8(g7), r15
                st      r15, 0x1C(g7)
                ldob    0x83F(g7), r14
                bbs     0, r14, loc_197F0
                ld      0x1F4(g7), r15
                st      r15, 0x18(g7)
                ld      0x1FC(g7), r15
                st      r15, 0x20(g7)
loc_197F0:                              # CODE XREF: fix_hara+14↑j
                setbit  2, r9, r9
loc_197F4:                              # CODE XREF: fix_hara+4↑j
                or      0xC, r9, r15
                st      r15, 0x0(g7)
                ld      0x1A4(g7), r15
                setbit  4, r15, r15
                st      r15, 0x1A4(g7)
                ret
# End of function fix_hara
# =============== S U B R O U T I N E =======================================
sub_1980C:                              # CODE XREF: ROM:00013D78↑p
                ld      0x0(g7), r9
                bbc     2, r9, loc_19884
                ldob    0x83F(g7), r14
                bbs     0, r14, loc_19860
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x80(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x88(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                ld      (g11)[g12*1], r4
                ld      0x18(g7), r14
                subr    r3, r14, r15
                st      r15, 0x18(g7)
                ld      0x20(g7), r14
                subr    r4, r14, r15
                st      r15, 0x20(g7)
loc_19860:                              # CODE XREF: sub_1980C+C↑j
                ld      0x1C(g7), r13
                ld      0x1F8(g7), r14
                subr    r13, r14, r15
                st      r15, 0x84(g7)
                clrbit  2, r9, r9
                st      r9, 0x0(g7)
                ld      0x1A4(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x1A4(g7)
loc_19884:                              # CODE XREF: sub_1980C+4↑j
                ret
# End of function sub_1980C
# =============== S U B R O U T I N E =======================================
sub_19888:                              # CODE XREF: get_en_info+C0C↑p
                ldos    0x19C(g8), r4
                mov     r4, g0
                mov     5, g1
                call    calc_mht_adr
                ldos    1(g0), r3
                bbc     0xF, r4, loc_198A4
                notbit  0xF, r3, r3
loc_198A4:                              # CODE XREF: sub_19888+14↑j
                shlo    0x18, 0xD, r13
                addi    r13, r3, r15
                st      r15, 0x198(g7)
                ld      0x1C(g8), r3
                st      r3, 0x1C(g7)
                call    sub_1980C
                ldib    3(g0), r15
                stib    r15, 0x822(g7)
                shlo    0x1A, 3, r13
                addi    r13, r4, r15
                st      r15, 0x198(g8)
                ld      0x0(g8), r15
                clrbit  4, r15, r15
                st      r15, 0x0(g8)
                ld      0x1A4(g7), r15
                clrbit  0x15, r15, r15
                st      r15, 0x1A4(g7)
                ld      0x0(g8), r3
                ld      0x0(g7), r4
                chkbit  0xA, r3
                alterbit 6, r4, r4
                st      r4, 0x0(g7)
                ret
# End of function sub_19888
# =============== S U B R O U T I N E =======================================
calc_land_time:                         # CODE XREF: ROM:000145E4↑p
                mov     0, g1           # Label from Virtua Fighter 2 source
                ld      0x0(g7), r15
                bbc     2, r15, loc_199F8
                ld      0x50A000, r3
                ld      0x1A4(g7), r15
                bbc     0xE, r15, loc_19930
                ld      flt_1D290, r13
                ld      0x50A000, r14
                mulr    r13, r14, r3
loc_19930:                              # CODE XREF: calc_land_time+18↑j
                ld      0x5CC(g7), r13
                subr    r13, r3, r5
                lda     0x3F000000, r13
                mulr    r13, r5, r4
                ld      0x30(g7), r13
                subr    r13, r4, r6
                ld      0x1F8(g7), r14
                subr    g0, r14, r4
                mulr    r5, r4, r4
                lda     0x40000000, r13
                mulr    r13, r4, r4
                mulr    r6, r6, r3
                addr    r3, r4, r4
                lda     0xD001A1A, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                subr    r6, r4, r4
                divr    r5, r4, r4
                lda     0xC001818, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x3F800000, r14
                addr    r3, r14, r4
                lda     0x3F000000, r13
                mulr    r13, r4, r4
                mulr    r4, r5, r4
                ld      0x30(g7), r14
                subr    r4, r14, r4
                mulr    r3, r4, r4
                ld      0x1F8(g7), r13
                addr    r13, r4, r4
                lda     0x3CA3D70A, r13
                subr    r13, r4, r4
                cmpr    r4, g0
                ble     loc_199F8
                addi    1, g1, g1
loc_199F8:                              # CODE XREF: calc_land_time+8↑j
                ret
# End of function calc_land_time
# =============== S U B R O U T I N E =======================================
calc_stage_limit_dist:                  # CODE XREF: get_my_info_new+52C↑p
                subi    g0, 0, r12      # Label from Virtua Fighter 2 source
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                ld      stage_x, r7
                lda     0x461C4000, r8
                mov     r8, r9
                ld      0x1F4(g7), r3
                cmpibe  0, r5, loc_19A70
                bl      loc_19A4C
                notbit  0x1F, r3, r3
loc_19A4C:                              # CODE XREF: calc_stage_limit_dist+48↑j
                subr    r3, r7, r3
                divr    r5, r6, r4
                mulr    r3, r4, r4
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r8
loc_19A70:                              # CODE XREF: calc_stage_limit_dist+44↑j
                ld      0x1FC(g7), r4
                cmpibe  0, r6, loc_19AA4
                bl      loc_19A80
                notbit  0x1F, r4, r4
loc_19A80:                              # CODE XREF: calc_stage_limit_dist+7C↑j
                subr    r4, r7, r4
                divr    r6, r5, r3
                mulr    r4, r3, r3
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r9
loc_19AA4:                              # CODE XREF: calc_stage_limit_dist+78↑j
                mov     r8, g1
                cmpr    r8, r9
                ble     loc_19AB4
                mov     r9, g1
loc_19AB4:                              # CODE XREF: calc_stage_limit_dist+B0↑j
                ret
# End of function calc_stage_limit_dist
# =============== S U B R O U T I N E =======================================
calc_gyang_from_fu_vec2:                # CODE XREF: get_my_info_new+228↑p
                mov     1, r11          # Label from Virtua Fighter 2 source
                b       loc_19AC4
# ---------------------------------------------------------------------------
calc_gyang_from_fu_vec:                 # CODE XREF: get_my_info_new+1F0↑p
                mov     0, r11          # Label from Virtua Fighter 2 source
loc_19AC4:                              # CODE XREF: calc_gyang_from_fu_vec2+4↑j
                ldt     (g0), r12
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                stt     r12, (g11)[g12*1]
                ldt     (g11)[g12*1], r4
                ldt     0xC(g0), r12
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                stt     r12, (g11)[g12*1]
                ldt     (g11)[g12*1], r8
                cmpobne 0, r11, loc_19B00
                stt     r4, (g1)
                stt     r8, 0xC(g1)
loc_19B00:                              # CODE XREF: calc_gyang_from_fu_vec2+3C↑j
                mov     0, r7
                ld      gyang_yvec, r12
                cmpibg  r5, r12, loc_19B58
                setbit  0x1F, r12, r12
                cmpr    r5, r12
                bl      loc_19B5C
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                bbc     0x1F, r9, loc_19B8C
                notbit  0xF, r7, r7
                b       loc_19B8C
# ---------------------------------------------------------------------------
loc_19B58:                              # CODE XREF: calc_gyang_from_fu_vec2+54↑j
                notbit  0xF, r7, r7
loc_19B5C:                              # CODE XREF: calc_gyang_from_fu_vec2+60↑j
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
loc_19B8C:                              # CODE XREF: calc_gyang_from_fu_vec2+94↑j
                addi    r7, r3, g0
                ret
# End of function calc_gyang_from_fu_vec2
# ---------------------------------------------------------------------------
disp_init:                              # Label from Fighting Vipers source
                lda     0x501500, r15
                st      r15, 0x10(g13)
                lda     rob_disp, r15
                st      r15, 0xC(g13)
                ret
# =============== S U B R O U T I N E =======================================
rob_disp:                               # CODE XREF: camera_init+1434↓p
                ld      0x0(g7), r15    # Label from official source
                bbc     7, r15, loc_1A588
                ldob    0x2A(g7), r3
                cmpobne 0, r3, loc_1A58C
                ld      0x190(g7), r3
                ld      debug_flag, r15
                bbs     5, r15, rd_mt_skp
                ld      0xAEC(g7), r14
                addi    1, r14, r15
                st      r15, 0xAEC(g7)
rd_mt_skp:                              # CODE XREF: rob_disp+1C↑j
                ld      0x1A4(g7), r15  # Label from official source
                bbs     4, r15, rd_air_skp
                mov     0, r15
                stis    r15, 0x7FA(g7)
                b       rd_ypos_ck_skp
# ---------------------------------------------------------------------------
rd_air_skp:                             # CODE XREF: rob_disp+30↑j
                ld      0x0(g7), r15    # Label from official source
                bbs     3, r15, rd_ypos_ck_skp
                ld      debug_flag, r15
                bbs     5, r15, rd_ypos_ck_skp
                ldos    0x7FA(g7), r14
                addo    1, r14, r14
                stos    r14, 0x7FA(g7)
rd_ypos_ck_skp:                         # CODE XREF: rob_disp+3C↑j
                mov     0, r8           # Label from official source
                mov     0x10, r9
                ld      0x0(g7), r15
                bbs     0x19, r15, loc_1A450
                lda     0x40(g7), r11
                ld      fa_camera, r3
                ldob    0xFA(r3), r7
                lda     0x2800505, r15
                st      r15, (g11)[g12*1]
                lda     loc_2A40(g7), r15
                ld      (g11)[g12*1], r14
                st      r14, 0x0(r15)
                ld      (g11)[g12*1], r14
                st      r14, 4(r15)
                ld      (g11)[g12*1], r14
                st      r14, 8(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0xC(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x10(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x14(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x18(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x1C(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x20(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x24(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x28(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x2C(r15)
rdn_loop:                               # CODE XREF: rob_disp+7C4↓j
                ld      0x124C(g7), r15 # Label from official source
                bbc     r8, r15, rdn_dspgo
                ld      frame_counter, r15
                bbc     0, r15, rdn_ps
rdn_dspgo:                              # CODE XREF: rob_disp+FC↑j
                ldob    0x6B8(g7)[r8], r3 # Label from official source
                bbs     0, r7, loc_19CD0
                cmpobne 0, r3, rdn_ps
                b       loc_19CD4
# ---------------------------------------------------------------------------
loc_19CD0:                              # CODE XREF: rob_disp+114↑j
                cmpobe  0, r3, rdn_ps
loc_19CD4:                              # CODE XREF: rob_disp+11C↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x2758(g7), r4
                ld      0x68(r4), r5
                lda     0x3F800000, r4
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x1B803737, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mulo    0xC, r8, r15
                st      r15, (g11)[g12*1]
                ld      (r11)[r8*4], r3
                mov     3, g0
                call    set_mmode
                ld      0x2068(g7), r4
                cmpo    1, r4
                bne     sp_atk_dsp_ex
                cmpo    0, r8
                bne     rd_put_poly_end
                ldob    0x1B1(g7), r4
                remo    0x1A, r4, r4
                cmpo    7, r4
                lda     0x2088(g7), g3
                ldt     0x24(g3), g0
                be      sp_atk_dsp_esp
                call    spin_attack_cnt_nml_dsp
                b       rd_put_poly_end
# ---------------------------------------------------------------------------
sp_atk_dsp_esp:                         # CODE XREF: rob_disp+1B4↑j
                call    spin_attack_cnt_esp_dsp # Label from official source
                b       rd_put_poly_end
# ---------------------------------------------------------------------------
sp_atk_dsp_ex:                          # CODE XREF: rob_disp+190↑j
                cmpibe  5, r8, rd_te_espio_check # Label from official source
                cmpibne 8, r8, rd_te_pass
rd_te_espio_check:                      # CODE XREF: rob_disp:sp_atk_dsp_ex↑j
                ldob    0x1B1(g7), r14  # Label from official source
                cmpobe  0xD, r14, rd_te_rob
                ld      0x2A3C(g7), r4
                chkbit  5, r4
                be      rd_te_get_r
                chkbit  8, r4
                bno     rd_te_pass
                addo    4, sp, sp
                st      r7, -4(sp)
                addo    4, sp, sp
                st      r8, -4(sp)
                addo    4, sp, sp
                st      r9, -4(sp)
                ldt     0x254(g7), r8
                b       rd_te_get_r_ex
# ---------------------------------------------------------------------------
rd_te_get_r:                            # CODE XREF: rob_disp+1E4↑j
                addo    4, sp, sp       # Label from official source
                st      r7, -4(sp)
                addo    4, sp, sp
                st      r8, -4(sp)
                addo    4, sp, sp
                st      r9, -4(sp)
                ldt     0x230(g7), r8
rd_te_get_r_ex:                         # CODE XREF: rob_disp+218↑j
                ldt     0x20C(g7), r4   # Label from official source
                subr    r4, r8, r8
                subr    r5, r9, r9
                subr    r6, r10, r10
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r10
                notbit  0x1F, r9, r9
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                lda     0x3EE66666, r10
                divr    r10, r9, r9
                lda     0x3F800000, r10
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x2000404, r15
                st      r15, (g11)[g12*1]
                lda     loc_2A40(g7), r15
                ld      0x0(r15), r14
                st      r14, (g11)[g12*1]
                ld      4(r15), r14
                st      r14, (g11)[g12*1]
                ld      8(r15), r14
                st      r14, (g11)[g12*1]
                ld      0xC(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x10(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x14(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x18(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x1C(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x20(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x24(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x28(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x2C(r15), r14
                st      r14, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ldob    0x1B0(g7), r4
                addo    0x1F, 2, r13
                cmpobe  r13, r4, rd_te_espio_i
                mov     0, g1
                lda     1189, g0        # Espio Tongue
                call    set_obj
                b       rd_te_espio_i_ex
# ---------------------------------------------------------------------------
rd_te_espio_i:                          # CODE XREF: rob_disp+3A4↑j
                mov     0, g1           # Label from official source
                lda     1484, g0        # Grey Espio Tongue
                call    set_obj
rd_te_espio_i_ex:                       # CODE XREF: rob_disp+3B4↑j
                lda     0x1000202, r15  # Label from official source
                st      r15, (g11)[g12*1]
                ld      -4(sp), r9
                subo    4, sp, sp
                ld      -4(sp), r8
                subo    4, sp, sp
                ld      -4(sp), r7
                subo    4, sp, sp
                b       rd_te_pass
# ---------------------------------------------------------------------------
rd_te_rob:                              # CODE XREF: rob_disp+1D4↑j
                ld      frame_counter, r4 # Label from official source
                ld      0x804(g7), r15
                bbs     8, r15, rd_te_rob_attack
                lda     0x3F, r5
                and     r5, r4, r4
                shlo    0xA, 1, r5
                b       loc_19FD0
# ---------------------------------------------------------------------------
rd_te_rob_attack:                       # CODE XREF: rob_disp+404↑j
                and     0xF, r4, r4     # Label from official source
                shlo    0xC, 1, r5
loc_19FD0:                              # CODE XREF: rob_disp+414↑j
                mulo    r4, r5, r4
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
rd_te_pass:                             # CODE XREF: rob_disp+1CC↑j
                cmpibne 1, r8, rd_mune_pass # Label from official source
                ldob    0x1B1(g7), r4
                cmpobne 0xC, r4, rd_mune_check
                mov     0, g1
                lda     3354, g0
                call    set_obj
                mov     0, g1
                lda     2848, g0        # UFO Eggman Beam Dish
                call    set_obj
rd_mune_check:                          # CODE XREF: rob_disp+43C↑j
                cmpobne 4, r4, rd_mune_pass # Label from official source
                call    efc_fang_mune_init
                call    efc_fang_mune_change # Effect Fang Chest Change
                ld      0x70C(g7), r15
                bbc     0x17, r15, rd_mune_pass
                mov     0, r3
rd_mune_pass:                           # CODE XREF: rob_disp:rd_te_pass↑j
                cmpibne 9, r8, rd_kosi_pass # Label from official source
rd_kosi_pass:                           # CODE XREF: rob_disp:rd_mune_pass↑j
                cmpibne 2, r8, rd_kao_ex # Label from official source
                ldob    0x1B1(g7), r14
                cmpobne 0xD, r14, rd_kao_rob_ex
                ld      frame_counter, r4
                bbs     7, r4, rd_kao_rob_ex
                bbs     6, r4, rd_kao_rob_ex
                shro    4, r4, r5
                and     3, r5, r5
                and     0xF, r4, r6
                ld      egg_robo_anims[r5*4], r5
                bx      (r5)
# ---------------------------------------------------------------------------
rd_kao_rob_tizimi:                      # DATA XREF: ROM:0001D2EC↓o
                subo    r6, 15, r6      # Label from official source
rd_kao_rob_nobi:                        # DATA XREF: ROM:egg_robo_anims↓o
                cmpobge 10, r6, loc_1A064 # Label from official source
                mov     10, r6
loc_1A064:                              # CODE XREF: rob_disp:rd_kao_rob_nobi↑j
                ld      egg_robo_head_anim[r6*4], r3
                b       rd_kao_rob_ex
# ---------------------------------------------------------------------------
rd_kao_rob_gururi:                      # DATA XREF: ROM:0001D2E8↓o
                mov     0xA, r5         # Label from official source
                ld      egg_robo_head_anim[r5*4], r3
                bbs     8, r4, loc_1A088
                shlo    0xC, 1, r5
                b       loc_1A08C
# ---------------------------------------------------------------------------
loc_1A088:                              # CODE XREF: rob_disp+4CC↑j
                shlo    0xC, 0xF, r5
loc_1A08C:                              # CODE XREF: rob_disp+4D4↑j
                mulo    r6, r5, r6
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
rd_kao_rob_ex:                          # CODE XREF: rob_disp+47C↑j
                ldob    also_mode, r15  # Label from official source
                lda     start_ip_add+2, r14
                cmpobe  r14, r15, rd_me_name
                lda     start_ip_add+3, r14
                cmpobe  r14, r15, rd_me_name
                b       me_cont
# ---------------------------------------------------------------------------
rd_me_name:                             # CODE XREF: rob_disp+500↑j
                ldob    4(g7), r14      # Label from official source
                cmpobe  0, r14, rd_kao_ex
me_cont:                                # CODE XREF: rob_disp+510↑j
                ldl     0x2050(g7), r4  # Label from official source
                ld      0x0(g7), r15
                bbs     0x14, r15, me_norm
                lda     308, r13
                ldos    0x1A8(g7), r14  # p1_mot_num or p2_mot_num
                cmpobe  r13, r14, me_norm
                ld      0x2058(g7), r12
                lda     (r12), g2
                mov     0, g1
                lda     (r4), g0
                call    set_obj_tpd
                ld      0x205C(g7), r12
                lda     (r12), g2
                mov     0, g1
                lda     (r5), g0
                call    set_obj_tpd
                b       rd_kao_ex
# ---------------------------------------------------------------------------
me_norm:                                # CODE XREF: rob_disp+528↑j
                mov     0, g1           # Label from official source
                lda     (r4), g0
                call    set_obj
                mov     0, g1
                lda     (r5), g0
                call    set_obj
rd_kao_ex:                              # CODE XREF: rob_disp:rd_kosi_pass↑j
                ldob    also_mode, r15  # Label from official source
                lda     start_ip_add+2, r14
                cmpobe  r14, r15, rd_name_put
                lda     start_ip_add+3, r14
                cmpobe  r14, r15, rd_name_put
                b       rd_put
# ---------------------------------------------------------------------------
rd_name_put:                            # CODE XREF: rob_disp+594↑j
                ldob    4(g7), r14      # Label from official source
                cmpobe  1, r14, rd_put
                b       rd_put_poly_end
# ---------------------------------------------------------------------------
rd_put:                                 # CODE XREF: rob_disp+5A4↑j
                ldob    4(g7), g1       # Label from official source
                lda     (r3), g0
                call    set_obj
rd_put_poly_end:                        # CODE XREF: rob_disp+198↑j
                mov     1, g0           # Label from official source
                call    set_mmode
                ld      off_1A184[r8*4], r4
                bx      (r4)
# ---------------------------------------------------------------------------
off_1A184:      .long unit_efc_next     # DATA XREF: rob_disp+5C8↑r
                .long unit_efc_mune     # mune = "chest"
                .long unit_efc_kao
                .long unit_efc_next
                .long unit_efc_next
                .long unit_efc_next
                .long unit_efc_next
                .long unit_efc_next
                .long unit_efc_next
                .long unit_efc_kosi
                .long unit_efc_next
                .long unit_efc_next
                .long unit_efc_next
                .long unit_efc_next
                .long unit_efc_next
                .long unit_efc_next
# ---------------------------------------------------------------------------
unit_efc_kao:                           # DATA XREF: rob_disp+5DC↑o
                ld      0x2008(g10), r15 # Label from official source
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                ldob    4(g7), r15
                mulo    8, r15, r15
                lda     0x501804(r15), r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_1A214
                st      r13, 0x0(r15)
                b       loc_1A220
# ---------------------------------------------------------------------------
loc_1A214:                              # CODE XREF: rob_disp+658↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_1A220:                              # CODE XREF: rob_disp+660↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                ldob    4(g7), r15
                mulo    8, r15, r15
                lda     0x501804(r15), r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                call    efc_asease_cont
                call    efc_mabuta_cont # mabuta = eyelid
                b       unit_efc_next
# ---------------------------------------------------------------------------
unit_efc_mune:                          # DATA XREF: rob_disp+5D8↑o
                call    efc_eggrob_mune_chg # Label from official source
                ldob    0x1B1(g7), r4   # r4 = P1_PARTS+0x1B1 or P2_PARTS+0x1B1
                cmpobne 4, r4, loc_1A274 # If character is not Fang, branch
                call    efc_fang_gun_disp
loc_1A274:                              # CODE XREF: rob_disp+6BC↑j
                cmpobne 3, r4, loc_1A27C # If character is not Metal Sonic, branch
                call    efc_metalsonic_disp
loc_1A27C:                              # CODE XREF: rob_disp:loc_1A274↑j
                b       unit_efc_next
# ---------------------------------------------------------------------------
unit_efc_kosi:                          # DATA XREF: rob_disp+5F8↑o
                ld      0x5004C8, r15 # Label from official source
                bbs     5, r15, unit_efc_next
                ldob    0x1B0(g7), r4
                cmpobe  1, r4, loc_1A29C # if char is Tails
                cmpobe  27, r4, loc_1A2A4 # if char is Tails_I
                b       unit_efc_next
# ---------------------------------------------------------------------------
loc_1A29C:                              # CODE XREF: rob_disp+6E0↑j
                call    tails1_tail_disp
                b       unit_efc_next
# ---------------------------------------------------------------------------
loc_1A2A4:                              # CODE XREF: rob_disp+6E4↑j
                call    tails2_tail_disp
unit_efc_next:                          # CODE XREF: rob_disp+6B0↑j
                call    copy_option_data # Label from official source
                ldos    0x7A2(g7), r4
                cmpobe  0, r4, loc_1A364
                mov     r8, g0
                call    option_control
                lda     0x788(g7), r6
                ld      0x0(g7), r15
                bbc     0x1B, r15, opt_unit_normal
                lda     0x7A0(g7), r6
opt_unit_normal:                        # CODE XREF: rob_disp+714↑j
                ldos    0x0(r6), r3     # Label from official source
                cmpobne r8, r3, loc_1A364
                mov     0, r13
                ld      0x0(g7), r15
                bbc     0x1B, r15, opt_u_nm_nop
                ld      0x1A4(g7), r15
                bbs     2, r15, opt_u_nm_nop
                mov     1, r13
opt_u_nm_nop:                           # CODE XREF: rob_disp+72C↑j
                lda     0x800101, r15 # Label from official source
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     4(r6), r12
                stt     r12, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x12(r6), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x10(r6), r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x14(r6), r15
                st      r15, (g11)[g12*1]
                ldos    2(r6), r12
                ldob    4(g7), g1
                lda     (r12), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_1A364:                              # CODE XREF: rob_disp+700↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
rdn_ps:                                 # CODE XREF: rob_disp+108↑j
                addi    1, r8, r8       # Label from official source
                cmpobl  r8, r9, rdn_loop
                mov     3, g0
                call    set_mmode
                call    kosi_nobi_put
                mov     1, g0
                call    set_mmode
                ld      0x0(g7), r15
                bbc     0x18, r15, rd_gy_ps
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      0x1F4(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                ld      0x1FC(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x616(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x40400000, r15
                st      r15, (g11)[g12*1]
                shlo    0xE, 1, r3
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     6, g0           # Weird rod
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
rd_gy_ps:                               # CODE XREF: rob_disp+7E0↑j
                ld      0x124C(g7), r14 # Label from official source
                cmpobe  0, r14, loc_1A588
                ld      frame_counter, r15
                bbs     0, r15, loc_1A588
loc_1A450:                              # CODE XREF: rob_disp+6C↑j
                ld      mod_fa_coli, r12
                mov     0x10, r8
                lda     rob_coli_ball_rgb_obj, r9
loc_1A464:                              # CODE XREF: rob_disp+9D4↓j
                ld      0x0(g7), r15
                bbs     0x19, r15, loc_1A478
                ld      0x124C(g7), r14
                bbc     r8, r14, loc_1A578
loc_1A478:                              # CODE XREF: rob_disp+8B8↑j
                ldob    4(g7), r15
                cmpobe  1, r15, loc_1A490
                ld      0x90F600[r8*4], r13
                cmpobne 0, r13, loc_1A4C0
                b       loc_1A4A8
# ---------------------------------------------------------------------------
loc_1A490:                              # CODE XREF: rob_disp+8CC↑j
                mov     0xF, r4
loc_1A494:                              # CODE XREF: rob_disp+8F4↓j
                ld      0x90F600[r4*4], r5
                bbs     r8, r5, loc_1A4C0
                cmpdeci 1, r4, r4
                ble     loc_1A494
loc_1A4A8:                              # CODE XREF: rob_disp+8DC↑j
                ld      0x158(r12), r4
                cmpobe  r8, r4, loc_1A4B8
                ld      4(r9), r13
                b       loc_1A4C4
# ---------------------------------------------------------------------------
loc_1A4B8:                              # CODE XREF: rob_disp+8FC↑j
                ld      8(r9), r13
                b       loc_1A4C4
# ---------------------------------------------------------------------------
loc_1A4C0:                              # CODE XREF: rob_disp+8D8↑j
                ld      (r9), r13
loc_1A4C4:                              # CODE XREF: rob_disp+904↑j
                lda     0x3F800000, g6
                ld      0xAC8(g7), r3
                bbc     r8, r3, loc_1A4F0
                ldob    0x821(g7), r14
                cmpobe  4, r14, loc_1A4F0
                ldob    0x821(g7), r14
                cmpobe  8, r14, loc_1A4F0
                ld      0x1D04(g7), g6
                ld      (g6), g6
loc_1A4F0:                              # CODE XREF: rob_disp+920↑j
                ld      0x1D14(g7), r10
                lda     (r10)[r8*8], r10
                ld      0x1D20(g7), r11
                ldob    (r11)[r8], r11
loc_1A508:                              # CODE XREF: rob_disp+9C4↓j
                cmpdeci 0, r11, r11
                be      loc_1A578
                ldob    (r10)[r11], r15
                ldq     0xD00(g7)[r15*4], r4
                mulr    g6, r7, r7
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                mov     0, g1
                lda     (r13), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_1A508
# ---------------------------------------------------------------------------
loc_1A578:                              # CODE XREF: rob_disp+8C4↑j
                mov     r8, g0
                call    option_control
                cmpdeco 1, r8, r8
                bl      loc_1A464
loc_1A588:                              # CODE XREF: rob_disp+4↑j
                ret
# ---------------------------------------------------------------------------
loc_1A58C:                              # CODE XREF: rob_disp+C↑j
                ld      fa_camera, r3
                ldob    0xFA(r3), r7
                bbs     0, r7, loc_1A6BC
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                mov     0, r3
                lda     0x1B803737, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mulo    0xC, r3, r15
                st      r15, (g11)[g12*1]
                ldob    0x50B00C, r3
                shlo    5, r3, r3
                lda     0x50B100[r3], r10
                ld      8(r10), r4
# ---------------------------------------------------------------------------
                .long 0x78210E96        # subr    +1.0,r4,r4
# ---------------------------------------------------------------------------
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                ld      0x18(r10), r3
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                ldob    4(g7), r15
                mulo    8, r15, r15
                lda     0x501804(r15), r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_1A66C
                st      r13, 0x0(r15)
                b       loc_1A678
# ---------------------------------------------------------------------------
loc_1A66C:                              # CODE XREF: rob_disp+AB0↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_1A678:                              # CODE XREF: rob_disp+AB8↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                ldob    4(g7), r15
                mulo    8, r15, r15
                lda     0x501804(r15), r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_1A6BC:                              # CODE XREF: rob_disp+9E8↑j
                ret
# End of function rob_disp
# =============== S U B R O U T I N E =======================================
chg_save_mat_param:                     # CODE XREF: ROM:ENDSUB_DSP↑p
                ld      INTERUPT_FLAGS_MOMENTARY, r9 # Label from official source
                ldob    0x548006, r3 # r3 = 1
                bbc     12, r9, loc_1A6E0 # Hex 0x1000 is P1 Down
                subi    1, r3, r3       # r3 = 0 I guess
                cmpible 1, r3, loc_1A6E0
                mov     1, r3
loc_1A6E0:                              # CODE XREF: chg_save_mat_param+10↑j
                bbc     13, r9, loc_1A6F0 # Hex 0x2000 is P1 up
                addi    1, r3, r3       # r3 = 1
                cmpibge 29, r3, loc_1A6F0
                mov     29, r3
loc_1A6F0:                              # CODE XREF: chg_save_mat_param:loc_1A6E0↑j
                stob    r3, 0x548006
                ldob    0x548007, r3
                bbc     20, r9, loc_1A710 # Hex 0x100000 is P2 Down
                subi    1, r3, r3
                cmpible 1, r3, loc_1A710
                mov     1, r3
loc_1A710:                              # CODE XREF: chg_save_mat_param+40↑j
                bbc     21, r9, loc_1A720 # Hex is 0x200000 is P2 Up
                addi    1, r3, r3
                cmpibge 29, r3, loc_1A720
                mov     29, r3
loc_1A720:                              # CODE XREF: chg_save_mat_param:loc_1A710↑j
                stob    r3, 0x548007
                ldob    0x548008, r3
                bbc     10, r9, loc_1A740 # Hex 0x400 is P1 Block
                subi    1, r3, r3
                cmpible 0, r3, loc_1A740
                mov     0, r3
loc_1A740:                              # CODE XREF: chg_save_mat_param+70↑j
                bbc     18, r9, loc_1A750 # Hex is 0x40000 is P2 Block
                addi    1, r3, r3
                cmpibge 10, r3, loc_1A750
                mov     10, r3
loc_1A750:                              # CODE XREF: chg_save_mat_param:loc_1A740↑j
                stob    r3, 0x548008
                ret
# End of function chg_save_mat_param
# =============== S U B R O U T I N E =======================================
init_endsub_vars:                       # CODE XREF: ROM:00006EB0↑p
                mov     1, r15
                stib    r15, 0x548006
                mov     3, r15
                stib    r15, 0x548007
                mov     4, r15
                stib    r15, 0x548008
loc_1A780:                              # CODE XREF: ENDSUB_INT+110↑p
                mov     0, r15
                stib    r15, 0x548004
                ldib    0x548006, r15
                stib    r15, 0x548005
                lda     0x548010, r3
                lda     0x54F810, r4
                subo    1, 0, r5
loc_1A7B0:                              # CODE XREF: init_endsub_vars+5C↓j
                st      r5, 0x30(r3)
                lda     0x40(r3), r3
                cmpobne r4, r3, loc_1A7B0
                ret
# End of function init_endsub_vars
# ---------------------------------------------------------------------------
                .long 0x501844      # unreachable code
                .long 0x50184C
                .long 0x501854
                .long 0x50185C
# =============== S U B R O U T I N E =======================================
option_control:                         # CODE XREF: rob_disp+708↑p
                lda     0x788(g7), r6   # Label from official source
                ld      0x0(g7), r15
                bbc     0x1B, r15, loc_1A7F8
                lda     0x7A0(g7), r6
                ldos    0x0(r6), r3
                cmpobne g0, r3, loc_1A814
                ld      0x0(g7), r15
                bbc     4, r15, loc_1A7F8
                call    delete_option
                lda     0x788(g7), r6
loc_1A7F8:                              # CODE XREF: option_control+8↑j
                ldos    0x0(r6), r3
                cmpobne g0, r3, loc_1A814
                ldos    0x16(r6), r3
                bbs     0xF, r3, loc_1A814
                ld      off_1A818[r3*4], r5 # Always returns. Wonder what it was used for...
                callx   (r5)
loc_1A814:                              # CODE XREF: option_control+14↑j
                ret
# End of function option_control
# ---------------------------------------------------------------------------
off_1A818:      .long loc_1A85C         # DATA XREF: option_control+38↑r
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
                .long loc_1A85C         # return
# ---------------------------------------------------------------------------
loc_1A85C:                              # DATA XREF: ROM:off_1A818↑o
                ret                     # return
# =============== S U B R O U T I N E =======================================
kosi_nobi_put:                          # CODE XREF: rob_disp+7D0↑p
                ld      0x70C(g7), r15  # Label from official source
                bbc     0x17, r15, loc_1A9E8
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     0x26C(g7), r4
                ldt     0x290(g7), r8
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                lda     0x3F000000, r3
                mulr    r3, r4, r4
                mulr    r3, r5, r5
                mulr    r3, r6, r6
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ldt     0x20C(g7), r8
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                lda     0x16002C2C, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                subr    r4, r8, r4
                subr    r5, r9, r5
                subr    r6, r10, r6
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                subi    r4, 0, r4
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                shlo    0xF, 1, r3
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3F800000, r3
                ldob    0x1B1(g7), r4   # r3 = P1_PARTS+0x1B1 or P2_PARTS+0x1B1
                ld      flt_1AA54[r4*4], r4
                mulr    r4, r7, r7
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ldob    0x1B1(g7), r3   # r3 = P1_PARTS+0x1B1 or P2_PARTS+0x1B1
                ld      flt_1A9EC[r3*4], r3
                mov     0, r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      0x44(g7), r3
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_1A9E8:                              # CODE XREF: kosi_nobi_put+4↑j
                ret
# End of function kosi_nobi_put
# ---------------------------------------------------------------------------
flt_1A9EC:      .float 0.3398           # DATA XREF: kosi_nobi_put+148↑r
                .float 0.30000001       # Tails
                .float 0.36660001       # Metal Sonic
                .float 0.3531           # Amy
                .float 0.33899999       # Fang
                .float 0.33919999       # Bark
                .float 0.33899999       # Knuckles
                .float 0.46520001       # Espio
                .float 0.1989           # Eggman
                .float 0.0              # EggmanB
                .float 0.33899999       # Bean
                .float 0.0              # Eggman Boss
                .float 0.0              # Egg Ufo
                .float 0.0              # Robo Egg
                .float 0.0              # Rocket Metal
                .float 0.0              # Honey
                .float 0.0              # Super Sonic
                .float 0.0              # DUM9
                .float 0.0              # DUM10
                .float 0.0              # DUM11
                .float 0.0              # DUM12
                .float 0.0              # DUM13
                .float 0.0              # DUM14
                .float 0.0              # DUM15
                .float 0.0              # DUM16
                .float 0.0              # DUM17
flt_1AA54:      .float 1.446            # DATA XREF: kosi_nobi_put+120↑r
                .float 1.651            # Tails
                .float 1.599            # Metal Sonic
                .float 1.444            # Amy
                .float 1.5420001        # Fang
                .float 0.70899999       # Bark
                .float 1.387            # Knuckles
                .float 1.205            # Espio
                .float 0.63099998       # Eggman
                .float 1.51             # EggmanB
                .float 1.434            # Bean
                .float 0.72000003       # Eggman Boss
                .float 1.51             # Egg Ufo
                .float 1.51             # Robo Egg
                .float 1.51             # Rocket Metal
                .float 1.51             # Honey
                .float 1.51             # Super Sonic
                .float 1.51             # DUM9
                .float 1.51             # DUM10
                .float 1.51             # DUM11
                .float 1.51             # DUM12
                .float 1.51             # DUM13
                .float 1.51             # DUM14
                .float 1.51             # DUM15
                .float 1.51             # DUM16
                .float 1.51             # DUM17
# =============== S U B R O U T I N E =======================================
efc_metalsonic_disp:                    # CODE XREF: rob_disp+6C8↑p
                ld      0x0(g7), r3     # Label from official source
                bbs     29, r3, loc_1AB20 # return
                mov     1, r3
                ldos    0x40(g7)[r3*4], r3
                lda     0x18D, r5
                cmpobe  r5, r3, loc_1AB20 # return
                lda     0x7E4, r5
                cmpobe  r5, r3, loc_1AB20 # return
                ld      frame_counter, r3
                shro    1, r3, r5
                and     3, r5, r5
                bbs     0, r3, loc_1AB0C
                ldos    yellow_cone_exhaust[r5*2], r4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
                b       loc_1AB20       # return
# ---------------------------------------------------------------------------
loc_1AB0C:                              # CODE XREF: efc_metalsonic_disp+34↑j
                ldos    yellow_burst_exhaust[r5*2], r4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_1AB20:                              # CODE XREF: efc_metalsonic_disp+4↑j
                ret                     # return
# End of function efc_metalsonic_disp
# ---------------------------------------------------------------------------
yellow_cone_exhaust:.short 2453         # DATA XREF: efc_metalsonic_disp+38↑r
                .short 2454
                .short 2455
                .short 2456
yellow_burst_exhaust:.short 2534        # DATA XREF: efc_metalsonic_disp:loc_1AB0C↑r
                .short 2535
                .short 2536
                .short 2537
# =============== S U B R O U T I N E =======================================
tails1_tail_disp:                       # CODE XREF: rob_disp:loc_1A29C↑p
                lda     tails_tail_anim, r11 # Label from official source
                lda     tails_spinning_tails_anim, r10
                b       tails_tail_disp
# End of function tails1_tail_disp
# =============== S U B R O U T I N E =======================================
tails2_tail_disp:                       # CODE XREF: rob_disp:loc_1A2A4↑p
                lda     tails_tail_frames_grey, r11 # Label from official source
                lda     tails_spinning_tails_anim_grey, r10
tails_tail_disp:                        # CODE XREF: tails1_tail_disp+10↑j
                ldob    0x84C(g7), r14  # Label from official source
                cmpobe  3, r14, loc_1AC34
                ldos    0x2198(g7), r3
                addo    1, r3, r5
                lda     0x3F, r4
                cmpoble r5, r4, loc_1AB78
                mov     0, r5
loc_1AB78:                              # CODE XREF: tails2_tail_disp+28↑j
                stos    r5, 0x2198(g7)
                ld      0x7F0(g7), r15
                bbs     0x10, r15, tails_shippo_func_exec
                addo    8, r3, r5
                shlo    6, 1, r4
                cmpobl  r5, r4, loc_1AB98
                subo    r4, r5, r5
loc_1AB98:                              # CODE XREF: tails2_tail_disp+48↑j
                ldos    (r11)[r3*2], r4
                ldos    (r11)[r5*2], r6
                lda     0x3DCCCCCD, r8
                lda     0xBE800000, r9
                lda     displacement, r10
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    0xE, 3, r3
                ld      0x1A4(g7), r15
                bbc     0x10, r15, loc_1ABE0
                shlo    0xF, 1, r3
loc_1ABE0:                              # CODE XREF: tails2_tail_disp+90↑j
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                shlo    0xC, 1, r3
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
loc_1AC00:                              # DATA XREF: RAM2BASE:002A2F20↓o
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r4), g0
                call    set_obj
                lda     0xFFFFE000, r3
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r6), g0
                call    set_obj
loc_1AC34:                              # CODE XREF: tails2_tail_disp+14↑j
                ret
# ---------------------------------------------------------------------------
tails_shippo_func_exec:                 # CODE XREF: tails2_tail_disp+3C↑j
                ldob    0x7F4(g7), r12  # Label from official source
                subo    1, r12, r12
                and     1, r12, r12
                ld      off_1AC50[r12*4], r13
                bx      (r13)
# End of function tails2_tail_disp
# ---------------------------------------------------------------------------
off_1AC50:      .long tails_heli_disp   # DATA XREF: tails2_tail_disp+FC↑r
                .long tails_screw_disp
# =============== S U B R O U T I N E =======================================
tails_heli_disp:                        # DATA XREF: ROM:off_1AC50↑o
                lda     0x800101, r15 # Label from official source
                st      r15, (g11)[g12*1]
                lda     0x2000404, r15
                st      r15, (g11)[g12*1]
                lda     0x5010F8, r15
                ld      0x0(r15), r14
                st      r14, (g11)[g12*1]
                ld      4(r15), r14
                st      r14, (g11)[g12*1]
                ld      8(r15), r14
                st      r14, (g11)[g12*1]
                ld      0xC(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x10(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x14(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x18(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x1C(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x20(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x24(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x28(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x2C(r15), r14
                st      r14, (g11)[g12*1]
                ldt     0x1F4(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x3E0F5C29, r15
                st      r15, (g11)[g12*1]
                lda     0x3E3851EC, r15
                st      r15, (g11)[g12*1]
                lda     0xBE2E147B, r15
                st      r15, (g11)[g12*1]
                ld      frame_counter, r3
                shlo    7, 0x1B, r13
                mulo    r13, r3, r7
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                bbs     0, r3, loc_1AD64
                ldos    (r10), r3
                b       loc_1AD68
# ---------------------------------------------------------------------------
loc_1AD64:                              # CODE XREF: tails_heli_disp+100↑j
                ldos    2(r10), r3
loc_1AD68:                              # CODE XREF: tails_heli_disp+108↑j
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# End of function tails_heli_disp
# =============== S U B R O U T I N E =======================================
tails_screw_disp:                       # DATA XREF: ROM:0001AC54↑o
                lda     0x800101, r15 # Label from official source
                st      r15, (g11)[g12*1]
                ld      frame_counter, r3
                shlo    7, 0x1B, r13
                mulo    r13, r3, r7
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x3E19999A, r15
                st      r15, (g11)[g12*1]
                lda     0xBE4CCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0xBE19999A, r15
                st      r15, (g11)[g12*1]
                shlo    0xC, 0xF, r12
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                shlo    0xF, 1, r12
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                bbs     0, r3, loc_1AE14
                ldos    (r10), r3
                b       loc_1AE18
# ---------------------------------------------------------------------------
loc_1AE14:                              # CODE XREF: tails_screw_disp+84↑j
                ldos    2(r10), r3
loc_1AE18:                              # CODE XREF: tails_screw_disp+8C↑j
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# End of function tails_screw_disp
# ---------------------------------------------------------------------------
tails_tail_anim:.short 108              # DATA XREF: tails1_tail_disp↑o
                .short 109
                .short 110
                .short 111
                .short 112
                .short 113
                .short 114
                .short 115
                .short 116
                .short 117
                .short 118
                .short 119
                .short 120
                .short 121
                .short 122
                .short 123
                .short 124
                .short 125
                .short 126
                .short 127
                .short 128
                .short 129
                .short 130
                .short 131
                .short 132
                .short 133
                .short 134
                .short 135
                .short 136
                .short 137
                .short 138
                .short 139
                .short 140
                .short 141
                .short 142
                .short 143
                .short 144
                .short 145
                .short 146
                .short 147
                .short 148
                .short 149
                .short 150
                .short 151
                .short 152
                .short 153
                .short 154
                .short 155
                .short 156
                .short 157
                .short 158
                .short 159
                .short 160
                .short 161
                .short 162
                .short 163
                .short 164
                .short 165
                .short 166
                .short 167
                .short 168
                .short 169
                .short 170
                .short 171
tails_tail_frames_grey:.short 1396      # DATA XREF: tails2_tail_disp↑o
                .short 1407
                .short 1418
                .short 1429
                .short 1440
                .short 1451
                .short 1457
                .short 1458
                .short 1459
                .short 1397
                .short 1398
                .short 1399
                .short 1400
                .short 1401
                .short 1402
                .short 1403
                .short 1404
                .short 1405
                .short 1406
                .short 1408
                .short 1409
                .short 1410
                .short 1411
                .short 1412
                .short 1413
                .short 1414
                .short 1415
                .short 1416
                .short 1417
                .short 1419
                .short 1420
                .short 1421
                .short 1422
                .short 1423
                .short 1424
                .short 1425
                .short 1426
                .short 1427
                .short 1428
                .short 1430
                .short 1431
                .short 1432
                .short 1433
                .short 1434
                .short 1435
                .short 1436
                .short 1437
                .short 1438
                .short 1439
                .short 1441
                .short 1442
                .short 1443
                .short 1444
                .short 1445
                .short 1446
                .short 1447
                .short 1448
                .short 1449
                .short 1450
                .short 1452
                .short 1453
                .short 1454
                .short 1455
                .short 1456
tails_spinning_tails_anim:.short 1221   # DATA XREF: tails1_tail_disp+8↑o
                .short 1222
tails_spinning_tails_anim_grey:.short 1460
                .short 1461
# =============== S U B R O U T I N E =======================================
rob_area_check:                         # CODE XREF: ROM:000227C4↓p
                lda     0x6B8(g7), r7   # Label from official source
                lda     0x1F4(g7), r6
                mov     0, r8           # Init counter 0
                mov     16, r9          # Loop 16 times
rob_area_check_loop:                    # CODE XREF: rob_area_check+2C↓j
                lda     (r8)[r8*2], r3
                lda     (r6)[r3*4], r3
                ldt     (r3), g0
                call    area_check
                stob    g0, (r7)[r8]
                addo    1, r8, r8
                cmpdeco 1, r9, r9
                bl      rob_area_check_loop
                ret
# End of function rob_area_check
# =============== S U B R O U T I N E =======================================
comp_set_motion:                        # CODE XREF: ROM:00013B90↑p
                mov     1, r10          # Label from official source
                b       set_motion_comm
# End of function comp_set_motion
# =============== S U B R O U T I N E =======================================
set_motion:                             # CODE XREF: BUNRI_DSP+D8↑p
                mov     0, r10          # Label from official source
set_motion_comm:                        # CODE XREF: comp_set_motion+4↑j
                mov     0, r15          # Label from official source
                st      r15, 0x5CC(g7)  # r15 = P1_PARTS+0x5CC
                mov     0, r15
                stib    r15, 0x60C(g7)  # r15 = P1_PARTS+0x60C
                ld      0x0(g7), r15
                clrbit  9, r15, r15
                st      r15, 0x0(g7)
                ld      0x1A4(g7), r7   # p1_mot_kind
                cmpobe  0, g0, loc_1B250
                ld      0x0(g7), r15
                setbit  0xB, r15, r15
                st      r15, 0x0(g7)
                bbc     0xE, g0, sm_shift_ex
                clrbit  6, r7, r7
                clrbit  5, r7, r7
                clrbit  0x15, r7, r7
                mov     1, r15
                stib    r15, 0xBE4(g7)  # p1_smoth_sw
sm_shift_ex:                            # CODE XREF: set_motion+34↑j
                bbc     0xD, g0, sm_smooth_ex # Label from official source
                clrbit  5, r7, r7
                clrbit  0x15, r7, r7
                mov     1, r15
                stib    r15, 0xBE4(g7)  # p1_smoth_sw
sm_smooth_ex:                           # CODE XREF: set_motion:sm_shift_ex↑j
                bbc     6, r7, sm_turn_ex # Label from official source
                cmpobne 1, r10, sm_turn_nor
                bbc     0xE, r7, sm_turn_nor
                ldis    0x616(g7), r15  # p1_gyang
                stis    r15, 0x26(g7)   # p1_yang_0
                b       sm_turn_ex
# ---------------------------------------------------------------------------
sm_turn_nor:                            # CODE XREF: set_motion+64↑j
                ldis    0x812(g7), r13  # Label from official source
                ldis    0x26(g7), r14
                addi    r13, r14, r15
                stis    r15, 0x26(g7)
sm_turn_ex:                             # CODE XREF: set_motion:sm_smooth_ex↑j
                bbc     5, r7, sm_move_ex # Label from official source
                ld      0x1F4(g7), r15
                st      r15, 0x18(g7)
                ld      0x1FC(g7), r15
                st      r15, 0x20(g7)
                mov     0, r15
                st      r15, 0x80(g7)
                mov     0, r15
                st      r15, 0x88(g7)
sm_move_ex:                             # CODE XREF: set_motion:sm_turn_ex↑j
                bbc     0x15, r7, loc_1B034 # Label from official source
                ld      0x0(g7), r15
                notbit  6, r15, r15
                st      r15, 0x0(g7)
loc_1B034:                              # CODE XREF: set_motion:sm_move_ex↑j
                bbc     0xF, g0, loc_1B044
                ld      0x0(g7), r15
                notbit  6, r15, r15
                st      r15, 0x0(g7)
loc_1B044:                              # CODE XREF: set_motion:loc_1B034↑j
                mov     g0, r11         # g0 amy p = 0x16
                lda     0x1FFF, r13
                and     r13, g0, g0
                stos    g0, 0x1A8(g7)   # p1_motion_num or p2_motion_num
                mov     1, r15
                stis    r15, 0x1AA(g7)  # p1_motion_coma or p2_motion_coma
                ld      0x0(g7), r15    # P1_PARTS or P2_PARTS
                bbc     27, r15, loc_1B15C # Branches when move used
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                call    delete_option
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
loc_1B15C:                              # CODE XREF: set_motion+EC↑j
                call    set_mot_dat
                ld      0x0(g7), r15
                bbc     0x12, r15, loc_1B184
                ld      0x1A4(g7), r15
                bbc     8, r15, loc_1B184
                ld      0x1E18(g7), r15
                bbs     8, r15, loc_1B184
                mov     4, r15
                stis    r15, 0x1AA(g7)
loc_1B184:                              # CODE XREF: set_motion+1EC↑j
                ld      0x1A4(g7), r8
                bbc     0xF, r11, loc_1B1A0
                ld      0x804(g7), r4
                bbc     0x15, r4, loc_1B1A0
                setbit  0x15, r4, r3
                st      r3, 0x804(g7)
                notbit  0x15, r8, r8
loc_1B1A0:                              # CODE XREF: set_motion+210↑j
                bbc     8, r8, loc_1B1B0
                ldos    0x6D0(g7), r14
                addi    1, r14, r15
                stos    r15, 0x6D0(g7)
loc_1B1B0:                              # CODE XREF: set_motion:loc_1B1A0↑j
                bbc     5, r7, loc_1B1B8
                setbit  7, r8, r8
loc_1B1B8:                              # CODE XREF: set_motion:loc_1B1B0↑j
                st      r8, 0x1A4(g7)   # p1_mot_kind or p2_mot_kind
                call    calc_rob_angle_int
                call    smooth_int
                ld      0x0(g7), r15
                bbs     4, r15, loc_1B204
                bbc     8, r8, loc_1B210
                ldos    0x1222(g7), r3
                mov     0, r15
                stis    r15, 0x1222(g7)
                cmpobe  0, r3, loc_1B204
                stos    r3, 0x1224(g7)
                ld      0x122C(g7), r15
                st      r15, 0x1228(g7)
                b       loc_1B210
# ---------------------------------------------------------------------------
loc_1B204:                              # CODE XREF: set_motion+250↑j
                mov     0, r15
                stis    r15, 0x1224(g7)
loc_1B210:                              # CODE XREF: set_motion+254↑j
                ld      0x0(g7), r15
                bbs     4, r15, loc_1B240
                bbc     8, r8, loc_1B24C
                ldos    0x1246(g7), r3
                mov     0, r15
                stis    r15, 0x1246(g7)
                cmpobe  0, r3, loc_1B240
                stos    r3, 0x1248(g7)
                b       loc_1B24C
# ---------------------------------------------------------------------------
loc_1B240:                              # CODE XREF: set_motion+29C↑j
                mov     0, r15
                stis    r15, 0x1224(g7)
loc_1B24C:                              # CODE XREF: set_motion+2A0↑j
                b       loc_1B268
# ---------------------------------------------------------------------------
loc_1B250:                              # CODE XREF: set_motion+24↑j
                lda     loc_14060, r13
                ld      0x1A4(g7), r14
                and     r13, r14, r15
                st      r15, 0x1A4(g7)
                stos    g0, 0x1A8(g7)   # p1_motion_num or p2_motion_num
loc_1B268:                              # CODE XREF: set_motion:loc_1B24C↑j
                ret
# End of function set_motion
# =============== S U B R O U T I N E =======================================
set_mot_dat:                            # CODE XREF: ROM:00007304↑p
                mov     0, r15          # Label from official source
                stos    r15, 0x87A(g7)  # P1_PARTS+0x87A
                stos    r15, 0x802(g7)  # p1_motd_next or p2_motd_next
                stos    r15, 0x86C(g7)  # P1_PARTS+0x86C
                stos    r15, 0x870(g7)  # P1_PARTS+0x870
                stob    r15, 0xA00(g7)  # p1_mot_basic_step or p2_mot_basic_step
                stos    r15, 0x812(g7)  # p1_mov_yang or p2_mov_yang
                stob    r15, 0x83C(g7)  # P1_PARTS+0x83C
                st      r15, 0x844(g7)  # p1_jump_h or p2_jump_h
                stob    r15, 0x840(g7)  # P1_PARTS+0x840
                stob    r15, 0x823(g7)  # P1_PARTS+0x823
                stos    r15, 0x850(g7)  # P1_PARTS+0x850
                stos    r15, 0x818(g7)  # p1_motd_land_coma or p2_motd_land_coma
                stos    r15, 0x872(g7)  # p1_motd_down_coma or p2_motd_down_coma
                st      r15, 0x854(g7)  # P1_PARTS+0x854
                st      r15, 0x864(g7)  # p1_motd_uk_type or p2_motd_uk_type
                stob    r15, 0xA25(g7)  # P1_PARTS+0xA25
                stob    r15, 0xA28(g7)  # P1_PARTS+0xA28
                st      r15, 0xACC(g7)  # P1_PARTS+0xACC
                stos    r15, 0xC60(g7)  # P1_PARTS+0xC60
                stos    r15, 0x2A94(g7) # P1_PARTS+0x2A94
                stos    r15, 0x2A92(g7) # P1_PARTS+0x2A92
                ld      0x0(g7), r15
                clrbit  0x10, r15, r15  # Clear byte 0x10 of P1_PARTS or P2_PARTS
                st      r15, 0x0(g7)
                ld      0x0(g7), r15
                clrbit  0x11, r15, r15  # Clear byte 0x11 of P1_PARTS or P2_PARTS
                st      r15, 0x0(g7)
                ld      0x7F0(g7), r15  # p1_parts_flag or p2_parts_flag
                clrbit  0x10, r15, r15
                st      r15, 0x7F0(g7)
                mov     0, r3
                stob    r3, 0x2A70(g7)  # write 0 to P1_HEAD_LIST_NUM or P2_HEAD_LIST_NUM
                ld      PLAYER_HEAD_LIST[r3*4], r5 # r3 always = 0
                ldob    0x1B0(g7), r4   # r4 = P1_CHAR_VALUE or P2_CHAR_VALUE
                ld      (r5)[r4*4], r5  # r5 = (offset at PLAYER_HEAD_LIST)+(value at r4)
                ldos    0x0(r5), r3     # reads first 2 bytes of Player Head
                ldos    2(r5), r4       # Reads second 2 bytes of Player Head
                stob    r3, 0x2A79(g7)  # P1_PARTS+0x2A79
                stob    r4, 0x2A7A(g7)  # P1_PARTS+0x2A7A
                lda     4(r5), r5       # Read actual head model number
                st      r5, 0x2A74(g7)  # write r5 to P1_HEAD_OFFSET or P2_HEAD_OFFSET
                lda     sub_mode9, r3
                ldob    _sub_mode, r14
                cmpobne r3, r14, loc_1B3C8 # if _sub_mode is not 9, FIGHT_DSP, branch
                ldob    4(g7), r14      # P1_PARTS+0x04
                cmpobe  1, r14, loc_1B38C # if P1_PARTS+0x04 = 1, branch
                ld      mod_fa_record, r3
                ld      0x6C(r3), r5    # mod_fa_record+0x6C
                st      r5, 0x50039C
                ld      mod_fa_obj0, r9
                ldis    6(r9), r15      # mod_fa_obj0+0x06
                stis    r15, 0x500460
                ldob    0x5003A0, r12
                clrbit  0, r12, r12
                stob    r12, 0x5003A0
                b       loc_1B3C8
# ---------------------------------------------------------------------------
loc_1B38C:                              # CODE XREF: set_mot_dat+DC↑j
                ld      mod_fa_record, r3
                ld      0x6C(r3), r5
                st      r5, 0x50044C
                ld      mod_fa_obj0, r9
                ldis    6(r9), r15
                stis    r15, 0x500462
                ldob    0x5003A0, r12
                clrbit  1, r12, r12
                stob    r12, 0x5003A0
loc_1B3C8:                              # CODE XREF: set_mot_dat+D4↑j
                cmpobe  0, g0, loc_1B60C
                mov     0, r15
                st      r15, 0x2068(g7)
                lda     0x20F0(g7), r3
                mov     0, r15
                st      r15, 0x0(r3)
                mov     0, r15
                st      r15, 0x1C(r3)
                mov     0, r15
                st      r15, 0x38(r3)
                mov     0, r15
                st      r15, 0x54(r3)
                mov     0, r15
                st      r15, 0x70(r3)
                mov     0, r15
                st      r15, 0x8C(r3)
                ld      mot_list[g0*4], r11
                ld      offset_list_motions[g0*4], r15 # 2CC3EE6
                ldos    (r15), r14      # value of AMY_DP_SQUISH_X_DATA to r14
                stos    r14, 0x800(g7)  # p1_motd_leng or p2_motd_leng
                stos    r14, 0x80A(g7)  # p1_follow1 or p2_follow1
                stos    r14, 0x80C(g7)  # p1_follow2 or p2_follow2
                ld      0x1A4(g7), r15  # p1_mot_kind or p2_mot_kind
                st      r15, 0xBD4(g7)  # P1_PARTS+0xBD4 or P2_PARTS+0xBD4
                ld      0x804(g7), r15  # p1_motd_kind or p2_motd_kind
                st      r15, 0xC30(g7)  # p1_old_motd_kind or p2_old_motd_kind
                ld      0x70C(g7), r15
                st      r15, 0xC58(g7)
                ld      0x860(g7), r15
                st      r15, 0xC5C(g7)
                ldob    0x84C(g7), r15
                stob    r15, 0x85B(g7)
                ldib    0x0(r11), r15   # value of animation_related offset to r15
                stib    r15, 0x804(g7)
                ldib    1(r11), r15
                stib    r15, 0x805(g7)
                ldib    2(r11), r15
                stib    r15, 0x806(g7)
                ldib    3(r11), r15
                stib    r15, 0x807(g7)
                ldib    4(r11), r15
                stib    r15, 0x860(g7)
                ldib    5(r11), r15
                stib    r15, 0x861(g7)
                ldib    6(r11), r15
                stib    r15, 0x862(g7)
                ldib    7(r11), r15
                stib    r15, 0x863(g7)
                ldib    8(r11), r15
                stib    r15, 0x810(g7)
                ldib    9(r11), r15
                stib    r15, 0x811(g7)
                ldib    0xA(r11), r15
                stib    r15, 0x814(g7)
                ldib    0xB(r11), r15
                stib    r15, 0x815(g7)
                ldib    0xC(r11), r15   # Sonic r11 = 0xCF565; r15 = 0xCF565+0xC
                stib    r15, 0x84C(g7)  # p1_skeleton_type or p2_skeleton_type
                ldob    0x84C(g7), r15
                cmpobe  0, r15, loc_1B4D4
                ld      0x860(g7), r15
                setbit  0xC, r15, r15
                st      r15, 0x860(g7)
loc_1B4D4:                              # CODE XREF: set_mot_dat+258↑j
                addo    0xD, r11, r11
                ld      0x804(g7), r3
                clrbit  0x15, r3, r3
                bbc     6, r3, loc_1B4EC
                shlo    0xF, 1, r15
                stis    r15, 0x812(g7)
loc_1B4EC:                              # CODE XREF: set_mot_dat+274↑j
                bbc     8, r3, loc_1B4FC
                bbc     0xF, r3, loc_1B4FC
                clrbit  0xF, r3, r3
                setbit  0x10, r3, r3
loc_1B4FC:                              # CODE XREF: set_mot_dat:loc_1B4EC↑j
                st      r3, 0x1A4(g7)
                ld      0x860(g7), r3   # p1_motd_kind2 or p2_motd_kind2
                st      r3, 0x70C(g7)
                ldob    0x84C(g7), r14  # p1_skeleton_type or p2_skeleton_type
                cmpobe  3, r14, loc_1B558
                ldob    0x1B0(g7), r3
                ld      player_hand_animations[r3*4], r5
                ldob    0, r4
                stob    r4, 0x2A7B(g7)
                mov     5, r3
                ldis    (r5)[r4*2], r15
                st      r15, 0x40(g7)[r3*4]
                mov     8, r3
                lda     0x20(r5), r5
                ldis    (r5)[r4*2], r15
                st      r15, 0x40(g7)[r3*4]
                ldos    0x1A8(g7), r3
                stos    r3, 0x2A7C(g7)
loc_1B558:                              # CODE XREF: set_mot_dat+2A0↑j
                ldob    (r11), r3
                ld      off_1B568[r3*4], r4
                bx      (r4)
# ---------------------------------------------------------------------------
off_1B568:      .long loc_1B5D0         # DATA XREF: set_mot_dat+2F0↑r
                .long sub_1B610
                .long sub_1B628
                .long sub_1B674
                .long _uk_read_move_data
                .long sub_1B7C4
                .long sub_1B83C
                .long sub_1B86C
                .long loc_1B5CC
                .long sub_1B884
                .long sub_1B918
                .long sub_1B934
                .long sub_1B9B4
                .long sub_1B9D4
                .long sub_1B9EC
                .long sub_1BB14
                .long sub_1BB1C
                .long sub_1BB3C
                .long sub_1BB44
                .long sub_1BB7C
                .long sub_1BBB4
                .long sub_1BBCC
                .long sub_1BC58
                .long sub_1BC60
                .long sub_1BC78
# ---------------------------------------------------------------------------
loc_1B5CC:                              # DATA XREF: set_mot_dat+31C↑o
                addo    1, r11, r11
loc_1B5D0:                              # DATA XREF: set_mot_dat:off_1B568↑o
                st      r11, 0x82C(g7)
                st      r11, 0x6EC(g7)
                mov     0, r15
                stib    r15, 0xA20(g7)
                ld      0x0(g7), r15
                bbc     6, r15, loc_1B60C
                ldos    0x812(g7), r13
                subi    r13, 0, r15
                stos    r15, 0x812(g7)
                ldos    0x82A(g7), r13
                subi    r13, 0, r15
                stos    r15, 0x82A(g7)
                ld      0x830(g7), r15
                notbit  0x1F, r15, r15
                st      r15, 0x830(g7)
loc_1B60C:                              # CODE XREF: set_mot_dat:loc_1B3C8↑j
                ret
# End of function set_mot_dat
# =============== S U B R O U T I N E =======================================
sub_1B610:                              # DATA XREF: set_mot_dat+300↑o
                ldib    1(r11), r15
                stib    r15, 0x802(g7)
                ldib    2(r11), r15
                stib    r15, 0x803(g7)
                addo    3, r11, r11
                b       loc_1B558
# End of function sub_1B610
# =============== S U B R O U T I N E =======================================
sub_1B628:                              # DATA XREF: set_mot_dat+304↑o
                ldib    1(r11), r15
                stib    r15, 0x808(g7)
                ldib    2(r11), r15
                stib    r15, 0x809(g7)
                ldib    3(r11), r15
                stib    r15, 0x80A(g7)
                ldib    4(r11), r15
                stib    r15, 0x80B(g7)
                ldib    5(r11), r15
                stib    r15, 0x80C(g7)
                ldib    6(r11), r15
                stib    r15, 0x80D(g7)
                addo    7, r11, r11
                mov     1, r15
                stib    r15, 0xA00(g7)
                ld      0x1A4(g7), r5
                setbit  1, r5, r5
                st      r5, 0x1A4(g7)
                b       loc_1B558
# End of function sub_1B628
# =============== S U B R O U T I N E =======================================
sub_1B674:                              # DATA XREF: set_mot_dat+308↑o
                ldib    1(r11), r15
                stib    r15, 0x80E(g7)
                ldib    2(r11), r15
                stib    r15, 0x80F(g7)
                ldib    3(r11), r15
                stib    r15, 0x816(g7)
                ldib    4(r11), r15
                stib    r15, 0x817(g7)
                ldib    5(r11), r15
                stib    r15, 0x818(g7)
                ldib    6(r11), r15
                stib    r15, 0x819(g7)
                ldib    7(r11), r15
                stib    r15, 0x81C(g7)
                ldib    8(r11), r15
                stib    r15, 0x81D(g7)
                ldib    9(r11), r15
                stib    r15, 0x81E(g7)
                ldib    0xA(r11), r15
                stib    r15, 0x81F(g7)
                ldib    0xB(r11), r15
                stib    r15, 0x83F(g7)
                ldib    0xC(r11), r15
                stib    r15, 0x850(g7)
                ldib    0xD(r11), r15
                stib    r15, 0x851(g7)
                addo    0xE, r11, r11
                b       loc_1B558
# End of function sub_1B674
# =============== S U B R O U T I N E =======================================
_uk_read_move_data:                     # DATA XREF: set_mot_dat+30C↑o
                ldib    1(r11), r15
                stib    r15, 0x820(g7)  # P1_PARTS+0x820
                ldib    2(r11), r15
                stib    r15, 0x821(g7)  # P1_PARTS+0x821
                ldib    4(r11), r15
                stib    r15, 0x83E(g7)  # P1_PARTS+0x83E
                ldib    5(r11), r15
                stib    r15, 0x82A(g7)  # P1_PARTS+0x82A
                ldib    6(r11), r15
                stib    r15, 0x82B(g7)  # P1_PARTS+0x82B
                ldib    7(r11), r15
                stib    r15, 0x828(g7)
                ldib    8(r11), r15
                stib    r15, 0x829(g7)
                ldib    9(r11), r15
                stib    r15, 0x823(g7)
                ldib    0xA(r11), r15
                stib    r15, 0x843(g7)
                ldib    0xB(r11), r15
                stib    r15, 0x85C(g7)  # P1_PARTS+0x85C
                ldib    0xC(r11), r15   # Reads face data here
                stib    r15, 0x85D(g7)  # P1_PARTS+0x85D
                ldib    0xD(r11), r15
                stib    r15, 0x85E(g7)
                ldib    3(r11), r15
                stib    r15, 0x822(g7)
                ldib    3(r11), r15
                stib    r15, 0x83D(g7)
                lda     0x50A284, r3
                ldob    4(g7), r14
                cmpobe  0, r14, loc_1B76C
                lda     cb_mul_R, r3    # cb = collission ball
loc_1B76C:                              # CODE XREF: _uk_read_move_data+7C↑j
                ldib    0xE(r11), r15
                stib    r15, 0x0(r3)
                ldib    0xF(r11), r15
                stib    r15, 1(r3)
                ldib    0x10(r11), r15
                stib    r15, 2(r3)
                ldib    0x11(r11), r15
                stib    r15, 3(r3)
                call    send_multi_ball_R
                addo    0x12, r11, r11
                ld      0x1230(g7), r15
                lda     1(r15), r15
                st      r15, 0x1230(g7)
                ld      0x0(g7), r15
                bbc     6, r15, loc_1B558
                ldob    0x820(g7), r15
                ldob    count_0_42(r15), r15
                stob    r15, 0x820(g7)
                b       loc_1B558
# End of function _uk_read_move_data
# =============== S U B R O U T I N E =======================================
sub_1B7C4:                              # DATA XREF: set_mot_dat+310↑o
                ldib    1(r11), r15
                stib    r15, 0x828(g7)
                ldib    2(r11), r15
                stib    r15, 0x829(g7)
                ldib    3(r11), r15
                stib    r15, 0x822(g7)
                ldib    4(r11), r15
                stib    r15, 0x824(g7)
                ldib    5(r11), r15
                stib    r15, 0x825(g7)
                ldib    6(r11), r15
                stib    r15, 0x826(g7)
                ldib    7(r11), r15
                stib    r15, 0x827(g7)
                ldib    8(r11), r15
                stib    r15, 0x812(g7)
                ldib    9(r11), r15
                stib    r15, 0x813(g7)
                addo    0xE, r11, r11
                ld      0x1230(g7), r15
                lda     1(r15), r15
                st      r15, 0x1230(g7)
                ld      0x1234(g7), r15
                lda     1(r15), r15
                st      r15, 0x1234(g7)
                b       loc_1B558
# End of function sub_1B7C4
# =============== S U B R O U T I N E =======================================
sub_1B83C:                              # DATA XREF: set_mot_dat+314↑o
                ldib    1(r11), r15
                stib    r15, 0x872(g7)
                ldib    2(r11), r15
                stib    r15, 0x873(g7)
                ldib    3(r11), r15
                stib    r15, 0x812(g7)
                ldib    4(r11), r15
                stib    r15, 0x813(g7)
                ldib    5(r11), r15
                stib    r15, 0x85F(g7)
                addo    6, r11, r11
                b       loc_1B558
# End of function sub_1B83C
# =============== S U B R O U T I N E =======================================
sub_1B86C:                              # DATA XREF: set_mot_dat+318↑o
                ldib    1(r11), r15
                stib    r15, 0x812(g7)
                ldib    2(r11), r15
                stib    r15, 0x813(g7)
                addo    3, r11, r11
                b       loc_1B558
# End of function sub_1B86C
# =============== S U B R O U T I N E =======================================
sub_1B884:                              # DATA XREF: set_mot_dat+320↑o
                ldib    1(r11), r15
                stib    r15, 0x830(g7)
                ldib    2(r11), r15
                stib    r15, 0x831(g7)
                ldib    3(r11), r15
                stib    r15, 0x832(g7)
                ldib    4(r11), r15
                stib    r15, 0x833(g7)
                ldib    5(r11), r15
                stib    r15, 0x834(g7)
                ldib    6(r11), r15
                stib    r15, 0x835(g7)
                ldib    7(r11), r15
                stib    r15, 0x836(g7)
                ldib    8(r11), r15
                stib    r15, 0x837(g7)
                ldib    9(r11), r15
                stib    r15, 0x5BE(g7)
                ldob    0xA(r11), r3
                ldob    0xB(r11), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    0xC(r11), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    0xD(r11), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                ld      0x50A000, r14
                mulr    r3, r14, r3
                setbit  0x1F, r3, r3
                st      r3, 0x5CC(g7)
                ldob    0xE(r11), r3
                stos    r3, 0x81A(g7)
                addo    0xF, r11, r11
                b       loc_1B558
# End of function sub_1B884
# =============== S U B R O U T I N E =======================================
sub_1B918:                              # DATA XREF: set_mot_dat+324↑o
                ldob    0x83C(g7), r3
                cmpobne 0, r3, loc_1B924
                st      r11, 0x838(g7)
loc_1B924:                              # CODE XREF: sub_1B918+4↑j
                addo    1, r3, r3
                stob    r3, 0x83C(g7)
                addo    6, r11, r11
                b       loc_1B558
# End of function sub_1B918
# =============== S U B R O U T I N E =======================================
sub_1B934:                              # DATA XREF: set_mot_dat+328↑o
                ldob    1(r11), r3
                ldob    2(r11), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(r11), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(r11), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                ld      0x0(g7), r15
                bbc     6, r15, loc_1B968
                notbit  0xF, r3, r3
loc_1B968:                              # CODE XREF: sub_1B934+2C↑j
                st      r3, 0x844(g7)
                lda     0x7FFF, r13
                and     r13, r3, r15
                stos    r15, 0x6DA(g7)
                ldib    5(r11), r15
                stib    r15, 0x848(g7)
                ldib    6(r11), r15
                stib    r15, 0x849(g7)
                ldib    7(r11), r15
                stib    r15, 0x84A(g7)
                ldib    8(r11), r15
                stib    r15, 0x84B(g7)
                ldib    9(r11), r15
                stib    r15, 0x84E(g7)
                ldib    0xA(r11), r15
                stib    r15, 0x84F(g7)
                addo    0xB, r11, r11
                b       loc_1B558
# End of function sub_1B934
# =============== S U B R O U T I N E =======================================
sub_1B9B4:                              # DATA XREF: set_mot_dat+32C↑o
                ldib    1(r11), r15
                stib    r15, 0x840(g7)
                ldib    2(r11), r15
                stib    r15, 0x841(g7)
                ldib    3(r11), r15
                stib    r15, 0x842(g7)
                addo    4, r11, r11
                b       loc_1B558
# End of function sub_1B9B4
# =============== S U B R O U T I N E =======================================
sub_1B9D4:                              # DATA XREF: set_mot_dat+330↑o
                ldib    1(r11), r15
                stib    r15, 0x84D(g7)
                ldob    2(r11), r3
                stos    r3, 0x858(g7)
                addo    3, r11, r11
                b       loc_1B558
# End of function sub_1B9D4
# =============== S U B R O U T I N E =======================================
sub_1B9EC:                              # DATA XREF: set_mot_dat+334↑o
                ldob    1(r11), r8
                ldob    2(r11), r15
                shlo    8, r15, r15
                addo    r15, r8, r8
                ldob    3(r11), r15
                shlo    0x10, r15, r15
                addo    r15, r8, r8
                ldob    4(r11), r15
                shlo    0x18, r15, r15
                addo    r15, r8, r8
                ldib    5(r11), r9
                ldob    6(r11), r10
                ldob    7(r11), r15
                shlo    8, r15, r15
                addo    r15, r10, r10
                ldob    8(r11), r15
                shlo    0x10, r15, r15
                addo    r15, r10, r10
                ldob    9(r11), r15
                shlo    0x18, r15, r15
                addo    r15, r10, r10
                ldib    0xA(r11), r12
                ldob    0xB(r11), r13
                ldob    0xC(r11), r15
                shlo    8, r15, r15
                addo    r15, r13, r13
                ldob    0xD(r11), r15
                shlo    0x10, r15, r15
                addo    r15, r13, r13
                ldob    0xE(r11), r15
                shlo    0x18, r15, r15
                addo    r15, r13, r13
                ld      0x5F4(g7), r14
                lda     displacement, r15
                mov     r9, r3
                subr    r10, r8, r4
                subr    r10, r14, r5
                ldib    0x822(g7), r6
                cmpibe  0, r12, loc_1BAB0
                subr    r10, r13, r7
                cmpr    r7, r5
                bl      loc_1BAA8
                mov     r12, r3
                subr    r13, r8, r4
                subr    r13, r14, r5
                b       loc_1BAB0
# ---------------------------------------------------------------------------
loc_1BAA8:                              # CODE XREF: sub_1B9EC+A8↑j
                mov     r7, r4
                mov     r12, r6
loc_1BAB0:                              # CODE XREF: sub_1B9EC+9C↑j
                cmpibg  0, r4, loc_1BAD4
                cmpr    r15, r5
                bl      loc_1BAC4
                mov     r15, r5
                b       loc_1BAD0
# ---------------------------------------------------------------------------
loc_1BAC4:                              # CODE XREF: sub_1B9EC+CC↑j
                cmpr    r4, r5
                bg      loc_1BAD0
                mov     r4, r5
loc_1BAD0:                              # CODE XREF: sub_1B9EC+D4↑j
                b       loc_1BAF0
# ---------------------------------------------------------------------------
loc_1BAD4:                              # CODE XREF: sub_1B9EC:loc_1BAB0↑j
                cmpr    r4, r5
                bl      loc_1BAE4
                mov     r4, r5
                b       loc_1BAF0
# ---------------------------------------------------------------------------
loc_1BAE4:                              # CODE XREF: sub_1B9EC+EC↑j
                cmpr    r15, r5
                bg      loc_1BAF0
                mov     r15, r5
loc_1BAF0:                              # CODE XREF: sub_1B9EC:loc_1BAD0↑j
                subi    r3, r6, r6
                cvtir   r6, r6
                divr    r4, r5, r5
                mulr    r6, r5, r5
                cvtri   r5, r5
                addi    r5, r3, r3
                stib    r3, 0x822(g7)
                addo    0xF, r11, r11
                b       loc_1B558
# End of function sub_1B9EC
# =============== S U B R O U T I N E =======================================
sub_1BB14:                              # DATA XREF: set_mot_dat+338↑o
                addo    3, r11, r11
                b       loc_1B558
# End of function sub_1BB14
# =============== S U B R O U T I N E =======================================
sub_1BB1C:                              # DATA XREF: set_mot_dat+33C↑o
                ldob    1(r11), r3
                lda     2(r11), r4
                st      r4, 0x854(g7)
                ldob    -2(r4)[r3*2], r5
                stos    r5, 0x800(g7)
                lda     (r4)[r3*2], r11
                b       loc_1B558
# End of function sub_1BB1C
# =============== S U B R O U T I N E =======================================
sub_1BB3C:                              # DATA XREF: set_mot_dat+340↑o
                addo    7, r11, r11
                b       loc_1B558
# End of function sub_1BB3C
# =============== S U B R O U T I N E =======================================
sub_1BB44:                              # DATA XREF: set_mot_dat+344↑o
                ldib    1(r11), r15
                stib    r15, 0x864(g7)
                ldib    2(r11), r15
                stib    r15, 0x865(g7)
                ldib    3(r11), r15
                stib    r15, 0x868(g7)
                ldib    4(r11), r15
                stib    r15, 0x869(g7)
                ldib    5(r11), r15
                stib    r15, 0x878(g7)
                ldib    6(r11), r15
                stib    r15, 0x879(g7)
                addo    7, r11, r11
                b       loc_1B558
# End of function sub_1BB44
# =============== S U B R O U T I N E =======================================
sub_1BB7C:                              # DATA XREF: set_mot_dat+348↑o
                ldib    1(r11), r15
                stib    r15, 0x802(g7)
                ldib    2(r11), r15
                stib    r15, 0x803(g7)
                ldib    3(r11), r15
                stib    r15, 0x86C(g7)
                ldib    4(r11), r15
                stib    r15, 0x86D(g7)
                ldib    5(r11), r15
                stib    r15, 0x86E(g7)
                ldib    6(r11), r15
                stib    r15, 0x86F(g7)
                addo    7, r11, r11
                b       loc_1B558
# End of function sub_1BB7C
# =============== S U B R O U T I N E =======================================
sub_1BBB4:                              # DATA XREF: set_mot_dat+34C↑o
                ldib    1(r11), r15
                stib    r15, 0x870(g7)
                ldib    2(r11), r15
                stib    r15, 0x871(g7)
                addo    3, r11, r11
                b       loc_1B558
# End of function sub_1BBB4
# =============== S U B R O U T I N E =======================================
sub_1BBCC:                              # DATA XREF: set_mot_dat+350↑o
                ldob    1(r11), r3
                ldob    0xA20(g7), r4
                ldob    0xA21(g7), r5
                cmpobge r3, r4, loc_1BC50
                subo    r5, r4, r6
                cmpoble r6, r3, loc_1BC50
                cmpibl  1, r5, loc_1BBF8
                ldib    0x822(g7), r10
                shro    2, r10, r3
                addo    r3, r10, r10
                b       loc_1BC4C
# ---------------------------------------------------------------------------
loc_1BBF8:                              # CODE XREF: sub_1BBCC+18↑j
                ldob    2(r11), r6
                ldob    3(r11), r15
                shlo    8, r15, r15
                addo    r15, r6, r6
                ldob    4(r11), r15
                shlo    0x10, r15, r15
                addo    r15, r6, r6
                ldob    5(r11), r15
                shlo    0x18, r15, r15
                addo    r15, r6, r6
                ldib    0x822(g7), r10
                cvtir   r10, r10
                subo    r3, r4, r7
                cvtir   r7, r7
                cvtir   r5, r8
                divr    r7, r8, r9
                mulr    r6, r9, r9
                mulr    r6, r10, r12
                mulr    r9, r10, r13
                addr    r12, r13, r10
                cvtri   r10, r10
loc_1BC4C:                              # CODE XREF: sub_1BBCC+28↑j
                stib    r10, 0x822(g7)
loc_1BC50:                              # CODE XREF: sub_1BBCC+C↑j
                addo    6, r11, r11
                b       loc_1B558
# End of function sub_1BBCC
# =============== S U B R O U T I N E =======================================
sub_1BC58:                              # DATA XREF: set_mot_dat+354↑o
                addo    5, r11, r11
                b       loc_1B558
# End of function sub_1BC58
# =============== S U B R O U T I N E =======================================
sub_1BC60:                              # DATA XREF: set_mot_dat+358↑o
                ldib    1(r11), r15
                stib    r15, 0x87A(g7)
                ldib    2(r11), r15
                stib    r15, 0x87B(g7)
                addo    3, r11, r11
                b       loc_1B558
# End of function sub_1BC60
# =============== S U B R O U T I N E =======================================
sub_1BC78:                              # DATA XREF: set_mot_dat+35C↑o
                addo    0xD, r11, r11
                b       loc_1B558
# End of function sub_1BC78
# =============== S U B R O U T I N E =======================================
calc_mht_adr:                           # CODE XREF: decide_command+158↑p
                lda     loc_1FFC+3, r13 # Label from Fighting Vipers source
                and     r13, g0, r3
                ld      mot_list[r3*4], g0
                addo    0xD, g0, g0
loc_1BC98:                              # CODE XREF: calc_mht_adr+34↓j
                ldob    (g0), r3
                cmpobe  g1, r3, loc_1BCBC
                cmpobe  0, r3, loc_1BCB8
                cmpobe  8, r3, loc_1BCB8
                ldob    byte_1D006[r3], r4
                addo    r4, g0, g0
                b       loc_1BC98
# ---------------------------------------------------------------------------
loc_1BCB8:                              # CODE XREF: calc_mht_adr+20↑j
                mov     0, g0
loc_1BCBC:                              # CODE XREF: calc_mht_adr+1C↑j
                ret
# End of function calc_mht_adr
# =============== S U B R O U T I N E =======================================
sub_1BCC0:                              # CODE XREF: play_motion+25C↓p
                ldob    0x1B0(g7), r3
                ld      CHAR_PARTS[r3*4], g5
                st      g5, 0x190(g7)
                ld      0xC(g5), g6
                st      g6, 0x1A0(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      0x0(g5), r4
                lda     (r4), r14
                lda     0x40(g7), r13
                mov     0x10, r12
loc_1BD38:                              # CODE XREF: sub_1BCC0+8C↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_1BD38
                ld      8(g5), r4
                lda     (r4), r14
                lda     0x1B4(g7), r13
                mov     0x10, r12
loc_1BD60:                              # CODE XREF: sub_1BCC0+B4↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_1BD60
                ld      4(g5), r4
                lda     (r4), r14
                lda     0x8C(g7), r13
                addo    0x1F, 0xE, r12
loc_1BD88:                              # CODE XREF: sub_1BCC0+DC↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_1BD88
                ret
# End of function sub_1BCC0
# =============== S U B R O U T I N E =======================================
play_motion:                            # CODE XREF: action_init+6D0↑p
                ld      0x0(g7), r15    # Label from official source
                bbc     0x1F, r15, pm_ba_ps
                ldos    0x1A8(g7), r14
                cmpobe  0, r14, loc_1BE00
                ldos    0x1AA(g7), r3
                ldos    0x800(g7), r4
                cmpobe  0, r3, pm_load1
                cmpoble r3, r4, pm_load
                ldos    0x802(g7), g0
                lda     0xFFFF, r13
                cmpobe  r13, g0, loc_1BE20
                ldos    0x86C(g7), r14
                cmpobe  0, r14, loc_1BDF4
                ldos    0xA1C(g7), r13
                ldos    0x86E(g7), r14
                cmpoble r13, r14, loc_1BDF4
                ldis    0x86C(g7), r15
                stis    r15, 0x802(g7)
                ldos    0x802(g7), g0
loc_1BDF4:                              # CODE XREF: play_motion+34↑j
                cmpobne 0, g0, loc_1BE18
                stos    r4, 0x1AA(g7)
                b       pm_load
# ---------------------------------------------------------------------------
loc_1BE00:                              # CODE XREF: play_motion+C↑j
                ldos    displacement(g6), g0
                ld      0x0(g7), r15
                bbc     0x1D, r15, loc_1BE18
                ldos    (displacement2)(g6), g0
loc_1BE18:                              # CODE XREF: play_motion:loc_1BDF4↑j
                call    set_motion
                b       pm_load1
# ---------------------------------------------------------------------------
loc_1BE20:                              # CODE XREF: play_motion+2C↑j
                ld      0x6EC(g7), r15
                st      r15, 0x82C(g7)
                ld      0x1A4(g7), r15
                st      r15, 0xBD4(g7)
                ld      0x70C(g7), r15
                st      r15, 0xC58(g7)
                call    smooth_int
pm_load1:                               # CODE XREF: play_motion+18↑j
                mov     1, r15          # Label from official source
                stis    r15, 0x1AA(g7)
pm_load:                                # CODE XREF: play_motion+1C↑j
                call    calc_rob_angle  # Label from official source
                ldob    0xA00(g7), r3
                ldos    0x1AA(g7), r4
                ld      0x1A4(g7), r5
                cmpibe  0, r3, pm_ba_ps
                cmpibe  1, r3, basic_begin
                cmpibe  2, r3, basic_main
                cmpibe  3, r3, basic_follow1
basic_begin:                            # CODE XREF: play_motion+B4↑j
                ldos    0x808(g7), r3   # Label from official source
                ld      0x804(g7), r15
                bbc     8, r15, bb_no_rise_attack
                bbc     0xF, r15, bb_no_rise_attack
                cmpibl  r4, r3, bb_no_rise_attack
                clrbit  0x10, r5, r5
bb_no_rise_attack:                      # CODE XREF: play_motion+C8↑j
                cmpibl  r4, r3, pm_ba_ex # Label from official source
                clrbit  1, r5, r5
                ldob    0xA00(g7), r14
                addi    1, r14, r15
                stob    r15, 0xA00(g7)
basic_main:                             # CODE XREF: play_motion+B8↑j
                ldos    0x80A(g7), r14  # Label from official source
                cmpibl  r4, r14, pm_ba_ex
                bbc     8, r5, bm_ri_ps
                clrbit  0xF, r5, r5
bm_ri_ps:                               # CODE XREF: play_motion+F4↑j
                lda     0x4010100, r13  # Label from official source
                andnot  r13, r5, r5
                setbit  2, r5, r5
                mov     0, r15
                stis    r15, 0x1224(g7)
                mov     0, r15
                stis    r15, 0x1248(g7)
                ldob    0xA00(g7), r14
                addi    1, r14, r15
                stob    r15, 0xA00(g7)
basic_follow1:                          # CODE XREF: play_motion+BC↑j
                bbc     0xC, r5, bf1_ju_fo_ps # Label from official source
                bbc     4, r5, bf1_ju_fo_ps
                ldos    0x850(g7), r3
                cmpobe  0, r3, bf1_ju_fo_ps
                cmpibl  r4, r3, bf1_ju_fo_ps
                clrbit  0, r5, r5
bf1_ju_fo_ps:                           # CODE XREF: play_motion:basic_follow1↑j
                ld      0x0(g7), r15    # Label from official source
                bbc     0x12, r15, loc_1BF24
                ld      0x804(g7), r15
                bbc     8, r15, loc_1BF24
                ld      0x1A4(g7), r15
                bbs     4, r15, loc_1BF24
                ld      0x1A4(g7), r15
                bbs     0x12, r15, loc_1BF24
                ld      0x1A4(g7), r15
                bbs     0x13, r15, loc_1BF24
                ldos    0x80A(g7), r3
                addo    4, r3, r3
                cmpibl  r4, r3, pm_ba_ex
                b       loc_1BF2C
# ---------------------------------------------------------------------------
loc_1BF24:                              # CODE XREF: play_motion+14C↑j
                ldos    0x80C(g7), r14
                cmpibl  r4, r14, pm_ba_ex
loc_1BF2C:                              # CODE XREF: play_motion+17C↑j
                lda     0x1001, r13
                andnot  r13, r5, r5
                ldob    0xA00(g7), r14
                addi    1, r14, r15
                stob    r15, 0xA00(g7)
pm_ba_ex:                               # CODE XREF: play_motion:bb_no_rise_attack↑j
                st      r5, 0x1A4(g7)   # Label from official source
                ld      0x70C(g7), r15
                bbc     0x1A, r15, pm_ba_ps
                ldis    0xC7E(g7), r14
                cmpibl  0, r14, pm_ba_ps
                ld      0x0(g7), r15
                bbs     0x12, r15, pm_ba_ps
                ld      add_BACKUP_RAM_TO_RAM, r14
                ldob    0x3353(r14), r14 # r14 = BACKUP_RAM_TO_RAM+0x3353
                bbs     6, r14, pm_ba_ps
                ld      0xC70(g7), r14
                cmpibge 0, r14, pm_ba_ps
                ldob    gameprogram, r14 # bit 0 clear = Player 1
                cmpobne 0, r14, pm_game_2P_ss_check
                ldob    p2_wins, r14
                cmpobne 0, r14, not_super_sonic
                ldob    p1_wins, r14
                cmpoble 1, r14, pm_game_2P_ss_check_pass
                b       not_super_sonic
# ---------------------------------------------------------------------------
pm_game_2P_ss_check:                    # CODE XREF: play_motion+1E0↑j
                ldob    p1_wins, r14    # Label from official source
                cmpobne 0, r14, not_super_sonic
                ldob    p2_wins, r14
                cmpoble 1, r14, pm_game_2P_ss_check_pass
                b       not_super_sonic
# ---------------------------------------------------------------------------
pm_game_2P_ss_check_pass:               # CODE XREF: play_motion+1F8↑j
                ld      also_continue_count, r14 # Label from official source
                cmpobne 0, r14, not_super_sonic # branch if any continues have been used
                ld      rounds_lost_vs_cpu, r14
                cmpobne 0, r14, not_super_sonic # branch if any rounds lost to cpu
                ldob    0x1B1(g7), r14
                cmpobne 0, r14, not_super_sonic # branch if player 1 selected isn't Sonic
                ldob    0x1B1(g8), r14
                cmpobe  3, r14, super_sonic
                ldob    0x1B1(g8), r14
                cmpobe  13, r14, super_sonic
                ldob    0x1B1(g8), r14
                cmpobne 11, r14, not_super_sonic
super_sonic:                            # CODE XREF: play_motion+240↑j
                mov     16, r15         # Label from official source
                stib    r15, 0x1B0(g7)  # set Super Sonic to P1_PARTS+0x1B0 or P2_PARTS+0x1B0
                call    sub_1BCC0
                call    sub_81038
                call    sub_7F0E8       # Inits player bodies
                call    scale_something
                call    char_nameplate_dsp
                lda     0xAE1013, g0    # load sd_game_bgm_13 Super Sonic music
                call    check_same_sound
                call    sound_request_u
                ldos    energy_max, r15
                stos    r15, 0x1AC(g7)  # P1_PARTS+0x1AC or P2_PARTS+0x1AC
not_super_sonic:                        # CODE XREF: play_motion+1EC↑j
                shlo    6, 3, r15       # Label from official source
                stis    r15, 0xC7C(g7)  # P1_PARTS+0xC7C or P2_PARTS+0xC7C
                ld      0x0(g7), r15
                setbit  0x12, r15, r15
                st      r15, 0x0(g7)
                ld      0x500034, r12
                lda     check_word1, r13
                lda     displacement32(r13), r13
                lda     (displacement64)(r13), r13
                lda     displacement128(r13), r13
                and     r13, r12, r13
                cmpobne 0, r13, pm_ba_ps
                mov     0x13, r15
                st      r15, 0xC6C(g7)  # P1_PARTS+0xC6C
                ld      0xC70(g7), r14  # p1_barriers or p2_barriers
                subi    1, r14, r15
                st      r15, 0xC70(g7)
pm_ba_ps:                               # CODE XREF: play_motion+4↑j
                ld      0x82C(g7), g4   # Label from official source
                cmpobe  0, g4, loc_1CA10
loc_1C090:                              # CODE XREF: play_motion+328↓j
                ldob    (g4), r7        # g4 = 0xD84B6
                clrbit  7, r7, r3
                cmpobe  0, r3, loc_1CA10
                ldob    1(g4), r4
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                ldos    0x1AA(g7), r6   # P1_PARTS+0x1AA
                cmpobl  r6, r4, loc_1CA10
                ld      0x0(g7), r15
                bbs     31, r15, _uk_player_action_loader # Always seems to hit
                bbs     7, r7, _uk_player_action_loader
                ldob    byte_1D01F(r3), r7
                addo    r7, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
_uk_player_action_loader:               # CODE XREF: play_motion+314↑j
                ld      _uk_player_actions[r3*4], r5
                bx      (r5)
# ---------------------------------------------------------------------------
loc_1C0DC:                              # DATA XREF: ROM:0001D1B0↓o
                ld      0x1A4(g7), r15
                notbit  0x15, r15, r15
                st      r15, 0x1A4(g7)
                addo    3, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C0F0:                              # DATA XREF: ROM:0001D1B4↓o
                shlo    0x18, 9, r15
                st      r15, 0x198(g7)
                mov     0, r15
                stis    r15, 0x5DE(g7)
                addo    3, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C108:                              # DATA XREF: ROM:0001D1B8↓o
                ldob    3(g4), r3
                ldob    4(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ld      0x0(g7), r15
                bbc     6, r15, loc_1C124
                subi    r3, 0, r3
loc_1C124:                              # CODE XREF: play_motion+378↑j
                ldis    0x26(g7), r13
                addi    r13, r3, r3
                subi    r3, 0, r12
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                ldob    5(g4), r3
                ldob    6(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    7(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    8(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                ldob    9(g4), r6
                ldob    0xA(g4), r15
                shlo    8, r15, r15
                addo    r15, r6, r6
                ldob    0xB(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r6, r6
                ldob    0xC(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r6, r6
                mulr    r3, r4, r15
                st      r15, 0x2C(g7)
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x34(g7)
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      0x50A000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                st      r3, 0x30(g7)
                call    fix_hara
                addo    0xD, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C1FC:                              # DATA XREF: ROM:0001D1BC↓o
                cmpobne r6, r4, loc_1C294
                ld      mode_flag, r3
                lda     mode128, r4
                cmpobe  r3, r4, loc_1C294
                ldob    3(g4), r3
                ldob    4(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    5(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    6(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                lda     0xAE1133, r4    # sd_fence_1
                cmpobe  r3, r4, loc_1C27C
                lda     0xAE1147, r4    # sd_gum_2c
                cmpobne r3, r4, loc_1C264
                call    sub_32948
                mov     0, g0
                call    stage_contact_sound
                b       loc_1C294
# ---------------------------------------------------------------------------
loc_1C264:                              # CODE XREF: play_motion+4AC↑j
                lda     displacement, r4
                cmpobne r3, r4, loc_1C288
                mov     1, g0
                call    stage_contact_sound
                b       loc_1C294
# ---------------------------------------------------------------------------
loc_1C27C:                              # CODE XREF: play_motion+4A0↑j
                mov     3, g0
                call    sound_chainlink_hit
                b       loc_1C294
# ---------------------------------------------------------------------------
loc_1C288:                              # CODE XREF: play_motion+4C8↑j
                mov     r3, g0
                call    check_same_sound
                call    sound_request_u
loc_1C294:                              # CODE XREF: play_motion:loc_1C1FC↑j
                addo    7, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C29C:                              # DATA XREF: ROM:0001D1C0↓o
                ldob    3(g4), r3
                ld      0x1A4(g7), r15
                setbit  r3, r15, r15
                st      r15, 0x1A4(g7)
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C2B4:                              # DATA XREF: ROM:0001D1C4↓o
                ldob    3(g4), r3
                ld      0x1A4(g7), r15
                clrbit  r3, r15, r15
                st      r15, 0x1A4(g7)
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C2CC:                              # DATA XREF: ROM:0001D1C8↓o
                ldob    3(g4), r3
                ld      0x1A4(g7), r15
                notbit  r3, r15, r15
                st      r15, 0x1A4(g7)
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C2E4:                              # DATA XREF: ROM:0001D1CC↓o
                ldis    game_timer, r14
                cmpibge 0, r14, loc_1C340
                ldib    3(g4), r3
                ldis    0x1AC(g7), r4
                ldob    0xA28(g7), r5
                bbs     0, r5, loc_1C308
                stos    r3, 0x5DE(g7)
                b       loc_1C314
# ---------------------------------------------------------------------------
loc_1C308:                              # CODE XREF: play_motion+558↑j
                ldos    0x5DE(g7), r5
                addo    r3, r5, r5
                stos    r5, 0x5DE(g7)
loc_1C314:                              # CODE XREF: play_motion+560↑j
                mov     1, r15
                stib    r15, 0xA28(g7)
                subi    r3, r4, r4
                stos    r3, 0x1F70(g8)
                cmpibl  0, r4, loc_1C33C
                ld      0x0(g7), r15
                setbit  5, r15, r15
                st      r15, 0x0(g7)
                mov     0, r4
loc_1C33C:                              # CODE XREF: play_motion+584↑j
                stis    r4, 0x1AC(g7)
loc_1C340:                              # CODE XREF: play_motion+548↑j
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C348:                              # DATA XREF: ROM:0001D1D0↓o
                cmpobne r6, r4, loc_1C3AC
                ld      mode_flag, r3
                lda     mode128, r4
                cmpobe  r3, r4, loc_1C3AC
                ldob    3(g4), r3
                ldob    0x1B1(g7), r4   # P1_PARTS+0x1B1 or P2_PARTS+0x1B1
                cmpobe  9, r3, play_audio_per_character
                ldos    sd_wait_timer, r14
                cmpobl  0, r14, loc_1C3AC # if 0 is less than sd_wait_timer then branch
play_audio_per_character:               # CODE XREF: play_motion+5C4↑j
                ld      blank_per_character_audio_array[r3*4], r15 # Loads some kind of audio
                ld      (r15)[r4*4], r5
                cmpobe  0, r5, loc_1C3AC # Will always branch, r5 will always be 0
                mov     r5, g0
                call    check_same_sound
                call    sound_request_u
                ld      dword_DB2A8[r3*4], r15
                cmpobe  0, r15, loc_1C3AC
                ldos    (r15)[r4*2], r6
                cmpobe  0, r6, loc_1C3AC
                stos    r6, 0x7D0(g7)   # P1_PARTS+0x7D0 or P2_PARTS+0x7D0
loc_1C3AC:                              # CODE XREF: play_motion:loc_1C348↑j
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C3B4:                              # DATA XREF: ROM:0001D1D4↓o
                ldob    3(g4), r3
                ldob    4(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    7(g4), r6
                ldob    8(g4), r10
                cmpobne 1, r6, loc_1C3DC
                ldos    0x1AC(g7), r14
                cmpibl  0, r14, loc_1C43C
                b       loc_1C444
# ---------------------------------------------------------------------------
loc_1C3DC:                              # CODE XREF: play_motion+628↑j
                lda     0x1282(g7), r7
                lda     0xF7, r13
                cmpobne r13, r6, loc_1C3F4
                lda     0x1280(g7), r7
loc_1C3F4:                              # CODE XREF: play_motion+644↑j
                mov     r3, g0
                call    check_front_back
                mov     g0, r3
                ldob    0x1202(g7), r5
loc_1C408:                              # CODE XREF: play_motion+694↓j
                subi    1, r5, r5
                lda     0x3F, r13
                and     r13, r5, r5
                ldob    (r7)[r5*4], r4
                cmpobe  0, r10, loc_1C428
                ldob    0x1280(g7)[r5*4], r11
                bbc     4, r11, loc_1C430
loc_1C428:                              # CODE XREF: play_motion+674↑j
                and     r6, r4, r4
                cmpobe  r3, r4, loc_1C444
loc_1C430:                              # CODE XREF: play_motion+680↑j
                ldob    0x1204(g7), r14
                cmpobne r5, r14, loc_1C408
loc_1C43C:                              # CODE XREF: play_motion+630↑j
                addo    9, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C444:                              # CODE XREF: play_motion+634↑j
                mov     0x1F, r15
                stib    r15, 0x60C(g7)
                ldib    5(g4), r15
                stib    r15, 0x852(g7)
                ldib    6(g4), r15
                stib    r15, 0x853(g7)
                b       loc_1CAF0
# ---------------------------------------------------------------------------
loc_1C460:                              # DATA XREF: ROM:0001D1D8↓o
                ldob    3(g4), r3
                ldob    4(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                cmpobe  0, r3, loc_1C484
                call    rand            # Random value stored to g0
                cmpobl  g0, r3, loc_1C484
                addo    7, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C484:                              # CODE XREF: play_motion:loc_1C470↑j
                mov     0x1F, r15
                stib    r15, 0x60C(g7)
                ldib    5(g4), r15
                stib    r15, 0x852(g7)
                ldib    6(g4), r15
                stib    r15, 0x853(g7)
                b       loc_1CAF0
# ---------------------------------------------------------------------------
loc_1C4A0:                              # DATA XREF: ROM:0001D1DC↓o
                ldob    3(g4), r3
                ld      0x1A4(g8), r15
                clrbit  r3, r15, r15
                st      r15, 0x1A4(g8)
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C4B8:                              # DATA XREF: ROM:0001D1E0↓o
                ld      0x1A4(g7), r4
                ldob    3(g4), r3
                setbit  0x19, r4, r4
                cmpobe  0, r3, loc_1C4CC
                clrbit  0x19, r4, r4
loc_1C4CC:                              # CODE XREF: play_motion+720↑j
                st      r4, 0x1A4(g7)
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C4D8:                              # DATA XREF: ROM:0001D1E4↓o
                cmpobne r6, r4, loc_1C504
                ld      fa_camera, r3
                ldib    3(g4), r15
                stib    r15, 0xFC(r3)
                ldib    4(g4), r15
                stib    r15, 0xFD(r3)
                ldib    5(g4), r15
                stib    r15, 0xFE(r3)
                ldib    6(g4), r15
                stib    r15, 0xFF(r3)
loc_1C504:                              # CODE XREF: play_motion:loc_1C4D8↑j
                addo    7, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C50C:                              # DATA XREF: ROM:0001D1E8↓o
                cmpobne r6, r4, loc_1C524
                ldob    0x6CC(g7), r3
                addo    1, r3, r3
                cmpobge 8, r3, loc_1C520
                mov     8, r3
loc_1C520:                              # CODE XREF: play_motion+774↑j
                stob    r3, 0x6CC(g7)
loc_1C524:                              # CODE XREF: play_motion:loc_1C50C↑j
                addo    3, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
_uk_player_action_related:              # DATA XREF: ROM:0001D1EC↓o
                call    load_action_from_list
                addo    5, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C538:                              # DATA XREF: ROM:0001D1F0↓o
                cmpobne r6, r4, loc_1C564
                ld      0x0(g7), r4
                ldob    3(g4), r3
                cmpobne 0, r3, loc_1C558
                bbc     0x1B, r4, loc_1C564
                call    delete_option
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C558:                              # CODE XREF: play_motion+7A0↑j
                bbs     0x1B, r4, loc_1C564
                st      r3, 0xAFC(g7)
                call    sub_1CB58
loc_1C564:                              # CODE XREF: play_motion:loc_1C538↑j
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C56C:                              # DATA XREF: ROM:0001D1F4↓o
                ldob    3(g4), r3
                ldob    4(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                stos    r3, 0x5DE(g7)
                addo    5, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C588:                              # DATA XREF: ROM:0001D1F8↓o
                cmpobne r6, r4, loc_1C58C
loc_1C58C:                              # CODE XREF: play_motion:loc_1C588↑j
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C594:                              # DATA XREF: ROM:0001D1FC↓o
                cmpobne r6, r4, loc_1C5A0
                ldib    3(g4), r15
                stib    r15, 0x6CE(g7)
loc_1C5A0:                              # CODE XREF: play_motion:loc_1C594↑j
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C5A8:                              # DATA XREF: ROM:0001D200↓o
                ldob    3(g4), r3
                ldob    4(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                stos    r3, 0x812(g7)
                ld      0x1A4(g7), r15
                setbit  6, r15, r15
                st      r15, 0x1A4(g7)
                addo    5, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C5D0:                              # DATA XREF: ROM:0001D204↓o
                ldob    3(g4), r3
                ld      0x5B8(g7), r4
                cmpobe  0, r3, loc_1C5E4
                bbs     0, r4, loc_1C5F0
                b       loc_1C5E8
# ---------------------------------------------------------------------------
loc_1C5E4:                              # CODE XREF: play_motion+834↑j
                bbc     0, r4, loc_1C5F0
loc_1C5E8:                              # CODE XREF: play_motion+83C↑j
                addo    6, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C5F0:                              # CODE XREF: play_motion+838↑j
                mov     0x1F, r15
                stib    r15, 0x60C(g7)
                ldib    4(g4), r15
                stib    r15, 0x852(g7)
                ldib    5(g4), r15
                stib    r15, 0x853(g7)
                b       loc_1CAF0
# ---------------------------------------------------------------------------
loc_1C60C:                              # DATA XREF: ROM:0001D208↓o
                ld      0x70C(g7), r4
                ldob    3(g4), r3
                setbit  0, r4, r4
                cmpobe  1, r3, loc_1C620
                clrbit  0, r4, r4
loc_1C620:                              # CODE XREF: play_motion+874↑j
                st      r4, 0x70C(g7)
                ldib    4(g4), r15
                stib    r15, 0xA02(g7)
                ldib    5(g4), r15
                stib    r15, 0xA03(g7)
                ldib    6(g4), r15
                stib    r15, 0xA04(g7)
                ldib    7(g4), r15
                stib    r15, 0xA05(g7)
                ldib    8(g4), r15
                stib    r15, 0xACC(g7)
                ldib    9(g4), r15
                stib    r15, 0xACD(g7)
                ldib    0xA(g4), r15
                stib    r15, 0xACE(g7)
                ldib    0xB(g4), r15
                stib    r15, 0xACF(g7)
                addo    0xC, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C66C:                              # DATA XREF: ROM:0001D20C↓o
                ldob    3(g4), r3
                ld      0x70C(g7), r15
                setbit  r3, r15, r15
                st      r15, 0x70C(g7)
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C684:                              # DATA XREF: ROM:0001D210↓o
                ldob    3(g4), r3
                ld      0x70C(g7), r15
                clrbit  r3, r15, r15
                st      r15, 0x70C(g7)
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C69C:                              # DATA XREF: ROM:0001D214↓o
                ld      0x70C(g7), r4
                ldob    3(g4), r3
                setbit  3, r4, r4
                cmpobe  1, r3, loc_1C6BC
                clrbit  3, r4, r4
                st      r4, 0x70C(g7)
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C6BC:                              # CODE XREF: play_motion+904↑j
                st      r4, 0x70C(g7)
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C6C8:                              # DATA XREF: ROM:0001D218↓o
                ldob    3(g4), r3
                ldob    4(g4), r4
                shlo    4, r4, r4
                or      r3, r4, r4
                stob    r4, 0xA25(g7)
                ldib    5(g4), r15
                stib    r15, 0xA24(g7)
                addo    6, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C6EC:                              # DATA XREF: ROM:0001D21C↓o
                ldob    also_mode, r3
                ldob    also_sub_mode, r4
                lda     mode9, r5
                cmpobne r5, r3, loc_1C714
                lda     check_word1+1, r5
                cmpobe  r5, r4, loc_1C730
loc_1C714:                              # CODE XREF: play_motion+960↑j
                ldob    4(g7), r13
                shlo    7, r13, r13
                setbit  0, r13, r13
                st      r13, 0x50A378
                ldob    0x822(g7), g0
                call    kabe_parts_damage
loc_1C730:                              # CODE XREF: play_motion+96C↑j
                addo    3, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C738:                              # DATA XREF: ROM:0001D220↓o
                ldob    3(g4), r3
                stos    r3, 0xC56(g7)
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C748:                              # DATA XREF: ROM:0001D228↓o
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                call    sub_7F760
                ldob    0x84C(g7), r14
                cmpobne 2, r14, loc_1C7DC
                ld      0x0(g7), r15
                setbit  0x1D, r15, r15
                st      r15, 0x0(g7)
                call    set_kamae_ram   # Set Stance Ram
loc_1C7DC:                              # CODE XREF: play_motion+A24↑j
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                addo    0x14, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C85C:                              # DATA XREF: ROM:0001D224↓o
                addo    4, sp, sp
                st      g4, -4(sp)
                call    sub_7F46C
                ld      -4(sp), g4
                subo    4, sp, sp
                addo    4, sp, sp
                st      g4, -4(sp)
                call    sub_7F508
                ld      -4(sp), g4
                subo    4, sp, sp
                addo    0x11, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C89C:                              # DATA XREF: ROM:0001D22C↓o
                addo    4, sp, sp
                st      g4, -4(sp)
                call    sub_81A48
                ld      -4(sp), g4
                subo    4, sp, sp
                addo    0x15, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C8C0:                              # DATA XREF: ROM:0001D230↓o
                call    sub_7F5F4
                addo    0x1D, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C8CC:                              # DATA XREF: ROM:0001D234↓o
                call    sub_7F5BC
                addo    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
call_projectile_routine:                # DATA XREF: ROM:0001D238↓o
                call    projectile_main_routine
                addi    0x1C, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C8E4:                              # DATA XREF: ROM:0001D23C↓o
                call    sub_33378
                addo    7, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C8F0:                              # DATA XREF: ROM:0001D240↓o
                call    sub_32984
                addo    0x1F, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C8FC:                              # DATA XREF: ROM:0001D244↓o
                ldob    3(g4), r4
                ldob    4(g4), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                stos    r4, 0xC60(g7)
                ldob    5(g4), r4
                ldob    6(g4), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                stos    r4, 0xC62(g7)
                ldob    7(g4), r4
                ldob    8(g4), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                stos    r4, 0xA1E(g7)
                ldob    9(g4), r4
                ldob    0xA(g4), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                ldob    0xB(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r4, r4
                ldob    0xC(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r4, r4
                st      r4, zanzou_ma
                addi    0xD, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C970:                              # DATA XREF: ROM:0001D248↓o
                ld      0x7F0(g7), r15
                setbit  0x10, r15, r15
                st      r15, 0x7F0(g7)
                ldib    3(g4), r15
                stib    r15, 0x7F4(g7)
                addi    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C98C:                              # DATA XREF: ROM:0001D24C↓o
                ld      0x7F0(g7), r15
                clrbit  0x10, r15, r15
                st      r15, 0x7F0(g7)
                mov     0, r15
                stib    r15, 0x7F4(g7)
                addi    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C9A8:                              # DATA XREF: ROM:0001D250↓o
                ld      0x7F0(g7), r15
                setbit  0xA, r15, r15
                st      r15, 0x7F0(g7)
                mov     0, r15
                stis    r15, 0x2A88(g7)
                ldob    3(g4), r3
                stos    r3, 0x2A8A(g7)
                addi    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C9D4:                              # DATA XREF: ROM:0001D254↓o
                ld      0x7F0(g7), r15
                setbit  0xB, r15, r15
                st      r15, 0x7F0(g7)
                ld      0x7F0(g7), r15
                clrbit  0xA, r15, r15
                st      r15, 0x7F0(g7)
                addi    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1C9F4:                              # DATA XREF: ROM:0001D258↓o
                ldob    0x2A92(g7), r3
                setbit  1, r3, r3
                stob    r3, 0x2A92(g7)
                addi    4, g4, g4
                b       loc_1C090
# ---------------------------------------------------------------------------
loc_1CA10:                              # CODE XREF: play_motion+2E8↑j
                call    sub_337BC
                call    player_head_change_2 # Used in Honey Kiss Move
                st      g4, 0x82C(g7)   # Fang shoot is 0xD1885
                ld      0x0(g7), r15
                bbc     0x1F, r15, loc_1CAF0
                ld      0x1A4(g7), r15
                bbc     0x14, r15, loc_1CA74
                ld      0x1A4(g7), r15
                clrbit  0x14, r15, r15
                st      r15, 0x1A4(g7)
                ldos    0x870(g7), r14
                cmpobe  0, r14, loc_1CA5C
                ldos    0x26(g7), r15
                ldos    0x870(g7), r14
                ldos    0x616(g7), r13
                subo    r15, r13, r12
                stos    r13, 0x26(g7)
                stos    r13, 0x61A(g7)
                b       loc_1CA74
# ---------------------------------------------------------------------------
loc_1CA5C:                              # CODE XREF: play_motion+C98↑j
                ldos    0x26(g7), r14
                notbit  0xF, r14, r15
                stos    r15, 0x26(g7)
                ldos    0x61A(g7), r14
                notbit  0xF, r14, r15
                stos    r15, 0x61A(g7)
loc_1CA74:                              # CODE XREF: play_motion+C84↑j
                ld      0x1A4(g7), r8
                ld      0x804(g7), r15
                bbc     7, r15, pm_md_trans_ex
                setbit  5, r8, r8
pm_md_trans_ex:                         # CODE XREF: play_motion+CD8↑j
                bbc     7, r8, pm_trans_ex # Label from official source
                clrbit  7, r8, r8
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x80(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x88(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                ld      (g11)[g12*1], r7
                ld      0x1F4(g7), r14
                subr    r6, r14, r15
                st      r15, 0x18(g7)
                ld      0x1FC(g7), r14
                subr    r7, r14, r15
                st      r15, 0x20(g7)
pm_trans_ex:                            # CODE XREF: play_motion:pm_md_trans_ex↑j
                st      r8, 0x1A4(g7)   # Label from official source
                ld      0x0(g7), r3
                bbc     0xC, r3, loc_1CAF0
                clrbit  0xC, r3, r3
                st      r3, 0x0(g7)
                ld      0x1A4(g7), r15
                setbit  0, r15, r15
                st      r15, 0x1A4(g7)
loc_1CAF0:                              # CODE XREF: play_motion+6B8↑j
                ret
# End of function play_motion
# =============== S U B R O U T I N E =======================================
check_front_back:                       # CODE XREF: play_motion+654↑p
                ld      0x0(g7), r15    # Label from official source
                bbs     1, r15, loc_1CB1C
                bbc     8, g0, loc_1CB0C
                shlo    6, 5, r13
                xor     r13, g0, g0
                b       loc_1CB38
# ---------------------------------------------------------------------------
loc_1CB0C:                              # CODE XREF: check_front_back+8↑j
                bbc     9, g0, loc_1CB38
                shlo    7, 5, r13
                xor     r13, g0, g0
                b       loc_1CB38
# ---------------------------------------------------------------------------
loc_1CB1C:                              # CODE XREF: check_front_back+4↑j
                bbc     8, g0, loc_1CB2C
                shlo    7, 3, r13
                xor     r13, g0, g0
                b       loc_1CB38
# ---------------------------------------------------------------------------
loc_1CB2C:                              # CODE XREF: check_front_back:loc_1CB1C↑j
                bbc     9, g0, loc_1CB38
                shlo    6, 9, r13
                xor     r13, g0, g0
loc_1CB38:                              # CODE XREF: check_front_back+14↑j
                ret
# End of function check_front_back
# =============== S U B R O U T I N E =======================================
delete_option:                          # CODE XREF: option_control+20↑p
                ld      0x0(g7), r15    # Label from official source
                clrbit  0x1B, r15, r15
                st      r15, 0x0(g7)
                mov     0, r15
                st      r15, 0xAFC(g7)
                call    send_init_ram_coli_data
                ret
# End of function delete_option
# =============== S U B R O U T I N E =======================================
sub_1CB58:                              # CODE XREF: play_motion+7BC↑p
                call    copy_option_data
                ld      0x784(g7), r3
                cmpobe  0, r3, loc_1CBF4
                ld      0x1D0C(g7), r11
                ld      0x1D18(g7), r12
                ld      0x1D20(g7), r9
                ld      0x1D14(g7), r8
                ld      0x1D08(g7), r13
                ld      0x0(g7), r15
                setbit  0x1B, r15, r15
                st      r15, 0x0(g7)
                ldq     4(r3), r4
                stq     r4, 0x1E0(r11)
                ldq     0x14(r3), r4
                stq     r4, 0x1F0(r11)
                ldos    0x7A0(g7), r3
                st      r3, 0x78(r12)
                st      r3, 0x7C(r12)
                ld      0x1D10(g7), r15
                ld      (r15), r15
                ldob    (r15)[r3], r4
                mov     2, r14
                addo    r4, r14, r15
                stob    r15, (r9)[r3]
                lda     (r8)[r3*8], r15
                shlo    3, 0xF, r12
                stob    r12, (r15)[r4]
                shlo    2, 0x1F, r12
                stob    r12, 1(r15)[r4]
                addo    0x1F, 1, r15
                st      r15, (r13)
                call    send_ram_coli_data
loc_1CBF4:                              # CODE XREF: sub_1CB58+8↑j
                ret
# End of function sub_1CB58
# =============== S U B R O U T I N E =======================================
copy_option_data:                       # CODE XREF: rob_disp:unit_efc_next↑p
                ld      0x190(g7), r7   # Label from official source
                ld      0x18(r7), r3
                ld      0xAFC(g7), r12
                cmpobe  0, r12, loc_1CC18
                subo    1, r12, r12
                shlo    4, 7, r13
                mulo    r12, r13, r12
                addo    r12, r3, r3
loc_1CC18:                              # CODE XREF: copy_option_data+C↑j
                ld      0x0(g7), r15
                bbc     6, r15, loc_1CC28
                addo    0x1F, 0x19, r13
                addo    r13, r3, r3
loc_1CC28:                              # CODE XREF: copy_option_data+24↑j
                ld      0x0(r3), r15
                st      r15, 0x784(g7)
                ldis    4(r3), r15
                stis    r15, 0x788(g7)
                ldis    6(r3), r15
                stis    r15, 0x78A(g7)
                ld      8(r3), r15
                st      r15, 0x78C(g7)
                ld      0xC(r3), r15
                st      r15, 0x790(g7)
                ld      0x10(r3), r15
                st      r15, 0x794(g7)
                ldis    0x14(r3), r15
                stis    r15, 0x798(g7)
                ldis    0x16(r3), r15
                stis    r15, 0x79A(g7)
                ldis    0x18(r3), r15
                stis    r15, 0x79C(g7)
                ldis    0x1A(r3), r15
                stis    r15, 0x79E(g7)
                ldis    0x1C(r3), r15
                stis    r15, 0x7A0(g7)
                ldis    0x1E(r3), r15
                stis    r15, 0x7A2(g7)
                ld      0x20(r3), r15
                st      r15, 0x7A4(g7)
                ld      0x24(r3), r15
                st      r15, 0x7A8(g7)
                ld      0x28(r3), r15
                st      r15, 0x7AC(g7)
                ldis    0x2C(r3), r15
                stis    r15, 0x7B0(g7)
                ldis    0x2E(r3), r15
                stis    r15, 0x7B2(g7)
                ldis    0x30(r3), r15
                stis    r15, 0x7B4(g7)
                ldis    0x32(r3), r15
                stis    r15, 0x7B6(g7)
                ldis    0x34(r3), r15
                stis    r15, 0x7F8(g7)
                ret
# End of function copy_option_data
# =============== S U B R O U T I N E =======================================
search_shift_data_adr:                  # CODE XREF: sub_1344C+8↑p
                ldob    0x83C(g7), r10  # Label from official source
                cmpobe  0, r10, loc_1CCF4
                ld      0x838(g7), r11
loc_1CCD8:                              # CODE XREF: search_shift_data_adr+24↓j
                ldob    1(r11), r3
                cmpobe  r3, g0, loc_1CCF8
                cmpobne 4, g0, loc_1CCE8
                cmpobe  1, r3, loc_1CCF8
loc_1CCE8:                              # CODE XREF: search_shift_data_adr+14↑j
                addo    6, r11, r11
                cmpdeco 1, r10, r10
                bl      loc_1CCD8
loc_1CCF4:                              # CODE XREF: search_shift_data_adr+4↑j
                mov     0, r11
loc_1CCF8:                              # CODE XREF: search_shift_data_adr+10↑j
                mov     r11, g0
                ret
# End of function search_shift_data_adr
# =============== S U B R O U T I N E =======================================
shift_mot_control:                      # CODE XREF: action_init+6CC↑p
                ldob    0x60C(g7), g0   # Label from official source
                cmpobe  0, g0, loc_1CD5C
                cmpobe  0x1F, g0, loc_1CD54
                call    search_shift_data_adr
                cmpobne 0, g0, loc_1CD20
                mov     0, r15
                stib    r15, 0x60C(g7)
                ret
# ---------------------------------------------------------------------------
loc_1CD20:                              # CODE XREF: shift_mot_control+10↑j
                ldob    2(g0), r3
                ldob    3(g0), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldos    0x1AA(g7), r13  # p1_motion_coma or p2_motion_coma
                cmpobl  r13, r3, loc_1CD5C
                ldob    4(g0), r3
                ldob    5(g0), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                mov     r3, g0
                call    set_motion
                ret
# ---------------------------------------------------------------------------
loc_1CD54:                              # CODE XREF: shift_mot_control+8↑j
                ldos    0x852(g7), g0   # P1_PARTS+0x852
                call    set_motion
loc_1CD5C:                              # CODE XREF: shift_mot_control+4↑j
                ret
# End of function shift_mot_control
# =============== S U B R O U T I N E =======================================
original_combo_control:                 # CODE XREF: action_init+6B4↑p
                ldob    0x1B1(g7), r14  # Label from official source
                cmpobne 16, r14, loc_1CD98 # if player is not Super Sonic branch
                ld      also_continue_count, r14
                cmpobne 0, r14, loc_1CD98 # if player Super Sonic's also_continue_count not equal to 0 branch
                ld      rounds_lost_vs_cpu, r14
                cmpobne 0, r14, loc_1CD98 # if Super Sonic's rounds_lost_vs_cpu not equal to 0 branch
                ld      0x0(g7), r15    # r15 = P1_PARTS
                setbit  18, r15, r15    # set bit 18 of P1_PARTS or P2_PARTS
                st      r15, 0x0(g7)    # store that value back into P1_PARTS or P2_PARTS
                lda     0x18C0, r15     # r15 = 0x18C0
                stis    r15, 0xC7C(g7)  # P1_PARTS+0xC7C or P2_PARTS+0xC7C = 0x18C0
loc_1CD98:                              # CODE XREF: original_combo_control+4↑j
                ldob    gameprogram, r14 # bit 0 clear = Player 1
                cmpobl  1, r14, loc_1CDBC
                ldob    stage_num, r14
                cmpobne 9, r14, loc_1CDBC
                lda     0x18C0, r15
                stis    r15, 0xC7C(g7)  # P1_PARTS+0xC7C
loc_1CDBC:                              # CODE XREF: original_combo_control+40↑j
                ld      0x0(g7), r15
                bbc     18, r15, loc_1CDF0
                ldis    0xC7C(g7), r14
                cmpibge 0, r14, loc_1CDE4
                ldis    0xC7C(g7), r14
                subi    1, r14, r15
                stis    r15, 0xC7C(g7)
                shlo    6, 5, r15
                stis    r15, 0xC7E(g7)
                b       loc_1CDF0
# ---------------------------------------------------------------------------
loc_1CDE4:                              # CODE XREF: original_combo_control+68↑j
                ld      0x0(g7), r15
                clrbit  0x12, r15, r15
                st      r15, 0x0(g7)
loc_1CDF0:                              # CODE XREF: original_combo_control+60↑j
                ldis    0xC7E(g7), r14
                cmpobge 0, r14, loc_1CE04
                ldis    0xC7E(g7), r14
                subi    1, r14, r15
                stis    r15, 0xC7E(g7)
loc_1CE04:                              # CODE XREF: original_combo_control+94↑j
                ret
# End of function original_combo_control
# =============== S U B R O U T I N E =======================================
air_mot_control:                        # CODE XREF: action_init+6B8↑p
                ld      0x0(g7), r3     # Label from official source
                bbs     13, r3, loc_1CE70
                bbc     2, r3, loc_1CE90 # return
                ld      0x30(g7), r15   # p1_yspd or p2_yspd
                bbc     31, r15, loc_1CE28 # if bit 31 of p1_yspd or p2_yspd is clear branch
                ld      0x0(g7), r15
                clrbit  3, r15, r15
                st      r15, 0x0(g7)
loc_1CE28:                              # CODE XREF: air_mot_control+10↑j
                ldos    0x818(g7), r14
                addi    1, r14, r4
                ldos    0x5BC(g7), r13
                subi    r13, r4, r4
                cmpibge 0, r4, loc_1CE4C
                ldos    0x1AA(g7), r3
                cmpo    r3, r4
                be      loc_1CE90       # return
                bl      loc_1CE90       # return
loc_1CE4C:                              # CODE XREF: air_mot_control+30↑j
                ldos    0x1AA(g7), r13
                ldos    0x816(g7), r14
                cmpoble r13, r14, loc_1CE90 # return
                ldos    0x1AA(g7), r14
                subi    1, r14, r15
                stos    r15, 0x1AA(g7)
                b       loc_1CE90       # return
# ---------------------------------------------------------------------------
                stos    r4, 0x1AA(g7)
                b       loc_1CE90       # return
# ---------------------------------------------------------------------------
loc_1CE70:                              # CODE XREF: air_mot_control+4↑j
                ldos    0x818(g7), r3
                cmpobe  0, r3, loc_1CE90 # return
                ldos    0x1AA(g7), r4
                cmpobge r4, r3, loc_1CE90 # return
                ld      0x1A4(g7), r15
                setbit  7, r15, r15
                st      r15, 0x1A4(g7)
                stos    r3, 0x1AA(g7)
loc_1CE90:                              # CODE XREF: air_mot_control+8↑j
                ret                     # return
# End of function air_mot_control
# =============== S U B R O U T I N E =======================================
sub_1CE94:                              # CODE XREF: ACT_RC_KAESHI:loc_135D4↑p
                ldos    0x800(g7), r5
                ldos    0x1AA(g7), r4
                subo    r4, r5, r4
                addo    2, r4, r4
                b       loc_1CEB0
# End of function sub_1CE94
# =============== S U B R O U T I N E =======================================
sub_1CEA8:                              # CODE XREF: ACT_RC_KAESHI-1918↑p
                ldos    0x800(g7), r5
                ldos    0x1AA(g7), r4
loc_1CEB0:                              # CODE XREF: sub_1CE94+10↑j
                ld      0x1A4(g7), r14
                setbit  5, r14, r15
                st      r15, 0x1A4(g7)
                call    set_motion
                ldos    0x800(g7), r3
                mulo    r3, r4, r4
                divo    r5, r4, r4
                stos    r4, 0x1AA(g7)
                ret
# End of function sub_1CEA8
# =============== S U B R O U T I N E =======================================
sub_1CED4:                              # CODE XREF: ROM:0001396C↑p
                ldos    0x6D0(g8), r10
                ld      0x1A4(g7), r15
                bbc     0xD, r15, loc_1CEE8
                ldos    0x6D8(g7), r13
                cmpobe  r13, r10, loc_1CF84
loc_1CEE8:                              # CODE XREF: sub_1CED4+8↑j
                ld      0x5B8(g7), r15
                bbs     0, r15, loc_1CFA8
                mov     0, g0
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ldib    0x83E(g7), r15
                stib    r15, 0x50FE03
                ldib    0x843(g7), r15
                stib    r15, 0x50FE02
                ldis    0x828(g7), r15
                stis    r15, 0x50FE00
                call    sub_2B94C
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                cmpobe  0, g0, loc_1CFA8
                ldob    4(g8), r13
                ldos    0x1AA(g8), r14
                addi    r13, r14, r3
                ldos    0x808(g8), r14
                subi    r3, r14, r3
                mov     2, g1
                mov     g0, r11
                call    calc_mht_adr
                ldob    1(g0), r4
                ldob    2(g0), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                subo    1, r4, r4
                cmpobl  r4, r3, loc_1CFA8
                mov     r11, g0
                call    set_motion
                stos    r10, 0x6D8(g7)
                mov     1, g0
                ret
# ---------------------------------------------------------------------------
loc_1CF84:                              # CODE XREF: sub_1CED4+10↑j
                ldos    0x808(g7), r3
                cmpobe  0, r3, loc_1CF90
                subo    1, r3, r3
loc_1CF90:                              # CODE XREF: sub_1CED4+B4↑j
                ldos    0x1AA(g7), r4
                cmpible r4, r3, loc_1CF9C
                mov     r3, r4
loc_1CF9C:                              # CODE XREF: sub_1CED4+C0↑j
                stos    r4, 0x1AA(g7)
                mov     1, g0
                ret
# ---------------------------------------------------------------------------
loc_1CFA8:                              # CODE XREF: sub_1CED4+18↑j
                mov     0, g0
                ret
# End of function sub_1CED4
# ---------------------------------------------------------------------------
flt_1CFB0:      .float 0.0              # DATA XREF: get_my_info_new+1E0↑o
                .float -1.0
                .float 0.0
                .float 1.0
                .float 0.0
                .float 0.0
flt_1CFC8:      .float 0.0              # DATA XREF: get_my_info_new+220↑o
                .float 0.0
                .float 1.0
                .float 0.0
                .float 1.0
                .float 0.0
flt_1CFE0:      .float 1.0              # DATA XREF: ROM:ACT_RC_GUARD↑r
flt_1CFE4:      .float 1.0              # DATA XREF: ROM:00013994↑r
flt_1CFE8:      .float 5.0              # DATA XREF: ROM:000139BC↑r
flt_1CFEC:      .float 0.5              # DATA XREF: ROM:ACT_RC_YARARE↑r
flt_1CFF0:      .float 1.0              # DATA XREF: ROM:00013B3C↑r
flt_1CFF4:      .float 5.0              # DATA XREF: ROM:00013B64↑r
                .float 0.5
                .float 0.15000001
flt_1D000:      .float 1.8              # DATA XREF: get_en_info+A80↑r
word_1D004:     .short 0x222            # DATA XREF: rob_revise_yang+18C↑r
byte_1D006:     .byte 0xD               # DATA XREF: calc_mht_adr+28↑r
                .byte 3
                .byte 7
                .byte 0xE
                .byte 0x12
                .byte 0xE
                .byte 6
                .byte 3
                .byte 0
                .byte 0xF
                .byte 6
                .byte 0xB
                .byte 4
                .byte 3
                .byte 0xF
                .byte 3
                .byte 2
                .byte 7
                .byte 7
                .byte 7
                .byte 3
                .byte 6
                .byte 5
                .byte 3
                .byte 0xD
byte_1D01F:     .byte 0                 # DATA XREF: play_motion+31C↑r
                .byte 3
                .byte 3
                .byte 0xD
                .byte 7
                .byte 4
                .byte 4
                .byte 4
                .byte 4
                .byte 4
                .byte 9
                .byte 7
                .byte 4
                .byte 4
                .byte 7
                .byte 3
                .byte 5
                .byte 4
                .byte 5
                .byte 4
                .byte 4
                .byte 5
                .byte 6
                .byte 0xC
                .byte 4
                .byte 4
                .byte 4
                .byte 6
                .byte 3
                .byte 4
                .byte 0x11
                .byte 0x14
                .byte 0x15
                .byte 0x1D
                .byte 4
                .byte 0x1C
                .byte 7
                .byte 0x1F
                .byte 0xD
                .byte 4
                .byte 4
                .byte 4
                .byte 4
                .byte 4
                .byte 0
SOMETHING_MOVES:.long loc_13120         # DATA XREF: exec_command+C↑r
ACTUAL_MOVES:   .long ACT_RC_MOTION     # DATA XREF: exec_action+C↑r
                .long loc_13120
                .long ACT_RC_KAMAE
                .long selected_player_check
                .long ACT_RC_SYAGAMI
                .long loc_13120
                .long ACT_RC_WALK
                .long loc_13120
                .long ACT_RC_BWALK
                .long loc_13074
                .long ACT_RC_FUMIKOMI
                .long loc_131E4
                .long ACT_RC_JUMP
                .long loc_130E4
                .long ACT_RC_TA_GUARD
                .long loc_13120
                .long ACT_RC_DOWN
                .long loc_13418
                .long ACT_RC_RISE
                .long loc_130E4
                .long ACT_RC_GUARD
                .long loc_13120
                .long ACT_RC_YARARE
                .long loc_13120
                .long ACT_RC_NAGE
                .long loc_13138
                .long ACT_RC_NAGERARE
                .long loc_13114
                .long ACT_RC_FUMIKOMI
                .long loc_13090
                .long ACT_RC_FUMIKOMI
                .long sub_1344C
                .long ACT_RC_SHIFT
                .long loc_13120
                .long loc_163A0
                .long loc_13120
                .long ACT_RC_KAESHI
                .long loc_13120
                .long loc_16120
                .long loc_13120
                .long loc_164DC
                .long loc_13120
                .long ACT_RC_KAWASHI
                .long loc_13114
                .long ACT_RC_RUN
                .long loc_13120
                .long ACT_RC_SHIFT
                .long loc_13120
                .long ACT_RC_SHIFT
                .long loc_13114
                .long loc_16558
                .long loc_13114
                .long loc_16594
                .long loc_13120
                .long ACT_RC_KABEHIT
                .long sub_1305C
                .long ACT_RC_UKEMI
                .long sub_13464
                .long sub_165D0
                .long loc_13120
                .long loc_1560C
                .long loc_13120
                .long loc_156EC
                .long loc_13120
                .long loc_15A4C
                .long loc_13120
                .long loc_15C48
                .long loc_13120
                .long loc_15DFC
                .long loc_13120
                .long loc_15EE8
                .long loc_13120
                .long ACT_RC_KABE_NAGE
                .long loc_13120
                .long j_ACT_RC_NAGERARE
                .long loc_131B0
                .long ACT_RC_DOWN_ATTACK
                .long loc_1318C
                .long loc_159B0
                .long loc_13178
                .long ACT_RC_DOWN_NAGE_TOUCH
                .long loc_13178
                .long ACT_RC_NAGE_TOUCH
                .long sub_1346C
                .long sub_165D4
                .long sub_134A8
                .long sub_168DC
_uk_player_actions:.long loc_1CA10      # DATA XREF: play_motion:_uk_player_action_loader↑r
                .long loc_1C0DC
                .long loc_1C0F0
                .long loc_1C108
                .long loc_1C1FC
                .long loc_1C29C
                .long loc_1C2B4
                .long loc_1C2CC
                .long loc_1C2E4
                .long loc_1C348
                .long loc_1C3B4
                .long loc_1C460
                .long loc_1C4A0
                .long loc_1C4B8
                .long loc_1C4D8
                .long loc_1C50C
                .long _uk_player_action_related
                .long loc_1C538
                .long loc_1C56C
                .long loc_1C588
                .long loc_1C594
                .long loc_1C5A8
                .long loc_1C5D0
                .long loc_1C60C
                .long loc_1C66C
                .long loc_1C684
                .long loc_1C69C
                .long loc_1C6C8
                .long loc_1C6EC
                .long loc_1C738
                .long loc_1C85C
                .long loc_1C748
                .long loc_1C89C
                .long loc_1C8C0
                .long loc_1C8CC
                .long call_projectile_routine
                .long loc_1C8E4
                .long loc_1C8F0
                .long loc_1C8FC
                .long loc_1C970
                .long loc_1C98C
                .long loc_1C9A8
                .long loc_1C9D4
                .long loc_1C9F4
aNage:          .asciz "nage    "    # DATA XREF: decide_command+3CC↑o
aNage_0:        .asciz " nage   "
aAirn:          .asciz "airn    "    # DATA XREF: decide_command+1B4↑o
a_Airn:         .asciz " airn   "
                .float 0.1
                .float 0.0049999999
                .float 4.0
                .float 0.40000001
flt_1D290:      .float 0.69999999       # DATA XREF: sub_16A4C+74↑r
flt_1D294:      .float 4.0              # DATA XREF: ACT_RC_UKEMI+5C↑o
                .float 1.0
                .float 4.0
                .float 1.0
                .float 12.0
                .float 1.0
                .float 12.0
                .float 1.0
                .float 1.0
                .float 1.0
                .float 4.0
                .float 1.0
                .float 8.0
                .float 1.0
                .float 4.0
                .float 1.0
                .float 4.0
                .float 1.0
                .float 24.0
                .float 24.0
egg_robo_anims: .long rd_kao_rob_nobi   # DATA XREF: rob_disp+49C↑r
                .long rd_kao_rob_gururi
                .long rd_kao_rob_tizimi
                .long rd_kao_rob_ex
egg_robo_head_anim:.long 2981           # DATA XREF: rob_disp:loc_1A064↑r
                .long 2982
                .long 2983
                .long 2984
                .long 2985
                .long 2986
                .long 2987
                .long 2988
                .long 2989
                .long 2990
                .long 2991
# =============== S U B R O U T I N E =======================================
# Executes once at start of char sel, once at the start of the vs screen, then once every frame of gameplay once the map is loaded.
control_init:                           # CODE XREF: key_rec_init+F8↓p
                ld      fa_rob0, g7     # Label from Virtua Fighter 2 source
                ld      fa_rob1, g8
                setbit  3, 0, r3
                st      r3, 0x1208(g7)  # P1_PARTS+0x1208 = r3
                st      r3, 0x1208(g8)  # P2_PARTS+0x1208 = r3
                lda     rob_control, r15
                st      r15, 0xC(g13)
rob_control:                            # DATA XREF: control_init+24↑o
                ld      debug_flag, r3  # Label from Virtua Fighter 2 source
                bbs     5, r3, loc_1E1A0 # We will only return if bit 5 of debug_flag is set
                ldob    also_mode, r15
                lda     displacement2, r14
                cmpobe  r14, r15, loc_1D38C
                lda     displacement3, r14
                cmpobe  r14, r15, loc_1D38C
                ld      0x508060, r15
                bbc     28, r15, loc_1D38C # 0x508060 is initalized to 0, so bit 28 will always be clear.
                ret                     # We will never hit return here
# ---------------------------------------------------------------------------
loc_1D38C:                              # CODE XREF: control_init+4C↑j
                ld      fa_rob0, g7     # We branch to this of also_mode is 2 or 3, or bit 28 of 0x508060 is clear
                ld      fa_rob1, g8
                ld      INTERUPT_FLAGS_HELD, r3 # OwO what's this
                ld      0x0(g13), r4    # g13 = mod_fa_control0_add
                bbs     0, r4, loc_1D3D4
                ldob    also_mode, r15
                lda     mode128, r14
                bbc     r15, r14, xor_if_also_mode_is_not_7_p1 # check bit of the value of also_mode and branch if clear
                ld      select0_flag, r15
                bbs     4, r15, loc_1D3E8
                b       loc_1D400
# ---------------------------------------------------------------------------
xor_if_also_mode_is_not_7_p1:           # CODE XREF: control_init+9C↑j
                xor     r3, r3, r3
loc_1D3D4:                              # CODE XREF: control_init+88↑j
                ldob    ROB0_DEBUG_PARAM, r4
                bbc     0, r4, loc_1D3E8
                bbs     2, r4, loc_1D3F4
                b       loc_1D400
# ---------------------------------------------------------------------------
loc_1D3E8:                              # CODE XREF: control_init+A8↑j
                ld      select0_flag, r15
                bbc     2, r15, loc_1D400
loc_1D3F4:                              # CODE XREF: control_init+C0↑j
                shri    8, r3, r3
                stob    r3, 0x1200(g7)  # 0x1D39C - INTERUPT_FLAGS_HELD stored to P1_PARTS+0x1200
loc_1D400:                              # CODE XREF: control_init+AC↑j
                call    sub_1D47C
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ld      INTERUPT_FLAGS_HELD, r3
                ld      0x0(g13), r4
                bbs     1, r4, loc_1D448
                ldob    also_mode, r15
                lda     mode128, r14
                bbc     r15, r14, xor_if_also_mode_is_not_7_p2
                ld      select1_flag, r15
                bbs     4, r15, loc_1D45C
                b       loc_1D474
# ---------------------------------------------------------------------------
xor_if_also_mode_is_not_7_p2:           # CODE XREF: control_init+110↑j
                xor     r3, r3, r3
loc_1D448:                              # CODE XREF: control_init+FC↑j
                ldob    ROB1_DEBUG_PARAM, r4
                bbc     0, r4, loc_1D45C
                bbs     2, r4, loc_1D468
                b       loc_1D474
# ---------------------------------------------------------------------------
loc_1D45C:                              # CODE XREF: control_init+11C↑j
                ld      select1_flag, r15
                bbc     2, r15, loc_1D474
loc_1D468:                              # CODE XREF: control_init+134↑j
                shri    0x10, r3, r3
                stob    r3, 0x1200(g7)
loc_1D474:                              # CODE XREF: control_init+120↑j
                call    sub_1D47C
                ret
# End of function control_init
# =============== S U B R O U T I N E =======================================
sub_1D47C:                              # CODE XREF: control_init:loc_1D400↑p
                ld      0x1208(g7), r15
                bbc     3, r15, loc_1D4EC
                mov     0, r3
                st      r3, 0x1208(g7)
                st      r3, 0x1218(g7)
                stos    r3, 0x120E(g7)
                st      r3, 0x121C(g7)
                stos    r3, 0x1244(g7)
                st      r3, 0x123C(g7)
                ldob    0x1200(g7), r4
                stob    r4, 0x1280(g7)
                stob    r4, 0x1281(g7)
                mov     1, r3
                stob    r3, 0x1202(g7)
                stob    r3, 0x1203(g7)
                b       loc_1E170
# ---------------------------------------------------------------------------
loc_1D4EC:                              # CODE XREF: sub_1D47C+8↑j
                ld      0x1A4(g7), r10
                mov     0, g6
                ld      0x121C(g7), r14
                cmpobe  0, r14, loc_1D528
                ldos    0x1220(g7), r3
                cmpobe  0, r3, loc_1D51C
                subo    1, r3, r3
                stos    r3, 0x1220(g7)
                b       loc_1D528
# ---------------------------------------------------------------------------
loc_1D51C:                              # CODE XREF: sub_1D47C+8C↑j
                mov     0, r15
                st      r15, 0x121C(g7)
loc_1D528:                              # CODE XREF: sub_1D47C+80↑j
                ldos    0x1244(g7), r14
                cmpobe  0, r14, loc_1D54C
                subo    1, 0, r13
                ldos    0x1244(g7), r14
                addi    r13, r14, r15
                stos    r15, 0x1244(g7)
loc_1D54C:                              # CODE XREF: sub_1D47C+B4↑j
                ld      0x0(g7), r15
                bbc     4, r15, loc_1D580
                mov     0, r15
                st      r15, 0x1218(g7)
                mov     0, r15
                stis    r15, 0x120E(g7)
                mov     0, r15
                stis    r15, 0x1244(g7)
                setbit  0, g6, g6
                b       load_char_moveset_g4
# ---------------------------------------------------------------------------
loc_1D580:                              # CODE XREF: sub_1D47C+D4↑j
                ld      0x1218(g7), g4
                bbc     0, r10, loc_1D594
                setbit  0, g6, g6
                b       loc_1D5C8
# ---------------------------------------------------------------------------
loc_1D594:                              # CODE XREF: sub_1D47C+10C↑j
                cmpobe  0, g4, load_char_moveset_g4
                ldos    0x120E(g7), r14
                cmpobne 0, r14, loc_1D5C8
load_char_moveset_g4:                   # CODE XREF: sub_1D47C+100↑j
                ldob    0x1B1(g7), r15  # r15 = P1_PARTS+0x1B1
                ld      MOVESET_ARRAY[r15*4], g4
                mov     0, r15
                st      r15, 0x1218(g7) # p1_pc_command or p2_pc_command
                mov     0, r15
                stis    r15, 0x1244(g7) # P1_PARTS+0x1244 = 0
loc_1D5C8:                              # CODE XREF: sub_1D47C+114↑j
                ld      0x1208(g7), r3
                chkbit  1, r3
                alterbit 2, r3, r3
                chkbit  0, g6
                alterbit 1, r3, r3
                st      r3, 0x1208(g7)
                lda     0x3F, r12
                ldob    0x1202(g7), r5
                subo    1, r5, r3
                and     r12, r3, r3
                ldob    0x1280(g7)[r3*4], r6
                ldob    0x1281(g7)[r3*4], r7
                ldob    0x1200(g7), r8
                andnot  r6, r8, r9
                stob    r8, 0x1280(g7)[r5*4]
                stob    r9, 0x1282(g7)[r5*4]
                andnot  r8, r6, r4
                stob    r4, 0x1283(g7)[r5*4]
                stob    r4, 0x41(g13)
                mov     r8, r4
                shlo    6, 3, r3
                and     r4, r3, r15
                cmpobne 0, r15, loc_1D650
                and     r7, r3, r15
                or      r4, r15, r4
loc_1D650:                              # CODE XREF: sub_1D47C+1C8↑j
                addo    0x1F, 0x11, r3
                and     r4, r3, r15
                cmpobne 0, r15, loc_1D664
                and     r7, r3, r15
                or      r4, r15, r4
loc_1D664:                              # CODE XREF: sub_1D47C+1DC↑j
                stob    r4, 0x1281(g7)[r5*4]
                addo    1, r5, r5
                and     r12, r5, r5
                stob    r5, 0x1202(g7)
                addo    1, r5, r3
                and     r12, r3, r3
                ldob    0x1204(g7), r14
                cmpobne r5, r14, loc_1D698
                stob    r3, 0x1204(g7)
loc_1D698:                              # CODE XREF: sub_1D47C+210↑j
                ldob    0x1205(g7), r14
                cmpobne r5, r14, loc_1D6AC
                stob    r3, 0x1205(g7)
loc_1D6AC:                              # CODE XREF: sub_1D47C+224↑j
                ldob    0x1206(g7), r14
                cmpobne r5, r14, loc_1D6C0
                stob    r3, 0x1206(g7)
loc_1D6C0:                              # CODE XREF: sub_1D47C+238↑j
                ld      0x0(g7), r15
                bbs     1, r15, loc_1D6D4
                mov     6, r6
                mov     7, r7
                b       loc_1D6DC
# ---------------------------------------------------------------------------
loc_1D6D4:                              # CODE XREF: sub_1D47C+248↑j
                mov     7, r6
                mov     6, r7
loc_1D6DC:                              # CODE XREF: sub_1D47C+254↑j
                bbc     0, r10, loc_1D6FC
                bbs     0x12, r10, loc_1D6E8
                bbc     0x13, r10, loc_1D6FC
loc_1D6E8:                              # CODE XREF: sub_1D47C+264↑j
                cmpobe  0, r9, loc_1D708
                ldos    0xA1C(g7), r14
                addi    1, r14, r15
                stos    r15, 0xA1C(g7)
                b       loc_1D708
# ---------------------------------------------------------------------------
loc_1D6FC:                              # CODE XREF: sub_1D47C:loc_1D6DC↑j
                mov     0, r15
                stis    r15, 0xA1C(g7)
                b       loc_1D708
# ---------------------------------------------------------------------------
loc_1D708:                              # CODE XREF: sub_1D47C:loc_1D6E8↑j
                bbc     0, r10, loc_1D73C
                bbc     0x18, r10, loc_1D73C
                cmpobe  0, r9, loc_1D73C
                bbs     0x13, r10, loc_1D730
                ldos    0x1AA(g7), r13
                ldos    0x80C(g7), r14
                subi    r13, r14, r4
                ldos    0x5DE(g7), r14
                mulo    2, r14, r5
                cmpobg  r5, r4, loc_1D73C
loc_1D730:                              # CODE XREF: sub_1D47C+298↑j
                shlo    0x1B, 3, r15
                st      r15, 0x194(g7)
                b       loc_1E160
# ---------------------------------------------------------------------------
loc_1D73C:                              # CODE XREF: sub_1D47C:loc_1D708↑j
                mov     0, g0           # clears g0 after CPU_MOVE_USE
                bal     sub_1E288
                ld      0x0(g7), r4
                bbc     5, r4, loc_1D774
                bbs     4, r4, loc_1D770
                bbs     0, r10, loc_1D770
                bbs     0xC, r10, loc_1D770
                bbs     4, r10, loc_1D770
                bbs     0xE, r10, loc_1D770
                bbs     0x10, r10, loc_1D770
                bbs     0xF, r10, loc_1D770
                shlo    0x18, 1, r15
                st      r15, 0x194(g7)
loc_1D770:                              # CODE XREF: sub_1D47C+2D0↑j
                ret
# ---------------------------------------------------------------------------
loc_1D774:                              # CODE XREF: sub_1D47C+2CC↑j
                ld      0x0(g7), r15
                clrbit  0xF, r15, r15
                st      r15, 0x0(g7)
                ldob    0x19F(g7), r14
                cmpobne 9, r14, loc_1D890
                ld      0x1218(g7), r14
                cmpobne 0, r14, loc_1D890
                ld      0x804(g7), r15
                bbs     0xF, r15, loc_1D864
                mov     0, r5
                cmpobe  0, r9, loc_1D7A8
                mov     1, r5
loc_1D7A8:                              # CODE XREF: sub_1D47C+324↑j
                addo    0x1F, 0x11, r3
                and     r8, r3, r3
                cmpobe  0, r3, loc_1D804
                shro    4, r3, r3
                ldis    word_1EF8C[r3*2], r4
                ld      fa_camera, r15
                ldis    0x26(r15), r12
                ldis    0x5B4(g7), r13
                subi    r12, r13, r13
                subi    r13, r4, r4
                bbs     0xF, r4, loc_1D7F0
                lda     0x9090000, r14
                addi    r5, r14, r15
                st      r15, 0x194(g7)
                b       loc_1E160
# ---------------------------------------------------------------------------
loc_1D7F0:                              # CODE XREF: sub_1D47C+35C↑j
                lda     0x90A0000, r14
                addi    r5, r14, r15
                st      r15, 0x194(g7)
                b       loc_1E160
# ---------------------------------------------------------------------------
loc_1D804:                              # CODE XREF: sub_1D47C+334↑j
                mov     r8, r4
                ldob    0x19E(g7), r14
                cmpobe  0, r14, loc_1D814
                mov     r9, r4
loc_1D814:                              # CODE XREF: sub_1D47C+390↑j
                bbs     4, r4, loc_1D848
                bbc     r7, r4, loc_1D830
                lda     0x9050000, r14
                addi    r5, r14, r15
                st      r15, 0x194(g7)
                b       loc_1E160
# ---------------------------------------------------------------------------
loc_1D830:                              # CODE XREF: sub_1D47C+39C↑j
                bbc     r6, r4, loc_1D848
                lda     0x9060000, r14
                addi    r5, r14, r15
                st      r15, 0x194(g7)
                b       loc_1E160
# ---------------------------------------------------------------------------
loc_1D848:                              # CODE XREF: sub_1D47C:loc_1D814↑j
                ld      0x19C(g7), r15
                lda     0xFFFF0000, r14
                and     r14, r15, r15
                addo    r5, r15, r15
                st      r15, 0x194(g7)
                b       loc_1E160
# ---------------------------------------------------------------------------
loc_1D864:                              # CODE XREF: sub_1D47C+31C↑j
                ldos    0x80A(g7), r3
                ldos    0x1AA(g7), r4
                subi    r4, r3, r3
                ldos    0x87A(g7), r13
                cmpibl  r13, r3, loc_1D890
                mov     3, r3
                and     r8, r3, r3
                cmpobe  0, r3, loc_1D890
                ld      0x0(g7), r15
                setbit  0xF, r15, r15
                st      r15, 0x0(g7)
loc_1D890:                              # CODE XREF: sub_1D47C+308↑j
                bbc     2, r9, loc_1D97C
                and     3, r9, r3
                cmpobe  0, r3, loc_1D8B4
                ld      0x1208(g7), r15
                setbit  0, r15, r15
                st      r15, 0x1208(g7)
                b       loc_1DBE4
# ---------------------------------------------------------------------------
loc_1D8B4:                              # CODE XREF: sub_1D47C+41C↑j
                ld      0x1208(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1208(g7)
                ldob    0x1202(g7), r3
                stob    r3, 0x1203(g7)
                ld      0x1218(g7), r14
                cmpobe  0, r14, loc_1D8F4
                ldos    0x120E(g7), r14
                cmpobne 0, r14, loc_1D908
                b       loc_1D900
# ---------------------------------------------------------------------------
loc_1D8F4:                              # CODE XREF: sub_1D47C+464↑j
                bbs     0, g6, loc_1D908
                ld      0x1A4(g7), r15
                bbs     4, r15, loc_1D908
loc_1D900:                              # CODE XREF: sub_1D47C+474↑j
                mov     4, g0
                bal     sub_1E398
loc_1D908:                              # CODE XREF: sub_1D47C+470↑j
                ldob    0x1240(g7), r3
                stob    r3, 0x1204(g7)
                stob    r3, 0x1205(g7)
                mov     0, r15
                st      r15, 0x1218(g7)
                mov     0, r15
                stis    r15, 0x120E(g7)
                mov     0, r15
                stis    r15, 0x1244(g7)
                ldos    0x1A8(g7), r14
                cmpobe  0, r14, loc_1D970
                ldib    0x842(g7), r13
                ldis    0x1AA(g7), r14
                cmpibg  r13, r14, loc_1D970
                ldib    0x840(g7), r13
                ldis    0x1AA(g7), r14
                cmpibl  r13, r14, loc_1D970
                shlo    0x1A, 5, r15
                st      r15, 0x194(g7)
                b       loc_1E1A0
# ---------------------------------------------------------------------------
loc_1D970:                              # CODE XREF: sub_1D47C+4CC↑j
                bbs     0, g6, loc_1E1A0
                bal     sub_1D984
                b       loc_1E1A0
# ---------------------------------------------------------------------------
loc_1D97C:                              # CODE XREF: sub_1D47C:loc_1D890↑j
                lda     loc_1DBE4, g14
# End of function sub_1D47C
# =============== S U B R O U T I N E =======================================
sub_1D984:                              # CODE XREF: sub_1D47C+4F8↑p
                bbc     0xC, r10, loc_1DA80
                bbc     0, g6, loc_1DA80
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                bal     sub_1E1A4
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
loc_1DA80:                              # CODE XREF: sub_1D984↑j
                bbs     0, g6, loc_1DBE0
                bbc     2, r8, loc_1DB10
                and     3, r8, r3
                cmpobne 0, r3, loc_1DAA4
                ld      0x1208(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1208(g7)
loc_1DAA4:                              # CODE XREF: sub_1D984+108↑j
                ld      0x1208(g7), r15
                bbs     0, r15, loc_1DBE0
                ldob    0x1202(g7), r4
                subo    1, r4, r5
                lda     0x3F, r13
                and     r13, r5, r5
                ldob    0x1282(g7)[r5*4], r3
                bbc     2, r3, loc_1DAD8
                stob    r4, 0x1203(g7)
loc_1DAD8:                              # CODE XREF: sub_1D984+148↑j
                bbc     0xC, r10, loc_1DAE0
                b       loc_1E1A0
# ---------------------------------------------------------------------------
loc_1DAE0:                              # CODE XREF: sub_1D984:loc_1DAD8↑j
                ld      0x0(g7), r15
                bbs     0x1D, r15, loc_1DB04
                ld      0x5B8(g7), r15
                bbs     0, r15, loc_1E120
                ld      0xC70(g7), r14
                cmpibge 0, r14, loc_1DB04
                shlo    0x18, 7, r15
                st      r15, 0x194(g7)
                b       loc_1DC54
# ---------------------------------------------------------------------------
loc_1DB04:                              # CODE XREF: sub_1D984+160↑j
                shlo    0x18, 1, r15
                st      r15, 0x194(g7)
                b       loc_1DC54
# ---------------------------------------------------------------------------
loc_1DB10:                              # CODE XREF: sub_1D984+100↑j
                bbs     0xC, r10, loc_1DBE0
                lda     0x3F, r14
                ldob    0x1202(g7), r5
                subo    1, r5, r5
                and     r14, r5, r5
                ldob    0x1206(g7), r15
                cmpobe  r5, r15, loc_1DBE0
                subo    1, r5, r5
                and     r14, r5, r5
                ldob    0x1280(g7)[r5*4], r3 # P1_PARTS+0x1280
                bbc     2, r3, loc_1DBE0
                mov     7, r12
                mov     4, r13
                mov     9, r4
loc_1DB54:                              # CODE XREF: sub_1D984+204↓j
                ldob    0x1280(g7)[r5*4], r3
                and     r12, r3, r15
                cmpobne r13, r15, loc_1DBE0
                ldob    0x1282(g7)[r5*4], r3
                bbs     2, r3, loc_1DB90
                ldob    0x1206(g7), r15
                cmpobe  r5, r15, loc_1DBE0
                subo    1, r5, r5
                and     r14, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_1DB54
                b       loc_1DBE0
# ---------------------------------------------------------------------------
loc_1DB90:                              # CODE XREF: sub_1D984+1E8↑j
                ldob    0x1202(g7), r3
                ldob    0x1203(g7), r11
                stob    r3, 0x1203(g7)
                lda     0xFF, g0
                addo    4, sp, sp
                st      g14, -4(sp)
                bal     sub_1E358
                ld      -4(sp), g14
                subo    4, sp, sp
                stob    r11, 0x1203(g7)
                ldob    0x1202(g7), r3
                stob    r3, 0x1206(g7)
loc_1DBE0:                              # CODE XREF: sub_1D984:loc_1DA80↑j
                bx      (g14)
# ---------------------------------------------------------------------------
loc_1DBE4:                              # CODE XREF: sub_1D47C+434↑j
                ld      0x1218(g7), r14
                cmpobe  0, r14, loc_1DC28
                ldos    0x120E(g7), r4
                cmpobe  0, r4, loc_1DC28
                lda     0x7FFF, r13
                cmpobe  r13, r4, loc_1DC20
                ldos    0x1AA(g7), r14
                addi    1, r14, r3
                cmpobl  r3, r4, loc_1E1A0
                mov     0, r15
                stis    r15, 0x120E(g7)
loc_1DC20:                              # CODE XREF: sub_1D984+280↑j
                bal     sub_1E3E4
                b       loc_1E170
# ---------------------------------------------------------------------------
loc_1DC28:                              # CODE XREF: sub_1D984+268↑j
                mov     0, r15
                stib    r15, 0x123D(g7)
                bbc     0, g6, loc_1DC9C
                ld      0x121C(g7), r14
                cmpobne 0, r14, loc_1DCF8
                cmpobne 0, g4, loc_1DCF8
                ld      0x1208(g7), r15
                bbs     4, r15, loc_1E1A0
loc_1DC54:                              # CODE XREF: sub_1D984+17C↑j
                ldob    0x1202(g7), r5
                ldob    0x1203(g7), r3
                subi    r3, r5, r4
                cmpible 0, r4, loc_1DC74
                shlo    6, 1, r13
                addi    r13, r4, r4
loc_1DC74:                              # CODE XREF: sub_1D984+2E4↑j
                ldob    precede_inp_time, r3
                cmpible r4, r3, loc_1DC84
                mov     r3, r4
loc_1DC84:                              # CODE XREF: sub_1D984+2F8↑j
                subo    r4, r5, r5
                lda     0x3F, r13
                and     r13, r5, r5
                stob    r5, 0x1203(g7)
                b       loc_1E1A0
# ---------------------------------------------------------------------------
loc_1DC9C:                              # CODE XREF: sub_1D984+2B0↑j
                ld      0x1208(g7), r15
                bbs     4, r15, loc_1DCF8
                ld      0x1208(g7), r15
                bbc     2, r15, loc_1DCF8
                ldob    0x1202(g7), r5
                ldob    0x1204(g7), r3
                subi    r3, r5, r4
                cmpible 0, r4, loc_1DCD4
                shlo    6, 1, r13
                addi    r13, r4, r4
loc_1DCD4:                              # CODE XREF: sub_1D984+344↑j
                ldob    precede_inp_time, r3
                cmpible r4, r3, loc_1DCE4
                mov     r3, r4
loc_1DCE4:                              # CODE XREF: sub_1D984+358↑j
                subo    r4, r5, r5
                lda     0x3F, r13
                and     r13, r5, r5
                stob    r5, 0x1203(g7)
loc_1DCF8:                              # CODE XREF: sub_1D984+2BC↑j
                ldob    0x1202(g7), r5
                ldob    0x1203(g7), r3
                addo    1, r3, r3
                lda     0x3F, r13
                and     r13, r3, r3
                cmpobe  r3, r5, loc_1DD58
loc_1DD18:                              # CODE XREF: sub_1D984+6E8↓j
                ldob    0x1203(g7), r5  # r5 = P1_PARTS+0x1203
                ldob    0x1280(g7)[r5*4], r8
                ldob    0x1282(g7)[r5*4], r9
                ldob    0x1283(g7)[r5*4], r3
                stob    r3, 0x41(g13)
                mov     1, g0
                bal     sub_1E288
                ldob    0x1203(g7), r5
                addi    1, r5, r5
                lda     0x3F, r13
                and     r13, r5, r5
loc_1DD58:                              # CODE XREF: sub_1D984+390↑j
                stob    r5, 0x1203(g7)
                ldob    0x1202(g7), r3
                subi    r5, r3, r4
                cmpible 0, r4, loc_1DD74
                subi    r4, 0, r4
loc_1DD74:                              # CODE XREF: sub_1D984+3E8↑j
                cmpible 0, r4, loc_1DD80
                shlo    6, 1, r13
                addi    r13, r4, r4
loc_1DD80:                              # CODE XREF: sub_1D984:loc_1DD74↑j
                ldob    precede_inp_time, r5
                subo    1, r5, r5
                cmpibg  r4, r5, loc_1DDA4
                ld      0x1208(g7), r15
                clrbit  4, r15, r15
                st      r15, 0x1208(g7)
loc_1DDA4:                              # CODE XREF: sub_1D984+408↑j
                mov     0, g0
                chkbit  0, r9
                alterbit 0, g0, g0
                chkbit  1, r9
                alterbit 1, g0, g0
                cmpobe  0, g0, loc_1DDCC
                chkbit  2, r9
                alterbit 2, g0, g0
                chkbit  8, r9
                alterbit 5, g0, g0
loc_1DDCC:                              # CODE XREF: sub_1D984+434↑j
                bbc     4, r10, loc_1DDD8
                ld      0x70C(g7), r15
                bbs     2, r15, loc_1DE98
loc_1DDD8:                              # CODE XREF: sub_1D984:loc_1DDCC↑j
                bbc     0xC, r10, loc_1DDE8
                ld      0x19C(g7), r15
                bbc     0x12, r15, loc_1DF4C
                bbc     0, r10, loc_1DF4C
loc_1DDE8:                              # CODE XREF: sub_1D984:loc_1DDD8↑j
                mov     0, r15
                st      r15, 0xA08(g7)
                bbs     0, g6, loc_1DEF0
                ld      0x1208(g7), r15
                bbs     4, r15, loc_1DEF0
                bbs     2, r9, loc_1DEF0
                bbs     2, r8, loc_1DEF0
                bbs     5, r9, loc_1DE10
                bbc     5, r8, loc_1DEF0
loc_1DE10:                              # CODE XREF: sub_1D984+484↑j
                bbc     r6, r8, loc_1DE2C
                lda     0x6010000, r15
                st      r15, 0x194(g7)
                shlo    0x10, 0x11, r15
                st      r15, 0xA08(g7)
                b       loc_1DE58
# ---------------------------------------------------------------------------
loc_1DE2C:                              # CODE XREF: sub_1D984:loc_1DE10↑j
                bbc     r7, r8, loc_1DE48
                lda     0x6020000, r15
                st      r15, 0x194(g7)
                shlo    0x11, 0x11, r15
                st      r15, 0xA08(g7)
                b       loc_1DE58
# ---------------------------------------------------------------------------
loc_1DE48:                              # CODE XREF: sub_1D984:loc_1DE2C↑j
                shlo    0x19, 3, r15
                st      r15, 0x194(g7)
                mov     0, r15
                st      r15, 0xA08(g7)
loc_1DE58:                              # CODE XREF: sub_1D984+4A4↑j
                mov     0, r4
                shlo    0x19, 3, r5
                ld      0x1E18(g7), r3
                bbc     0x1B, r3, loc_1DFB0
                ld      0x194(g7), r3
                setbit  0x15, r3, r3
                setbit  0x15, r5, r5
                ld      0x19C(g7), r15
                setbit  0x15, r15, r15
                st      r15, 0x19C(g7)
                st      r3, 0x194(g7)
                ld      0xA08(g7), r15
                setbit  0x12, r15, r15
                st      r15, 0xA08(g7)
                b       loc_1DFB0
# ---------------------------------------------------------------------------
loc_1DE98:                              # CODE XREF: sub_1D984+450↑j
                ld      0x1E24(g7), r15
                bbs     2, r15, loc_1DEC8
                mov     0, r15
                st      r15, 0xA08(g7)
                bbc     r6, r8, loc_1DEBC
                shlo    0x14, 1, r15
                st      r15, 0xA08(g7)
                b       loc_1DEC8
# ---------------------------------------------------------------------------
loc_1DEBC:                              # CODE XREF: sub_1D984+528↑j
                bbc     r7, r8, loc_1DEC8
                shlo    0x15, 1, r15
                st      r15, 0xA08(g7)
loc_1DEC8:                              # CODE XREF: sub_1D984+51C↑j
                ld      0xA08(g7), r15
                setbit  0x1C, r15, r15
                st      r15, 0xA08(g7)
                bal     sub_1E1A4
                shlo    8, 3, r13
                addi    r13, g0, g0
                bal     sub_1E398
                ld      0x194(g7), r14
                cmpobne 0, r14, loc_1E170
                b       loc_1E05C
# ---------------------------------------------------------------------------
loc_1DEF0:                              # CODE XREF: sub_1D984+46C↑j
                cmpobe  0, g0, loc_1DF24
                ld      0x0(g7), r15
                bbc     4, r15, loc_1DF18
                ld      0x0(g7), r15
                bbc     0xE, r15, loc_1DF10
                shlo    9, 3, r13
                addi    r13, g0, g0
                b       loc_1DF18
# ---------------------------------------------------------------------------
loc_1DF10:                              # CODE XREF: sub_1D984+57C↑j
                shlo    8, 5, r13
                addi    r13, g0, g0
loc_1DF18:                              # CODE XREF: sub_1D984+574↑j
                bal     sub_1E398
                bbs     0x1F, g1, loc_1DF24
                ret
# ---------------------------------------------------------------------------
loc_1DF24:                              # CODE XREF: sub_1D984:loc_1DEF0↑j
                bbs     0, g6, loc_1E05C
                ld      0x1208(g7), r15
                bbs     4, r15, loc_1E05C
                ldob    0x41(g13), r3
                or      r9, r3, r3
                cmpobe  0, r3, loc_1E05C
                mov     0, g0
                bal     sub_1E378
                b       loc_1E05C
# ---------------------------------------------------------------------------
loc_1DF4C:                              # CODE XREF: sub_1D984+45C↑j
                ld      0x19C(g7), r5
                lda     0xFFFF0000, r13
                and     r13, r5, r5
                ldob    0x120C(g7), r4
                ldob    0x1B2(g7), r3
                cmpobe  2, r3, loc_1DFEC
                bbs     6, r4, loc_1E04C
                ldos    0x1AA(g7), r3
                addo    1, r3, r3
                ldos    0x80E(g7), r14
                cmpobl  r3, r14, loc_1DF84
                setbit  7, r4, r4
loc_1DF84:                              # CODE XREF: sub_1D984+5F8↑j
                bbs     5, r8, loc_1DFB0
                ld      0x19C(g7), r15
                bbs     0x12, r15, loc_1DFB0
                lda     0x6040000, r5
                ld      0x19C(g7), r15
                bbc     0x15, r15, loc_1DFA8
                lda     0x6240000, r5
loc_1DFA8:                              # CODE XREF: sub_1D984+618↑j
                st      r5, 0x194(g7)
                setbit  7, r4, r4
loc_1DFB0:                              # CODE XREF: sub_1D984+4E4↑j
                and     7, r4, r3
                cmpobne 0, r3, loc_1DFBC
                or      g0, r4, r4
loc_1DFBC:                              # CODE XREF: sub_1D984+630↑j
                bbc     7, r4, loc_1E04C
                and     7, r4, r3
                cmpobe  0, r3, loc_1E04C
                bbs     0x12, r5, loc_1DFD4
                lda     0x100(r3), g0
                b       loc_1DFD8
# ---------------------------------------------------------------------------
loc_1DFD4:                              # CODE XREF: sub_1D984+644↑j
                lda     0x200(r3), g0
loc_1DFD8:                              # CODE XREF: sub_1D984+64C↑j
                setbit  6, r4, r4
                stob    r4, 0x120C(g7)
                bal     sub_1E398
                b       loc_1E170
# ---------------------------------------------------------------------------
loc_1DFEC:                              # CODE XREF: sub_1D984+5E4↑j
                bal     sub_1E1A4
                ld      0xA08(g7), r15
                bbs     0x1B, r15, loc_1E170
                cmpobe  0, g0, loc_1E010
                bbs     0x12, r5, loc_1E008
                lda     0x300(g0), g0
                b       loc_1E044
# ---------------------------------------------------------------------------
loc_1E008:                              # CODE XREF: sub_1D984+678↑j
                lda     0x400(g0), g0
                b       loc_1E044
# ---------------------------------------------------------------------------
loc_1E010:                              # CODE XREF: sub_1D984+674↑j
                bbs     0x12, r5, loc_1E04C
                stob    r4, 0x120C(g7)
                ld      0x194(g7), r14
                cmpobne 0, r14, loc_1E170
                lda     0x300(g0), g0
                ld      0xA08(g7), r15
                setbit  0x1C, r15, r15
                st      r15, 0xA08(g7)
                bal     sub_1E398
                ld      0x194(g7), r14
                cmpobne 0, r14, loc_1E170
                b       loc_1E05C
# ---------------------------------------------------------------------------
loc_1E044:                              # CODE XREF: sub_1D984+680↑j
                bal     sub_1E398
                b       loc_1E170
# ---------------------------------------------------------------------------
loc_1E04C:                              # CODE XREF: sub_1D984+5E8↑j
                stob    r4, 0x120C(g7)
                ld      0x194(g7), r14
                cmpobne 0, r14, loc_1E170
loc_1E05C:                              # CODE XREF: sub_1D984+568↑j
                ldob    0x1203(g7), r13
                ldob    0x1202(g7), r14
                cmpobne r13, r14, loc_1DD18
                ldob    0x123D(g7), r14
                cmpobe  0, r14, loc_1E08C
                ldib    0x1241(g7), r15
                stib    r15, 0x1203(g7)
loc_1E08C:                              # CODE XREF: sub_1D984+6F4↑j
                bbs     0, g6, loc_1E1A0
                bbs     0xC, r10, loc_1E15C
                shlo    4, 0xF, r15
                and     r8, r15, r15
                cmpobe  0, r15, loc_1E0A0
loc_1E0A0:                              # CODE XREF: sub_1D984+718↑j
                ldob    0x1B1(g7), r14
                cmpobe  5, r14, loc_1E0E4
                ldob    0x1B1(g7), r14
                cmpobe  8, r14, loc_1E0E4
                ldob    0x1B1(g7), r14
                cmpobe  9, r14, loc_1E0E4
                ldob    0x1B1(g7), r14
                cmpobe  0xB, r14, loc_1E0E4
                ld      0x0(g7), r15
                bbs     0x1D, r15, loc_1E0E4
                bbc     4, r8, loc_1E0E4
                bbc     r7, r8, loc_1E0D8
                ld      0x5B8(g7), r15
                bbc     0, r15, loc_1E0D8
loc_1E0D8:                              # CODE XREF: sub_1D984+748↑j
                shlo    0x19, 1, r15
                st      r15, 0x194(g7)
                b       loc_1E1A0
# ---------------------------------------------------------------------------
loc_1E0E4:                              # CODE XREF: sub_1D984+720↑j
                bbc     r6, r8, loc_1E100
                ldob    0x19F(g7), r3
                cmpobe  0x16, r3, loc_1E1A0
                cmpobe  0xE, r3, loc_1E1A0
                shlo    0x18, 3, r15
                st      r15, 0x194(g7)
                b       loc_1E1A0
# ---------------------------------------------------------------------------
loc_1E100:                              # CODE XREF: sub_1D984:loc_1E0E4↑j
                bbc     r7, r8, write_move_manip_r15
                ld      0x5B8(g7), r15
                bbs     0, r15, loc_1E120
                ldob    0x19F(g7), r3
                cmpobe  0xF, r3, loc_1E1A0
                shlo    0x1A, 1, r15
                st      r15, 0x194(g7)
                b       loc_1E1A0
# ---------------------------------------------------------------------------
loc_1E120:                              # CODE XREF: sub_1D984+168↑j
                shlo    0x18, 5, r15
                st      r15, 0x194(g7)
                b       loc_1E180
# ---------------------------------------------------------------------------
write_move_manip_r15:                   # CODE XREF: sub_1D984:loc_1E100↑j
                ldob    0x19F(g7), r3
                cmpobe  0xE, r3, loc_1E1A0
                cmpobe  0xF, r3, loc_1E1A0
                cmpobne 0x16, r3, loc_1E150
                ldob    0x1B2(g7), r3
                cmpibl  1, r3, loc_1E150
                shlo    0x19, 7, r15
                st      r15, 0x194(g7)
                b       loc_1E1A0
# ---------------------------------------------------------------------------
loc_1E150:                              # CODE XREF: sub_1D984+7B4↑j
                shlo    0x18, 1, r15
                st      r15, 0x194(g7)
                b       loc_1E1A0
# ---------------------------------------------------------------------------
loc_1E15C:                              # CODE XREF: sub_1D984+70C↑j
                ret
# ---------------------------------------------------------------------------
loc_1E160:                              # CODE XREF: sub_1D47C+2BC↑j
                ldob    0x1202(g7), r3
                stob    r3, 0x1203(g7)
loc_1E170:                              # CODE XREF: sub_1D47C+6C↑j
                ldib    0x1203(g7), r15
                stib    r15, 0x1204(g7)
loc_1E180:                              # CODE XREF: sub_1D984+7A4↑j
                ldib    0x1203(g7), r15
                stib    r15, 0x1205(g7)
                ldib    0x1203(g7), r15
                stib    r15, 0x1206(g7)
loc_1E1A0:                              # CODE XREF: control_init+38↑j
                ret
# End of function sub_1D984
# =============== S U B R O U T I N E =======================================
sub_1E1A4:                              # CODE XREF: sub_1D984+80↑p
                ld      0xA08(g7), r15
                bbc     0x14, r15, loc_1E1C0
                bbs     r6, r8, loc_1E1D0
                ld      0xA08(g7), r15
                clrbit  0x14, r15, r15
                st      r15, 0xA08(g7)
                b       loc_1E1D0
# ---------------------------------------------------------------------------
loc_1E1C0:                              # CODE XREF: sub_1E1A4+4↑j
                bbs     r7, r8, loc_1E1D0
                ld      0xA08(g7), r15
                clrbit  0x15, r15, r15
                st      r15, 0xA08(g7)
loc_1E1D0:                              # CODE XREF: sub_1E1A4+8↑j
                bbs     0, r9, loc_1E1D8
                bbc     1, r9, loc_1E1E4
loc_1E1D8:                              # CODE XREF: sub_1E1A4:loc_1E1D0↑j
                ld      0xA08(g7), r15
                setbit  0x13, r15, r15
                st      r15, 0xA08(g7)
loc_1E1E4:                              # CODE XREF: sub_1E1A4+30↑j
                lda     0xFFFFFF00, r13
                ld      0xA08(g7), r14
                and     r13, r14, r15
                st      r15, 0xA08(g7)
                lda     0x1282(g7), r3
                ldob    0x1202(g7), r13
                mov     1, r14
                mov     0xA, r12
loc_1E210:                              # CODE XREF: sub_1E1A4+88↓j
                subi    1, r13, r13
                lda     0x3F, r15
                and     r15, r13, r13
                ldob    (r3)[r13*4], r15
                and     r14, r15, r15
                cmpobe  r14, r15, loc_1E234
                subo    1, r12, r12
                cmpobne 0, r12, loc_1E210
                b       loc_1E240
# ---------------------------------------------------------------------------
loc_1E234:                              # CODE XREF: sub_1E1A4+80↑j
                ld      0xA08(g7), r15
                setbit  4, r15, r15
                st      r15, 0xA08(g7)
loc_1E240:                              # CODE XREF: sub_1E1A4+8C↑j
                ld      0x5B8(g7), r12
                ld      0xA08(g7), r15
                bbc     r6, r8, loc_1E25C
                bbc     0, r12, loc_1E258
                setbit  1, r15, r15
                b       loc_1E25C
# ---------------------------------------------------------------------------
loc_1E258:                              # CODE XREF: sub_1E1A4+A8↑j
                setbit  0, r15, r15
loc_1E25C:                              # CODE XREF: sub_1E1A4+A4↑j
                bbc     r7, r8, loc_1E270
                bbc     0, r12, loc_1E26C
                setbit  0, r15, r15
                b       loc_1E270
# ---------------------------------------------------------------------------
loc_1E26C:                              # CODE XREF: sub_1E1A4+BC↑j
                setbit  1, r15, r15
loc_1E270:                              # CODE XREF: sub_1E1A4:loc_1E25C↑j
                bbc     5, r8, loc_1E278
                setbit  2, r15, r15
loc_1E278:                              # CODE XREF: sub_1E1A4:loc_1E270↑j
                bbc     4, r8, loc_1E280
                setbit  3, r15, r15
loc_1E280:                              # CODE XREF: sub_1E1A4:loc_1E278↑j
                st      r15, 0xA08(g7)
                bx      (g14)
# End of function sub_1E1A4
# =============== S U B R O U T I N E =======================================
sub_1E288:                              # CODE XREF: sub_1D47C+2C4↑p
                mov     7, r4
                and     r4, r9, r5
                ldob    0x123C(g7)[g0], r3
                cmpobne 0, r3, loc_1E2D8
                cmpobe  0, r5, loc_1E2BC
                cmpobe  r4, r5, loc_1E2BC
                mov     1, r15
                stib    r15, 0x123C(g7)[g0]
                stob    r5, 0x123E(g7)[g0]
                andnot  r4, r9, r9
loc_1E2BC:                              # CODE XREF: sub_1E288+14↑j
                ldob    0x1203(g7), r3
                stob    r3, 0x1240(g7)[g0]
                stob    r3, 0x1242(g7)
                b       loc_1E354
# ---------------------------------------------------------------------------
loc_1E2D8:                              # CODE XREF: sub_1E288+10↑j
                ldob    0x123E(g7)[g0], r12
                bbs     0, g6, loc_1E30C
                cmpobne 4, r12, loc_1E30C
                bbs     2, r8, loc_1E30C
                cmpobne 1, r5, loc_1E30C
                ldob    0x1203(g7), r3
                stob    r3, 0x1240(g7)[g0]
                stob    r3, 0x1242(g7)
                b       loc_1E344
# ---------------------------------------------------------------------------
loc_1E30C:                              # CODE XREF: sub_1E288+58↑j
                cmpobne 6, r12, loc_1E31C
                and     r4, r8, r13
                cmpobne 2, r13, loc_1E31C
                setbit  8, r9, r9
loc_1E31C:                              # CODE XREF: sub_1E288:loc_1E30C↑j
                or      r12, r5, r5
                cmpobe  r4, r5, loc_1E344
                subo    1, r3, r3
                cmpobe  0, r3, loc_1E344
                stob    r3, 0x123C(g7)[g0]
                stob    r5, 0x123E(g7)[g0]
                andnot  r4, r9, r9
                b       loc_1E354
# ---------------------------------------------------------------------------
loc_1E344:                              # CODE XREF: sub_1E288+80↑j
                mov     0, r15
                stib    r15, 0x123C(g7)[g0]
                or      r5, r9, r9
loc_1E354:                              # CODE XREF: sub_1E288+4C↑j
                bx      (g14)
# End of function sub_1E288
# =============== S U B R O U T I N E =======================================
sub_1E358:                              # CODE XREF: sub_1D984+234↑p
                ldib    0x1206(g7), r15
                stib    r15, 0x40(g13)
                shlo    4, 0xF, r15
                stib    r15, 0x42(g13)
                lda     0xF3, r15
                stib    r15, 0x43(g13)
                b       loc_1E3FC
# End of function sub_1E358
# =============== S U B R O U T I N E =======================================
sub_1E378:                              # CODE XREF: sub_1D984+5C0↑p
                ldib    0x1205(g7), r15
                stib    r15, 0x40(g13)
                lda     0xF4, r15
                stib    r15, 0x42(g13)
                lda     0xFF, r15
                stib    r15, 0x43(g13)
                b       loc_1E3FC
# End of function sub_1E378
# =============== S U B R O U T I N E =======================================
sub_1E398:                              # CODE XREF: sub_1D47C+488↑p
                lda     0xF4, r15
                stib    r15, 0x42(g13)
                lda     0xFF, r15
                stib    r15, 0x43(g13)
                ld      0x121C(g7), r3
                cmpobe  0, r3, sub_1E3E4
                mov     sp, r15
                addo    8, sp, sp
                st      g4, (r15)
                st      g14, 4(r15)
                mov     r3, g4
                bal     sub_1E3E4
                subo    8, sp, r15
                ld      4(r15), g14
                ld      (r15), g4
                mov     r15, sp
                cmpobne 0, g4, sub_1E3E4
                bx      (g14)
# End of function sub_1E398
# =============== S U B R O U T I N E =======================================
sub_1E3E4:                              # CODE XREF: sub_1D984:loc_1DC20↑p
                mov     0, r15
                st      r15, 0x1218(g7)
                ldib    0x1204(g7), r15
                stib    r15, 0x40(g13)
loc_1E3FC:                              # CODE XREF: sub_1E358+1C↑j
                mov     sp, r15
                addo    0x18, sp, sp
                stq     r8, (r15)
                st      g4, 0x10(r15)
                st      g0, 0x14(r15)
                st      sp, 0x1214(g13)
                ldob    0x1203(g7), r11
                subi    1, r11, r11
                lda     0x3F, r13
                and     r13, r11, r11
                shlo    4, 0xF, r3
                and     r3, r8, r8
                and     r3, r9, r9
                ldob    0x1242(g7), r13
                subi    r13, r11, r3
                lda     0x3F, r13
                and     r13, r3, g5
                mov     0, r10
loc_1E450:                              # CODE XREF: sub_1E468+2C↓j
                mov     0, g3
                mov     0, g2
_uk_execute_move:                       # CODE XREF: sub_1E468+DC↓j
                ldob    (g4), r3        # g4 = 0x820D8
                ld      COMMANDS_BEGIN[r3*4], r4 # Reads movesets
                bx      (r4)
# End of function sub_1E3E4
# =============== S U B R O U T I N E =======================================
sub_1E468:                              # DATA XREF: ROM:COMMANDS_BEGIN↓o
                cmpobe  0, r9, loc_1EE74
                ldob    1(g4), r3
                ldob    2(g4), r4
                bbc     0, r4, loc_1E47C
                setbit  r6, r3, r3
loc_1E47C:                              # CODE XREF: sub_1E468+C↑j
                bbc     1, r4, loc_1E484
                setbit  r7, r3, r3
loc_1E484:                              # CODE XREF: sub_1E468:loc_1E47C↑j
                cmpobne r3, r9, loc_1EEF4
                cmpobne r3, r8, loc_1EEF4
                mov     r3, r10
                addo    3, g4, g4
                b       loc_1E450
# ---------------------------------------------------------------------------
loc_1E498:                              # DATA XREF: ROM:0001F084↓o
                ldob    1(g4), r3
                mov     r6, r4
                cmpobe  8, r3, loc_1E4B0
                mov     r7, r4
                cmpobe  9, r3, loc_1E4B0
                mov     r3, r4
loc_1E4B0:                              # CODE XREF: sub_1E468+38↑j
                bbc     r4, r9, loc_1E4C0
                mov     r8, r10
                addo    2, g4, g4
                b       loc_1E450
# ---------------------------------------------------------------------------
loc_1E4C0:                              # CODE XREF: sub_1E468:loc_1E4B0↑j
                b       loc_1EE74
# ---------------------------------------------------------------------------
loc_1E4C4:                              # DATA XREF: ROM:0001F010↓o
                ldob    1(g4), r3
                ldob    2(g4), r4
                bbc     0, r4, loc_1E4D4
                setbit  r6, r3, r3
loc_1E4D4:                              # CODE XREF: sub_1E468+64↑j
                bbc     1, r4, loc_1E4DC
                setbit  r7, r3, r3
loc_1E4DC:                              # CODE XREF: sub_1E468:loc_1E4D4↑j
                cmpobne r3, r8, loc_1E4EC
                mov     r3, r10
                addo    3, g4, g4
                b       loc_1E450
# ---------------------------------------------------------------------------
loc_1E4EC:                              # CODE XREF: sub_1E468:loc_1E4DC↑j
                cmpobe  r10, r8, loc_1EE74
                b       loc_1EE2C
# ---------------------------------------------------------------------------
loc_1E4F4:                              # DATA XREF: ROM:0001F014↓o
                ldob    1(g4), r3
                mov     r6, r4
                cmpobe  8, r3, loc_1E50C
                mov     r7, r4
                cmpobe  9, r3, loc_1E50C
                mov     r3, r4
loc_1E50C:                              # CODE XREF: sub_1E468+94↑j
                bbc     r4, r8, loc_1E51C
                mov     r8, r10
                addo    2, g4, g4
                b       loc_1E450
# ---------------------------------------------------------------------------
loc_1E51C:                              # CODE XREF: sub_1E468:loc_1E50C↑j
                cmpobe  r10, r8, loc_1EE74
                b       loc_1EE2C
# ---------------------------------------------------------------------------
loc_1E524:                              # DATA XREF: ROM:0001F018↓o
                ldob    1(g4), g2
                ldob    2(g4), r4
                bbc     0, r4, loc_1E534
                setbit  r6, g2, g2
loc_1E534:                              # CODE XREF: sub_1E468+C4↑j
                bbc     1, r4, loc_1E53C
                setbit  r7, g2, g2
loc_1E53C:                              # CODE XREF: sub_1E468:loc_1E534↑j
                ldob    3(g4), g3
                addo    4, g4, g4
                cmpobe  r10, r8, _uk_execute_move
                andnot  g2, r8, r3
                cmpobne 0, r3, loc_1EEF4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
load_mot_basic_step:                    # DATA XREF: ROM:0001F01C↓o
                ldob    1(g4), g5
                stob    g5, 0xA20(g7)   # P1_PARTS+0xA20 or P2_PARTS+0xA20
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
uk_load_command:                        # DATA XREF: ROM:0001F020↓o
                ldib    1(g4), r15
                stib    r15, 0x194(g7)  # write first command byte to p1_command p2_command
                ldib    2(g4), r15
                stib    r15, 0x195(g7)  # write second command byte to p1_command p2_command
                ldib    3(g4), r15
                stib    r15, 0x196(g7)
                ldib    4(g4), r15
                stib    r15, 0x197(g7)
                ldib    5(g4), r15
                stib    r15, 0xC64(g7)
                ldib    6(g4), r15
                stib    r15, 0xC65(g7)
                ldib    7(g4), r15
                stib    r15, 0xC66(g7)
                ldib    8(g4), r15
                stib    r15, 0xC67(g7)
                stob    g5, 0xA21(g7)
                mov     0, r15
                stis    r15, 0x120E(g7) # p1_wait_coma or p2_wait_coma
                b       loc_1E170
# ---------------------------------------------------------------------------
load_pc_command:                        # DATA XREF: ROM:0001F040↓o
                ldib    1(g4), r15
                stib    r15, 0x1218(g7) # p1_pc_command or p2_pc_command
                ldib    2(g4), r15
                stib    r15, 0x1219(g7)
                ldib    3(g4), r15
                stib    r15, 0x121A(g7)
                ldib    4(g4), r15
                stib    r15, 0x121B(g7)
                addo    5, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
uk_load_command_2:                      # DATA XREF: ROM:0001F024↓o
                ldib    1(g4), r15
                stib    r15, 0x194(g7)  # write first command byte to p1_command p2_command
                ldib    2(g4), r15
                stib    r15, 0x195(g7)  # write second command byte to p1_command p2_command
                ldib    3(g4), r15
                stib    r15, 0x196(g7)
                ldib    4(g4), r15
                stib    r15, 0x197(g7)
                b       loc_1E180
# ---------------------------------------------------------------------------
loc_1E614:                              # DATA XREF: ROM:0001F0E4↓o
                ldib    1(g4), r15
                stib    r15, 0x1218(g7)
                ldib    2(g4), r15
                stib    r15, 0x1219(g7)
                ldib    3(g4), r15
                stib    r15, 0x121A(g7)
                ldib    4(g4), r15
                stib    r15, 0x121B(g7)
                subo    1, 0, g1
                ld      0x1214(g13), sp
                b       loc_1EF2C
# ---------------------------------------------------------------------------
load_en_flag:                           # DATA XREF: ROM:0001F028↓o
                ldob    1(g4), r3
                ld      0x5B8(g7), r15  # p1_en_flag or p2_en_flag
                bbc     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E668:                              # DATA XREF: ROM:0001F02C↓o
                ldob    1(g4), r3
                ld      0x0(g7), r15
                bbc     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E67C:                              # DATA XREF: ROM:0001F030↓o
                ldob    1(g4), r3
                ld      0x1A4(g7), r15
                bbc     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
load_en_flag_1:                         # DATA XREF: ROM:0001F034↓o
                ldob    1(g4), r3
                ld      0x5B8(g7), r15
                bbs     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E6A4:                              # DATA XREF: ROM:0001F038↓o
                ldob    1(g4), r3
                ld      0x0(g7), r15
                bbs     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E6B8:                              # DATA XREF: ROM:0001F03C↓o
                ldob    1(g4), r3
                ld      0x1A4(g7), r15
                bbs     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E6CC:                              # DATA XREF: ROM:0001F064↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                cmpobne r3, g0, loc_1EEF4
                addo    3, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
_uk_punch_handler:                      # DATA XREF: ROM:0001F044↓o
                ldob    1(g4), r3       # Sonic punch g4= 0x820D8
                ldob    2(g4), r15      # r15 = 0x820DA
                shlo    8, r15, r15     # r15 = 0x2100
                addo    r15, r3, r3     # r3 = 0x841D8
                cmpobe  r3, g0, get_move_offset
                addo    7, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
get_move_offset:                        # CODE XREF: sub_1E468+290↑j
                ldob    3(g4), r3       # g4 = 0x820D8
                ldob    4(g4), r15      # r15 = 0x820DC val = 0x21
                shlo    8, r15, r15     # r15 val = 0x2100
                addo    r15, r3, r3     # r3 val = 0x21C0
                ldob    5(g4), r15      # r15 = 0x820DD val = 0x8
                shlo    16, r15, r15    # r15 val = 0x80000
                addo    r15, r3, r3     # r3 = val 0x821C0
                ldob    6(g4), r15      # r15 = 0x820DE val = 0x0
                shlo    24, r15, r15    # r15 = 0x00000000
                addo    r15, r3, r3     # r3 = 0x000820DE
                mov     r3, g4          # g4 = 0x820DE
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E734:                              # DATA XREF: ROM:0001F048↓o
                mov     sp, r12
                lda     0x20(sp), sp
                stq     r8, 0x0(r12)
                stl     g2, 0x10(r12)
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                st      r3, 0x18(r12)
                st      g5, 0x1C(r12)
                addo    5, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E77C:                              # DATA XREF: ROM:0001F0A4↓o
                lda     -0x20(sp), r12
                stq     r8, 0x0(r12)
                stl     g2, 0x10(r12)
                st      g5, 0x1C(r12)
                addo    1, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E798:                              # DATA XREF: ROM:0001F04C↓o
                ld      0x1214(g13), sp
                b       loc_1EF28
# ---------------------------------------------------------------------------
loc_1E7A4:                              # DATA XREF: ROM:0001F050↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E7D4:                              # DATA XREF: ROM:0001F054↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
# ---------------------------------------------------------------------------
                .long 0x8825DC03        # ldos    (g7)[r3*1], r4
# ---------------------------------------------------------------------------
                ldib    3(g4), r13
                addi    r13, r4, r4
                addo    4, g4, g4
                ldos    0x1AA(g7), r14
                addi    1, r14, r3
                cmpobge r3, r4, _uk_execute_move
                stos    r4, 0x120E(g7)
                st      g4, 0x1218(g7)
                b       loc_1E170
# ---------------------------------------------------------------------------
loc_1E814:                              # DATA XREF: ROM:0001F068↓o
                st      g4, 0x1218(g7)
                lda     0x7FFF, r15
                stis    r15, 0x120E(g7)
                addo    1, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E834:                              # DATA XREF: ROM:0001F06C↓o
                mov     0, r15
                stis    r15, 0x120E(g7)
                mov     0, r15
                st      r15, 0x1218(g7)
                addo    1, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E854:                              # DATA XREF: ROM:0001F058↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                addo    5, g4, g4
                and     g4, 3, r15
                subo    r15, 4, r15
                and     3, r15, r15
                addo    r15, g4, g4
                callx   (g4)
                mov     r3, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E89C:                              # DATA XREF: ROM:0001F05C↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                addo    5, g4, g4
                callx   (r3)
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E8D0:                              # DATA XREF: ROM:0001F060↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g4), r4
                ldob    4(g4), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                ldob    5(g4), r5
                ldob    6(g4), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldob    7(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r5, r5
                ldob    8(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r5, r5
                cmpobe  0, r3, loc_1E93C
                stos    r3, 0x1222(g7)
                stos    r4, 0x1226(g7)
                st      r5, 0x122C(g7)
                addo    9, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E93C:                              # CODE XREF: sub_1E468+4B0↑j
                stos    r4, 0x1220(g7)
                st      r5, 0x121C(g7)
                addo    9, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E954:                              # DATA XREF: ROM:0001F070↓o
                mov     0, r15
                st      r15, 0x121C(g7)
                addo    1, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E968:                              # DATA XREF: ROM:0001F074↓o
                ld      0x5F4(g7), r3
                ldob    1(g4), r4
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                ldob    3(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r4, r4
                ldob    4(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r4, r4
                cmpr    r3, r4
                bl      loc_1EEF4
                addo    5, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E9A4:                              # DATA XREF: ROM:0001F078↓o
                ld      0x5F4(g7), r3
                ldob    1(g4), r4
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                ldob    3(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r4, r4
                ldob    4(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r4, r4
                cmpr    r3, r4
                bg      loc_1EEF4
                addo    5, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E9E0:                              # DATA XREF: ROM:0001F07C↓o
                ld      0x19C(g7), r3
                ldob    1(g4), r4
                bbc     r4, r3, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1E9F4:                              # DATA XREF: ROM:0001F080↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
# ---------------------------------------------------------------------------
                .long 0x8825DC03        # ldos    (g7)[r3*1], r4
# ---------------------------------------------------------------------------
                ldib    3(g4), r13
                addi    r13, r4, r4
                addo    4, g4, g4
                ldos    0x1AA(g7), r14
                addi    1, r14, r3
                cmpobg  r3, r4, loc_1EEF4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EA24:                              # DATA XREF: ROM:0001F088↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
# ---------------------------------------------------------------------------
                .long 0x8825DC03        # ldos    (g7)[r3*1], r4
# ---------------------------------------------------------------------------
                ldib    3(g4), r13
                addi    r13, r4, r4
                addo    4, g4, g4
                ldos    0x1AA(g7), r14
                addi    1, r14, r3
                cmpobge r3, r4, _uk_execute_move
                stos    r4, 0x120E(g7)
                st      g4, 0x1218(g7)
                b       loc_1E170
# ---------------------------------------------------------------------------
loc_1EA64:                              # DATA XREF: ROM:0001F08C↓o
                ldob    1(g4), r3
                ldob    0x1204(g7), r4
                cmpobe  0, r3, loc_1EA7C
                ldob    0x1205(g7), r4
loc_1EA7C:                              # CODE XREF: sub_1E468+608↑j
                stob    r4, 0x40(g13)
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EA88:                              # DATA XREF: ROM:0001F090↓o
                mov     0, r3
                ldob    0x1B1(g8), r4
                setbit  r4, r3, r3
                ld      1(g4), r4
                and     r3, r4, r4
                cmpo    0, r4
                be      loc_1EEF4
                addo    5, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EAAC:                              # DATA XREF: ROM:0001F094↓o
                ldob    1(g4), r3
                ld      0x1208(g7), r15
                setbit  r3, r15, r15
                st      r15, 0x1208(g7)
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EACC:                              # DATA XREF: ROM:0001F098↓o
                ldob    1(g4), r3
                ld      0x1208(g7), r15
                bbc     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EAE4:                              # DATA XREF: ROM:0001F09C↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldos    0x6DA(g8), r14
                cmpobne r3, r14, loc_1EEF4
                addo    3, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EB04:                              # DATA XREF: ROM:0001F0A0↓o
                ldob    1(g4), r3
                ldob    0x6CC(g7), r14
                cmpobg  r3, r14, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EB18:                              # DATA XREF: ROM:0001F0A8↓o
                mov     sp, r12
                lda     0x20(sp), sp
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                st      r3, 0x18(r12)
                mov     1, r15
                stis    r15, 0x1E(r12)
                addo    5, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EB5C:                              # DATA XREF: ROM:0001F0AC↓o
                ldob    0x1281(g7)[r11*4], r4
                bbs     r6, r4, loc_1EB9C
                bbs     r7, r4, loc_1EBCC
                ldob    9(g4), r3
                ldob    0xA(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    0xB(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    0xC(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EB9C:                              # CODE XREF: sub_1E468+6FC↑j
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EBCC:                              # CODE XREF: sub_1E468+700↑j
                ldob    5(g4), r3
                ldob    6(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    7(g4), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    8(g4), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EBFC:                              # DATA XREF: ROM:0001F0B0↓o
                ldob    1(g4), r3
                ld      0x1A4(g8), r15
                bbs     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EC10:                              # DATA XREF: ROM:0001F0B4↓o
                ldob    1(g4), r3
                ld      0x1A4(g8), r15
                bbc     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EC24:                              # DATA XREF: ROM:0001F0B8↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                mov     r6, r4
                cmpobe  8, r3, loc_1EC48
                mov     r7, r4
                cmpobe  9, r3, loc_1EC48
                mov     r3, r4
loc_1EC48:                              # CODE XREF: sub_1E468+7D0↑j
                bbs     r4, r8, loc_1EC58
                mov     r8, r10
                addo    3, g4, g4
                b       loc_1E450
# ---------------------------------------------------------------------------
loc_1EC58:                              # CODE XREF: sub_1E468:loc_1EC48↑j
                cmpobe  r10, r8, loc_1EE74
                b       loc_1EE2C
# ---------------------------------------------------------------------------
loc_1EC60:                              # DATA XREF: ROM:0001F0BC↓o
                ldib    1(g4), r3
                stib    r3, 0x6CE(g7)
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EC70:                              # DATA XREF: ROM:0001F0C0↓o
                ldib    0x6CE(g7), r3
                addi    1, r3, r3
                stis    r3, 0x6CE(g7)
                addo    1, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EC84:                              # DATA XREF: ROM:0001F0C4↓o
                ldib    0x6CE(g7), r3
                subi    1, r3, r3
                stis    r3, 0x6CE(g7)
                addo    1, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EC98:                              # DATA XREF: ROM:0001F0C8↓o
                ldib    0x6CE(g7), r3
                ldib    1(g4), r4
                cmpibl  r3, r4, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ECAC:                              # DATA XREF: ROM:0001F0CC↓o
                ldib    0x6CE(g7), r3
                ldib    1(g4), r4
                cmpibne r3, r4, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ECC0:                              # DATA XREF: ROM:0001F0D0↓o
                ldib    0x6CE(g7), r3
                ldib    1(g4), r4
                cmpibg  r3, r4, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ECD4:                              # DATA XREF: ROM:0001F0D4↓o
                ldos    1(g4), r13
                ldos    0x864(g7), r14
                cmpobne r13, r14, loc_1EEF4
                addo    3, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ECE8:                              # DATA XREF: ROM:0001F0D8↓o
                ldib    1(g4), r15
                stib    r15, 0x86A(g7)
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ECF8:                              # DATA XREF: ROM:0001F0DC↓o
                ldob    1(g4), r3
                ld      0x720(g7), r15
                bbc     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ED0C:                              # DATA XREF: ROM:0001F0E0↓o
                ldob    1(g4), r3
                ld      0x720(g7), r15
                bbs     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ED20:                              # DATA XREF: ROM:0001F0E8↓o
                ldob    1(g4), r3
                ld      0xA08(g7), r15
                setbit  r3, r15, r15
                st      r15, 0xA08(g7)
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ED38:                              # DATA XREF: ROM:0001F0EC↓o
                ldob    1(g4), r3
                ld      0xA08(g7), r15
                bbc     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ED4C:                              # DATA XREF: ROM:0001F0F0↓o
                ldob    1(g4), r3
                ld      0xA08(g7), r15
                bbs     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ED60:                              # DATA XREF: ROM:0001F0F4↓o
                ldob    1(g4), r3
                ldob    2(g4), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g4), r4
                ldob    4(g4), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                cmpobe  0, r3, loc_1ED9C
                stos    r3, 0x1246(g7)
                stos    r4, 0x124A(g7)
                addo    5, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1ED9C:                              # CODE XREF: sub_1E468+918↑j
                stos    r4, 0x1244(g7)
                addo    9, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EDAC:                              # DATA XREF: ROM:0001F0F8↓o
                ldob    1(g4), r3
                ld      0x70C(g7), r15
                bbc     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EDC0:                              # DATA XREF: ROM:0001F0FC↓o
                ldob    1(g4), r3
                ld      0x70C(g7), r15
                bbs     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EDD4:                              # DATA XREF: ROM:0001F100↓o
                ldob    1(g4), r3
loc_1EDD8:                              # DATA XREF: MAIN_DATA:026F2F60↓o
                ld      0x1250(g7), r15
                bbc     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EDEC:                              # DATA XREF: ROM:0001F104↓o
                ldob    1(g4), r3
                ld      0x1250(g7), r15
                bbs     r3, r15, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EE04:                              # DATA XREF: ROM:0001F108↓o
                ldob    1(g4), r3
                ld      0xC70(g7), r14
                cmpibne r3, r14, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EE18:                              # DATA XREF: ROM:0001F10C↓o
                ldob    1(g4), r3
                ld      0xC70(g7), r14
                cmpibe  r3, r14, loc_1EEF4
                addo    2, g4, g4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EE2C:                              # CODE XREF: sub_1E468+88↑j
                cmpobe  0, g2, loc_1EE70
                cmpobe  g2, r10, loc_1EE54
                cmpobe  r10, r8, loc_1EE74
                cmpobe  0, r8, loc_1EE4C
                and     r8, g2, r3
                cmpobne r8, r3, loc_1EEF4
                mov     r8, g2
                subi    1, g3, g3
loc_1EE4C:                              # CODE XREF: sub_1E468+9D0↑j
                mov     r8, r10
                b       loc_1EE74
# ---------------------------------------------------------------------------
loc_1EE54:                              # CODE XREF: sub_1E468+9C8↑j
                cmpdeci 0, g3, g3
                bge     loc_1EEF4
                and     r8, g2, r3
                cmpobne r8, r3, loc_1EEF4
                mov     r8, g2
                mov     r8, r10
                b       loc_1EE74
# ---------------------------------------------------------------------------
loc_1EE70:                              # CODE XREF: sub_1E468:loc_1EE2C↑j
                cmpobne r10, r8, loc_1EEF4
loc_1EE74:                              # CODE XREF: sub_1E468↑j
                cmpdeci 0, g5, g5
                bge     loc_1EEF4
                ldob    0x40(g13), r12
                cmpobe  r11, r12, loc_1EEF4
                subi    1, r11, r11
                lda     0x3F, r13
                and     r13, r11, r11
                shlo    4, 0xF, r3
                ldob    0x1280(g7)[r11*4], r4
                and     r3, r4, r8
                ldob    0x1282(g7)[r11*4], r4
                ldob    0x1242(g7), r13
                mov     0, r14
                cmpobg  r13, r11, loc_1EEBC
                addo    1, r14, r14
loc_1EEBC:                              # CODE XREF: sub_1E468+A4C↑j
                cmpobl  r13, r12, loc_1EEC4
                addo    1, r14, r14
loc_1EEC4:                              # CODE XREF: sub_1E468:loc_1EEBC↑j
                cmpobg  r12, r11, loc_1EECC
                subo    1, r14, r14
loc_1EECC:                              # CODE XREF: sub_1E468:loc_1EEC4↑j
                cmpibg  1, r14, loc_1EEDC
                shlo    4, 0xF, r3
                and     r3, r4, r9
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EEDC:                              # CODE XREF: sub_1E468:loc_1EECC↑j
                ldob    0x42(g13), r3
loc_1EEE0:                              # DATA XREF: MAIN_DATA:028B8848↓o
                and     r3, r4, r9
                ldob    0x43(g13), r3
                and     r3, r4, r12
                cmpobne r9, r12, loc_1EEF4
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EEF4:                              # CODE XREF: sub_1E468:loc_1E484↑j
                ld      0x1214(g13), r3
                cmpoble sp, r3, loc_1EF28
                lda     -0x20(sp), r15
                ldos    0x1E(r15), r3
                cmpobne 0, r3, loc_1EF1C
                ldq     0x0(r15), r8
                ldl     0x10(r15), g2
                ld      0x1C(r15), g5
loc_1EF1C:                              # CODE XREF: sub_1E468+AA4↑j
                ld      0x18(r15), g4
                mov     r15, sp
                b       _uk_execute_move
# ---------------------------------------------------------------------------
loc_1EF28:                              # CODE XREF: sub_1E468+338↑j
                mov     0, g1
loc_1EF2C:                              # CODE XREF: sub_1E468+1E8↑j
                lda     -0x18(sp), r15
                ld      0x14(r15), g0
                ld      0x10(r15), g4
                ldq     (r15), r8
                mov     r15, sp
                bx      (g14)
# End of function sub_1E468
# ---------------------------------------------------------------------------
                ld      0x1A4(g7), r15  # unreachable code
                bbc     4, r15, loc_1EF7C
                ld      0xA08(g7), r15
                bbs     0xA, r15, loc_1EF84
                mov     3, g1
                lda     calc_mht_adr, r15
                callx   (r15)
                ldos    5(g0), r3
                ldos    0x5BC(g7), r4
                cmpi    r3, r4
                testle  g0
                ret
# ---------------------------------------------------------------------------
loc_1EF7C:                              # CODE XREF: ROM:0001EF4C↑j
                mov     0, g0
                ret
# ---------------------------------------------------------------------------
loc_1EF84:                              # CODE XREF: ROM:0001EF54↑j
                mov     1, g0
                ret
# ---------------------------------------------------------------------------
word_1EF8C:     .short 0                # DATA XREF: sub_1D47C+33C↑r
                .short 0x8000
                .short 0
                .short 0
                .short 0xC000
                .short 0xA000
                .short 0xE000
                .short 0xC000
                .short 0x4000
                .short 0x6000
                .short 0x2000
                .short 0x4000
                .short 0
                .short 0x8000
                .short 0
                .short 0
MOVESET_ARRAY:  .long SONIC_MOVES       # DATA XREF: sub_1D47C+12C↑r
                .long TAILS_MOVES
                .long AMY_MOVES
                .long METAL_SONIC_MOVES
                .long FANG_MOVES
                .long BARK_MOVES
                .long KNUCKLES_MOVES
                .long ESPIO_MOVES
                .long EGGMAN_MOVES
                .long EGGMAN_MOVES
                .long BEAN_MOVES
                .long EGG_BOSS_MOVES
                .long KNUCKLES_MOVES
                .long EGG_MINION_MOVES
                .long KNUCKLES_MOVES
                .long HONEY_MOVES
                .long SONIC_MOVES
                .long KNUCKLES_MOVES
                .long KNUCKLES_MOVES
                .long KNUCKLES_MOVES
                .long KNUCKLES_MOVES
                .long KNUCKLES_MOVES
                .long KNUCKLES_MOVES
                .long KNUCKLES_MOVES
COMMANDS_BEGIN: .long sub_1E468         # DATA XREF: sub_1E3E4+78↑r
                .long loc_1E4C4
                .long loc_1E4F4
                .long loc_1E524
                .long load_mot_basic_step
                .long uk_load_command
                .long uk_load_command_2
                .long load_en_flag
                .long loc_1E668
                .long loc_1E67C
                .long load_en_flag_1
                .long loc_1E6A4
                .long loc_1E6B8
                .long load_pc_command
                .long _uk_punch_handler # Sonic Punch
                .long loc_1E734
                .long loc_1E798
                .long loc_1E7A4
                .long loc_1E7D4
                .long loc_1E854
                .long loc_1E89C
                .long loc_1E8D0
                .long loc_1E6CC
                .long loc_1E814
                .long loc_1E834
                .long loc_1E954
                .long loc_1E968
                .long loc_1E9A4
                .long loc_1E9E0
                .long loc_1E9F4
                .long loc_1E498
                .long loc_1EA24
                .long loc_1EA64
                .long loc_1EA88
                .long loc_1EAAC
                .long loc_1EACC
                .long loc_1EAE4
                .long loc_1EB04
                .long loc_1E77C
                .long loc_1EB18
                .long loc_1EB5C
                .long loc_1EBFC
                .long loc_1EC10
                .long loc_1EC24
                .long loc_1EC60
                .long loc_1EC70
                .long loc_1EC84
                .long loc_1EC98
                .long loc_1ECAC
                .long loc_1ECC0
                .long loc_1ECD4
                .long loc_1ECE8
                .long loc_1ECF8
                .long loc_1ED0C
                .long loc_1E614
                .long loc_1ED20
                .long loc_1ED38
                .long loc_1ED4C
                .long loc_1ED60
                .long loc_1EDAC
                .long loc_1EDC0
                .long loc_1EDD4
                .long loc_1EDEC
                .long loc_1EE04
                .long loc_1EE18
# =============== S U B R O U T I N E =======================================
camera_init:                            # DATA XREF: CONTINUE_DSP-4EB8↑o
                lda     0xBE570A3D, r15 # Label from official source
                st      r15, 0x18(g13)
                lda     0x3F47AE14, r15
                st      r15, 0x1C(g13)
                lda     0xC0D3D70A, r15
                st      r15, 0x20(g13)
                lda     0x3F800000, r15
                st      r15, 0x5010F0
                lda     0x3F800000, r15
                st      r15, 0x5010F4
                lda     0x438C0000, r15
                st      r15, focus_dist_x
                lda     0x438C0000, r15
                st      r15, focus_dist_y
                lda     displacement, r15
                st      r15, 0x18(g13)
                lda     0x3F99999A, r15
                st      r15, 0x1C(g13)
                lda     0xC0A66666, r15
                st      r15, 0x20(g13)
                mov     0, r15
                stis    r15, 0x24(g13)
                mov     0, r15
                stis    r15, 0x26(g13)
                mov     0, r15
                stis    r15, 0x28(g13)
                lda     0x3F733333, r15
                st      r15, 0x48(g13)
                lda     0x3ECCCCCD, r15
                st      r15, 0x50(g13)
                lda     0xBF4CCCCD, r15
                st      r15, 0x54(g13)
                lda     0x3F400000, r15
                st      r15, 0x44(g13)
                lda     0x3FACCCCD, r15
                st      r15, 0x58(g13)
                lda     0x3F800000, r15
                st      r15, 0x64(g13)
                shlo    8, 1, r15
                stis    r15, 0x1A8(g13)
                shlo    0xB, 3, r15
                stis    r15, 0x1B0(g13)
                shlo    0xB, 5, r15
                stis    r15, 0x1B2(g13)
                lda     0x3F800000, r15
                st      r15, 0x1B4(g13)
                lda     0x40333333, r15
                st      r15, 0x1B8(g13)
                lda     cam_mode9, r15
                stib    r15, 0x40(g13)  # cam_mode = 9
                mov     3, r15
                stib    r15, 0xDE(g13)
                mov     0, r15
                stib    r15, 0xB0(g13)
                mov     0, r15
                st      r15, 0xFC(g13)
                ld      0x0(g13), r15
                setbit  1, r15, r15
                st      r15, 0x0(g13)
                ld      0x0(g13), r15
                setbit  2, r15, r15
                st      r15, 0x0(g13)
                ld      0x0(g13), r15
                clrbit  6, r15, r15
                st      r15, 0x0(g13)
                call    cam_mode_9
                lda     camera_control, r15
                st      r15, 0xC(g13)
                mov     0, r15
                stib    r15, 0x310(g13)
                mov     1, r15
                stib    r15, 0x314(g13)
camera_control:                         # DATA XREF: camera_init+164↑o
                mov     1, r15          # Label from official source
                st      r15, deb_num
                ld      0x0(g13), r3
                chkbit  6, r3
                be      poly_test_camera
                chkbit  0x19, r3
                be      loc_23830
                ld      debug_flag, r15
                bbs     5, r15, loc_1F3A0
                mov     2, r15
                st      r15, deb_num
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                ld      focus_dist_x, r15
                st      r15, (g11)[g12*1]
                lda     0x435F3333, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x5C(g13)
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                ld      focus_dist_y, r15
                st      r15, (g11)[g12*1]
                lda     0x432CCCCD, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x60(g13)
                call    camera_work
                mov     3, r15
                st      r15, deb_num
                ldt     0x18(g13), g0
                ldis    0x50A024, r14
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                lda     0xC1F00000, r13
                addr    r13, r14, r14
                cmpr    g1, r14
                bge     loc_1F370
                mov     r14, g1
                st      r14, 0x1C(g13)
loc_1F370:                              # CODE XREF: camera_init+254↑j
                ldos    6(g13), r11
                addo    1, r11, r11
                stos    r11, 6(g13)
                lda     0x7F, r13
                and     r13, r11, r12
                cmpobne 0, r12, loc_1F3A0
                shro    7, r11, r11
                and     3, r11, g0
                call    sub_28184       # return
                mov     4, r15
                st      r15, deb_num
loc_1F3A0:                              # CODE XREF: camera_init+1A8↑j
                ldt     0x18(g13), g0
                call    area_check
                mov     4, r15
                st      r15, deb_num
                stob    g0, 0xFA(g13)
                call    mirror_area_init
                mov     5, r15
                st      r15, deb_num
                mov     0, r15
                st      r15, _1P_ROB
                st      r15, _1P_MIRROR
                st      r15, 0x50017C
                st      r15, 0x500180
                lda     0x3F800000, r3
                ld      fa_rob0, g7
                ldob    0x1B0(g7), r3
                ld      rob_light_sonic[r3*4], r3
                st      r3, ROB0
                ld      fa_rob1, g7
                ldob    0x1B0(g7), r3
                ld      rob_light_sonic[r3*4], r3
                st      r3, ROB1
                mov     0, r3
                stos    r3, ROB0_ZANG
                stos    r3, ROB1_ZANG
                mov     6, r15
                st      r15, deb_num
                ld      fa_rob0, g7
                ld      0x70C(g7), r15
                bbs     5, r15, loc_1F474
                ld      0x70C(g7), r15
                bbs     0xA, r15, loc_1F474
                ld      0x0(g7), r15
                bbs     0x12, r15, loc_1F474
                ld      0x1A4(g7), r15
                bbc     0x1A, r15, loc_1F4B0
loc_1F474:                              # CODE XREF: camera_init+348↑j
                ld      0x5010F0, r3
                lda     0x3ECCCCCD, r4
                addr    r4, r3, r3
                lda     0x40000000, r4
                cmpr    r3, r4
                ble     loc_1F4A0
                lda     0xC0000000, r3
loc_1F4A0:                              # CODE XREF: camera_init+384↑j
                st      r3, ROB0
                st      r3, 0x5010F0
loc_1F4B0:                              # CODE XREF: camera_init+360↑j
                ld      fa_rob1, g7
                ld      0x70C(g7), r15
                bbs     5, r15, loc_1F4D8
                ld      0x70C(g7), r15
                bbs     0xA, r15, loc_1F4D8
                ld      0x0(g7), r15
                bbs     0x12, r15, loc_1F4D8
                ld      0x1A4(g7), r15
                bbc     0x1A, r15, loc_1F514
loc_1F4D8:                              # CODE XREF: camera_init+3AC↑j
                ld      0x5010F4, r3
                lda     0x3ECCCCCD, r4
                addr    r4, r3, r3
                lda     0x40000000, r4
                cmpr    r3, r4
                ble     loc_1F504
                lda     0xC0000000, r3
loc_1F504:                              # CODE XREF: camera_init+3E8↑j
                st      r3, ROB1
                st      r3, 0x5010F4
loc_1F514:                              # CODE XREF: camera_init+3C4↑j
                ldob    POLYGON_DISP, r3
                chkbit  0, r3
                bo      loc_20AE4
                ld      0x0(g13), r11
                ldob    POLYGON_DISP, r3
                bbc     1, r3, loc_1F538
                clrbit  1, r11, r11
loc_1F538:                              # CODE XREF: camera_init+420↑j
                ldob    0xDE(g13), r3
                bbc     0, r3, loc_1F550
                ldob    POLYGON_DISP, r3
                bbc     2, r3, loc_1F550
                clrbit  2, r11, r11
loc_1F550:                              # CODE XREF: camera_init+42C↑j
                st      r11, 0x0(g13)
                call    set_material
                mov     7, r15
                st      r15, deb_num
                ldob    also_mode, r15
                lda     mode8, r14
                cmpobe  r14, r15, loc_1F584
                lda     mode9, r14
                cmpobne r14, r15, loc_1F5BC
loc_1F584:                              # CODE XREF: camera_init+464↑j
                ldob    also_sub_mode, r15
                lda     start_ip_add+2, r14
                cmpobl  r15, r14, loc_1F5BC
                ldob    0x2D4(g13), r3
                bbc     0, r3, loc_1F5AC
                ld      0x0(g13), r15
                clrbit  1, r15, r15
                st      r15, 0x0(g13)
loc_1F5AC:                              # CODE XREF: camera_init+48C↑j
                bbc     1, r3, loc_1F5BC
                ld      0x0(g13), r15
                clrbit  2, r15, r15
                st      r15, 0x0(g13)
loc_1F5BC:                              # CODE XREF: camera_init+470↑j
                call    send_st01_sea_thd
                mov     8, r15
                st      r15, deb_num
                ld      fa_rob0, g7
                ld      0x0(g7), r15
                bbs     0x14, r15, loc_1F5E8
                ld      fa_rob1, g8
                call    snc_eye_thd_set
loc_1F5E8:                              # CODE XREF: camera_init+4C8↑j
                mov     9, r15
                st      r15, deb_num
                ld      fa_rob1, g7
                ld      0x0(g7), r15
                bbs     0x14, r15, loc_1F610
                ld      fa_rob0, g8
                call    snc_eye_thd_set
loc_1F610:                              # CODE XREF: camera_init+4F0↑j
                mov     0xA, r15
                st      r15, deb_num
                call    move_tpd_send
                mov     0xB, r15
                st      r15, deb_num
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x28(g13), r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x24(g13), r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g13), r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    VECTER_Y, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    VECTER_X, r15
                st      r15, (g11)[g12*1]
                mov     0, r4
                mov     r4, r5
                ld      BRIGHT, r6
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    ROB0_ZANG, r15
                st      r15, (g11)[g12*1]
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                stt     r4, (g11)[g12*1]
                ldt     (g11)[g12*1], r8
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                stt     r8, 0x50108C
                ld      ROB0, r3
                mulr    r3, r8, r12
                mulr    r3, r9, r13
                mulr    r3, r10, r14
                stt     r12, 0x5010AC
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    ROB1_ZANG, r15
                st      r15, (g11)[g12*1]
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                stt     r4, (g11)[g12*1]
                ldt     (g11)[g12*1], r8
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      ROB1, r3
                mulr    r3, r8, r12
                mulr    r3, r9, r13
                mulr    r3, r10, r14
                stt     r12, 0x5010B8
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                call    set_hitch_efc
                mov     0xC, r15
                st      r15, deb_num
                ld      0x140(g13), r3
                lda     displacement, r4
                lda     0x7000E0E, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0x13C(g13), r3
                ldl     focus_dist_x, r4
                lda     0x2F005E5E, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r5
                stl     r4, 0x5010C8
                lda     0x5010C8, r14
                st      g14, mmode
                lda     0x909, g14
                st      g14, 0x90(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      0x5010C4, r3
                ld      0x5010C8, r4
                mulr    r3, r4, r4
                mov     0, r3
                st      g14, mmode
                lda     0x1616, g14
                st      g14, 0x160(g10)
                ld      mmode, g14
                st      r4, (g10)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      0x18(g13), r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                ld      0x1C(g13), r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                ld      0x20(g13), r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                lda     0x2800505, r15
                st      r15, (g11)[g12*1]
                lda     0x5010F8, r15
                ld      (g11)[g12*1], r14
                st      r14, 0x0(r15)
                ld      (g11)[g12*1], r14
                st      r14, 4(r15)
                ld      (g11)[g12*1], r14
                st      r14, 8(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0xC(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x10(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x14(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x18(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x1C(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x20(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x24(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x28(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x2C(r15)
                lda     0x21804343, r15
                st      r15, (g11)[g12*1]
                mov     9, r15
                st      r15, (g11)[g12*1]
                ld      0xFC(g13), r3
                cmpobe  0, r3, loc_1F99C
                ld      frame_counter, r15
                bbc     0, r15, loc_1F99C
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xBF000000, r13
                mulr    r13, r3, r3
                clrbit  0x1F, r3, r14
                lda     0x3BCCCCCD, r15
                cmpr    r15, r14
                bge     loc_1F994
                st      r3, 0xFC(g13)
                b       loc_1F99C
# ---------------------------------------------------------------------------
loc_1F994:                              # CODE XREF: camera_init+878↑j
                mov     0, r15
                st      r15, 0xFC(g13)
loc_1F99C:                              # CODE XREF: camera_init+824↑j
                lda     0x50108C, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                ldob    also_mode, r15
                lda     prcb+2, r14
                cmpo    r14, r15
                be      loc_22570
                lda     prcb+3, r14
                cmpo    r14, r15
                be      loc_22570
                ldob    gameprogram, r14 # bit 0 clear = Player 1
                cmpobge 1, r14, loc_1FA1C
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3353(r15), r15 # r15 = BACKUP_RAM_TO_RAM+0x3353
                bbs     5, r15, loc_1FA44
loc_1FA1C:                              # CODE XREF: camera_init+8F4↑j
                ldob    mode, r3
                lda     mode10, r4
                cmpo    r3, r4
                be      loc_20F64       # branch if mode = 10
                lda     mode11, r4
                cmpo    r3, r4
                be      loc_20F64       # branch if mode = 11
loc_1FA44:                              # CODE XREF: camera_init+908↑j
                ld      mode_flag, r4
                lda     prcb, r3
                lda     displacement8(r3), r3
                and     r4, r3, r3
                cmpobe  0, r3, loc_1FAB0
                ld      0x500034, r4
                lda     displacement64, r3
                lda     displacement128(r3), r3
                lda     displacement256(r3), r3
                lda     (_INTR_ram__am1_users2_yasuda_mb_src_init_0+4)(r3), r3
                lda     0x1000(r3), r3
                lda     0x2000(r3), r3
                lda     0x4000(r3), r3
                and     r4, r3, r3
                cmpo    0, r3
                bne     loc_223C4
loc_1FAB0:                              # CODE XREF: camera_init+950↑j
                ldob    also_mode, r15
                lda     prcb+2, r14
                cmpo    r14, r15
                be      loc_22570       # branch if also_mode = 6
                lda     prcb+3, r14
                cmpo    r14, r15
                be      loc_22570       # branch if also_mode = 7
                ldob    also_mode, r15
                lda     start_ip_add, r14
                cmpo    r14, r15
                be      loc_2254C       # branch if also_mode = 12
                lda     start_ip_add+1, r14
                cmpo    r14, r15
                be      loc_2254C       # branch if also_mode = 13
loc_1FB00:                              # CODE XREF: ROM:00022558↓j
                ldob    also_mode, r15
                lda     start_ip_add+2, r14
                cmpo    r14, r15
                be      loc_21DB4
                lda     start_ip_add+3, r14
                cmpo    r14, r15
                be      loc_21DB4
                ld      0x508060, r15
                bbc     0x1C, r15, loc_1FB38
                call    ken_camera
loc_1FB38:                              # CODE XREF: camera_init+A20↑j
                ld      0x5004C8, r15
                bbc     0x1F, r15, loc_1FB84
                ldob    also_mode, r4
                lda     displacement3, r5
                cmpobne r4, r5, loc_1FB60 # if also_mode != 3 then branch
                call    adv_movie_disp
                b       loc_1FB84
# ---------------------------------------------------------------------------
loc_1FB60:                              # CODE XREF: camera_init+A44↑j
                lda     displacement9, r5
                cmpobne r4, r5, loc_1FB70
                call    loc_56E2C
loc_1FB70:                              # CODE XREF: camera_init+A58↑j
                lda     start_ip_add+1, r5
                cmpobne r4, r5, loc_1FB84
                call    loc_58E80
                ret
# ---------------------------------------------------------------------------
loc_1FB84:                              # CODE XREF: camera_init+A30↑j
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                call    make_kage_matrix # "Shadow" (kage)
                mov     0xE, r15
                st      r15, deb_num
                call    cage_sub_check
                mov     0xF, r15
                st      r15, deb_num
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x50A024, r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x50A020, r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x50A022, r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      stage_xpos, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                ld      stage_ypos, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                ld      stage_zpos, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x21804343, r15
                st      r15, (g11)[g12*1]
                mov     8, r15
                st      r15, (g11)[g12*1]
                ld      0x0(g13), r15
                bbs     18, r15, loc_1FCCC
                ldob    stage_num, r12
                shlo    8, r12, r4
                ld      stage_data(r4), r15
                bbs     2, r15, loc_1FCCC
                ldos    stage_floor(r4), r7 # Load objects from list
                mov     0, r15
                cmpobe  r15, r7, loc_1FCCC # Branch if object is 0
                mov     0, g1
                lda     (r7), g0
                call    set_obj
loc_1FCCC:                              # CODE XREF: camera_init+B84↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x0(g13), r15
                bbs     0x11, r15, loc_1FCF0
                call    doom_cnt
                mov     0x10, r15
                st      r15, deb_num
loc_1FCF0:                              # CODE XREF: camera_init+BCC↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_1FD38
                st      r13, 0x0(r15)
                b       loc_1FD44
# ---------------------------------------------------------------------------
loc_1FD38:                              # CODE XREF: camera_init+C1C↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_1FD44:                              # CODE XREF: camera_init+C24↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                ldob    stage_num, r3
                cmpobe  2, r3, loc_1FD98
                ld      0x0(g13), r15
                bbs     0x10, r15, loc_1FD98
                call    ground_disp
loc_1FD98:                              # CODE XREF: camera_init+C78↑j
                mov     0x11, r15
                st      r15, deb_num
                ldob    stage_num, r12
                shlo    8, r12, r4
                call    calc_effect_matrix
                mov     0x13, r15
                st      r15, deb_num
                call    sub_63AC4
                mov     0x14, r15
                st      r15, deb_num
                ld      stage_data(r4), r3
                bbc     0x18, r3, loc_1FDF4
                ld      0x0(g13), r15
                bbs     0x13, r15, loc_1FDF4
                call    stage_dsp
                mov     0x15, r15
                st      r15, deb_num
loc_1FDF4:                              # CODE XREF: camera_init+CC8↑j
                ld      finish_wall_flag, r15
                bbs     0x1C, r15, loc_1FE04
                bbc     0x19, r3, loc_1FE18
loc_1FE04:                              # CODE XREF: camera_init+CEC↑j
                mov     0, g3
                call    rob_low_disp
                mov     0x16, r15
                st      r15, deb_num
loc_1FE18:                              # CODE XREF: camera_init+CF0↑j
                ld      0x0(g13), r15
                bbc     1, r15, loc_1FE38
                ld      fa_rob0, g7
                call    sub_63B0C       # return
                mov     0x17, r15
                st      r15, deb_num
loc_1FE38:                              # CODE XREF: camera_init+D0C↑j
                ld      0x0(g13), r15
                bbc     2, r15, loc_1FE58
                ld      fa_rob1, g7
                call    sub_63B0C       # return
                mov     0x18, r15
                st      r15, deb_num
loc_1FE58:                              # CODE XREF: camera_init+D2C↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501844, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_1FEA0
                st      r13, 0x0(r15)
                b       loc_1FEAC
# ---------------------------------------------------------------------------
loc_1FEA0:                              # CODE XREF: camera_init+D84↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_1FEAC:                              # CODE XREF: camera_init+D8C↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501844, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50182C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_1FF24
                st      r13, 0x0(r15)
                b       loc_1FF30
# ---------------------------------------------------------------------------
loc_1FF24:                              # CODE XREF: camera_init+E08↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_1FF30:                              # CODE XREF: camera_init+E10↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50182C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                ldob    stage_num, r12
                shlo    8, r12, r4
                ld      stage_data(r4), r3
                bbc     0x17, r3, loc_1FF94
                call    cage_sub_disp
                mov     0x19, r15
                st      r15, deb_num
loc_1FF94:                              # CODE XREF: camera_init+E70↑j
                ld      0x0(g13), r15
                bbc     1, r15, loc_1FFB4
                ld      fa_rob0, g7
                call    sub_7EC80       # return
                mov     0x1A, r15
                st      r15, deb_num
loc_1FFB4:                              # CODE XREF: camera_init+E88↑j
                ld      0x0(g13), r15
                bbc     2, r15, loc_1FFD4
                ld      fa_rob1, g7
                call    sub_7EC80       # return
                mov     0x1B, r15
                st      r15, deb_num
loc_1FFD4:                              # CODE XREF: camera_init+EA8↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50184C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
loc_20010:                              # DATA XREF: get_frame_dat+C0↓o
                cmpobne 0, r14, loc_2001C
                st      r13, 0x0(r15)
                b       loc_20028
# ---------------------------------------------------------------------------
loc_2001C:                              # CODE XREF: camera_init:loc_20010↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_20028:                              # CODE XREF: camera_init:loc_20018↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50184C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                ldob    stage_num, r12
                mov     9, r4
                cmpobne r4, r12, loc_20090
                ld      0x500498, r15
                bbs     0x1F, r15, loc_20090
                ld      0x500498, r15
                bbs     1, r15, loc_20090
                call    cage_disp
loc_20090:                              # CODE XREF: camera_init+F60↑j
                ldob    stage_num, r12
                shlo    8, r12, r4
                ld      stage_data(r4), r3
                bbs     0x18, r3, loc_200C4
                bbs     0x1A, r3, loc_200C4
                ld      0x0(g13), r15
                bbs     0x13, r15, loc_200C4
                call    stage_dsp
                mov     0x1C, r15
                st      r15, deb_num
loc_200C4:                              # CODE XREF: camera_init+F94↑j
                ld      finish_wall_flag, r15
                bbs     0x1C, r15, loc_200E8
                bbs     0x19, r3, loc_200E8
                mov     0, g3
                call    rob_low_disp
                mov     0x1D, r15
                st      r15, deb_num
loc_200E8:                              # CODE XREF: camera_init+FBC↑j
                ldob    stage_num, r3
                cmpobne 2, r3, loc_20100
                ld      0x0(g13), r15
                bbs     0x10, r15, loc_20100
                call    ground_disp
loc_20100:                              # CODE XREF: camera_init+FE0↑j
                lda     0x50108C, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_20180
                st      r13, 0x0(r15)
                b       loc_2018C
# ---------------------------------------------------------------------------
loc_20180:                              # CODE XREF: camera_init+1064↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_2018C:                              # CODE XREF: camera_init+106C↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                ldob    stage_num, r12
                mov     9, r4
                cmpobne r4, r12, loc_201E4
                ld      0x500498, r15
                bbc     1, r15, loc_201E8
loc_201E4:                              # CODE XREF: camera_init+10C4↑j
                call    cage_disp
loc_201E8:                              # CODE XREF: camera_init+10D0↑j
                mov     0x1E, r15
                st      r15, deb_num
                ld      0x0(g13), r15
                bbs     0x15, r15, loc_20234
                ldob    stage_num, r12
                shlo    8, r12, r4
                ld      stage_data(r4), r3
                bbs     0x17, r3, loc_20224
                call    cage_sub_disp
                mov     0x1F, r15
                st      r15, deb_num
loc_20224:                              # CODE XREF: camera_init+1100↑j
                call    pole_disp
                addo    0x1F, 1, r15
                st      r15, deb_num
loc_20234:                              # CODE XREF: camera_init+10E8↑j
                ld      stage_data(r4), r3
                bbc     0x1A, r3, loc_20250
                call    stage_dsp
                addo    0x1F, 2, r15
                st      r15, deb_num
loc_20250:                              # CODE XREF: camera_init+112C↑j
                ldob    0xFA(g13), r3
                clrbit  0, r3, r3
                stob    r3, 0xFA(g13)
                ldob    stage_num, r3
                cmpobe  2, r3, loc_202BC
                ld      0x0(g13), r15
                bbc     1, r15, loc_20290
                ld      0x0(g13), r15
                bbs     0x1C, r15, loc_20290
                ld      fa_rob0, g7
                call    rob_kage_disp_inside # "Shadow" (kage)
                addo    0x1F, 3, r15
                st      r15, deb_num
loc_20290:                              # CODE XREF: camera_init+115C↑j
                ld      0x0(g13), r15
                bbc     2, r15, loc_202B8
                ld      0x0(g13), r15
                bbs     0x1D, r15, loc_202B8
                ld      fa_rob1, g7
                call    rob_kage_disp_inside # "Shadow" (kage)
                addo    0x1F, 4, r15
                st      r15, deb_num
loc_202B8:                              # CODE XREF: camera_init+1184↑j
                b       loc_2033C
# ---------------------------------------------------------------------------
loc_202BC:                              # CODE XREF: camera_init+1154↑j
                mov     0, g0
                mov     7, g1
                lda     dword_90F90, g2
                call    change_material
                addo    0x1F, 5, r15
                st      r15, deb_num
                mov     8, g0
                mov     8, g1
                lda     dword_90FAC, g2
                call    change_material
                addo    0x1F, 6, r15
                st      r15, deb_num
                call    mirror_rob_disp
                addo    0x1F, 7, r15
                st      r15, deb_num
                call    mirror_tobi_disp # "Projectile" (tobi)
                addo    0x1F, 8, r15
                st      r15, deb_num
                mov     0, g0
                mov     0x10, g1
                lda     material_num_floats[g0*4], g2
                call    change_material
                addo    0x1F, 9, r15
                st      r15, deb_num
loc_2033C:                              # CODE XREF: camera_init:loc_202B8↑j
                call    name_char_kage_disp # "Shadow" (kage)
                addo    0x1F, 0xA, r15
                st      r15, deb_num
                call    sub_7EC78       # return
                addo    0x1F, 0xB, r15
                st      r15, deb_num
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50185C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_203A4
                st      r13, 0x0(r15)
                b       loc_203B0
# ---------------------------------------------------------------------------
loc_203A4:                              # CODE XREF: camera_init+1288↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_203B0:                              # CODE XREF: camera_init+1290↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50185C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501834, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_20428
                st      r13, 0x0(r15)
                b       loc_20434
# ---------------------------------------------------------------------------
loc_20428:                              # CODE XREF: camera_init+130C↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_20434:                              # CODE XREF: camera_init+1314↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501834, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501824, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_204AC
                st      r13, 0x0(r15)
                b       loc_204B8
# ---------------------------------------------------------------------------
loc_204AC:                              # CODE XREF: camera_init+1390↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_204B8:                              # CODE XREF: camera_init+1398↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501824, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                ld      0x0(g13), r15
                bbc     1, r15, loc_205FC
                ld      fa_rob0, g7
                lda     0x5010AC, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                ld      POLYGON, r15
                call    rob_disp
                addo    0x1F, 0xC, r15
                st      r15, deb_num
                ld      POLYGON, r14
                subo    r15, r14, r15
                ldos    _1P_ROB, r14
                addo    r14, r15, r15
                stos    r15, _1P_ROB
                ld      0x2068(g7), r4
                cmpo    0, r4
                be      loc_205C0
                ld      0x804(g7), r4
                bbs     4, r4, loc_205B0
                ld      frame_counter, r4
                remo    3, r4, r4
                cmpo    0, r4
                bne     loc_205B0
                call    spin_smoke_trg
                addo    0x1F, 0xD, r15
                st      r15, deb_num
loc_205B0:                              # CODE XREF: camera_init+1478↑j
                call    spin_attack_cnt
                addo    0x1F, 0xE, r15
                st      r15, deb_num
loc_205C0:                              # CODE XREF: camera_init+1470↑j
                call    spin_smoke_cnt
                addo    0x1F, 0xF, r15
                st      r15, deb_num
                call    hammered_cnt
                addo    0x1F, 0x10, r15
                st      r15, deb_num
                ld      0x64(g3), r4
                addr    r4, g0, g0
                st      g0, 0x68(g3)
                call    sub_7F5CC
                addo    0x1F, 0x11, r15
                st      r15, deb_num
loc_205FC:                              # CODE XREF: camera_init+13E8↑j
                ld      0x0(g13), r15
                bbc     2, r15, loc_20704
                ld      fa_rob1, g7
                lda     0x5010B8, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                ld      POLYGON, r15
                call    rob_disp
                addo    0x1F, 0x12, r15
                st      r15, deb_num
                ld      POLYGON, r14
                subo    r15, r14, r15
                ldos    _2P_ROB, r14
                addo    r14, r15, r15
                stos    r15, _2P_ROB
                ld      0x2068(g7), r4
                cmpo    0, r4
                be      loc_206C8
                ld      0x804(g7), r4
                bbs     4, r4, loc_206B8
                ld      frame_counter, r4
                remo    3, r4, r4
                cmpo    0, r4
                bne     loc_206B8
                call    spin_smoke_trg
                addo    0x1F, 0x13, r15
                st      r15, deb_num
loc_206B8:                              # CODE XREF: camera_init+1580↑j
                call    spin_attack_cnt
                addo    0x1F, 0x14, r15
                st      r15, deb_num
loc_206C8:                              # CODE XREF: camera_init+1578↑j
                call    spin_smoke_cnt
                addo    0x1F, 0x15, r15
                st      r15, deb_num
                call    hammered_cnt
                addo    0x1F, 0x16, r15
                st      r15, deb_num
                ld      0x64(g3), r4
                addr    r4, g0, g0
                st      g0, 0x68(g3)
                call    sub_7F5CC
                addo    0x1F, 0x17, r15
                st      r15, deb_num
loc_20704:                              # CODE XREF: camera_init+14F0↑j
                lda     0x50108C, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                call    efc_disp
                call    efc_face_opt_disp
                addo    0x1F, 0x18, r15
                st      r15, deb_num
                call    tobi_disp       # "Projectile" (tobi)
                addo    0x1F, 0x19, r15
                st      r15, deb_num
                call    smoke_pattern_put
                addo    0x1F, 0x1A, r15
                st      r15, deb_num
                call    guard_attack_effect_disp
                addo    0x1F, 0x1B, r15
                st      r15, deb_num
                call    name_char_disp  # Puts object at 0x50B118 in the middle of the stage. Seemingly unused function in StF.
                addo    0x1F, 0x1C, r15
                st      r15, deb_num
                call    sub_5ACF0
                addo    0x1F, 0x1D, r15
                st      r15, deb_num
                ld      0x0(g13), r15
                bbc     0x18, r15, loc_20820
                lda     0x1BC(g13), g5
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x1C(g5), r12
                stt     r12, (g11)[g12*1]
                mov     0, g1
                lda     6, g0           # Weird cylinder
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x1E4(g13), g5
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     0x1C(g5), r12
                stt     r12, (g11)[g12*1]
                mov     0, g1
                lda     6, g0           # Weird cylinder
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_20820:                              # CODE XREF: camera_init+1694↑j
                call    ring_tobitiri   # Ring Scatter
                addo    0x1F, 0x1E, r15
                st      r15, deb_num
                ld      fa_rob0, g7
                call    kira_kira_disp  # kira = "sparkle"
                ld      fa_rob1, g7
                call    kira_kira_disp  # kira = "sparkle"
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501864, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_20890
                st      r13, 0x0(r15)
                b       loc_2089C
# ---------------------------------------------------------------------------
loc_20890:                              # CODE XREF: camera_init+1774↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_2089C:                              # CODE XREF: camera_init+177C↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501864, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                lda     0x50108C, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                mov     1, g3
                call    rob_low_disp
                addo    0x1F, 0x1F, r15
                st      r15, deb_num
                ld      0x0(g13), r15
                bbs     0x15, r15, loc_20958
                call    cage_sub_disp_f
                lda     0x3F, r15
                st      r15, deb_num
                shlo    6, 1, r15
                st      r15, deb_num
                call    pole_disp_f
                lda     0x41, r15
                st      r15, deb_num
loc_20958:                              # CODE XREF: camera_init+1818↑j
                call    guard_barrier_effect_disp
                call    laser_effect_disp
                lda     0x42, r15
                st      r15, deb_num
                call    cage_disp_f
                lda     0x43, r15
                st      r15, deb_num
                ld      0x0(g13), r15
                bbs     0x14, r15, loc_20994
                call    object_control
                mov     0x12, r15
                st      r15, deb_num
loc_20994:                              # CODE XREF: camera_init+1870↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50186C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_209DC
                st      r13, 0x0(r15)
                b       loc_209E8
# ---------------------------------------------------------------------------
loc_209DC:                              # CODE XREF: camera_init+18C0↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_209E8:                              # CODE XREF: camera_init+18C8↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50186C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ldob    mode, r3
                lda     mode9, r4
                cmpobne r3, r4, loc_20A40
                ldob    _sub_mode, r3
                lda     check_word2+1, r4
                cmpobe  r3, r4, loc_20F64
loc_20A40:                              # CODE XREF: camera_init+1918↑j
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                call    fa_pol_string
                call    ko_disp
                shlo    2, 0x11, r15
                st      r15, deb_num
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501874, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_20AA8
                st      r13, 0x0(r15)
                b       loc_20AB4
# ---------------------------------------------------------------------------
loc_20AA8:                              # CODE XREF: camera_init+198C↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_20AB4:                              # CODE XREF: camera_init+1994↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501874, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
loc_20AE4:                              # CODE XREF: camera_init+410↑j
                lda     0xFF, r15
                st      r15, deb_num
                ret
# End of function camera_init
# =============== S U B R O U T I N E =======================================
# kira = "sparkle"
kira_kira_disp:                         # CODE XREF: camera_init+1728↑p
                ld      0x0(g7), r15    # Label from official source
                bbc     18, r15, loc_20F60
                ld      frame_counter, r8
                and     7, r8, r8
                lda     0x40200000, r9
                ldos    hyper_mode_sparkle_effect_anim[r8*2], r10
                ld      frame_counter, r12
                shli    0xB, r12, r12
                lda     0xFFFF, r13
                and     r13, r12, r12
                ld      frame_counter, r15
                bbs     0, r15, loc_20D50
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     0x1004(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x8001010, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                mov     0, g1
                lda     (r10), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                addo    1, r8, r8
                and     7, r8, r8
                ldos    hyper_mode_sparkle_effect_anim[r8*2], r10
                ldt     0x101C(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x8001010, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                mov     0, g1
                lda     (r10), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                addo    1, r8, r8
                and     7, r8, r8
                ldos    hyper_mode_sparkle_effect_anim[r8*2], r10
                ldt     0x1034(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x8001010, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                mov     0, g1
                lda     (r10), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                addo    1, r8, r8
                and     7, r8, r8
                ldos    hyper_mode_sparkle_effect_anim[r8*2], r10
                ldt     0x104C(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x8001010, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                mov     0, g1
                lda     (r10), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# ---------------------------------------------------------------------------
loc_20D50:                              # CODE XREF: kira_kira_disp+44↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     0x1010(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x8001010, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                mov     0, g1
                lda     (r10), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                addo    1, r8, r8
                and     7, r8, r8
                ldos    hyper_mode_sparkle_effect_anim[r8*2], r10
                ldt     0x1028(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x8001010, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                mov     0, g1
                lda     (r10), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                addo    1, r8, r8
                and     7, r8, r8
                ldos    hyper_mode_sparkle_effect_anim[r8*2], r10
                ldt     0x1040(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x8001010, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                mov     0, g1
                lda     (r10), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                addo    1, r8, r8
                and     7, r8, r8
                ldos    hyper_mode_sparkle_effect_anim[r8*2], r10
                ldt     0x1058(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x8001010, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                mov     0, g1
                lda     (r10), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_20F60:                              # CODE XREF: kira_kira_disp+4↑j
                ret
# End of function kira_kira_disp
# ---------------------------------------------------------------------------
loc_20F64:                              # CODE XREF: camera_init+920↑j
                ldob    STAGE_ID, r14
                cmpobg  10, r14, loc_20F7C
                ldob    stage_num, r14
                cmpobe  15, r14, loc_211C0
loc_20F7C:                              # CODE XREF: ROM:00020F6C↑j
                lda     0x501420, g0
                call    set_window      # g0 = two shorts
                lda     float_2_8, r14
                st      g14, mmode
                lda     0x909, g14
                st      g14, 0x90(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                lda     0x7FF50FF, g0
                mov     0xD, g1
                call    set_material_one
                lda     displacement, r8
                lda     0xBF800000, r9
                lda     displacement, r10
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                stt     r8, (g10)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldob    winner, r3
                notbit  0, r3, r3
                ld      fa_rob0, g7
                shlo    0xA, 0xD, r15
                mulo    r3, r15, r15
                addo    r15, g7, g7
                ld      0x1A4(g7), r15
                bbc     5, r15, loc_2103C
                ld      0x1F4(g7), r4
                ld      0x1FC(g7), r6
                b       loc_21044
# ---------------------------------------------------------------------------
loc_2103C:                              # CODE XREF: ROM:0002102C↑j
                ld      0x18(g7), r4
                ld      0x20(g7), r6
loc_21044:                              # CODE XREF: ROM:00021038↑j
                bbs     0x10, r15, loc_21050
                bbs     0xE, r15, loc_21050
                bbc     4, r15, loc_21058
loc_21050:                              # CODE XREF: ROM:loc_21044↑j
                ld      0x1F8(g7), r5
                b       loc_21068
# ---------------------------------------------------------------------------
loc_21058:                              # CODE XREF: ROM:0002104C↑j
                ld      0x1C(g7), r5
                lda     0x3F800000, r15
                addr    r15, r5, r5
loc_21068:                              # CODE XREF: ROM:00021054↑j
                ld      fa_camera, r7
                ldos    0x394(r7), r8
                shlo    7, 1, r9
                mulo    r8, r9, r11
                lda     displacement, r8
                lda     0xBFCCCCCD, r9
                ld      debug_fx, r13
                addr    r13, r9, r9
                lda     0x40A00000, r10
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r11, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r4, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r5, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r6, r15
                st      r15, (g11)[g12*1]
                call    rob_disp_mir
                mov     0, r3
                ldob    0x1B0(g7), r4
                ldob    0x1B1(g7), r5
                cmpobe  r4, r5, loc_21114
                mov     1, r3
loc_21114:                              # CODE XREF: ROM:0002110C↑j
                ld      animate_some_tails[r5*4], r11
                cmpobe  0, r11, loc_21128
                mov     r3, g0
                callx   (r11)
loc_21128:                              # CODE XREF: ROM:0002111C↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                stos    r11, 0x26(r7)
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501874, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_21180
                st      r13, 0x0(r15)
                b       loc_2118C
# ---------------------------------------------------------------------------
loc_21180:                              # CODE XREF: ROM:00021174↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_2118C:                              # CODE XREF: ROM:0002117C↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501874, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ret
# ---------------------------------------------------------------------------
loc_211C0:                              # CODE XREF: ROM:00020F78↑j
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                call    load_egg_game_over_environment
                ret
# ---------------------------------------------------------------------------
animate_some_tails:.long 0              # DATA XREF: ROM:loc_21114↑r
                .long 0
                .long 0
                .long 0
                .long animate_fang_tail
                .long animate_bark_hair
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
# ---------------------------------------------------------------------------
animate_fang_tail:                      # DATA XREF: ROM:000211E4↑o
                lda     0x1B803737, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mulo    0xC, 1, r15
                st      r15, (g11)[g12*1]
                ldt     byte_21320, r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                shlo    0xB, 0x19, r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     428, g0         # Fang tail base
                call    set_obj
                ldt     byte_2132C, r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     loc_5300, r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     429, g0         # Fang tail middle
                call    set_obj
                ldt     byte_21338, r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     430, g0         # Fang tail tip
                call    set_obj
                ret
# ---------------------------------------------------------------------------
byte_21320:     .byte 0x9A, 0x99, 0x99, 0xBE, 0, 0, 0, 0, 0, 0, 0, 0
byte_2132C:     .byte 0, 0, 0, 0, 0, 0, 0x80, 0x3F, 0, 0, 0, 0
byte_21338:     .byte 0, 0, 0, 0, 0, 0, 0x80, 0x3F, 0, 0, 0, 0
# ---------------------------------------------------------------------------
animate_bark_hair:                      # DATA XREF: ROM:000211E8↑o
                lda     0x1B803737, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mulo    0xC, 2, r15
                st      r15, (g11)[g12*1]
                lda     0xBE99999A, r4
                lda     displacement, r5
                lda     0xBE4CCCCD, r6
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                shlo    0xE, 3, r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     loc_E9FC+4, r3
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     2239, g0        # Barks hair
                call    set_obj
                ret
# ---------------------------------------------------------------------------
float_2_8:      .float 280.0            # DATA XREF: ROM:00020F88↑o
                .float 280.0
# =============== S U B R O U T I N E =======================================
send_st01_sea_thd:                      # CODE XREF: camera_init:loc_1F5BC↑p
                ldob    stage_num, r3   # Label from official source
                cmpobe  15, r3, send_st15_sea_thd
                cmpobe  14, r3, loc_213EC
                cmpobe  0, r3, loc_213EC
                cmpobne 13, r3, loc_21420
loc_213EC:                              # CODE XREF: send_st01_sea_thd+C↑j
                lda     displacement1, g3
                ld      frame_counter, g1
                shro    1, g1, g1
                lda     0x3F, r13
                and     r13, g1, g1
                addo    7, g1, g1
                lda     word_AF678, g0
                call    move_tpd_req
                st      g0, 0x501A44
loc_21420:                              # CODE XREF: send_st01_sea_thd+14↑j
                ret
# ---------------------------------------------------------------------------
send_st15_sea_thd:                      # CODE XREF: send_st01_sea_thd+8↑j
                lda     displacement1, g3 # Label from official source
                ld      frame_counter, g1
                shro    1, g1, g1
                lda     0x3F, r13
                and     r13, g1, g1
                addo    7, g1, g1
                lda     word_AF6DC, g0
                call    move_tpd_req
                st      g0, 0x501A44
                lda     word_AF728, g0
                call    move_tpd_req
                st      g0, 0x501A48
                ret
# End of function send_st01_sea_thd
# =============== S U B R O U T I N E =======================================
snc_eye_thd_set:                        # CODE XREF: camera_init+4D4↑p
                ldt     0x20C(g8), r8   # Label from official source
                ld      0x0(g7), r15
                bbs     0x13, r15, loc_2148C
                ld      0x0(g7), r15
                bbc     0x11, r15, loc_21498
                ldt     0x18(g13), r8
                b       loc_21498
# ---------------------------------------------------------------------------
loc_2148C:                              # CODE XREF: snc_eye_thd_set+8↑j
                ld      fa_camera, r3
                ldt     0x41C(r3), r8
loc_21498:                              # CODE XREF: snc_eye_thd_set+10↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1B003636, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mov     0x18, r15
                st      r15, (g11)[g12*1]
                lda     0x35006A6A, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r6
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x18003030, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r6
                notbit  0x1F, r6, r6
                lda     0x13002626, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ldis    (g11)[g12*1], r3
                lda     displacement, r7
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7  # g11 = 0x880000
                shlo    0xE, 3, r14
                subi    r7, r14, r7
                shri    3, r7, g1
                shri    3, r3, g2
                mov     g1, r7
                mov     g2, r8
                ldl     0x2A80(g7), r10 # r10 = P1_PARTS+0x2A80
                ld      0x2050(g7), r6  # r6 = P1_PARTS+0x2050 (Possible eye data)
                cmpobne 0, r6, loc_21588 # if r6 not 0, branch
                mov     0, r10
                mov     0, r11
loc_21588:                              # CODE XREF: snc_eye_thd_set+10C↑j
                ldob    0x1B0(g7), r6   # r6 = P1_CHAR_VALUE
                mov     r7, g1
                mov     r8, g2
                addo    0x1F, 1, r13    # r13 = 0x20 or 32
                mulo    r13, r6, r3
                lda     word_21734(r3), g0 # For Sonic r3 = 0x140, g0 = 0x21874
                ldob    0x2A72(g7), g4  # P1_PARTS+0x2A72
                mov     1, g3
                call    clip_medama     # medama = "eyeball"
                mov     r10, g0
                lda     displacement, g3
                call    move_tpd_req
                st      g0, 0x2058(g7)
                mov     r7, g1
                mov     r8, g2
                addo    0x1F, 1, r13
                mulo    r13, r6, r3
                lda     word_21734(r3), g0
                ldob    0x2A73(g7), g4
                mov     0, g3
                call    clip_medama     # medama = "eyeball"
                mov     r11, g0
                lda     displacement, g3
                call    move_tpd_req
                st      g0, 0x205C(g7)
                ret
# End of function snc_eye_thd_set
# =============== S U B R O U T I N E =======================================
# medama = "eyeball"
clip_medama:                            # CODE XREF: snc_eye_thd_set+140↑p
                mov     g4, r3          # Label from official source
                bbc     0, r3, loc_2161C
                subi    g1, 0, g1
loc_2161C:                              # CODE XREF: clip_medama+4↑j
                shlo    0xC, 1, r15
                addo    r15, g1, g1
                addo    r15, g2, g2
                lda     0x1FFF, r15
                and     r15, g1, g1
                and     r15, g2, g2
                xor     g3, r3, r3
                bbs     0, r3, loc_21668
                ldis    4(g0), r12
                ldis    6(g0), r13
                shlo    8, 0xF, r8
                shlo    8, 1, r10
                ldis    8(g0), r4
                ldis    10(g0), r5
                lda     12(g0), r11
                mov     0, r6
                mov     4, r7
                b       loc_21694
# ---------------------------------------------------------------------------
loc_21668:                              # CODE XREF: clip_medama+2C↑j
                ldis    6(g0), r12
                ldis    4(g0), r13
                subi    r12, 0, r12
                subi    r13, 0, r13
                ldis    0x1C(g0), r4
                ldis    0x1E(g0), r5
                lda     0x1C(g0), r11
                shlo    0xA, 3, r8
                shlo    8, 1, r10
                mov     4, r6
                mov     0, r7
loc_21694:                              # CODE XREF: clip_medama+54↑j
                shlo    0xC, 1, r15
                addi    r15, r12, r12
                cmpibge g1, r12, loc_216A4
                mov     r12, g1
loc_216A4:                              # CODE XREF: clip_medama+8C↑j
                addi    r13, r15, r13
                cmpible g1, r13, loc_216B0
                mov     r13, g1
loc_216B0:                              # CODE XREF: clip_medama+98↑j
                cmpible g1, r8, loc_21714
                mov     5, r3
loc_216B8:                              # CODE XREF: clip_medama+100↓j
                addi    r10, r8, r9
                movl    r4, r12
                subo    r6, r11, r11
                ldis    (r11), r4
                ldis    2(r11), r5
                addo    r7, r11, r11
                cmpibg  g1, r9, loc_21708
                subi    r12, r4, r15
                subi    r8, g1, r14
                addi    1, r14, r14
                muli    r14, r15, r14
                shri    8, r14, r14
                addi    r14, r12, r4
                subi    r13, r5, r15
                subi    r8, g1, r14
                addi    1, r14, r14
                muli    r14, r15, r14
                shri    8, r14, r14
                addi    r14, r13, r5
                b       loc_21714
# ---------------------------------------------------------------------------
loc_21708:                              # CODE XREF: clip_medama+C0↑j
                mov     r9, r8
                cmpdeco 1, r3, r3
                bl      loc_216B8
loc_21714:                              # CODE XREF: clip_medama:loc_216B0↑j
                shlo    0xC, 1, r15
                addi    r15, r5, r5
                cmpibge g2, r5, loc_21724
                mov     r5, g2
loc_21724:                              # CODE XREF: clip_medama+10C↑j
                addi    r15, r4, r4
                cmpible g2, r4, loc_21730
                mov     r4, g2
loc_21730:                              # CODE XREF: clip_medama+118↑j
                ret
# End of function clip_medama
# ---------------------------------------------------------------------------
word_21734:     .short 0, 0, 0xFF40, 0x380, 0, 0, 0x40, 0xFFC0
                .short 0x80, 0xFF80, 0x100, 0xFF00, 0x200, 0xFE00, 0, 0
tails_eye_data:.short 0, 0, 0xFF80, 0x380, 0, 0, 0x100, 0xFF00
                .short 0x200, 0xFE00, 0x100, 0xFF00, 0x80, 0xFF80, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 1, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
HONEY_EYE2:     .short 0, 0, 0xFFA0, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 1, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
sonic_eye_data:.short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
HONEY_EYE1:     .short 0, 1, 0xFF40, 0x200, 0x180, 0xFE80, 0x180, 0xFE80
                .short 0x180, 0xFE80, 0x180, 0xFE80, 0x180, 0xFE80, 0x180, 0xFE80
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0, 0, 0x40, 0xFFC0
                .short 0x80, 0xFF80, 0x100, 0xFF00, 0x200, 0xFE00, 0, 0
                .short 0, 0, 0xFF80, 0x380, 0, 0, 0x100, 0xFF00
                .short 0x200, 0xFE00, 0x100, 0xFF00, 0x80, 0xFF80, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 1, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFFA0, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 1, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0, 0, 0xFF40, 0x380, 0x200, 0xFE00, 0x200, 0xFE00
                .short 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00, 0x200, 0xFE00
# ---------------------------------------------------------------------------
loc_21DB4:                              # CODE XREF: camera_init+A04↑j
                ldob    0x500081, r3
                bbs     1, r3, loc_22330
                lda     0x501500, g0
                call    set_window      # g0 = two shorts
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_21E14
                st      r13, 0x0(r15)
                b       loc_21E20
# ---------------------------------------------------------------------------
loc_21E14:                              # CODE XREF: ROM:00021E08↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_21E20:                              # CODE XREF: ROM:00021E10↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     0x501500, g0
                call    set_window      # g0 = two shorts
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501844, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_21EA4
                st      r13, 0x0(r15)
                b       loc_21EB0
# ---------------------------------------------------------------------------
loc_21EA4:                              # CODE XREF: ROM:00021E98↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_21EB0:                              # CODE XREF: ROM:00021EA0↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501844, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     0x501500, g0
                call    set_window      # g0 = two shorts
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50184C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_21F34
                st      r13, 0x0(r15)
                b       loc_21F40
# ---------------------------------------------------------------------------
loc_21F34:                              # CODE XREF: ROM:00021F28↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_21F40:                              # CODE XREF: ROM:00021F30↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50184C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     0x501500, g0
                call    set_window      # g0 = two shorts
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_21FC4
                st      r13, 0x0(r15)
                b       loc_21FD0
# ---------------------------------------------------------------------------
loc_21FC4:                              # CODE XREF: ROM:00021FB8↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_21FD0:                              # CODE XREF: ROM:00021FC0↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     0x501500, g0
                call    set_window      # g0 = two shorts
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50185C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_22054
                st      r13, 0x0(r15)
                b       loc_22060
# ---------------------------------------------------------------------------
loc_22054:                              # CODE XREF: ROM:00022048↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_22060:                              # CODE XREF: ROM:00022050↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50185C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     0x501500, g0
                call    set_window      # g0 = two shorts
                ld      0x0(g13), r15
                bbc     1, r15, loc_22110
                ld      fa_rob0, g7
                lda     0x5010AC, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                ld      POLYGON, r15
                call    rob_disp
                ld      POLYGON, r14
                subo    r15, r14, r15
                ldos    _1P_ROB, r14
                addo    r14, r15, r15
                stos    r15, _1P_ROB
loc_22110:                              # CODE XREF: ROM:000220A0↑j
                ld      0x0(g13), r15
                bbc     2, r15, loc_22184
                ld      fa_rob1, g7
                lda     0x5010B8, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                ld      POLYGON, r15
                call    rob_disp
                ld      POLYGON, r14
                subo    r15, r14, r15
                ldos    _1P_ROB, r14
                addo    r14, r15, r15
                stos    r15, _1P_ROB
loc_22184:                              # CODE XREF: ROM:00022114↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501864, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_221CC
                st      r13, 0x0(r15)
                b       loc_221D8
# ---------------------------------------------------------------------------
loc_221CC:                              # CODE XREF: ROM:000221C0↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_221D8:                              # CODE XREF: ROM:000221C8↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501864, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     0x501500, g0
                call    set_window      # g0 = two shorts
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50186C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_2225C
                st      r13, 0x0(r15)
                b       loc_22268
# ---------------------------------------------------------------------------
loc_2225C:                              # CODE XREF: ROM:00022250↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_22268:                              # CODE XREF: ROM:00022258↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50186C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     0x501500, g0
                call    set_window      # g0 = two shorts
                call    begin_name_entry
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501874, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_222F0
                st      r13, 0x0(r15)
                b       loc_222FC
# ---------------------------------------------------------------------------
loc_222F0:                              # CODE XREF: ROM:000222E4↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_222FC:                              # CODE XREF: ROM:000222EC↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501874, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ret
# ---------------------------------------------------------------------------
loc_22330:                              # CODE XREF: ROM:00021DBC↑j
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                call    load_egg_game_over_environment
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_22388
                st      r13, 0x0(r15)
                b       loc_22394
# ---------------------------------------------------------------------------
loc_22388:                              # CODE XREF: ROM:0002237C↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_22394:                              # CODE XREF: ROM:00022384↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
loc_223C4:                              # CODE XREF: camera_init+99C↑j
                ldos    0x348(g13), r3
                addo    1, r3, r3
                shlo    7, 1, r4
                cmpobl  r3, r4, loc_223D8
                mov     0, r3
loc_223D8:                              # CODE XREF: ROM:000223D0↑j
                stos    r3, 0x348(g13)
                shlo    6, 1, r4
                cmpobl  r3, r4, loc_223EC
                subo    r4, r3, r3
                b       loc_223F0
# ---------------------------------------------------------------------------
loc_223EC:                              # CODE XREF: ROM:000223E0↑j
                mov     0, r3
loc_223F0:                              # CODE XREF: ROM:000223E8↑j
                shlo    0xA, r3, r3
                shlo    0xB, 5, r4
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     0, r4
                mov     r4, r5
                ld      BRIGHT, r6
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                stt     r4, (g11)[g12*1]
                ldt     (g11)[g12*1], r8
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                stt     r8, (g10)[g12*1]
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3E23D70A, r15
                st      r15, (g11)[g12*1]
                lda     0x4090F5C3, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501874, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_2250C
                st      r13, 0x0(r15)
                b       loc_22518
# ---------------------------------------------------------------------------
loc_2250C:                              # CODE XREF: ROM:00022500↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_22518:                              # CODE XREF: ROM:00022508↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501874, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ret
# ---------------------------------------------------------------------------
loc_2254C:                              # CODE XREF: camera_init+9DC↑j
                ld      0x506804, r15
                chkbit  0, r15
                bno     loc_1FB00
                call    ending_movie_disp
                ld      0x0(g13), r15
                bbs     0x14, r15, loc_2256C
                call    object_control
loc_2256C:                              # CODE XREF: ROM:00022564↑j
                ret
# ---------------------------------------------------------------------------
loc_22570:                              # CODE XREF: camera_init+8D8↑j
                lda     displacement, r4
                lda     displacement, r5
                lda     0x3F800000, r6
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                stt     r8, (g10)[g12*1]
                ldob    0xFA(g13), r3
                clrbit  0, r3, r3
                stob    r3, 0xFA(g13)
                ld      select0_flag, r15
                bbc     2, r15, loc_2286C
                ld      0x35C(g13), r3
                balx    (r3), g14
                lda     0x2800505, r15
                st      r15, (g11)[g12*1]
                lda     0x501128, r15
                ld      (g11)[g12*1], r14
                st      r14, 0x0(r15)
                ld      (g11)[g12*1], r14
                st      r14, 4(r15)
                ld      (g11)[g12*1], r14
                st      r14, 8(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0xC(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x10(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x14(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x18(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x1C(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x20(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x24(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x28(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x2C(r15)
                lda     word_55D0, g0
                call    set_window      # g0 = two shorts
                mov     0, g1
                lda     1679, g0        # Player 2 Character Select Platform
                call    set_obj
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50184C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_22698
                st      r13, 0x0(r15)
                b       loc_226A4
# ---------------------------------------------------------------------------
loc_22698:                              # CODE XREF: ROM:0002268C↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_226A4:                              # CODE XREF: ROM:00022694↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50184C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     word_55D0, g0
                call    set_window      # g0 = two shorts
                call    make_kage_matrix # "Shadow" (kage)
                call    sub_63AC4
                ld      fa_rob0, g7
                call    rob_kage_disp_inside # "Shadow" (kage)
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501844, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_2273C
                st      r13, 0x0(r15)
                b       loc_22748
# ---------------------------------------------------------------------------
loc_2273C:                              # CODE XREF: ROM:00022730↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_22748:                              # CODE XREF: ROM:00022738↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501844, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     word_55D0, g0
                call    set_window      # g0 = two shorts
                ld      fa_rob0, g7
                lda     0x5010AC, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                call    rob_area_check
                ld      POLYGON, r15
                call    rob_disp
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_2281C
                st      r13, 0x0(r15)
                b       loc_22828
# ---------------------------------------------------------------------------
loc_2281C:                              # CODE XREF: ROM:00022810↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_22828:                              # CODE XREF: ROM:00022818↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      POLYGON, r14
                subo    r15, r14, r15
                stos    r15, _1P_ROB
loc_2286C:                              # CODE XREF: ROM:000225B8↑j
                ld      select1_flag, r15
                bbc     2, r15, loc_22B28
                ld      0x360(g13), r3
                balx    (r3), g14
                lda     0x2800505, r15
                st      r15, (g11)[g12*1]
                lda     0x501158, r15
                ld      (g11)[g12*1], r14
                st      r14, 0x0(r15)
                ld      (g11)[g12*1], r14
                st      r14, 4(r15)
                ld      (g11)[g12*1], r14
                st      r14, 8(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0xC(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x10(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x14(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x18(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x1C(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x20(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x24(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x28(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x2C(r15)
                lda     word_55E8, g0
                call    set_window      # g0 = two shorts
                mov     0, g1
                lda     1700, g0        # Player 2 Character Select Platform
                call    set_obj
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501864, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_22954
                st      r13, 0x0(r15)
                b       loc_22960
# ---------------------------------------------------------------------------
loc_22954:                              # CODE XREF: ROM:00022948↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_22960:                              # CODE XREF: ROM:00022950↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501864, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     word_55E8, g0
                call    set_window      # g0 = two shorts
                call    make_kage_matrix # "Shadow" (kage)
                call    sub_63AC4
                ld      fa_rob1, g7
                call    rob_kage_disp_inside # "Shadow" (kage)
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50185C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_229F8
                st      r13, 0x0(r15)
                b       loc_22A04
# ---------------------------------------------------------------------------
loc_229F8:                              # CODE XREF: ROM:000229EC↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_22A04:                              # CODE XREF: ROM:000229F4↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50185C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     word_55E8, g0
                call    set_window      # g0 = two shorts
                ld      fa_rob1, g7
                lda     0x5010B8, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                call    rob_area_check
                ld      POLYGON, r15
                call    rob_disp
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_22AD8
                st      r13, 0x0(r15)
                b       loc_22AE4
# ---------------------------------------------------------------------------
loc_22AD8:                              # CODE XREF: ROM:00022ACC↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_22AE4:                              # CODE XREF: ROM:00022AD4↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      POLYGON, r14
                subo    r15, r14, r15
                stos    r15, _2P_ROB
loc_22B28:                              # CODE XREF: ROM:00022874↑j
                ret
# =============== S U B R O U T I N E =======================================
sub_22B2C:                              # DATA XREF: shifts_graphics_somehow+100↓o
                ld      fa_rob0, r12
                ld      select0_flag, r15
                bbc     1, r15, loc_22C00
                ldos    0x358(g13), r3
                lda     loc_FF00, r4
                addo    r3, r4, r3
                stos    r3, 0x358(g13)
                ldt     0x1F4(r12), r4
                lda     0x40A00000, r7
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                mulr    r7, r8, r8
                mulr    r7, r9, r7
                addr    r8, r4, r4
                subr    r7, r6, r6
                lda     0x40400000, r5
                shlo    0xC, 0xF, r7
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r7, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r3, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r4, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r5, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r6, r15
                st      r15, (g11)[g12*1]
                bx      (g14)
# ---------------------------------------------------------------------------
loc_22C00:                              # CODE XREF: sub_22B2C+10↑j
                lda     sub_22C10, r15
                st      r15, 0x35C(g13)
                bx      (g14)
# End of function sub_22B2C
# =============== S U B R O U T I N E =======================================
sub_22C10:                              # DATA XREF: sub_22B2C:loc_22C00↑o
                ld      fa_rob0, r12
                mov     0, r15
                stis    r15, 0x364(g13)
                mov     0x1E, r3
                shlo    0xC, 3, r4
                ldos    0x358(g13), r5
                cmpoble r4, r5, loc_22C34
                setbit  0x10, r5, r5
loc_22C34:                              # CODE XREF: sub_22C10+1C↑j
                subo    r4, r5, r4
                divo    r3, r4, r4
                shlo    0x10, 1, r5
                subo    r4, r5, r4
                stos    r4, 0x368(g13)
                lda     0x41F00000, r3
                ldt     0x1F4(r12), r4
                ldt     0x20C(r12), r8
                lda     0x3E99999A, r11
                addr    r9, r11, r9
                subr    r4, r8, r4
                subr    r5, r9, r5
                subr    r6, r10, r6
                divr    r3, r4, r4
                divr    r3, r5, r5
                divr    r3, r6, r6
                stt     r4, 0x36C(g13)
                lda     0xBDCCCCCD, r15
                st      r15, 0x378(g13)
                lda     0xBD89374C, r15
                st      r15, 0x37C(g13)
                lda     loc_22CA4, r15
                st      r15, 0x35C(g13)
loc_22CA4:                              # DATA XREF: sub_22C10+88↑o
                ld      fa_rob0, r12
                ldos    0x364(g13), r3
                addo    1, r3, r3
                cmpobe  0x1F, r3, loc_22DC8
                stos    r3, 0x364(g13)
                cvtir   r3, r7
                ldos    0x358(g13), r3
                ldos    0x368(g13), r4
                addo    r3, r4, r3
                stos    r3, 0x358(g13)
                ldt     0x1F4(r12), r4
                ldt     0x36C(g13), r8
                mulr    r7, r8, r8
                mulr    r7, r9, r9
                mulr    r7, r10, r10
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                lda     0x40A00000, r8
                ld      0x378(g13), r9
                mulr    r7, r9, r9
                addr    r8, r9, r8
                lda     0x40400000, r9
                ld      0x37C(g13), r10
                mulr    r7, r10, r10
                addr    r9, r10, r9
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r10
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                mulr    r8, r10, r10
                mulr    r8, r11, r11
                addr    r10, r4, r4
                subr    r11, r6, r6
                subr    r9, r5, r7
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r7, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r3, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r4, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r9, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r6, r15
                st      r15, (g11)[g12*1]
                bx      (g14)
# ---------------------------------------------------------------------------
loc_22DC8:                              # CODE XREF: sub_22C10+A4↑j
                lda     loc_22DD4, r15
                st      r15, 0x35C(g13)
loc_22DD4:                              # DATA XREF: sub_22C10:loc_22DC8↑o
                shlo    0xC, 3, r3
                ld      fa_rob0, r12
                ldt     0x20C(r12), r4
                lda     0x3E99999A, r7
                addr    r5, r7, r5
                lda     0x40000000, r7
                lda     0x3F800000, r10
loc_22E00:                              # DATA XREF: MAIN_DATA:028B93C8↓o
                subr    r10, r5, r11
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                mulr    r7, r8, r8
                mulr    r7, r9, r7
                addr    r8, r4, r4
                subr    r7, r6, r6
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r11, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r3, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r4, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r10, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r6, r15
                st      r15, (g11)[g12*1]
                bx      (g14)
# End of function sub_22C10
# =============== S U B R O U T I N E =======================================
sub_22EB0:                              # DATA XREF: shifts_graphics_somehow+10C↓o
                ld      select1_flag, r15
                bbc     1, r15, loc_22F78
                ldos    0x35A(g13), r3
                shlo    8, 1, r4
                addo    r3, r4, r3
                stos    r3, 0x35A(g13)
                ldt     0x1F4(g7), r4
                lda     0x40A00000, r7
                lda     0x10802121, r15
loc_22EE0:                              # DATA XREF: MAIN_DATA:028BF3E4↓o
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r8
loc_22EEC:                              # DATA XREF: MAIN_DATA:028C0080↓o
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                mulr    r7, r8, r8
                mulr    r7, r9, r7
                addr    r8, r4, r4
                subr    r7, r6, r6
                lda     0x40400000, r5
                shlo    0xC, 0xF, r7
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r7, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r3, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r4, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r5, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r6, r15
                st      r15, (g11)[g12*1]
                bx      (g14)
# ---------------------------------------------------------------------------
loc_22F78:                              # CODE XREF: sub_22EB0+8↑j
                lda     sub_22F88, r15
                st      r15, 0x360(g13)
                bx      (g14)
# End of function sub_22EB0
# =============== S U B R O U T I N E =======================================
sub_22F88:                              # DATA XREF: sub_22EB0:loc_22F78↑o
                ld      fa_rob1, r12
                mov     0, r15
                stis    r15, 0x366(g13)
                mov     0x1E, r3
                shlo    0xC, 0xF, r4
                ldos    0x35A(g13), r5
                cmpobge r4, r5, loc_22FAC
                setbit  0x10, r4, r4
loc_22FAC:                              # CODE XREF: sub_22F88+1C↑j
                subo    r5, r4, r4
                divo    r3, r4, r4
                stos    r4, 0x36A(g13)
                lda     0x41F00000, r3
                ldt     0x1F4(r12), r4
                ldt     0x20C(r12), r8
                lda     0x3E99999A, r11
                addr    r9, r11, r9
                subr    r4, r8, r4
                subr    r5, r9, r5
                subr    r6, r10, r6
                divr    r3, r4, r4
                divr    r3, r5, r5
                divr    r3, r6, r6
                stt     r4, 0x380(g13)
                lda     0xBDCCCCCD, r15
                st      r15, 0x38C(g13)
                lda     0xBD89374C, r15
                st      r15, 0x390(g13)
                lda     loc_23014, r15
                st      r15, 0x360(g13)
loc_23014:                              # DATA XREF: sub_22F88+80↑o
                ld      fa_rob1, r12
                ldos    0x366(g13), r3
                addo    1, r3, r3
                cmpobe  0x1F, r3, loc_23138
                stos    r3, 0x366(g13)
                cvtir   r3, r7
                ldos    0x35A(g13), r3
                ldos    0x36A(g13), r4
                addo    r3, r4, r3
                stos    r3, 0x35A(g13)
                ldt     0x1F4(r12), r4
                ldt     0x380(g13), r8
                mulr    r7, r8, r8
                mulr    r7, r9, r9
                mulr    r7, r10, r10
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                lda     0x40A00000, r8
                ld      0x38C(g13), r9
                mulr    r7, r9, r9
                addr    r8, r9, r8
                lda     0x40400000, r9
                ld      0x390(g13), r10
                mulr    r7, r10, r10
                addr    r9, r10, r9
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r10
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                mulr    r8, r10, r10
                mulr    r8, r11, r11
                addr    r10, r4, r4
                subr    r11, r6, r6
                subr    r9, r5, r7
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r7, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r3, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r4, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r9, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r6, r15
                st      r15, (g11)[g12*1]
                bx      (g14)
# ---------------------------------------------------------------------------
loc_23138:                              # CODE XREF: sub_22F88+9C↑j
                lda     loc_23144, r15
                st      r15, 0x360(g13)
loc_23144:                              # DATA XREF: sub_22F88:loc_23138↑o
                shlo    0xC, 0xF, r3
                ld      fa_rob1, r12
                ldt     0x20C(r12), r4
                lda     0x3E99999A, r7
                addr    r5, r7, r5
                lda     0x40000000, r7
                lda     0x3F800000, r10
                subr    r10, r5, r11
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                mulr    r7, r8, r8
                mulr    r7, r9, r7
                addr    r8, r4, r4
                subr    r7, r6, r6
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r11, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r3, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r4, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r10, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, r6, r15
                st      r15, (g11)[g12*1]
                bx      (g14)
# End of function sub_22F88
# =============== S U B R O U T I N E =======================================
calc_effect_matrix:                     # CODE XREF: camera_init+CA0↑p
                lda     0x800101, r15 # Label from official source
                st      r15, (g11)[g12*1]
                lda     0x6000C0C, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x21804343, r15
                st      r15, (g11)[g12*1]
                mov     0, r15
                st      r15, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r4
                lda     0xBF800000, r5
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x22804545, r15
                st      r15, (g11)[g12*1]
                mov     0, r15
                st      r15, (g11)[g12*1]
                lda     0x2800505, r15
                st      r15, (g11)[g12*1]
                lda     0x501960, r15
                ld      (g11)[g12*1], r14
                st      r14, 0x0(r15)
                ld      (g11)[g12*1], r14
                st      r14, 4(r15)
                ld      (g11)[g12*1], r14
                st      r14, 8(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0xC(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x10(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x14(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x18(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x1C(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x20(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x24(r15)
                ld      (g11)[g12*1], r14
loc_23320:                              # DATA XREF: MAIN_DATA:028D5E5C↓o
                st      r14, 0x28(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x2C(r15)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                ldis    VECTER_X, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                ldis    VECTER_X, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x3F800000, r14
                divr    r3, r14, r5
                mulr    r5, r4, r3
                ld      stage_soko, r6
                notbit  0x1F, r6, r7
                mulr    r3, r7, r7
                shlo    0xF, 1, r13
                ldis    VECTER_Y, r14
                addi    r13, r14, r4
                shlo    0xE, 1, r13
                ldis    VECTER_X, r14
                subi    r13, r14, r8
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], g0
                notbit  0x1F, g0, g0
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                stl     g0, 0x501990
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r4, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x22804545, r15
                st      r15, (g11)[g12*1]
                mov     0, r15
                st      r15, (g11)[g12*1]
                lda     0x2800505, r15
                st      r15, (g11)[g12*1]
                lda     0x501900, r15
                ld      (g11)[g12*1], r14
                st      r14, 0x0(r15)
                ld      (g11)[g12*1], r14
                st      r14, 4(r15)
                ld      (g11)[g12*1], r14
                st      r14, 8(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0xC(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x10(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x14(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x18(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x1C(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x20(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x24(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x28(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x2C(r15)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r4, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x22804545, r15
                st      r15, (g11)[g12*1]
                mov     0, r15
                st      r15, (g11)[g12*1]
                lda     0x2800505, r15
                st      r15, (g11)[g12*1]
                lda     0x501930, r15
                ld      (g11)[g12*1], r14
                st      r14, 0x0(r15)
                ld      (g11)[g12*1], r14
                st      r14, 4(r15)
                ld      (g11)[g12*1], r14
                st      r14, 8(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0xC(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x10(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x14(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x18(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x1C(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x20(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x24(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x28(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x2C(r15)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# End of function calc_effect_matrix
# =============== S U B R O U T I N E =======================================
ken_camera:                             # CODE XREF: camera_init+A24↑p
                ld      0x509000, r15 # Label from Virtua Fighter 2 source
                bbc     2, r15, loc_23688
                lda     0x2000404, r15
                st      r15, (g11)[g12*1]
                lda     0x509324, r15
                ld      0x0(r15), r14
                st      r14, (g11)[g12*1]
                ld      4(r15), r14
                st      r14, (g11)[g12*1]
                ld      8(r15), r14
                st      r14, (g11)[g12*1]
                ld      0xC(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x10(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x14(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x18(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x1C(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x20(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x24(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x28(r15), r14
                st      r14, (g11)[g12*1]
                ld      0x2C(r15), r14
                st      r14, (g11)[g12*1]
loc_23688:                              # CODE XREF: ken_camera+8↑j
                ret
# End of function ken_camera
# ---------------------------------------------------------------------------
poly_test_camera:                       # CODE XREF: camera_init+194↑j
                lda     0x1800303, r15  # Label from Virtua Fighter 2 source
                st      r15, (g11)[g12*1]
                lda     focus_dist_x, r14
                st      g14, mmode
                lda     0x909, g14
                st      g14, 0x90(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                lda     0x50108C, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     mem_poly_test_xpos, r12
                stt     r12, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x50808A, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x508088, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x50808C, r15
                st      r15, (g11)[g12*1]
                ldos    mem_poly_test_No_disp, r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                ld      0x501010, r4
                addo    1, r4, r4
                st      r4, 0x501010
                lda     0x20E0004[r3*16], r11
                ld      INTERUPT_FLAGS_HELD, r15
                bbc     0x11, r15, loc_237BC
                lda     0x647F004[r3*16], r11
loc_237BC:                              # CODE XREF: ROM:000237B0↑j
                ldq     (r11), r8
                mov     0, g1
                lda     0x3C007878, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                lda     0x48(r15), r14
                st      r14, 0x1008(g10)
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                stq     r8, (g11)[g12*1]
                ld      P2_POLYGON, r15
                st      r15, (g11)[g12*1]
                ld      POLYGON, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, P2_POLYGON
                ld      (g11)[g12*1], r15
                st      r15, POLYGON
                ld      0x0(g13), r15
                clrbit  6, r15, r15
                st      r15, 0x0(g13)
                ret
# ---------------------------------------------------------------------------
loc_23830:                              # CODE XREF: camera_init+19C↑j
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     focus_dist_x, r14
                st      g14, mmode
                lda     0x909, g14
                st      g14, 0x90(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                lda     0x50108C, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     db_parts_xpos, r12
                stt     r12, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x50809E, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x50809C, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x5080A0, r15
                st      r15, (g11)[g12*1]
                ld      0x5080A8, r10
                ldos    6(r10), r11
                mov     0, g1
                lda     (r11), g0
                call    set_obj
                ld      0x5080B8, r14
                cmpobe  0, r14, loc_23970
                ld      0x5080AC, r11
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                mov     4, r11
                mov     0, g1
                lda     (r11), g0
                call    set_obj
loc_23970:                              # CODE XREF: ROM:0002393C↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     db_parts_xpos, r4
                ld      0x20(r10), r7
                addr    r7, r5, r8
                st      r8, db_parts_yofs
                notbit  0x1F, r7, r5
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3CA3D70A, r11
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                mov     5, r11
                mov     0, g1
                lda     (r11), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x0(g13), r15
                clrbit  0x19, r15, r15
                st      r15, 0x0(g13)
                ret
# ---------------------------------------------------------------------------
                ld      fa_rob0, g7     # Unreachable code
                ld      ROB0, g2
                call    calc_rob_light_sub
                st      g2, ROB0
                stos    g3, ROB0_ZANG
                ld      fa_rob1, g7
                ld      ROB1, g2
                call    calc_rob_light_sub
                st      g2, ROB1
                stos    g3, ROB1_ZANG
                ret
# =============== S U B R O U T I N E =======================================
calc_rob_light_sub:                     # CODE XREF: ROM:00023A18↑p
                mov     0, g3           # Label from Virtua Fighter 2 source
                ld      ROB_LENG, r5
                subr    r5, g0, r8
                addr    r5, g1, r9
                ld      0x1F4(g7), r4
                subr    r8, r4, r6
                bbs     0x1F, r6, loc_23B58
                subr    r4, r9, r7
                bbs     0x1F, r7, loc_23B58
                lda     0x40000000, r3
                mulr    r5, r3, r4
                mov     r6, r5
                cmpr    r6, r7
                ble     loc_23A98
                mov     r7, r5
loc_23A98:                              # CODE XREF: calc_rob_light_sub+3C↑j
                subr    r5, r4, r3
                bbc     0x1F, r3, loc_23AD8
                subr    r8, r9, r9
                lda     0x3F000000, r15
                mulr    r9, r15, r9
                subr    r5, r9, r3
                subr    r4, r9, r4
                ld      ROB_LIMIT, r8
                ld      ROB_LIMIT2, r9
                ldis    0x5010EC, r10
                shlo    0xE, 1, r11
                b       loc_23AF4
# ---------------------------------------------------------------------------
loc_23AD8:                              # CODE XREF: calc_rob_light_sub+48↑j
                lda     0x3F800000, r8
                ld      ROB_LIMIT, r9
                mov     0, r10
                ldis    0x5010EC, r11
loc_23AF4:                              # CODE XREF: calc_rob_light_sub+80↑j
                divr    r4, r3, r4
                subr    r9, r8, r3
                mulr    r4, r3, r3
                addr    r9, r3, r3
                mulr    g2, r3, g2
                scanbit r10, r14
                subi    r14, 0x17, r15
                clrbit  r14, r10, r10
                shlo    r15, r10, r10
                lda     0x7F(r14), r14
                shlo    0x17, r14, r14
                or      r10, r14, r10
                scanbit r11, r14
                subi    r14, 0x17, r15
                clrbit  r14, r11, r11
                shlo    r15, r11, r11
                lda     0x7F(r14), r14
                shlo    0x17, r14, r14
                or      r11, r14, r11
                subr    r11, r10, r3
                mulr    r4, r3, r3
                addr    r11, r3, r3
                cvtri   r3, g3
                cmpobe  r5, r6, loc_23B58
                subi    g3, 0, g3
loc_23B58:                              # CODE XREF: calc_rob_light_sub+1C↑j
                ret
# End of function calc_rob_light_sub
# =============== S U B R O U T I N E =======================================
change_scene:                           # CODE XREF: ROM:00006C1C↑p
                ld      fa_rob0, r3     # Label from Fighting Vipers source
                ld      fa_rob1, r4
                lda     0x3CCE9ED5, r15
                st      r15, 0x50A000
                lda     0x3F800000, r15
                st      r15, 0x50A004
                call    call_set_default_rob_light
                lda     5000, r15
                st      r15, POLYGON_LIMIT
                ldob    stage_num, r12
                shlo    8, r12, r4      # Takes level and adds two 0's at the end; 0x01 becomes 0x0100 etc...
                lda     stage_data(r4), r14 # Each block of level data is 256 bytes
                lda     0x504800, r13
                shlo    6, 1, r12       # r12 = 0x40 or 64
load_stage_data:                        # CODE XREF: change_scene+78↓j
                ld      (r14), r15      # if r14 = 8F3D0, r15 = 0x8444000
                st      r15, (r13)      # Stage Floor Size
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      load_stage_data
                ldob    stage_NUM(r4), r5
                stob    r5, stage
                ld      stage_bright(r4), r5
                ldos    stage_vecter_x(r4), r6
                ldos    stage_vecter_y(r4), r7
                st      r5, BRIGHT
                stos    r6, VECTER_X
                stos    r7, VECTER_Y
                call    stage_disp
                ldos    word_8F3DC(r4), g0
                ldos    word_8F3DE(r4), g1
                call    send_tex_stage
                lda     displacement, r15
                st      r15, stage_xpos
                lda     displacement, r15
                st      r15, stage_ypos
                lda     displacement, r15
                st      r15, stage_zpos
                mov     0, r15
                stis    r15, 0x50A020
                mov     0, r15
                stis    r15, 0x50A022
                mov     0, r15
                stis    r15, 0x50A024
                mov     0, r15
                stis    r15, 0x50A026
                call    sub_7E0A0       # return
                call    essential_color_handling # just return for disco mode
                call    sub_29110
                call    sub_29350
                ld      mod_fa_obj0, r5
                mov     0, r15
                stis    r15, 6(r5)
                ldob    stage_num, r10
                shlo    8, r10, r4
                ld      off_8F484(r4), r15 # load mod_fa_obj9 data
                st      r15, 0x40(r5)
                mov     1, r4
                ld      mod_fa_obj0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                ret
# End of function change_scene
# =============== S U B R O U T I N E =======================================
set_default_rob_light:                  # CODE XREF: call_set_default_rob_light↓p
                addo    0x1F, 0x15, r5  # Label from Fighting Vipers source
                lda     rob_light_sonic, r6
                lda     0x3F800000, r7
loc_23CF8:                              # CODE XREF: set_default_rob_light+20↓j
                st      r7, (r6)
                addo    4, r6, r6
                cmpdeco 1, r5, r5
                bl      loc_23CF8
                ret
# End of function set_default_rob_light
# =============== S U B R O U T I N E =======================================
call_set_default_rob_light:             # CODE XREF: change_scene+30↑p
                call    set_default_rob_light
                ret
# End of function call_set_default_rob_light
# =============== S U B R O U T I N E =======================================
stage_disp:                             # CODE XREF: SEL_DSP+628↑p
                ldob    stage_num, r12  # Label from Virtua Fighter 2 source
                shlo    8, r12, r4
                ldob    stage_RED(r4), r5
                ldob    stage_GREEN(r4), r6
                ldob    stage_BLUE(r4), r7
                stob    r5, RED
                stob    r6, GREEN
                stob    r7, BLUE
                call    chg_pol_color_req
                ret
# End of function stage_disp
# =============== S U B R O U T I N E =======================================
rob_low_disp:                           # CODE XREF: camera_init+CF8↑p
                mov     g3, r9          # Label from official source
                ldob    0xFA(g13), r3
                setbit  0, r3, r3
                stob    r3, 0xFA(g13)
                ld      0x0(g13), r15
                bbc     1, r15, _uk_player2
                ld      fa_rob0, g7
                call    rob_area_check
                ldt     0x1F4(g7), g0
                call    direction_check
                cmpobne r9, g3, _uk_player2
                lda     0x5010AC, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                ld      POLYGON, r15
                call    rob_disp
                ld      POLYGON, r14
                subo    r15, r14, r15
                stos    r15, _1P_ROB
                call    rob_kage_disp_outside # "Shadow" (kage)
_uk_player2:                            # CODE XREF: rob_low_disp+14↑j
                ld      0x0(g13), r15
                bbc     2, r15, loc_23E60
                ld      fa_rob1, g7
                call    rob_area_check
                ldt     0x1F4(g7), g0
                call    direction_check
                cmpobne r9, g3, loc_23E60
                lda     0x5010B8, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                ld      POLYGON, r15
                call    rob_disp
                ld      POLYGON, r14
                subo    r15, r14, r15
                stos    r15, _2P_ROB
                call    rob_kage_disp_outside # "Shadow" (kage)
loc_23E60:                              # CODE XREF: rob_low_disp+90↑j
                lda     0x50108C, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                ret
# End of function rob_low_disp
# =============== S U B R O U T I N E =======================================
direction_check:                        # CODE XREF: rob_low_disp+28↑p
                mov     0, g3           # Label from official source
                ld      stage_x, r10
                setbit  0x1F, r10, r11
                ldob    0x500288, r3
                bbs     0, r3, loc_23EC4
                cmpr    g2, r10
                bl      loc_23EC4
                mov     1, g3
loc_23EC4:                              # CODE XREF: direction_check+18↑j
                bbs     2, r3, loc_23ED4
                cmpr    g2, r11
                bg      loc_23ED4
                mov     1, g3
loc_23ED4:                              # CODE XREF: direction_check:loc_23EC4↑j
                bbs     1, r3, loc_23EE4
                cmpr    g0, r11
                bg      loc_23EE4
                mov     1, g3
loc_23EE4:                              # CODE XREF: direction_check:loc_23ED4↑j
                bbs     3, r3, loc_23EF4
                cmpr    g0, r10
                bl      loc_23EF4
                mov     1, g3
loc_23EF4:                              # CODE XREF: direction_check:loc_23EE4↑j
                ret
# End of function direction_check
# =============== S U B R O U T I N E =======================================
laser_effect_disp:                      # CODE XREF: camera_init+184C↑p
                ld      fa_rob0, g7     # Label from official source
                call    laser_effect_animate
                ld      fa_rob1, g7
                call    laser_effect_animate
                ret
# End of function laser_effect_disp
# =============== S U B R O U T I N E =======================================
laser_effect_animate:                   # CODE XREF: laser_effect_disp+8↑p
                lda     470, r13        # Metal Sonic laser animation
                ldos    0x1A8(g7), r14  # p1_motion_num or p2_motion_num
                cmpobne r13, r14, loc_23FE0 # branch if motion_num not equal to 470
                ld      0x1A4(g7), r15  # p1_mot_kind or p2_mot_kind
                bbs     2, r15, loc_23FE0
                ld      frame_counter, r3
                and     7, r3, r3
                ldos    metal_sonic_laser_windup_anim[r3*2], r8
                cmpobne 0, r8, loc_23F44
                ret
# ---------------------------------------------------------------------------
loc_23F44:                              # CODE XREF: laser_effect_animate+28↑j
                ldt     0x1F4(g7), r4
                ldis    0x26(g7), r7
                ld      0x804(g7), r15
                bbc     0x14, r15, loc_23F5C
                shlo    0xF, 1, r13
                addi    r13, r7, r7
loc_23F5C:                              # CODE XREF: laser_effect_animate+3C↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x40200000, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_23FE0:                              # CODE XREF: laser_effect_animate+8↑j
                ret
# End of function laser_effect_animate
# =============== S U B R O U T I N E =======================================
guard_barrier_effect_disp:              # CODE XREF: camera_init:loc_20958↑p
                ld      fa_rob0, g7     # Label from official source
                call    barrier_break1
                call    barrier_break2
                ld      fa_rob1, g7
                call    barrier_break1
                call    barrier_break2
                ret
# End of function guard_barrier_effect_disp
# =============== S U B R O U T I N E =======================================
barrier_break2:                         # CODE XREF: guard_barrier_effect_disp+C↑p
                ld      0xC70(g7), r14  # p1_barriers or p2_barriers
                cmpobe  0, r14, loc_24014
                ret
# ---------------------------------------------------------------------------
loc_24014:                              # CODE XREF: barrier_break2+4↑j
                ld      0xC6C(g7), r14  # P1_PARTS+0xC6C
                cmpibge 0, r14, loc_24068 # if equal or greater than 0
                ld      0xC6C(g7), r3
                ldos    barrier_breaking_anim_2[r3*2], r8
                lda     0x40000000, g5
                b       loc_24060
# End of function barrier_break2
# =============== S U B R O U T I N E =======================================
barrier_break1:                         # CODE XREF: guard_barrier_effect_disp+8↑p
                ld      0xC6C(g7), r14
                cmpibge 0, r14, loc_24068
                subo    1, 0, r13
                ld      0xC6C(g7), r14
                addi    r13, r14, r15
                st      r15, 0xC6C(g7)
                ld      0xC6C(g7), r3
                ldos    barrier_breaking_anim[r3*2], r8
                lda     0x3F99999A, g5
loc_24060:                              # CODE XREF: barrier_break2+28↑j
                cmpobne 0, r8, animate_barrier
                ret
# ---------------------------------------------------------------------------
loc_24068:                              # CODE XREF: barrier_break2+10↑j
                ld      0x1A4(g7), r15
                bbc     0xD, r15, loc_24138
                ld      0x1A4(g7), r15
                bbs     8, r15, loc_24080
                ld      0x1A4(g7), r15
                bbs     1, r15, loc_2413C
loc_24080:                              # CODE XREF: barrier_break1+40↑j
                ld      frame_counter, r3
                and     7, r3, r3
                ldos    barrier_anim[r3*2], r8
                cmpobne 0, r8, animate_barrier
                ret
# ---------------------------------------------------------------------------
animate_barrier:                        # CODE XREF: barrier_break1:loc_24060↑j
                ldt     0x1F4(g7), r4
                ldis    0x26(g7), r7
                ld      0x804(g7), r15
                bbc     0x14, r15, loc_240B4
                shlo    0xF, 1, r13
                addi    r13, r7, r7
loc_240B4:                              # CODE XREF: barrier_break1+74↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x3F99999A, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_24138:                              # CODE XREF: barrier_break1+38↑j
                ret
# ---------------------------------------------------------------------------
loc_2413C:                              # CODE XREF: barrier_break1+48↑j
                ldos    0x1AA(g7), r3
                cmpobge 0xF, r3, loc_24148
                mov     0xF, r3
loc_24148:                              # CODE XREF: barrier_break1+10C↑j
                ldos    init_display_barrier_anim[r3*2], r8
                cmpobne 0, r8, animate_barrier
                ret
# End of function barrier_break1
# ---------------------------------------------------------------------------
un_old_animate_barrier:                 # unreachable code
                ldt     0x1F4(g7), r4
                ldis    0x26(g7), r7
                ld      0x804(g7), r15
                bbc     0x14, r15, loc_24170
                shlo    0xF, 1, r13
                addi    r13, r7, r7
loc_24170:                              # CODE XREF: ROM:00024164↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      g5, (g11)[g12*1]
                st      g5, (g11)[g12*1]
                st      g5, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# =============== S U B R O U T I N E =======================================
guard_attack_effect_disp:               # CODE XREF: camera_init+1660↑p
                ld      fa_rob0, g7     # Label from official source
                ld      0x70C(g7), r15
                bbs     0xA, r15, loc_24208
                ld      0x1A4(g7), r15
                bbc     0x1A, r15, loc_242A4
loc_24208:                              # CODE XREF: guard_attack_effect_disp+C↑j
                ldt     0x1F4(g7), r4
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ldos    0x1AA(g7), r3
                cmpobl  0xF, r3, loc_24298
                ldos    blank_animation[r3*2], r8
                ldis    0x26(g13), r5
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x3F000000, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_24298:                              # CODE XREF: guard_attack_effect_disp+44↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_242A4:                              # CODE XREF: guard_attack_effect_disp+14↑j
                ld      fa_rob1, g7
                ld      0x70C(g7), r15
                bbs     0xA, r15, loc_242BC
                ld      0x1A4(g7), r15
                bbc     0x1A, r15, loc_24358
loc_242BC:                              # CODE XREF: guard_attack_effect_disp+C0↑j
                ldt     0x1F4(g7), r4
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ldos    0x1AA(g7), r3
                cmpobl  0xF, r3, loc_2434C
                ldos    blank_animation[r3*2], r8
                ldis    0x26(g13), r5
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x3F000000, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_2434C:                              # CODE XREF: guard_attack_effect_disp+F8↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_24358:                              # CODE XREF: guard_attack_effect_disp+C8↑j
                ret
# End of function guard_attack_effect_disp
# =============== S U B R O U T I N E =======================================
sub_2435C:                              # CODE XREF: interrupt_wait_b+DC↑p
                ld      debug_flag, r15
                bbs     5, r15, loc_243A8
                ldob    stage_num, r12  # if 0; r4 will be 0; r10 will be 2442C; g1 will be 0;
                shlo    8, r12, r4
                ld      word_8F488(r4), r10
                ldos    word_8F3DE(r4), g1
loc_24384:                              # CODE XREF: sub_2435C+48↓j
                ldos    (r10), g0
                ldos    2(r10), r3
                cmpobe  0, g0, loc_243A8
                addo    4, r10, r10
                ld      frame_counter, g2
                shro    r3, g2, g2
                call    sub_243AC
                b       loc_24384
# ---------------------------------------------------------------------------
loc_243A8:                              # CODE XREF: sub_2435C+8↑j
                ret
# End of function sub_2435C
# =============== S U B R O U T I N E =======================================
sub_243AC:                              # CODE XREF: sub_2435C+44↑p
                shlo    9, g0, r10
                shlo    6, 0x15, r13
                mulo    r13, g1, r3
                ld      0x2101010, r13
                addi    r13, r3, r7
                subo    0xE, g0, r3
                shlo    5, 3, r13
                mulo    r13, r3, r3
                addo    r3, r7, r7
                lda     dword_2444C, r8
                mov     3, r3
loc_243E0:                              # CODE XREF: sub_243AC+78↓j
                ldl     (r8), r4
                addo    8, r8, r8
                addo    r4, r10, r11
                mov     g2, r6
                mov     0x10, r9
loc_243F4:                              # CODE XREF: sub_243AC+68↓j
                and     0xF, r6, r6
                ldos    0x00(r7)[r6*2], r12
                addo    1, r6, r6
                ldos    (r5)[r12*2], r13
                stos    r13, (r11)
                addo    2, r11, r11
                cmpdeco 1, r9, r9
                bl      loc_243F4
                addo    0x1F, 1, r13
                addi    r13, r7, r7
                cmpdeco 1, r3, r3
                bl      loc_243E0
                ret
# End of function sub_243AC
# ---------------------------------------------------------------------------
dword_2442C:    .long 0x20012           # DATA XREF: RAMBASE:005048B8↓o
                .long 0x13
                .long 0
                .long 0x1000E
                .long 0x10010
                .long 0x10013
                .long 0
                .long 0
dword_2444C:    .long 0x1810060         # DATA XREF: sub_243AC+28↑o
                .long ARRAY_NUM_RED
                .long 0x1814060
                .long ARRAY_NUM_GREEN
                .long 0x1818060
                .long ARRAY_NUM_BLUE
# =============== S U B R O U T I N E =======================================
smoke_pattern_put:                      # CODE XREF: camera_init+1650↑p
                mov     0x10, r10       # Label from official source
                mov     0, r11
                ld      0x500890, r9
loc_24474:                              # CODE XREF: smoke_pattern_put+D4↓j
                lda     0x44(r9), r8
                shlo    1, r11, r12
                addo    r12, r8, r8
                ldos    (r8), r8
                cmpobe  0, r8, loc_24530
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x74(r9), r3
                mulo    0xC, r11, r12
                addo    r3, r12, r4
                ld      (r4), r5
                ld      4(r4), r6
                ld      8(r4), r7
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x134(r9), r3
                shlo    2, r11, r12
                addo    r3, r12, r4
                ld      (r4), r4
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ldis    0x26(g13), r5
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_24530:                              # CODE XREF: smoke_pattern_put+20↑j
                addo    1, r11, r11
                cmpdeco 1, r10, r10
                bl      loc_24474
                mov     0x10, r10
                mov     0, r11
                ld      0x500894, r9
loc_2454C:                              # CODE XREF: smoke_pattern_put+1B4↓j
                lda     0x44(r9), r8
                shlo    1, r11, r12
                addo    r12, r8, r8
                ldos    (r8), r8
                cmpobe  0, r8, loc_24610
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x74(r9), r3
                mulo    0xC, r11, r12
                addo    r3, r12, r4
                ld      (r4), r5
                ld      4(r4), r6
                ld      8(r4), r7
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x134(r9), r3
                shlo    2, r11, r12
                addo    r3, r12, r4
                ld      (r4), r4
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ldis    0x26(g13), r5
                shlo    0xE, 1, r3
                addo    r3, r5, r5
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_24610:                              # CODE XREF: smoke_pattern_put+F8↑j
                addo    1, r11, r11
                cmpdeco 1, r10, r10
                bl      loc_2454C
                ret
# End of function smoke_pattern_put
# =============== S U B R O U T I N E =======================================
cage_disp:                              # CODE XREF: camera_init+F7C↑p
                ld      0x500498, r15 # Label from official source
                bbs     0x1F, r15, loc_24638
                ld      0x500498, r15
                bbs     1, r15, loc_2464C
loc_24638:                              # CODE XREF: cage_disp+8↑j
                call    cage_display
                ld      debug_flag, r15
                bbs     5, r15, loc_2464C
                call    cage_time_manager
loc_2464C:                              # CODE XREF: cage_disp+14↑j
                ret
# End of function cage_disp
# =============== S U B R O U T I N E =======================================
cage_disp_f:                            # CODE XREF: camera_init+185C↑p
                ld      0x500498, r15 # Label from official source
                bbs     0x1F, r15, cage_disp_f_set
                ld      0x500498, r15
                bbs     1, r15, loc_2464C
cage_disp_f_set:                        # CODE XREF: cage_disp_f+8↑j
                ld      0x0(g13), r3    # Label from official source
                ldob    0x500288, r10
                bbc     0xE, r3, loc_24734
                ldob    stage_num, r11
                xor     0xF, r10, r10
                b       loc_24694
# End of function cage_disp_f
# ---------------------------------------------------------------------------
                ret
# =============== S U B R O U T I N E =======================================
cage_display:                           # CODE XREF: cage_disp:loc_24638↑p
                ldob    0x500288, r10 # Label from official source
loc_24694:                              # CODE XREF: cage_disp_f+34↑j
                ldob    stage_num, r11
                ld      0x0(g13), r15
                bbs     0xF, r15, loc_24734
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                ld      cage_height, r7
                lda     0x40466666, r12
                divr    r12, r7, r7
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                shlo    0xE, 1, r7
                mov     0, g1
loc_246F8:                              # CODE XREF: cage_display+98↓j
                bbc     g1, r10, loc_24710
                ldos    0x50A1E8[g1*2], g4
                mov     g1, r3
                call    cage_clip_m
                mov     r3, g1
loc_24710:                              # CODE XREF: cage_display:loc_246F8↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                cmpinco 3, g1, g1
                bg      loc_246F8
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_24734:                              # CODE XREF: cage_disp_f+24↑j
                ret
# End of function cage_display
# =============== S U B R O U T I N E =======================================
cage_clip_m:                            # CODE XREF: cage_display+7C↑p
                lda     0x800101, r15 # Label from official source
                st      r15, (g11)[g12*1]
                ldl     dword_903D0[g4*8], r4
                lda     displacement, r10
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ldob    stage_num, r11
                shlo    8, r11, r4
                lda     stage_cage(r4), g2
                ld      stage_data(r4), r3
                ldos    zeroed_out_stage_parts(r4), r6
                mulo    0x10, r5, r7
                addo    r7, g2, g2
                bbc     20, r3, loc_24814
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r6), g0
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
loc_24814:                              # CODE XREF: cage_clip_m+60↑j
                ldl     focus_dist_x, r8
                lda     displacement, r10
                lda     0x40C00000, r6
                lda     flt_24C80, g3
                mov     8, r11
                bbc     0x13, r3, loc_24848
                lda     flt_24CA4, g3
                mov     4, r11
loc_24848:                              # CODE XREF: cage_clip_m+100↑j
                bbc     0x15, r3, loc_24858
                lda     flt_24CB8, g3
                mov     2, r11
loc_24858:                              # CODE XREF: cage_clip_m:loc_24848↑j
                bbc     0x1D, r3, loc_24868
                lda     flt_24CC4, g3
                mov     3, r11
loc_24868:                              # CODE XREF: cage_clip_m:loc_24858↑j
                bbc     0x16, r3, loc_24878
                lda     flt_24CD4, g3
                mov     1, r11
loc_24878:                              # CODE XREF: cage_clip_m:loc_24868↑j
                ld      (g3), r5
                addo    4, g3, g3
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r7
                ld      (g11)[g12*1], r12
                mulr    r8, r5, r5
                mulr    r9, r7, r7
                divr    r12, r5, r5
                divr    r12, r7, r7
                mov     0, r3
                lda     0x40000000, r15
                cmpr    r12, r15
                bg      loc_248D0
                mov     0x1F, r3
                b       loc_248F8
# ---------------------------------------------------------------------------
loc_248D0:                              # CODE XREF: cage_clip_m+18C↑j
                lda     0xC3780000, r15
                cmpr    r5, r15
                bg      loc_248E4
                setbit  0, r3, r3
loc_248E4:                              # CODE XREF: cage_clip_m+1A4↑j
                lda     0x43780000, r15
                cmpr    r5, r15
                bl      loc_248F8
                setbit  1, r3, r3
loc_248F8:                              # CODE XREF: cage_clip_m+194↑j
                ld      (g3), r5
                addo    4, g3, g3
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r7
                ld      (g11)[g12*1], r12
                mulr    r8, r5, r5
                mulr    r9, r7, r7
                divr    r12, r5, r5
                divr    r12, r7, r7
                mov     0, r7
                lda     0x40000000, r15
                cmpr    r12, r15
                bg      loc_24950
                mov     0x1F, r7
                b       loc_24978
# ---------------------------------------------------------------------------
loc_24950:                              # CODE XREF: cage_clip_m+20C↑j
                lda     0xC3780000, r15
                cmpr    r5, r15
                bg      loc_24964
                setbit  0, r7, r7
loc_24964:                              # CODE XREF: cage_clip_m+224↑j
                lda     0x43780000, r15
                cmpr    r5, r15
                bl      loc_24978
                setbit  1, r7, r7
loc_24978:                              # CODE XREF: cage_clip_m+214↑j
                and     r3, r7, r4
                cmpobne 0, r4, loc_24C60
                ldob    stage_num, r3
                cmpobe  4, r3, loc_24A1C
                cmpobne 1, r3, loc_24ABC
                ld      frame_counter, r3
                lda     0x7F, r4
                and     r3, r4, r3
                shro    1, r3, r3
                ld      flying_carpet_ring_anim[r3*4], r3
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xC0C00000, r15
                st      r15, (g11)[g12*1]
                b       loc_24C60
# ---------------------------------------------------------------------------
loc_24A1C:                              # CODE XREF: cage_clip_m+250↑j
                ld      canyon_cruise_ring_objects[g1*4], r3
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xC0C00000, r15
                st      r15, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_24C60
# ---------------------------------------------------------------------------
canyon_cruise_ring_objects:.long       2262
                .long       3015        # Part of boat ring
                .long       2946        # Part of boat ring
                .long       3016        # Part of boat ring
# ---------------------------------------------------------------------------
loc_24ABC:                              # CODE XREF: cage_clip_m+254↑j
                ldob    stage_num, r3
                cmpobe  0xA, r3, loc_24B68
                cmpobne 9, r3, loc_24BF0
                ld      0x500498, r3
                bbs     2, r3, loc_24B68
                ldos    0x50049E, r4
                lda     0xBDCCCCCD, r3
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                mulr    r4, r3, r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x40C00000, r15
                st      r15, (g11)[g12*1]
                lda     3373, r3        # Death Egg Eye cage wall
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                notbit  0x1F, r4, r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0xC0C00000, r15
                st      r15, (g11)[g12*1]
                b       loc_24C60
# ---------------------------------------------------------------------------
loc_24B68:                              # CODE XREF: cage_clip_m+38C↑j
                ld      frame_counter, r3
                lda     63, r4
                and     r3, r4, r3
                ldos    electric_fence_anim[r3*2], r3
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xC0C00000, r15
                st      r15, (g11)[g12*1]
                b       loc_24C60
# ---------------------------------------------------------------------------
loc_24BF0:                              # CODE XREF: cage_clip_m+390↑j
                ldos    (g2), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r4), g0
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xC0C00000, r15
                st      r15, (g11)[g12*1]
loc_24C60:                              # CODE XREF: cage_clip_m+244↑j
                mov     r7, r3
                addo    2, g2, g2
                cmpdeco 1, r11, r11
                bl      loc_248F8
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# End of function cage_clip_m
# ---------------------------------------------------------------------------
flt_24C80:      .float -6.0             # DATA XREF: cage_clip_m+F4↑o
                .float -4.5
                .float -3.0
                .float -1.5
                .float  0.0
                .float  1.5
                .float  3.0
                .float  4.5
                .float  6.0
flt_24CA4:      .float -6.0             # DATA XREF: cage_clip_m+104↑o
                .float -3.0
                .float  0.0
                .float  3.0
                .float  6.0
flt_24CB8:      .float -6.0             # DATA XREF: cage_clip_m+114↑o
                .float  0.0
                .float  6.0
flt_24CC4:      .float -6.0             # DATA XREF: cage_clip_m+124↑o
                .float -2.0
                .float  2.0
                .float  6.0
flt_24CD4:      .float -6.0             # DATA XREF: cage_clip_m+134↑o
                .float  6.0
# =============== S U B R O U T I N E =======================================
cage_time_manager:                      # CODE XREF: cage_disp+28↑p
                ldos    0x50A1EE, r3 # Label from official source
                cmpobe  0, r3, loc_24CF8
                subo    1, r3, r3
                stos    r3, 0x50A1EE
                b       loc_24D10
# ---------------------------------------------------------------------------
loc_24CF8:                              # CODE XREF: cage_time_manager+8↑j
                ld      0x50A1E4, r15
                bbc     0, r15, loc_24D10
                mov     0x1F, r15
                stis    r15, 0x50A1EE
loc_24D10:                              # CODE XREF: cage_time_manager+18↑j
                ld      0x50A1E4, r15
                clrbit  0, r15, r15
                st      r15, 0x50A1E4
                ldos    0x50A1EA, r3
                cmpobe  0, r3, loc_24D40
                subo    1, r3, r3
                stos    r3, 0x50A1EA
                b       loc_24D58
# ---------------------------------------------------------------------------
loc_24D40:                              # CODE XREF: cage_time_manager+50↑j
                ld      0x50A1E4, r15
                bbc     1, r15, loc_24D58
                mov     0x1F, r15
                stis    r15, 0x50A1EA
loc_24D58:                              # CODE XREF: cage_time_manager+60↑j
                ld      0x50A1E4, r15
                clrbit  1, r15, r15
                st      r15, 0x50A1E4
                ldos    0x50A1E8, r3
                cmpobe  0, r3, loc_24D88
                subo    1, r3, r3
                stos    r3, 0x50A1E8
                b       loc_24DA0
# ---------------------------------------------------------------------------
loc_24D88:                              # CODE XREF: cage_time_manager+98↑j
                ld      0x50A1E4, r15
                bbc     3, r15, loc_24DA0
                mov     0x1F, r15
                stis    r15, 0x50A1E8
loc_24DA0:                              # CODE XREF: cage_time_manager+A8↑j
                ld      0x50A1E4, r15
                clrbit  3, r15, r15
                st      r15, 0x50A1E4
                ldos    0x50A1EC, r3
                cmpobe  0, r3, loc_24DD0
                subo    1, r3, r3
                stos    r3, 0x50A1EC
                b       loc_24DE8
# ---------------------------------------------------------------------------
loc_24DD0:                              # CODE XREF: cage_time_manager+E0↑j
                ld      0x50A1E4, r15
                bbc     2, r15, loc_24DE8
                mov     0x1F, r15
                stis    r15, 0x50A1EC
loc_24DE8:                              # CODE XREF: cage_time_manager+F0↑j
                ld      0x50A1E4, r15
                clrbit  2, r15, r15
                st      r15, 0x50A1E4
                ret
# End of function cage_time_manager
# =============== S U B R O U T I N E =======================================
cage_sub_check:                         # CODE XREF: camera_init+A90↑p
                lda     cam_float_6, g2 # Label from official source
                call    sub_24ED4
                stob    g0, 0x500288
                chkbit  0, g0
                alterbit 4, g0, r3
                shro    1, r3, r3
                or      g0, r3, r4
                stob    r4, 0x50028A
                ret
# End of function cage_sub_check
# ---------------------------------------------------------------------------
                lda     unused_cam_float_8_5, g2 # floating code
                b       sub_24ED4
# ---------------------------------------------------------------------------
                lda     unused_cam_float_6_71, g2 # floating code
                b       sub_24ED4
# ---------------------------------------------------------------------------
                lda     unused_cam_float_4_94, g2 # floating code
                b       sub_24ED4
# ---------------------------------------------------------------------------
cam_float_6:    .float 0.0              # DATA XREF: cage_sub_check↑o
                .float 6.0
                .float -6.0
                .float 0.0
                .float 0.0
                .float -6.0
                .float 6.0
                .float 0.0
unused_cam_float_8_5:.float 0.0         # DATA XREF: ROM:00024E30↑o
                .float 8.5
                .float -8.5
                .float 0.0
                .float 0.0
                .float -8.5
                .float 8.5
                .float 0.0
unused_cam_float_4_94:.float 0.0        # DATA XREF: ROM:00024E48↑o
                .long 0x409E6666
                .long 0xC09E6666
                .float 0.0
                .float 0.0
                .long 0xC09E6666
                .long 0x409E6666
                .float 0.0
unused_cam_float_6_71:.long 0xC0D6F5C3  # DATA XREF: ROM:00024E3C↑o
                .long 0x40D6F5C3
                .long 0xC0D6F5C3
                .long 0xC0D6F5C3
                .long 0x40D6F5C3
                .long 0xC0D6F5C3
                .long 0x40D6F5C3
                .long 0x40D6F5C3
# =============== S U B R O U T I N E =======================================
sub_24ED4:                              # CODE XREF: cage_sub_check+8↑p
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r11
                mov     0, g0
                mov     0, r7
loc_24EF0:                              # CODE XREF: sub_24ED4+98↓j
                ldl     (g2)[r7*8], r8
                ldt     0x18(g13), r4
                ldos    0x26(g13), r3
                lda     0xC0000000, r13
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                subr    r12, r4, r4
                addr    r14, r6, r6
                lda     displacement, r3
                mulr    r11, r8, r12
                mulr    r11, r9, r13
                subr    r12, r4, r4
                subr    r13, r6, r6
                mulr    r4, r8, r8
                mulr    r6, r9, r9
                addr    r9, r8, r8
                bbc     0x1F, r8, loc_24F68
                setbit  r7, g0, g0
loc_24F68:                              # CODE XREF: sub_24ED4+8C↑j
                cmpinco 3, r7, r7
                bg      loc_24EF0
                ret
# End of function sub_24ED4
# =============== S U B R O U T I N E =======================================
cage_sub_disp_f:                        # CODE XREF: camera_init+181C↑p
                ldob    stage_num, g1   # Label from official source
                shlo    8, g1, r4
                ld      stage_data(r4), r3
                bbc     0xE, r3, loc_250C0
                ldob    0x500288, r10
                xor     0xF, r10, r10
                b       loc_24FBC
# End of function cage_sub_disp_f
# =============== S U B R O U T I N E =======================================
cage_sub_disp:                          # CODE XREF: camera_init+E74↑p
                ldob    stage_num, g1   # Label from official source
                shlo    8, g1, r4
                ld      stage_data(r4), r3
                bbc     0xE, r3, loc_250C0
                ldob    0x500288, r10
loc_24FBC:                              # CODE XREF: cage_sub_disp_f+24↑j
                ldos    stage_cage_pole(r4), r8
                ldos    stage_extra(r4), r9
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                cmpobe  0xE, g1, loc_250D4
                cmpobe  0, g1, loc_250D4
                cmpobe  0xD, g1, loc_250D4
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                shlo    0xE, 1, r3
                cmpobe  1, g1, loc_250C4
                mov     0, r11
                bbc     0, r10, loc_25038
                cmpobe  r11, r9, loc_25038
                mov     0, g1
                lda     (r9), g0
                call    set_obj
loc_25038:                              # CODE XREF: cage_sub_disp+88↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_2505C
                cmpobe  r11, r9, loc_2505C
                mov     0, g1
                lda     (r9), g0
                call    set_obj
loc_2505C:                              # CODE XREF: cage_sub_disp+AC↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_25080
                cmpobe  r11, r9, loc_25080
                mov     0, g1
                lda     (r9), g0
                call    set_obj
loc_25080:                              # CODE XREF: cage_sub_disp+D0↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_250A4
                cmpobe  r11, r9, loc_250A4
                mov     0, g1
                lda     (r9), g0
                call    set_obj
loc_250A4:                              # CODE XREF: cage_sub_disp+F4↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_250C0:                              # CODE XREF: cage_sub_disp_f+14↑j
                ret
# ---------------------------------------------------------------------------
loc_250C4:                              # CODE XREF: cage_sub_disp+80↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# ---------------------------------------------------------------------------
loc_250D4:                              # CODE XREF: cage_sub_disp+3C↑j
                ld      floor_stage_size_0, r9
                lda     0xC0D00000, r11
                mulr    r9, r11, r3
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0xBE4CCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x41680000, r3
                lda     0x3FCCCCCD, r11
                mulr    r3, r11, r3
                lda     0x40D00000, r11
                mulr    r11, r9, r11
                subr    r11, r3, r3
                lda     0x41000000, r11
                divr    r11, r3, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                mov     0, r11
                mov     r11, r8
                mov     0, r9
                bbc     0, r10, loc_25178
                cmpobe  r11, r9, loc_25178
                mov     0, g1
                lda     (r9), g0
                call    set_obj
loc_25178:                              # CODE XREF: cage_sub_disp+1C8↑j
                lda     0x4C7, r9
                bbc     1, r10, loc_25190
                cmpobe  r11, r9, loc_25190
                mov     0, g1
                lda     (r9), g0
                call    set_obj
loc_25190:                              # CODE XREF: cage_sub_disp+1E0↑j
                mov     0, r9
                bbc     2, r10, loc_251A8
                cmpobe  r11, r9, loc_251A8
                mov     0, g1
                lda     (r9), g0
                call    set_obj
loc_251A8:                              # CODE XREF: cage_sub_disp+1F8↑j
                mov     0, r9
                bbc     3, r10, loc_251C0
                cmpobe  r11, r9, loc_251C0
                mov     0, g1
                lda     (r9), g0
                call    set_obj
loc_251C0:                              # CODE XREF: cage_sub_disp+210↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# End of function cage_sub_disp
# =============== S U B R O U T I N E =======================================
pole_disp:                              # CODE XREF: camera_init:loc_20224↑p
                mov     0, r9           # Label from official source
                ldob    stage_num, r3
                cmpobe  1, r3, loc_25300
                cmpobe  14, r3, loc_25820
                cmpobe  0, r3, loc_25820
                cmpobe  13, r3, loc_25820
                cmpobe  9, r3, loc_25B44
                cmpobe  10, r3, loc_2613C
                shlo    8, r3, r4
                ld      stage_data(r4), r3
                bbc     0x12, r3, loc_252EC # return
                ldob    0x50028A, r10
                ldos    stage_cage_pole(r4), r8
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_25270
                cmpobe  r11, r8, loc_25270
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_25270:                              # CODE XREF: pole_disp+8C↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_25294
                cmpobe  r11, r8, loc_25294
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_25294:                              # CODE XREF: pole_disp+B0↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_252B8
                cmpobe  r11, r8, loc_252B8
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_252B8:                              # CODE XREF: pole_disp+D4↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_252DC
                cmpobe  r11, r8, loc_252DC
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_252DC:                              # CODE XREF: pole_disp+F8↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_252EC       # return
# ---------------------------------------------------------------------------
loc_252EC:                              # CODE XREF: pole_disp+30↑j
                ret                     # return
# ---------------------------------------------------------------------------
loc_252F0:                              # CODE XREF: pole_disp_f+2C↓j
                ldob    0x50028A, r7
                xor     0xF, r7, r7
                b       loc_25308
# ---------------------------------------------------------------------------
loc_25300:                              # CODE XREF: pole_disp+C↑j
                ldob    0x50028A, r7
loc_25308:                              # CODE XREF: pole_disp+12C↑j
                ld      frame_counter, r3
                lda     displacement, r6
                ld      stage_x, r8
                lda     0x4119999A, r15
                divr    r15, r8, r8
                lda     0x3FCCCCCD, r9
                lda     0x40833333, r10
                mov     0, r11
                ld      fa_camera, r4
                ldos    0x26(r4), r12
                lda     0x3F, r14
loc_25350:                              # CODE XREF: pole_disp+274↓j
                bbc     r11, r7, loc_2543C
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldl     float_9p6[r11*8], r4
                mulr    r8, r4, r4
                mulr    r8, r5, r5
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                mov     0, g1
                lda     582, g0         # Flying carpet ring corner
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x8001010, r15
                st      r15, (g11)[g12*1]
                bbs     0, r3, loc_25414
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3FA00000, r15
                st      r15, (g11)[g12*1]
                lda     0x3FA00000, r15
                st      r15, (g11)[g12*1]
                lda     0x3FA00000, r15
                st      r15, (g11)[g12*1]
loc_25414:                              # CODE XREF: pole_disp+210↑j
                shro    1, r3, r4
                and     r14, r4, r4
                ldos    flying_carpet_cage_flames[r4*2], r4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_2543C:                              # CODE XREF: pole_disp:loc_25350↑j
                cmpinco 3, r11, r11
                addo    8, r3, r3
                bg      loc_25350
                ret
# End of function pole_disp
# ---------------------------------------------------------------------------
                ret
# =============== S U B R O U T I N E =======================================
pole_disp_f:                            # CODE XREF: camera_init+1838↑p
                ldob    stage_num, r11  # Label from official source
                shlo    8, r11, r4
                ld      stage_data(r4), r3
                bbc     0x12, r3, loc_2560C
                ld      0x0(g13), r10
                bbc     0xE, r10, loc_2560C
                ldob    0x50028A, r10
                xor     0xF, r10, r10
                cmpobe  1, r11, loc_252F0
                cmpobe  0xE, r11, loc_2592C
                cmpobe  0, r11, loc_2592C
                cmpobe  0xD, r11, loc_2592C
                cmpobe  9, r11, loc_25D40
                cmpobe  0xA, r11, loc_26234
                ldos    stage_cage_pole(r4), r8
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_254F8
                cmpobe  r11, r8, loc_254F8
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_254F8:                              # CODE XREF: pole_disp_f+94↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_2551C
                cmpobe  r11, r8, loc_2551C
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_2551C:                              # CODE XREF: pole_disp_f+B8↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_25540
                cmpobe  r11, r8, loc_25540
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_25540:                              # CODE XREF: pole_disp_f+DC↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_25564
                cmpobe  r11, r8, loc_25564
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_25564:                              # CODE XREF: pole_disp_f+100↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_2560C
# ---------------------------------------------------------------------------
                ldos    stage_cage_pole(r4), r8
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_255D8
                cmpobe  r11, r8, loc_255D8
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_255D8:                              # CODE XREF: pole_disp_f+174↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r3, 0, r15
                st      r15, (g11)[g12*1]
                bbc     3, r10, loc_25600
                cmpobe  r11, r8, loc_25600
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_25600:                              # CODE XREF: pole_disp_f+19C↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_2560C:                              # CODE XREF: pole_disp_f+14↑j
                ldob    stage_num, r3
                cmpobne 9, r3, loc_2563C
                ld      0x500498, r3
                bbs     2, r3, loc_2563C
                bbc     0xE, r3, loc_2563C
                ldos    0x5004A0, r3
                addo    0x1F, 0x1D, r4
                cmpobe  r4, r3, loc_25F58
                b       loc_25F30
# ---------------------------------------------------------------------------
loc_2563C:                              # CODE XREF: pole_disp_f+1C4↑j
                ret
# ---------------------------------------------------------------------------
un_pole_disp_f_alt:                     # Unreachable code
                ldob    stage_num, r11
                shlo    8, r11, r4
                ld      stage_data(r4), r3
                bbc     0x12, r3, loc_25818
                ldob    0x50028A, r10
                ld      finish_wall_flag, r12
                xor     0xF, r12, r12
                and     0xF, r12, r12
                mov     r12, r9
                and     r12, r10, r10
                xor     0xF, r10, r10
                cmpobe  0xE, r11, loc_25A30
                cmpobe  0, r11, loc_25A30
                cmpobe  0xD, r11, loc_25A30
                cmpobe  9, r11, loc_25F94
                cmpobe  0xA, r11, loc_26324
                ldos    stage_cage_pole(r4), r8
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ldob    0x50028A, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_256FC
                cmpobe  r11, r8, loc_256FC
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_256FC:                              # CODE XREF: pole_disp_f+298↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_25720
                cmpobe  r11, r8, loc_25720
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_25720:                              # CODE XREF: pole_disp_f+2BC↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_25744
                cmpobe  r11, r8, loc_25744
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_25744:                              # CODE XREF: pole_disp_f+2E0↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_25768
                cmpobe  r11, r8, loc_25768
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_25768:                              # CODE XREF: pole_disp_f+304↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_25818
# ---------------------------------------------------------------------------
                ldos    stage_cage_pole(r4), r8
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ldob    0x50028A, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_257E4
                cmpobe  r11, r8, loc_257E4
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_257E4:                              # CODE XREF: pole_disp_f+380↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r3, 0, r15
                st      r15, (g11)[g12*1]
                bbc     3, r10, loc_2580C
                cmpobe  r11, r8, loc_2580C
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_2580C:                              # CODE XREF: pole_disp_f+3A8↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_25818:                              # CODE XREF: pole_disp_f+204↑j
                ret
# ---------------------------------------------------------------------------
                ret                     # unreachable code
# ---------------------------------------------------------------------------
loc_25820:                              # CODE XREF: pole_disp+10↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     cage_corners, r9
                ldos    (r9), r4
                ldos    2(r9), r5
                ldos    4(r9), r6
                ldos    6(r9), r7
                ldob    0x50028A, r10
                mov     0, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_258A0
                cmpobe  r11, r4, loc_258A0
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_258A0:                              # CODE XREF: pole_disp_f+43C↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_258C4
                cmpobe  r11, r5, loc_258C4
                mov     0, g1
                lda     (r5), g0
                call    set_obj
loc_258C4:                              # CODE XREF: pole_disp_f+460↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_258E8
                cmpobe  r11, r6, loc_258E8
                mov     0, g1
                lda     (r6), g0
                call    set_obj
loc_258E8:                              # CODE XREF: pole_disp_f+484↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_2590C
                cmpobe  r11, r7, loc_2590C
                mov     0, g1
                lda     (r7), g0
                call    set_obj
loc_2590C:                              # CODE XREF: pole_disp_f+4A8↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# ---------------------------------------------------------------------------
loc_2592C:                              # CODE XREF: pole_disp_f+30↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     cage_corners, r9
                ldos    (r9), r4
                ldos    2(r9), r5
                ldos    4(r9), r6
                ldos    6(r9), r7
                mov     0, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_259A4
                cmpobe  r11, r4, loc_259A4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_259A4:                              # CODE XREF: pole_disp_f+540↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_259C8
                cmpobe  r11, r5, loc_259C8
                mov     0, g1
                lda     (r5), g0
                call    set_obj
loc_259C8:                              # CODE XREF: pole_disp_f+564↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_259EC
                cmpobe  r11, r6, loc_259EC
                mov     0, g1
                lda     (r6), g0
                call    set_obj
loc_259EC:                              # CODE XREF: pole_disp_f+588↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_25A10
                cmpobe  r11, r7, loc_25A10
                mov     0, g1
                lda     (r7), g0
                call    set_obj
loc_25A10:                              # CODE XREF: pole_disp_f+5AC↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# ---------------------------------------------------------------------------
loc_25A30:                              # CODE XREF: pole_disp_f+22C↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     cage_corners, r9
                ldos    (r9), r4
                ldos    2(r9), r5
                ldos    4(r9), r6
                ldos    6(r9), r7
                ldob    0x50028A, r10
                mov     0, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_25AB0
                cmpobe  r11, r4, loc_25AB0
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_25AB0:                              # CODE XREF: pole_disp_f+64C↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_25AD4
                cmpobe  r11, r5, loc_25AD4
                mov     0, g1
                lda     (r5), g0
                call    set_obj
loc_25AD4:                              # CODE XREF: pole_disp_f+670↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_25AF8
                cmpobe  r11, r6, loc_25AF8
                mov     0, g1
                lda     (r6), g0
                call    set_obj
loc_25AF8:                              # CODE XREF: pole_disp_f+694↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_25B1C
                cmpobe  r11, r7, loc_25B1C
                mov     0, g1
                lda     (r7), g0
                call    set_obj
loc_25B1C:                              # CODE XREF: pole_disp_f+6B8↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# ---------------------------------------------------------------------------
cage_corners:   .short 519              # DATA XREF: pole_disp_f+410↑o
                .short 554
                .short 519
                .short 554
# ---------------------------------------------------------------------------
loc_25B44:                              # CODE XREF: pole_disp+1C↑j
                ld      0x500498, r3
                bbs     2, r3, loc_2613C
                bbc     0xE, r3, loc_25D3C
                ldos    0x5004A0, r3
                addo    0x1F, 0x1D, r4
                cmpobl  r4, r3, loc_2613C
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x3DCCCCCD, r4
                mulr    r4, r3, r4
                lda     0xC0C00000, r3
                addr    r3, r4, r3
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_25BD8
                st      r13, 0x0(r15)
                b       loc_25BE4
# ---------------------------------------------------------------------------
loc_25BD8:                              # CODE XREF: pole_disp_f+77C↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_25BE4:                              # CODE XREF: pole_disp_f+784↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     2428, r4        # Cage pole for Death Egg
                ldob    0x500288, r10
                mov     0, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_25C78
                cmpobe  r11, r4, loc_25C78
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_25C78:                              # CODE XREF: pole_disp_f+814↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_25C9C
                cmpobe  r11, r4, loc_25C9C
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_25C9C:                              # CODE XREF: pole_disp_f+838↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_25CC0
                cmpobe  r11, r4, loc_25CC0
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_25CC0:                              # CODE XREF: pole_disp_f+85C↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_25CE4
                cmpobe  r11, r4, loc_25CE4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_25CE4:                              # CODE XREF: pole_disp_f+880↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
loc_25D3C:                              # CODE XREF: pole_disp_f+700↑j
                ret
# ---------------------------------------------------------------------------
loc_25D40:                              # CODE XREF: pole_disp_f+3C↑j
                ld      0x500498, r3
                bbs     2, r3, loc_26234
                bbc     0xE, r3, loc_25F90 # return
                ldos    0x5004A0, r3
                addo    0x1F, 0x1D, r4
                cmpobe  r4, r3, loc_25F58
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x3DCCCCCD, r4
                mulr    r4, r3, r4
                lda     0xC0C00000, r3
                addr    r3, r4, r3
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_25DD4
                st      r13, 0x0(r15)
                b       loc_25DE0
# ---------------------------------------------------------------------------
loc_25DD4:                              # CODE XREF: pole_disp_f+978↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_25DE0:                              # CODE XREF: pole_disp_f+980↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     2428, r4        # Cage pole for Death Egg
                mov     0, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_25E6C
                cmpobe  r11, r4, loc_25E6C
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_25E6C:                              # CODE XREF: pole_disp_f+A08↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_25E90
                cmpobe  r11, r4, loc_25E90
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_25E90:                              # CODE XREF: pole_disp_f+A2C↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_25EB4
                cmpobe  r11, r4, loc_25EB4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_25EB4:                              # CODE XREF: pole_disp_f+A50↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_25ED8
                cmpobe  r11, r4, loc_25ED8
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_25ED8:                              # CODE XREF: pole_disp_f+A74↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
loc_25F30:                              # CODE XREF: pole_disp_f+1E8↑j
                ld      debug_flag, r15
                bbs     5, r15, loc_25F90 # return
                mov     1, r3
                ldos    0x5004A0, r4
                addo    r3, r4, r4
                stos    r4, 0x5004A0
                b       loc_25F90       # return
# ---------------------------------------------------------------------------
loc_25F58:                              # CODE XREF: pole_disp_f+1E4↑j
                mov     0, r3
                stos    r3, 0x5004A0
                ld      0x500498, r15
                setbit  2, r15, r15
                st      r15, 0x500498
                ld      0x500498, r15
                setbit  0xC, r15, r15
                st      r15, 0x500498
                b       loc_26234
# ---------------------------------------------------------------------------
loc_25F90:                              # CODE XREF: pole_disp_f+8FC↑j
                ret                     # return
# ---------------------------------------------------------------------------
loc_25F94:                              # CODE XREF: pole_disp_f+238↑j
                ld      0x500498, r3
                bbs     2, r3, loc_26324
                bbc     0, r3, loc_26138 # return
                ldos    0x5004A0, r3
                addo    0x1F, 0x1D, r4
                cmpobl  r4, r3, loc_26234
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x3DCCCCCD, r4
                mulr    r4, r3, r4
                lda     0xC0400000, r3
                addr    r3, r4, r3
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x97C, r4
                ldob    0x500288, r10
                mov     0, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_26074
                cmpobe  r11, r4, loc_26074
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_26074:                              # CODE XREF: pole_disp_f+C10↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_26098
                cmpobe  r11, r4, loc_26098
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_26098:                              # CODE XREF: pole_disp_f+C34↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_260BC
                cmpobe  r11, r4, loc_260BC
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_260BC:                              # CODE XREF: pole_disp_f+C58↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_260E0
                cmpobe  r11, r4, loc_260E0
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_260E0:                              # CODE XREF: pole_disp_f+C7C↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                stob    r9, 0x50028A
                mov     1, r3
                ldos    0x5004A0, r4
                addo    r3, r4, r4
                stos    r4, 0x5004A0
                b       loc_26138       # return
# ---------------------------------------------------------------------------
                mov     0, r3
                stos    r3, 0x5004A0
                ld      0x500498, r15
                setbit  2, r15, r15
                st      r15, 0x500498
                b       loc_26324
# ---------------------------------------------------------------------------
loc_26138:                              # CODE XREF: pole_disp_f+B50↑j
                ret                     # return
# ---------------------------------------------------------------------------
loc_2613C:                              # CODE XREF: pole_disp+20↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     2428, r4        # Cage pole for Death Egg
                ldob    0x500288, r10
                mov     0, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_261A8
                cmpobe  r11, r4, loc_261A8
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_261A8:                              # CODE XREF: pole_disp_f+D44↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_261CC
                cmpobe  r11, r4, loc_261CC
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_261CC:                              # CODE XREF: pole_disp_f+D68↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_261F0
                cmpobe  r11, r4, loc_261F0
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_261F0:                              # CODE XREF: pole_disp_f+D8C↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_26214
                cmpobe  r11, r4, loc_26214
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_26214:                              # CODE XREF: pole_disp_f+DB0↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# ---------------------------------------------------------------------------
loc_26234:                              # CODE XREF: pole_disp_f+40↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     2428, r4        # Cage pole for Death Egg
                mov     0, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_26298
                cmpobe  r11, r4, loc_26298
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_26298:                              # CODE XREF: pole_disp_f+E34↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_262BC
                cmpobe  r11, r4, loc_262BC
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_262BC:                              # CODE XREF: pole_disp_f+E58↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_262E0
                cmpobe  r11, r4, loc_262E0
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_262E0:                              # CODE XREF: pole_disp_f+E7C↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_26304
                cmpobe  r11, r4, loc_26304
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_26304:                              # CODE XREF: pole_disp_f+EA0↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# ---------------------------------------------------------------------------
loc_26324:                              # CODE XREF: pole_disp_f+23C↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x97C, r4
                ldob    0x500288, r10
                mov     0, r9
                shlo    0xE, 1, r3
                mov     0, r11
                bbc     0, r10, loc_26390
                cmpobe  r11, r4, loc_26390
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_26390:                              # CODE XREF: pole_disp_f+F2C↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     1, r10, loc_263B4
                cmpobe  r11, r4, loc_263B4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_263B4:                              # CODE XREF: pole_disp_f+F50↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     2, r10, loc_263D8
                cmpobe  r11, r4, loc_263D8
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_263D8:                              # CODE XREF: pole_disp_f+F74↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                bbc     3, r10, loc_263FC
                cmpobe  r11, r4, loc_263FC
                mov     0, g1
                lda     (r4), g0
                call    set_obj
loc_263FC:                              # CODE XREF: pole_disp_f+F98↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                stob    r9, 0x50028A
                ret
# End of function pole_disp_f
# =============== S U B R O U T I N E =======================================
stage_dsp:                              # CODE XREF: camera_init+CD4↑p
                ldob    stage_num, r3   # Label from official source
                shlo    8, r3, r7
                mov     r3, r11
                be      loc_265FC       # return
                ldos    stage_platform(r7), r5
                cmpo    2, r11          # Compare stage_num to 2 (Aurora Icefield)
                be      loc_265FC       # Branch if stage_num is Aurora Icefield (returns)
                cmpobne 15, r11, loc_26444 # Branch if stage_num is not ADV_MOV2
                call    adv_mov2_stage_dsp_sub # return
loc_26444:                              # CODE XREF: stage_dsp+24↑j
                cmpobe  0, r11, loc_26450 # Branch if stage_num is South Island
                cmpobe  14, r11, loc_26450 # Branch if stage_num is ADV_MOVIE (also South Island)
                cmpobne 13, r11, loc_26454 # Branch if stage_num is not South Island (alt)
loc_26450:                              # CODE XREF: stage_dsp:loc_26444↑j
                call    sub_26604
loc_26454:                              # CODE XREF: stage_dsp+34↑j
                cmpobe  10, r11, loc_26464 # Branch if stage_num is Final Eggman Boss
                cmpobne 9, r11, loc_26468 # Branch if stage_num is not Death Egg's Eye
                call    sub_26830
                b       loc_26468
# ---------------------------------------------------------------------------
loc_26464:                              # CODE XREF: stage_dsp:loc_26454↑j
                call    sub_2731C
loc_26468:                              # CODE XREF: stage_dsp+40↑j
                cmpobne 1, r11, loc_26474 # If stage isn't flying carpet, branch
                call    animate_flying_carpet # Loads flying carpet floor object to g1
                mov     g1, r5          # g1 = stage object
loc_26474:                              # CODE XREF: stage_dsp:loc_26468↑j
                cmpo    0, r5
                be      loc_265FC       # If object is 0, return
                ldos    stage_num, r4
                mov     9, r3
                cmpobne r3, r4, loc_264EC # Branch if stage_num not equal to 9 (Post Metal Sonic transition)
                ld      0x500498, r4
                bbs     0x1F, r4, loc_264EC
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50185C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_264E0
                st      r13, 0x0(r15)
                b       loc_264EC
# ---------------------------------------------------------------------------
loc_264E0:                              # CODE XREF: stage_dsp+BC↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_264EC:                              # CODE XREF: stage_dsp+70↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ld      floor_stage_size_0, r3
                cmpobne 4, r11, loc_26530
                ldos    0x530200, g0
                mov     0x1D, g1
                lda     dword_90B20, g2
                mov     0, g3
                call    material_part_chg
                ld      0x5300F4, g0
                mov     0x1D, g1
                call    set_material_one
loc_26530:                              # CODE XREF: stage_dsp+E8↑j
                cmpobne 7, r11, loc_26550
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                b       loc_26570
# ---------------------------------------------------------------------------
loc_26550:                              # CODE XREF: stage_dsp:loc_26530↑j
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
loc_26570:                              # CODE XREF: stage_dsp+134↑j
                mov     0, g1
                lda     (r5), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ldos    stage_num, r4
                mov     9, r3
                cmpobne r3, r4, loc_265E0 # Branch if stage_num not equal to 9 (Post Metal Sonic transition)
                ld      0x500498, r4
                bbs     0x1F, r4, loc_265E0
                lda     0x50185C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
loc_265E0:                              # CODE XREF: stage_dsp+17C↑j
                cmpobne 4, r11, loc_265FC # return
                ld      dword_90B94, g0
                st      g0, 0x5300F4
                mov     0x1D, g1
                call    set_material_one
loc_265FC:                              # CODE XREF: stage_dsp+10↑j
                ret                     # return
# End of function stage_dsp
# =============== S U B R O U T I N E =======================================
# return
adv_mov2_stage_dsp_sub:                 # CODE XREF: stage_dsp+28↑p
                ret
# End of function adv_mov2_stage_dsp_sub
# =============== S U B R O U T I N E =======================================
sub_26604:                              # CODE XREF: stage_dsp:loc_26450↑p
                lda     0x40C00000, r13
                ld      stage_x, r14
                divr    r13, r14, r3
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     2833, r3        # South Island cage shadows
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      frame_counter, r3
                shro    1, r3, r3
                mov     0, r6
                ldob    0x500288, r7
                mov     0, r11
                ld      floor_stage_size_0, r9
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                addo    0x10, r3, r4
                and     0x1F, r4, r4
                ldos    south_island_palm_tree_shadow[r4*2], r4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_266D8:                              # CODE XREF: sub_26604+178↓j
                bbc     r11, r7, loc_26774
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldl     0x26790[r11*8], r4
                lda     0x2F005E5E, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r6
                ld      (g11)[g12*1], r5
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                and     0x1F, r3, r3
                ldos    south_island_palm_tree[r3*2], r4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_26774:                              # CODE XREF: sub_26604:loc_266D8↑j
                cmpinco 3, r11, r11
                addo    8, r3, r3
                bg      loc_266D8
                ret
# End of function sub_26604
# ---------------------------------------------------------------------------
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0x40C8
                .short 0
                .short 0x40C8
                .short 0
                .short 0xC0C8
                .short 0
                .short 0x40C8
                .short 0
                .short 0xC0C8
                .short 0
                .short 0xC0C8
                .short 0
                .short 0x40C8
                .short 0
                .short 0xC0C8
south_island_palm_tree:.short 522       # DATA XREF: sub_26604+150↑r
                .short 523
                .short 524
                .short 525
                .short 526
                .short 527
                .short 528
                .short 529
                .short 530
                .short 531
                .short 532
                .short 533
                .short 534
                .short 535
                .short 536
                .short 537
                .short 538
                .short 539
                .short 540
                .short 541
                .short 542
                .short 543
                .short 544
                .short 545
                .short 546
                .short 547
                .short 548
                .short 549
                .short 550
                .short 551
                .short 552
                .short 552              # Should be 553
south_island_palm_tree_shadow:.short 1558 # DATA XREF: sub_26604+B4↑r
                .short 1559
                .short 1560
                .short 1561
                .short 1562
                .short 1563
                .short 1564
                .short 1565
                .short 1566
                .short 1567
                .short 1568
                .short 1569
                .short 1570
                .short 1571
                .short 1572
                .short 1573
                .short 1574
                .short 1575
                .short 1576
                .short 1577
                .short 1578
                .short 1579
                .short 1580
                .short 1581
                .short 1582
                .short 1583
                .short 1584
                .short 1585
                .short 1586
                .short 1587
                .short 1588
                .short 1589
# =============== S U B R O U T I N E =======================================
sub_26830:                              # CODE XREF: stage_dsp+44↑p
                call    bossm_cont
                call    bossm_disp
                ld      0x500498, r4
                bbs     0x1F, r4, sub_2731C
                bbs     0xD, r4, sub_2731C
                ld      0x500498, r4
                bbs     0xE, r4, loc_2751C
                bbc     5, r4, loc_2690C
                ldos    0x5004A0, r11
                shlo    3, 0xD, r3
                cmpobl  r3, r11, death_egg_ii_elevator_finished_audio
                lda     0x3E800000, r3
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                mulr    r9, r3, r3
                lda     0x41F00000, r8
                addr    r3, r8, r10
                ld      floor_stage_size_0, r9
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     2449, r3
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_2690C:                              # CODE XREF: sub_26830+24↑j
                bbc     6, r4, loc_26E34
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501844, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_26958
                st      r13, 0x0(r15)
                b       loc_26964
# ---------------------------------------------------------------------------
loc_26958:                              # CODE XREF: sub_26830+11C↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_26964:                              # CODE XREF: sub_26830+124↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     2450, r3
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                shlo    0xE, 1, r3
                lda     0x97D, r8
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x501844, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                shlo    0xE, 1, r3
                lda     0x979, r8
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_26C08
                st      r13, 0x0(r15)
                b       loc_26C14
# ---------------------------------------------------------------------------
loc_26C08:                              # CODE XREF: sub_26830+3CC↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_26C14:                              # CODE XREF: sub_26830+3D4↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                shlo    0xE, 1, r3
                lda     0x97A, r7
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     2445, r8
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     2446, r8
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     2447, r8
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     2448, r8
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ld      debug_flag, r15
                bbs     5, r15, loc_26E34
                ldos    0x5004A0, r11
                mov     1, r3
                addo    r3, r11, r11
                stos    r11, 0x5004A0
                b       loc_26E34
# ---------------------------------------------------------------------------
death_egg_ii_elevator_finished_audio:   # CODE XREF: sub_26830+34↑j
                mov     0, r3
                stos    r3, 0x5004A0
                ld      0x500498, r15
                setbit  0xE, r15, r15
                st      r15, 0x500498
                lda     0xAE1344, g0    # sd_ele_4
                call    check_same_sound
                call    sound_request_u
                lda     0xAE141F, g0    # sd_ele_3_off
                call    check_same_sound
                call    sound_request_u
                b       loc_2751C
# ---------------------------------------------------------------------------
loc_26E34:                              # CODE XREF: sub_26830:loc_2690C↑j
                ret
# End of function sub_26830
# =============== S U B R O U T I N E =======================================
stage_pos_up_cnt:                       # CODE XREF: ground_disp+100↓p
                ldob    also_sub_mode, r15 # Label from official source
                lda     check_word3+2, r14
                cmpobe  r14, r15, loc_26E58
                lda     check_word3+3, r14
                cmpobne r14, r15, loc_26F2C
loc_26E58:                              # CODE XREF: stage_pos_up_cnt+10↑j
                ld      0x500498, r4
                bbs     6, r4, loc_26F2C
                bbc     0, r4, loc_26F2C
                bbc     3, r4, loc_26F2C
                ldos    0x50049E, r4
                lda     0x46, r3
                cmpobe  r3, r4, loc_26EF8
                addo    0x1F, 0x13, r3
                cmpobne r3, r4, loc_26E98
                ld      0x500498, r15
                setbit  4, r15, r15
                st      r15, 0x500498
loc_26E98:                              # CODE XREF: stage_pos_up_cnt+48↑j
                lda     0x3F000000, r5
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                mulr    r5, r3, r5
                lda     displacement, r3
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      debug_flag, r15
                bbs     5, r15, loc_26EF4
                mov     1, r3
                addo    r3, r4, r4
                stos    r4, 0x50049E
loc_26EF4:                              # CODE XREF: stage_pos_up_cnt+A8↑j
                b       loc_26F2C
# ---------------------------------------------------------------------------
loc_26EF8:                              # CODE XREF: stage_pos_up_cnt+40↑j
                mov     0, r15
                stis    r15, 0x50049E
                ld      0x500498, r15
                setbit  6, r15, r15
                st      r15, 0x500498
                ld      0x500498, r15
                setbit  5, r15, r15
                st      r15, 0x500498
loc_26F2C:                              # CODE XREF: stage_pos_up_cnt+1C↑j
                ret
# End of function stage_pos_up_cnt
# =============== S U B R O U T I N E =======================================
bossm_shutter_up_cnt:                   # CODE XREF: sub_2731C+5E0↓p
                ld      floor_stage_size_0, r9 # Label from official source
                ld      0x500498, r15
                bbs     0x1F, r15, loc_27318
                ld      0x500498, r15
                bbs     0x10, r15, loc_27318
                ld      0x500498, r15
                bbc     0xF, r15, loc_271AC
                ldos    0x5004A0, r4
                addo    0x1F, 0x17, r3
                cmpobe  r3, r4, loc_272F8
                lda     0x3DCCCCCD, r8
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                mulr    r3, r8, r8
                lda     0x420C0000, r10
                addr    r10, r8, r10
                ldob    gameprogram, r8 # bit 0 clear = Player 1
                bbs     0, r8, loc_270A8
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_26FEC
                st      r13, 0x0(r15)
                b       loc_26FF8
# ---------------------------------------------------------------------------
loc_26FEC:                              # CODE XREF: bossm_shutter_up_cnt+B0↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_26FF8:                              # CODE XREF: bossm_shutter_up_cnt+B8↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     2445, r8        # Hangar door number 1
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                b       loc_272D8
# ---------------------------------------------------------------------------
loc_270A8:                              # CODE XREF: bossm_shutter_up_cnt+70↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_270F0
                st      r13, 0x0(r15)
                b       loc_270FC
# ---------------------------------------------------------------------------
loc_270F0:                              # CODE XREF: bossm_shutter_up_cnt+1B4↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_270FC:                              # CODE XREF: bossm_shutter_up_cnt+1BC↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0xBDCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     2447, r8        # Hangar door number 3
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                b       loc_272D8
# ---------------------------------------------------------------------------
loc_271AC:                              # CODE XREF: bossm_shutter_up_cnt+28↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_271F4
                st      r13, 0x0(r15)
                b       loc_27200
# ---------------------------------------------------------------------------
loc_271F4:                              # CODE XREF: bossm_shutter_up_cnt+2B8↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_27200:                              # CODE XREF: bossm_shutter_up_cnt+2C0↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x420C0000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                ldob    gameprogram, r8 # bit 0 clear = Player 1
                bbs     0, r8, loc_2727C
                lda     2445, r8        # Hangar door number 1
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                b       loc_2728C
# ---------------------------------------------------------------------------
loc_2727C:                              # CODE XREF: bossm_shutter_up_cnt+334↑j
                lda     2447, r8        # Blank or missing object
                mov     0, g1
                lda     (r8), g0
                call    set_obj
loc_2728C:                              # CODE XREF: bossm_shutter_up_cnt+348↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                b       loc_27318
# ---------------------------------------------------------------------------
loc_272D8:                              # CODE XREF: bossm_shutter_up_cnt+174↑j
                ld      debug_flag, r15
                bbs     5, r15, loc_27318
                mov     1, r3
                addr    r3, r4, r4
                stos    r4, 0x5004A0
                b       loc_27318
# ---------------------------------------------------------------------------
loc_272F8:                              # CODE XREF: bossm_shutter_up_cnt+38↑j
                mov     0, r15
                stis    r15, 0x5004A0
                ld      0x500498, r15
                setbit  0x10, r15, r15
                st      r15, 0x500498
loc_27318:                              # CODE XREF: bossm_shutter_up_cnt+10↑j
                ret
# End of function bossm_shutter_up_cnt
# =============== S U B R O U T I N E =======================================
sub_2731C:                              # CODE XREF: stage_dsp:loc_26464↑p
                ld      floor_stage_size_0, r9
                ld      floor_stage_size_0, r3
                ld      0x500498, r15
                bbs     0x1F, r15, loc_27418
                ld      0x500498, r15
                bbs     0x14, r15, loc_27418
                ld      0x500498, r15
                bbs     0xD, r15, loc_27354
                b       loc_2751C
# ---------------------------------------------------------------------------
loc_27354:                              # CODE XREF: sub_2731C+30↑j
                ldos    0x50049E, r6
                cmpobe  6, r6, loc_27390
                ldl     flt_90FD0[r6*4], r4
                mulr    r4, r9, r9
                mulr    r5, r3, r3
                ld      debug_flag, r15
                bbs     5, r15, loc_27418
                mov     1, r5
                addo    r5, r6, r6
                stos    r6, 0x50049E
                b       loc_27418
# ---------------------------------------------------------------------------
loc_27390:                              # CODE XREF: sub_2731C+40↑j
                mov     0, r15
                stis    r15, 0x50049E
                ld      0x500498, r15
                setbit  0x14, r15, r15
                st      r15, 0x500498
                ld      0x500498, r15
                setbit  0xF, r15, r15
                st      r15, 0x500498
                ld      0x500498, r15
                setbit  0x12, r15, r15
                st      r15, 0x500498
                lda     0xAE1346, g0    # sd_shatter_1
                call    check_same_sound
                call    sound_request_u
                ld      fa_camera, r3
                ldob    gameprogram, r4 # bit 0 clear = Player 1
                bbc     0, r4, loc_2740C
                ld      0x0(r3), r15
                setbit  1, r15, r15
                st      r15, 0x0(r3)
                b       loc_27418
# ---------------------------------------------------------------------------
loc_2740C:                              # CODE XREF: sub_2731C:loc_273F8↑j
                ld      0x0(r3), r15
                setbit  2, r15, r15
                st      r15, 0x0(r3)
loc_27418:                              # CODE XREF: sub_2731C+18↑j
                ld      loc_2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      loc_2008(g10), r13
                cmpobne 0, r14, loc_27460
                st      r13, 0x0(r15)
                b       loc_2746C
# ---------------------------------------------------------------------------
loc_27460:                              # CODE XREF: sub_2731C+138↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_2746C:                              # CODE XREF: sub_2731C+140↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     2709, g0        # E-MECH ACTIVATED floor
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
loc_2751C:                              # CODE XREF: sub_26830+20↑j
                ld      0x500498, r15
                bbs     0x1F, r15, loc_27594
                ld      0x500498, r15
                bbs     0x10, r15, loc_27594
                ld      0x500498, r15
                bbc     0xF, r15, loc_27594
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50185C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_27588
                st      r13, 0x0(r15)
                b       loc_27594
# ---------------------------------------------------------------------------
loc_27588:                              # CODE XREF: sub_2731C+260↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_27594:                              # CODE XREF: sub_2731C+208↑j
                ld      floor_stage_size_0, r9
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x420C0000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     2449, r3        # Deathegg II ceiling
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x500498, r15
                bbs     0x1F, r15, loc_27674
                ld      0x500498, r15
                bbs     0x10, r15, loc_27674
                ld      0x500498, r15
                bbc     0xF, r15, loc_27674
                lda     0x50185C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
loc_27674:                              # CODE XREF: sub_2731C+300↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_276BC
                st      r13, 0x0(r15)
                b       loc_276C8
# ---------------------------------------------------------------------------
loc_276BC:                              # CODE XREF: sub_2731C+394↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_276C8:                              # CODE XREF: sub_2731C+39C↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x420C0000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                shlo    0xE, 1, r3
                lda     2426, r7        # Inside of Eggman hangar, where he comes out of
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ldob    gameprogram, r8 # bit 0 clear = Player 1
                bbs     0, r8, loc_27828
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x420C0000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     2446, r8        # Hangar door number 2
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     2447, r8        # Hangar door number 3
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     2448, r8        # Hangar door number 4
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_278C0
# ---------------------------------------------------------------------------
loc_27828:                              # CODE XREF: sub_2731C+46C↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x420C0000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     2445, r8        # Hangar door number 1
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     2446, r8        # Hangar door number 2
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     2448, r8        # Hangar door number 4
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_278C0:                              # CODE XREF: sub_2731C+508↑j
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                call    bossm_shutter_up_cnt
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501844, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_27948
                st      r13, 0x0(r15)
                b       loc_27954
# ---------------------------------------------------------------------------
loc_27948:                              # CODE XREF: sub_2731C+620↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_27954:                              # CODE XREF: sub_2731C+628↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x420C0000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     2450, r3        # The four tubes
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x500498, r15
                bbs     0x1F, r15, loc_27A44
                ld      0x500498, r15
                bbs     0x10, r15, loc_27A44
                ld      0x500498, r15
                bbc     0xF, r15, loc_27A44
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_27A38
                st      r13, 0x0(r15)
                b       loc_27A44
# ---------------------------------------------------------------------------
loc_27A38:                              # CODE XREF: sub_2731C+710↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_27A44:                              # CODE XREF: sub_2731C+6B8↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x420C0000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                shlo    0xE, 1, r3
                lda     2429, r8        # Model surrounding the hangar doors
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x500498, r15
                bbs     0x1F, r15, loc_27B84
                ld      0x500498, r15
                bbs     0x10, r15, loc_27B84
                ld      0x500498, r15
                bbc     0xF, r15, loc_27B84
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
loc_27B84:                              # CODE XREF: sub_2731C+810↑j
                lda     0x501844, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ld      0x500498, r15
                bbs     0x1F, r15, loc_27C38
                ld      0x500498, r15
                bbs     0x13, r15, loc_27C38
                ld      0x500498, r15
                bbc     0x10, r15, loc_27C38
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50184C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_27C2C
                st      r13, 0x0(r15)
                b       loc_27C38
# ---------------------------------------------------------------------------
loc_27C2C:                              # CODE XREF: sub_2731C+904↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_27C38:                              # CODE XREF: sub_2731C+8AC↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x420C0000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                shlo    0xE, 1, r3
                lda     2425, r8        # Bridge from hangar to ring
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x500498, r15
                bbs     0x1F, r15, loc_27D78
                ld      0x500498, r15
                bbs     0x13, r15, loc_27D78
                ld      0x500498, r15
                bbc     0x10, r15, loc_27D78
                lda     0x50184C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
loc_27D78:                              # CODE XREF: sub_2731C+A04↑j
                ld      0x500498, r15
                bbc     0x1F, r15, loc_27E10
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x420C0000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                ld      frame_counter, r3
                lda     127, r4
                and     r3, r4, r3
                ldos    circular_door_open_close_anim[r3*2], r3
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_27E10:                              # CODE XREF: sub_2731C+A64↑j
                call    sub_27E3C
                ld      0x500498, r15
                bbc     0x1F, r15, loc_27E38
                mov     0, r15
                stis    r15, 0x50049E
                mov     0, r15
                stis    r15, 0x5004A0
loc_27E38:                              # CODE XREF: sub_2731C+B00↑j
                ret
# End of function sub_2731C
# =============== S U B R O U T I N E =======================================
sub_27E3C:                              # CODE XREF: sub_2731C:loc_27E10↑p
                ld      0x500498, r15
                bbs     0x1F, r15, loc_28030
                ld      0x500498, r15
                bbs     0x13, r15, loc_28030
                ld      0x500498, r15
                bbc     0x10, r15, loc_28030
                ld      fa_rob1, g7
                ldos    0x50049E, r4
                shlo    3, 0x17, r3
                cmpobe  r3, r4, loc_28004
                mov     0x1E, r3
                cmpobge r3, r4, loc_27FDC
                shlo    5, 5, r3
                cmpobl  r3, r4, loc_27FDC
                lda     0x96, r3
                cmpobl  r3, r4, loc_27F34
                ld      debug_flag, r15
                bbs     5, r15, loc_27FDC
                mov     0x1E, r3
                subr    r3, r4, r3
                lda     0xBE800000, r5
                ldob    gameprogram, r8 # bit 0 clear = Player 1
                bbc     0, r8, loc_27EC4
                notbit  0x1F, r5, r5
                ld      fa_rob0, g7
loc_27EC4:                              # CODE XREF: sub_27E3C+78↑j
                ld      0x20(g7), r3
                addr    r5, r3, r3
                st      r3, 0x20(g7)
                ldt     0x2A8(g7), r4
                stt     r4, 0x50A3FC
                mov     3, r4
                stos    r4, draw_particle # Value between 0 - 10
                ldob    0x50A416, r14
                setbit  3, r14, r15
                stob    r15, 0x50A416
                call    sub_32A5C
                ldt     0x284(g7), r4
                stt     r4, 0x50A3FC
                mov     3, r4
                stos    r4, draw_particle # Value between 0 - 10
                ldob    0x50A416, r14
                setbit  3, r14, r15
                stob    r15, 0x50A416
                call    sub_32A5C
                b       loc_27FDC
# ---------------------------------------------------------------------------
loc_27F34:                              # CODE XREF: sub_27E3C+50↑j
                ld      debug_flag, r15
                bbs     5, r15, loc_27FDC
                lda     0xBEEB020C, r5
                lda     0x3E10624E, r6
                ldob    gameprogram, r8 # bit 0 clear = Player 1
                bbc     0, r8, loc_27F6C
                notbit  0x1F, r5, r5
                notbit  0x1F, r6, r6
                ld      fa_rob0, g7
loc_27F6C:                              # CODE XREF: sub_27E3C+11C↑j
                ldt     0x18(g7), r8
                addr    r6, r8, r8
                addr    r5, r10, r10
                stt     r8, 0x18(g7)
                ldt     0x2A8(g7), r4
                stt     r4, 0x50A3FC
                mov     3, r4
                stos    r4, draw_particle # Value between 0 - 10
                ldob    0x50A416, r14
                setbit  3, r14, r15
                stob    r15, 0x50A416
                call    sub_32A5C
                ldt     0x284(g7), r4
                stt     r4, 0x50A3FC
                mov     3, r4
                stos    r4, draw_particle # Value between 0 - 10
                ldob    0x50A416, r14
                setbit  3, r14, r15
                stob    r15, 0x50A416
                call    sub_32A5C
loc_27FDC:                              # CODE XREF: sub_27E3C+40↑j
                ld      debug_flag, r15
                bbs     5, r15, loc_28030
                ldos    0x50049E, r4
                mov     1, r3
                addr    r3, r4, r4
                stos    r4, 0x50049E
                b       loc_28030
# ---------------------------------------------------------------------------
loc_28004:                              # CODE XREF: sub_27E3C+38↑j
                mov     0, r15
                stis    r15, 0x50049E
                mov     0, r15
                stis    r15, 0x5004A0
                ld      0x500498, r15
                setbit  0x13, r15, r15
                st      r15, 0x500498
loc_28030:                              # CODE XREF: sub_27E3C+8↑j
                ld      fa_rob0, g7
                ret
# End of function sub_27E3C
# =============== S U B R O U T I N E =======================================
# Loads flying carpet floor object to g1
animate_flying_carpet:                  # CODE XREF: stage_dsp+54↑p
                ld      frame_counter, r4
                shro    1, r4, r4
                lda     63, r15         # 63 = num of frames of animation for flying carpet
                and     r15, r4, r4
                ldos    flying_carpet_floor_anim[r4*2], g1
                ret
# End of function animate_flying_carpet
# ---------------------------------------------------------------------------
                .long 0
flying_carpet_floor_anim:.short 594     # DATA XREF: animate_flying_carpet+14↑r
                .short 595
                .short 596
                .short 597
                .short 598
                .short 599
                .short 600
                .short 601
                .short 602
                .short 603
                .short 604
                .short 605
                .short 606
                .short 607
                .short 608
                .short 609
                .short 610
                .short 611
                .short 612
                .short 613
                .short 614
                .short 615
                .short 616
                .short 617
                .short 618
                .short 619
                .short 620
                .short 621
                .short 622
                .short 623
                .short 624
                .short 625
                .short 626
                .short 627
                .short 628
                .short 629
                .short 630
                .short 631
                .short 632
                .short 633
                .short 634
                .short 635
                .short 636
                .short 637
                .short 638
                .short 639
                .short 640
                .short 641
                .short 642
                .short 643
                .short 644
                .short 645
                .short 646
                .short 647
                .short 648
                .short 649
                .short 650
                .short 651
                .short 652
                .short 653
                .short 654
                .short 655
                .short 656
                .short 657
float_9p6:      .float -9.6000004       # DATA XREF: pole_disp+190↑r
                .float 9.6000004
                .float -9.6000004
                .float -9.6000004
                .float 9.6000004
                .float -9.6000004
                .float 9.6000004
                .float 9.6000004
flying_carpet_cage_flames:.short 675    # DATA XREF: pole_disp+24C↑r
                .short 676
                .short 677
                .short 678
                .short 679
                .short 680
                .short 681
                .short 682
                .short 683
                .short 684
                .short 685
                .short 686
                .short 687
                .short 688
                .short 689
                .short 690
                .short 691
                .short 692
                .short 693
                .short 694
                .short 695
                .short 696
                .short 697
                .short 698
                .short 699
                .short 700
                .short 701
                .short 702
                .short 703
                .short 704
                .short 705
                .short 706
                .short 706
                .short 705
                .short 704
                .short 703
                .short 702
                .short 701
                .short 700
                .short 699
                .short 698
                .short 697
                .short 696
                .short 695
                .short 694
                .short 693
                .short 692
                .short 691
                .short 690
                .short 689
                .short 688
                .short 687
                .short 686
                .short 685
                .short 684
                .short 683
                .short 682
                .short 681
                .short 680
                .short 679
                .short 678
                .short 677
                .short 676
                .short 675
# ---------------------------------------------------------------------------
                ret
# =============== S U B R O U T I N E =======================================
# return
sub_28184:                              # CODE XREF: camera_init+280↑p
                ret                     # return
# End of function sub_28184
# =============== S U B R O U T I N E =======================================
clip_point_check_yoko:                  # CODE XREF: ground_disp+CC↓p
                ldl     focus_dist_x, r8 # Label from official source
                lda     0x3F2AACDA, r3
                mulr    r3, r8, r8
                mulr    r3, r9, r9
                lda     0x50E000, r10
                ld      (g1), g5
                addo    4, g1, g1
                mov     0, r6
loc_281B4:                              # CODE XREF: clip_point_check_yoko+C0↓j
                ldl     (g1), r4
                addo    8, g1, g1
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r7
                mulr    r8, r4, r4
                mulr    r9, r5, r5
                divr    r7, r4, r4
                divr    r7, r5, r5
                mov     0, r3
                lda     0x3F800000, r15
                cmpr    r7, r15
                bg      loc_2820C
                shlo    4, 9, r3
                b       loc_2823C
# ---------------------------------------------------------------------------
loc_2820C:                              # CODE XREF: clip_point_check_yoko+78↑j
                lda     0xC3780000, r15
                cmpr    r4, r15
                bg      loc_28224
                setbit  0, r3, r3
                setbit  7, r3, r3
loc_28224:                              # CODE XREF: clip_point_check_yoko+90↑j
                lda     0x43780000, r15
                cmpr    r4, r15
                bl      loc_2823C
                setbit  1, r3, r3
                setbit  7, r3, r3
loc_2823C:                              # CODE XREF: clip_point_check_yoko+80↑j
                stob    r3, (r10)
                addo    1, r10, r10
                cmpdeco 1, g5, g5
                bl      loc_281B4
                ret
# End of function clip_point_check_yoko
# ---------------------------------------------------------------------------
clip_point_check:                       # Label from official source
                ldl     focus_dist_x, r8
                lda     0x3F2AACDA, r3
                mulr    r3, r9, r9
                lda     0x50E000, r10
                ld      (g1), g5
                addo    4, g1, g1
                mov     0, r6
loc_28278:                              # CODE XREF: ROM:0002832C↓j
                ldt     (g1), r4
                addo    0xC, g1, g1
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r7
                mulr    r8, r4, r4
                mulr    r9, r5, r5
                divr    r7, r4, r4
                divr    r7, r5, r5
                mov     0, r3
                lda     0x3DCCCCCD, r15
                cmpr    r7, r15
                bg      loc_282D0
                mov     0x1F, r3
                b       loc_28320
# ---------------------------------------------------------------------------
loc_282D0:                              # CODE XREF: ROM:000282C4↑j
                lda     0xC3780000, r15
                cmpr    r4, r15
                bg      loc_282E4
                setbit  0, r3, r3
loc_282E4:                              # CODE XREF: ROM:000282DC↑j
                lda     0x43780000, r15
                cmpr    r4, r15
                bl      loc_282F8
                setbit  1, r3, r3
loc_282F8:                              # CODE XREF: ROM:000282F0↑j
                lda     0xC3400000, r15
                cmpr    r5, r15
                bg      loc_2830C
                setbit  2, r3, r3
loc_2830C:                              # CODE XREF: ROM:00028304↑j
                lda     0x43400000, r15
                cmpr    r5, r15
                bl      loc_28320
                setbit  3, r3, r3
loc_28320:                              # CODE XREF: ROM:000282CC↑j
                stob    r3, (r10)
                addo    1, r10, r10
                cmpdeco 1, g5, g5
                bl      loc_28278
                ret
# =============== S U B R O U T I N E =======================================
# g2 = area_clip_data
# g3 = stage parts for current stage
area_clip:                              # CODE XREF: ground_disp+134↓p
                mov     0, r8           # Label from official source
                lda     0x50E000, r11
                mov     0, r7
                ldos    (g2), r5
                addo    2, g2, g2
                mov     0, r6
loc_28350:                              # CODE XREF: area_clip+7C↓j
                ldos    (g2), r3
                ldos    displacement(r11)[r3*1], r10
                ldos    2(g2), r3
                ldos    displacement(r11)[r3*1], r9
                and     r9, r10, r10
                ldos    4(g2), r3
                ldob    displacement(r11)[r3], r9
                and     r9, r10, r10
                ldos    6(g2), r3
                ldob    displacement(r11)[r3], r9
                and     r9, r10, r10
                addo    8, g2, g2
                cmpobne 0, r10, loc_283AC
                ldos    (g3)[r6*2], r13
                cmpobe  r7, r13, loc_283AC
                mov     0, g1
                lda     (r13), g0
                call    set_obj
                setbit  r6, r8, r8
loc_283AC:                              # CODE XREF: area_clip+5C↑j
                cmpinco r5, r6, r6
                bg      loc_28350
                mov     0, r4
                mov     r4, r5
                mov     r4, r6
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x35006A6A, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r6
                lda     0x43A00000, r3
                addr    r3, r4, r4
                addr    r3, r6, r6
                cvtri   r4, r4
                cvtri   r6, r6
                shlo    5, 5, r3
                divo    r3, r4, r4
                divo    r3, r6, r6
                and     3, r4, r4
                and     3, r6, r6
                mulo    4, r6, r6
                addo    r4, r6, r6
                bbs     r6, r8, loc_28444
                ldos    (g3)[r6*2], r13
                mov     0, g1
                lda     (r13), g0
                call    set_obj
loc_28444:                              # CODE XREF: area_clip+FC↑j
                ret
# End of function area_clip
# =============== S U B R O U T I N E =======================================
ground_disp:                            # CODE XREF: camera_init+C84↑p
                lda     0x800101, r15 # Label from official source
                st      r15, (g11)[g12*1]
                ldob    stage_num, r12
                shlo    8, r12, r4
                ld      stage_data(r4), r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x50A024, r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x50A020, r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x50A022, r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      stage_xpos, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                ld      stage_ypos, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                ld      stage_zpos, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                bbs     0xD, r3, loc_2858C
                cmpobne 9, r12, loc_2850C
                ld      0x500498, r4
                bbs     6, r4, loc_2858C
loc_2850C:                              # CODE XREF: ground_disp+B4↑j
                lda     dword_90654, g1
                call    clip_point_check_yoko
                b       loc_2851C
# ---------------------------------------------------------------------------
loc_2851C:                              # CODE XREF: ground_disp+D0↑j
                lda     area_clip_data, g2
                ldob    stage_num, r12
                shlo    8, r12, r4
                lda     stage_parts(r4), g3
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                cmpobne 9, r12, loc_2854C
                call    stage_pos_up_cnt
loc_2854C:                              # CODE XREF: ground_disp+FC↑j
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                call    area_clip       # g2 = area_clip_data
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_2858C:                              # CODE XREF: ground_disp+B0↑j
                ldob    stage_num, r3
                cmpobe  14, r3, loc_285A0
                cmpobe  0, r3, loc_285A0
                cmpobne 13, r3, loc_28600
loc_285A0:                              # CODE XREF: ground_disp+14C↑j
                ld      0x501A44, r3
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     (r3), g2
                mov     0, g1
                lda     555, g0         # South Island water
                call    set_obj_thd
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_28600:                              # CODE XREF: ground_disp+154↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# End of function ground_disp
# =============== S U B R O U T I N E =======================================
doom_cnt:                               # CODE XREF: camera_init+BD0↑p
                ldob    stage_num, r4   # Label from official source
                cmpobe  0xA, r4, loc_288A4
                cmpobe  3, r4, loc_288A4
                cmpobne 9, r4, loc_28630
                ld      0x500498, r4
                bbs     4, r4, loc_288A4
loc_28630:                              # CODE XREF: doom_cnt+10↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x2C005858, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                ld      (g11)[g12*1], r13
                ld      (g11)[g12*1], r14
                lda     0x3F5DB3D7, g1
                lda     0x7800F0F, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                ld      (g11)[g12*1], r9
                ld      (g11)[g12*1], r10
                lda     0x21804343, r15
                st      r15, (g11)[g12*1]
                mov     7, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x50A024, r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x50A020, r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x50A022, r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                cmpobe  4, r4, loc_28728
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      stage_xpos, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                ld      stage_ypos, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
                ld      stage_zpos, r15
                notbit  0x1F, r15, r15
                st      r15, (g11)[g12*1]
loc_28728:                              # CODE XREF: doom_cnt+D8↑j
                ldos    0x500464, r4
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ldob    stage_num, r3
                and     0xF, r3, r3
                mulo    0x14, r3, r3
                ldob    stage_num, r11
                shlo    8, r11, r3
                ld      stage_data(r3), r15
                lda     sky_texture(r3), r3
                mov     2, r5
                bbc     0x1B, r15, loc_28778
                addo    r5, r4, r4
loc_28778:                              # CODE XREF: doom_cnt+160↑j
                stos    r4, 0x500464
                shlo    0xC, 1, r13
                lda     0xC21C126F, r5
                lda     0x43442831, r9
                mov     0, r11
loc_28798:                              # CODE XREF: doom_cnt+284↓j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      0x0(g13), r15
                bbs     0x1B, r15, loc_28820
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r15
                ld      (g11)[g12*1], r6
                subr    r4, r8, r4
                subr    r10, r6, r6
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     0x2C805959, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                divr    r7, r4, r4
                cmpr    g1, r4
                bl      loc_28890
loc_28820:                              # CODE XREF: doom_cnt+19C↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x23004646, r15
                st      r15, (g11)[g12*1]
                mov     7, r15
                st      r15, (g11)[g12*1]
                ldob    stage_num, r15
                cmpobe  2, r15, loc_2886C
                lda     0x3FCCCCCD, r4
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r4, (g11)[g12*1]
loc_2886C:                              # CODE XREF: doom_cnt+238↑j
                and     3, r11, r4
                ldos    (r3)[r4*2], r4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_28890
# ---------------------------------------------------------------------------
loc_28890:                              # CODE XREF: doom_cnt+20C↑j
                cmpinco 0xF, r11, r11
                bg      loc_28798
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_288A4:                              # CODE XREF: doom_cnt+8↑j
                ret
# End of function doom_cnt
# =============== S U B R O U T I N E =======================================
area_check:                             # CODE XREF: rob_area_check+1C↑p
                mov     0, r11          # Label from official source
                ld      stage_x, r6
                setbit  0x1F, r6, r7
                cmpible g0, r6, loc_288C0
                setbit  3, r11, r11
loc_288C0:                              # CODE XREF: area_check+10↑j
                cmpoble g0, r7, loc_288C8
                setbit  4, r11, r11
loc_288C8:                              # CODE XREF: area_check:loc_288C0↑j
                cmpible g2, r6, loc_288D0
                setbit  1, r11, r11
loc_288D0:                              # CODE XREF: area_check:loc_288C8↑j
                cmpoble g2, r7, loc_288D8
                setbit  2, r11, r11
loc_288D8:                              # CODE XREF: area_check:loc_288D0↑j
                mov     r11, g0
                ret
# End of function area_check
# =============== S U B R O U T I N E =======================================
set_hitch_efc:                          # CODE XREF: camera_init+690↑p
                ldob    0x40(g13), r3   # Label from official source
                lda     0x3F800000, r15
                st      r15, 0x13C(g13)
                lda     displacement, r15
                st      r15, 0x140(g13)
                ret
# End of function set_hitch_efc
# ---------------------------------------------------------------------------
                ldob    0x50004D, r14 # Unreachable code
                cmpobne 0, r14, loc_28918
                ld      fa_rob0, r3
                b       loc_28920
# ---------------------------------------------------------------------------
loc_28918:                              # CODE XREF: ROM:00028908↑j
                ld      fa_rob1, r3
loc_28920:                              # CODE XREF: ROM:00028914↑j
                ldt     0x1F4(r3), g0
                stt     g0, 0x144(g13)
                ld      0x13C(g13), r3
                lda     0x3F7D70A4, r4
                mulr    r3, r4, r3
                lda     0x3E99999A, r4
                lda     0x40400000, r5
                cmpr    r4, r3
                bl      loc_28958
                mov     r4, r3
                b       loc_28964
# ---------------------------------------------------------------------------
loc_28958:                              # CODE XREF: ROM:0002894C↑j
                cmpr    r5, r3
                bg      loc_28964
                mov     r5, r3
loc_28964:                              # CODE XREF: ROM:00028954↑j
                st      r3, 0x13C(g13)
                ldt     0x144(g13), g0
                ldt     0x18(g13), r4
                mov     r5, g1
                lda     0x16002C2C, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      g2, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x3F800000, r5
                ld      0x13C(g13), r6
                subr    r5, r6, r3
                mulr    r4, r3, r3
                st      r3, 0x140(g13)
                ret
# =============== S U B R O U T I N E =======================================
# "Shadow" (kage)
make_kage_matrix:                       # CODE XREF: camera_init+A80↑p
                lda     0x10802121, r15 # Label from official source
                st      r15, (g11)[g12*1]
                ldis    VECTER_X, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x3F800000, r14
                divr    r3, r14, r5
                shlo    0xE, 1, r13
                ldis    VECTER_X, r14
                subi    r13, r14, r6
                ldis    VECTER_Y, r4
                notbit  0xF, r4, r4
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r4, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x33806767, r15
                st      r15, (g11)[g12*1]
                lda     0x3D00, r15
                st      r15, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# End of function make_kage_matrix
# =============== S U B R O U T I N E =======================================
ko_disp:                                # CODE XREF: camera_init+1940↑p
                ldob    also_mode, r15  # Label from official source
                lda     mode8, r14
                cmpobe  r14, r15, loc_28AAC
                lda     mode9, r14
                cmpobne r14, r15, loc_28DBC
loc_28AAC:                              # CODE XREF: ko_disp+10↑j
                lda     start_ip_add, r3
                ldob    also_sub_mode, r14
                cmpobe  r3, r14, loc_28AD4
                lda     start_ip_add+1, r3
                ldob    also_sub_mode, r14
                cmpobne r3, r14, loc_28DBC
loc_28AD4:                              # CODE XREF: ko_disp+30↑j
                ldob    0x500050, r14
                cmpobne 0, r14, loc_28DBC
                ld      debug_flag, r15
                bbs     5, r15, loc_28B40
                lda     0x40628F5C, r3
                lda     0x3E99999A, r6
                ld      mod_fa_game_disp, r4
                lda     0xFFFFFFD8, r13
                ldis    0x98(r4), r14
                subi    r13, r14, r15
                stis    r15, 0x98(r4)
                ld      0x94(r4), r5
                cmpr    r3, r5
                bg      loc_28B2C
                mov     r3, r5
                b       loc_28B3C
# ---------------------------------------------------------------------------
loc_28B2C:                              # CODE XREF: ko_disp+94↑j
                addr    r6, r5, r5
                cmpr    r3, r5
                bg      loc_28B3C
                mov     r3, r5
loc_28B3C:                              # CODE XREF: ko_disp+9C↑j
                st      r5, 0x94(r4)
loc_28B40:                              # CODE XREF: ko_disp+5C↑j
                ld      mod_fa_game_disp, r4
                shlo    0xD, 1, r6
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r6, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r10
                ld      (g11)[g12*1], r11
                ld      (g11)[g12*1], r12
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                st      r10, (g10)[g12*1]
                st      r11, (g10)[g12*1]
                st      r12, (g10)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      CTRL_TIMER, r3
                lda     k_o_objects, r8
                ld      (r8), r5
                remo    r5, r3, r3
                ldos    4(r8)[r3*4], r6
                ldos    6(r8)[r3*4], r7
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                ld      0x94(r4), r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0xBF0A3D71, r15
                st      r15, (g11)[g12*1]
                lda     0xBE8F5C29, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x98(r4), r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r6), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                ld      0x94(r4), r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x3F0A3D71, r15
                st      r15, (g11)[g12*1]
                lda     0xBE8F5C29, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x98(r4), r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_28DBC:                              # CODE XREF: ko_disp+1C↑j
                ret
# End of function ko_disp
# ---------------------------------------------------------------------------
k_o_objects:    .long 4                 # DATA XREF: ko_disp+170↑o
                .short 3014             # Yellow K in KO
                .short 3011             # Yellow O in KO
                .short 3014             # Yellow K in KO
                .short 3011             # Yellow O in KO
                .short 3012             # Red K in KO
                .short 3009             # Red O in KO
                .short 3012             # Red K in KO
                .short 3009             # Red O in KO
# =============== S U B R O U T I N E =======================================
# Puts object at 0x50B118 in the middle of the stage. Seemingly unused function in StF.
name_char_disp:                         # CODE XREF: camera_init+1670↑p
                ld      0x0(g13), r15   # Label from official source
                bbc     7, r15, loc_28E54
                lda     0x50B100, r11
                ld      dword_97E7C, r10
loc_28DEC:                              # CODE XREF: name_char_disp+7C↓j
                ld      0x0(r11), r15
                bbs     0, r15, loc_28E44
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     4(r11), r12
                stt     r12, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x12(r11), r15
                st      r15, (g11)[g12*1]
                ld      0x18(r11), r3   # r3 = 0x50B100+0x18
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_28E44:                              # CODE XREF: name_char_disp+1C↑j
                addo    0x1F, 1, r13
                addi    r13, r11, r11
                cmpdeco 1, r10, r10
                bl      loc_28DEC
loc_28E54:                              # CODE XREF: name_char_disp+4↑j
                ret
# End of function name_char_disp
# =============== S U B R O U T I N E =======================================
# "Shadow" (kage)
name_char_kage_disp:                    # CODE XREF: camera_init:loc_2033C↑p
                ld      0x0(g13), r15   # Label from official source
                bbc     7, r15, loc_28F0C
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x34006868, r15
                st      r15, (g11)[g12*1]
                lda     0x3D00, r15
                st      r15, (g11)[g12*1]
                lda     0x50B100, r11
                ld      dword_97E7C, r10
loc_28E94:                              # CODE XREF: name_char_kage_disp+A4↓j
                ld      0x0(r11), r15
                bbs     0, r15, loc_28EF0
                ld      0x1C(r11), r8
                cmpobe  0, r8, loc_28EF0
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     4(r11), r12
                stt     r12, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x12(r11), r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_28EF0:                              # CODE XREF: name_char_kage_disp+40↑j
                addo    0x1F, 1, r13
                addi    r13, r11, r11
                cmpdeco 1, r10, r10
                bl      loc_28E94
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_28F0C:                              # CODE XREF: name_char_kage_disp+4↑j
                ret
# End of function name_char_kage_disp
# =============== S U B R O U T I N E =======================================
fa_pol_test:                            # DATA XREF: ROM:00046464↓o
                ldob    0x530150, r14
                cmpoble 2, r14, loc_28F2C
                lda     loc_29014, r15
                st      r15, 0xC(g13)
                b       loc_29014
# ---------------------------------------------------------------------------
loc_28F2C:                              # CODE XREF: fa_pol_test+8↑j
                lda     loc_28F38, r15
                st      r15, 0xC(g13)
loc_28F38:                              # DATA XREF: fa_pol_test:loc_28F2C↑o
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x3E9EB852, r15
                st      r15, (g11)[g12*1]
                lda     0x3E428F5C, r15
                st      r15, (g11)[g12*1]
                lda     0x3F9EB852, r15
                st      r15, (g11)[g12*1]
                ldob    0x53014C, r3
                cmpobe  0, r3, loc_28FC8
loc_28F98:                              # CODE XREF: fa_pol_test+B4↓j
                ldob    0x530150, r14
                cmpobe  3, r14, loc_28FB4
                mov     0, g1
                lda     106, g0         # Transparent texture shading test on a flat square
                call    set_obj
                b       loc_28FC0
# ---------------------------------------------------------------------------
loc_28FB4:                              # CODE XREF: fa_pol_test+90↑j
                mov     0, g1
                lda     105, g0         # Dark shading test on a flash square
                call    set_obj
loc_28FC0:                              # CODE XREF: fa_pol_test+A0↑j
                cmpdeco 1, r3, r3
                bl      loc_28F98
loc_28FC8:                              # CODE XREF: fa_pol_test+84↑j
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xBEC7AE14, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     105, g0         # Dark shading test on a flash square
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# ---------------------------------------------------------------------------
loc_29014:                              # CODE XREF: fa_pol_test+18↑j
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldob    0x53014C, r3
                cmpobe  0, r3, loc_2904C
loc_29038:                              # CODE XREF: fa_pol_test+138↓j
                mov     0, g1
                lda     99, g0          # Lit bright textured cube
                call    set_obj
                cmpdeco 1, r3, r3
                bl      loc_29038
loc_2904C:                              # CODE XREF: fa_pol_test+124↑j
                ldob    0x53014D, r3
                cmpobe  0, r3, loc_2906C
loc_29058:                              # CODE XREF: fa_pol_test+158↓j
                mov     0, g1
                lda     98, g0          # Very dark shaded textured cube
                call    set_obj
                cmpdeco 1, r3, r3
                bl      loc_29058
loc_2906C:                              # CODE XREF: fa_pol_test+144↑j
                ldob    0x53014E, r3
                cmpobe  0, r3, loc_2908C
loc_29078:                              # CODE XREF: fa_pol_test+178↓j
                mov     0, g1
                lda     97, g0          # Yellow shaded textured square can only be seen on one side
                call    set_obj
                cmpdeco 1, r3, r3
                bl      loc_29078
loc_2908C:                              # CODE XREF: fa_pol_test+164↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x3F428F5C, r15
                st      r15, (g11)[g12*1]
                lda     0xBF3851EC, r15
                st      r15, (g11)[g12*1]
                lda     0x401F5C29, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     97, g0          # Yellow shaded textured square can only be seen on one side
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# End of function fa_pol_test
# =============== S U B R O U T I N E =======================================
sub_290FC:                              # CODE XREF: ROM:00006A94↑p
                mov     g0, r12
                b       loc_29118
# End of function sub_290FC
# =============== S U B R O U T I N E =======================================
sub_29104:                              # CODE XREF: CONTINUE_DSP-4CE4↑p
                lda     flt_90A20, r4
                b       loc_29120
# End of function sub_29104
# =============== S U B R O U T I N E =======================================
sub_29110:                              # CODE XREF: ROM:0000FD18↑p
                ldob    stage_num, r12
loc_29118:                              # CODE XREF: sub_290FC+4↑j
                ld      float_apx_1_5[r12*4], r4
loc_29120:                              # CODE XREF: sub_29104+8↑j
                lda     material_num_floats, r5
                addo    0x1F, 1, r11
loc_2912C:                              # CODE XREF: sub_29110+30↓j
                ld      (r4), r3        # value of flt_90A20 to r3
                st      r3, (r5)        # write to material_num_floats
                addo    4, r4, r4
                addo    4, r5, r5
                cmpdeco 1, r11, r11
                bl      loc_2912C
                ret
# End of function sub_29110
# =============== S U B R O U T I N E =======================================
set_material:                           # CODE XREF: camera_init+444↑p
                lda     material_num_floats, r4 # Label from official source
                mov     0, r3
                addo    0x1F, 1, r5
                st      g14, mmode
                lda     0x606, g14
                st      g14, 0x60(g10)
                ld      mmode, g14
                st      r3, (g10)[g12*1]
                st      r5, (g10)[g12*1]
                lda     flt_90BA0[r3*4], r6
loc_29180:                              # CODE XREF: set_material+54↓j
                ld      (r4), r3
                st      r3, (g10)[g12*1]
                ld      (r6), r3
                st      r3, (g10)[g12*1]
                addo    4, r4, r4
                addo    4, r6, r6
                cmpdeco 1, r5, r5
                bl      loc_29180
                st      g14, mmode
                lda     off_1010, g14
                st      g14, 0x100(g10)
                ld      mmode, g14
                st      r3, (g10)[g12*1]
                ret
# End of function set_material
# =============== S U B R O U T I N E =======================================
set_material_one:                       # CODE XREF: ROM:00020FC4↑p
                mov     1, r5           # Label from official source
                st      g14, mmode
                lda     0x606, g14
                st      g14, 0x60(g10)
                ld      mmode, g14
                st      g1, (g10)[g12*1]
                st      r5, (g10)[g12*1]
                lda     flt_90BA0[g1*4], r6
                st      g0, (g10)[g12*1]
                ld      (r6), r3
                st      r3, (g10)[g12*1]
                st      g14, mmode
                lda     off_1010, g14
                st      g14, 0x100(g10)
                ld      mmode, g14
                st      r3, (g10)[g12*1]
                ret
# End of function set_material_one
# =============== S U B R O U T I N E =======================================
material_part_chg:                      # CODE XREF: stage_dsp+104↑p
                ldob    (g2)[g1*4], r4  # Label from official source
                ldob    1(g2)[g1*4], r5
                ldob    2(g2)[g1*4], r6
                ldob    3(g2)[g1*4], r7
                mov     g3, r11
                shri    8, r11, r10
                shri    0x10, r11, r9
                shri    0x18, r11, r8
                subi    r8, r4, r4
                subi    r9, r5, r5
                subi    r10, r6, r6
                subi    r11, r7, r7
                lda     0xFF, r14
                and     r4, r14, r4
                and     r5, r14, r5
                and     r6, r14, r6
                and     r7, r14, r7
                mov     g0, r3
                muli    r4, r3, r4
                muli    r5, r3, r5
                muli    r6, r3, r6
                muli    r7, r3, r7
                shri    8, r4, r4
                shri    8, r5, r5
                shri    8, r6, r6
                shri    8, r7, r7
                addi    r8, r4, r8
                addi    r9, r5, r9
                addi    r10, r6, r10
                addi    r11, r7, r11
                lda     0xFF, r14
                and     r8, r14, r8
                and     r9, r14, r9
                and     r10, r14, r10
                and     r11, r14, r11
                stob    r8, 0x530080[g1*4]
                stob    r9, 0x530081[g1*4]
                stob    r10, 0x530082[g1*4]
                stob    r11, 0x530083[g1*4]
                ret
# End of function material_part_chg
# =============== S U B R O U T I N E =======================================
change_material:                        # CODE XREF: camera_init+11BC↑p
                mov     g2, r4          # Label from official source
                mov     g1, r5
                st      g14, mmode
                lda     0x606, g14
                st      g14, 0x60(g10)
                ld      mmode, g14
                st      g0, (g10)[g12*1]
                st      r5, (g10)[g12*1]
                lda     flt_90BA0[g0*4], r6
loc_2930C:                              # CODE XREF: change_material+4C↓j
                ld      (r4), r3
                st      r3, (g10)[g12*1]
                ld      (r6), r3
                st      r3, (g10)[g12*1]
                addo    4, r4, r4
                addo    4, r6, r6
                cmpdeco 1, r5, r5
                bl      loc_2930C
                st      g14, mmode
                lda     off_1010, g14
                st      g14, 0x100(g10)
                ld      mmode, g14
                st      r3, (g10)[g12*1]
                ret
# End of function change_material
# =============== S U B R O U T I N E =======================================
sub_29350:                              # CODE XREF: change_scene+140↑p
                ldob    stage_num, r3
                shlo    8, r3, r4
                ld      stage_rom_soko(r4), r15 # stage_soko per level
                st      r15, stage_soko
                lda     0x3FCCCCCD, r13
                ld      stage_height(r4), r14 # cage_height per level
                mulr    r13, r14, r15
                st      r15, cage_height
                ret
# End of function sub_29350
# =============== S U B R O U T I N E =======================================
coli_init:                              # DATA XREF: ROM:00008224↑o
                lda     collision, r15  # Label from official source
                st      r15, 0xC(g13)
                mov     0, r15
                st      r15, 0x90(g13)
                lda     0x3C23D70A, r4
                st      r4, 0x1D0(g13)
                ld      0x1B0(g13), r15
                clrbit  0, r15, r15
                st      r15, 0x1B0(g13)
                lda     0x3DCCCCCD, r15
                st      r15, 0x1D8(g13)
                lda     0x3FC00000, r15
                st      r15, 0x1D4(g13)
                lda     0x40400000, r15
                st      r15, 0x278(g13)
                shlo    8, 7, r15
                stis    r15, 0x20C(g13)
                st      r15, 0x158(g13)
                ret
# End of function coli_init
# =============== S U B R O U T I N E =======================================
collision:                              # DATA XREF: coli_init↑o
                ldob    also_sub_mode, r15 # Label from official source
                lda     check_word3+2, r14
                cmpobe  r14, r15, loc_2959C
                lda     check_word3+3, r14
                cmpobe  r14, r15, loc_2959C
                ld      debug_flag, r15
                bbs     5, r15, loc_29428
                ld      0x2AC(g13), r3
                cmpobe  0, r3, loc_29424
                subi    1, r3, r3
loc_29424:                              # CODE XREF: collision+30↑j
                st      r3, 0x2AC(g13)
loc_29428:                              # CODE XREF: collision+28↑j
                call    sub_425D8
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                call    finish_val_cont
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                call    finish_val_cont
                ld      fa_rob0, g7
                call    rob_ball_data_make
                ld      fa_rob1, g7
                call    rob_ball_data_make
                ld      debug_flag, r15
                bbs     5, r15, loc_2959C
                call    support_rob_position
                ld      fa_rob0, r7
                ld      fa_rob1, r8
                mov     r7, g7
                mov     r8, g8
                call    coli_cont_cop
                mov     r7, g7
                mov     r8, g8
                call    no_coli_unit_set
                mov     r8, g7
                mov     r7, g8
                call    no_coli_unit_set
                mov     r7, g7
                mov     r8, g8
                call    coli_attack_chk
                mov     r8, g7
                mov     r7, g8
                call    coli_attack_chk
                ldos    0x276(g13), r14
                cmpobe  0, r14, loc_2951C
                ldos    0x274(g13), r14
                cmpobe  0, r14, loc_2952C
                ld      0x804(g7), r4
                ld      0x804(g8), r5
                bbc     0xF, r5, loc_294EC
                bbc     0xF, r4, loc_29524
                b       loc_294F0
# ---------------------------------------------------------------------------
loc_294EC:                              # CODE XREF: collision+F4↑j
                bbs     0xF, r4, loc_2952C
loc_294F0:                              # CODE XREF: collision+FC↑j
                ldob    0x822(g7), r13
                ldob    0x822(g8), r14
                cmpobg  r13, r14, loc_2952C
                bl      loc_29524
                ldos    0x808(g7), r13
                ldos    0x808(g8), r14
                cmpobl  r13, r14, loc_2952C
                bg      loc_29524
                call    attack_hit
                call    damage_unit
                b       loc_29524
# ---------------------------------------------------------------------------
loc_2951C:                              # CODE XREF: collision+E0↑j
                ldos    0x274(g13), r14
                cmpobe  0, r14, loc_29534
loc_29524:                              # CODE XREF: collision+F8↑j
                mov     r7, g7
                mov     r8, g8
loc_2952C:                              # CODE XREF: collision+E8↑j
                call    attack_hit
                call    damage_unit
loc_29534:                              # CODE XREF: collision+134↑j
                call    sub_2BEF4
                ld      mod_fa_effect, g6
                mov     0, r6
                stos    r6, 0x908(g6)
                call    kabe_hit
                ld      fa_rob0, g7
                ld      fa_rob0, g8
                call    zibaku_ckeck
                ld      fa_rob1, g7
                ld      fa_rob1, g8
                call    zibaku_ckeck
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                call    gusya_ckeck
                ld      fa_rob0, g8
                ld      fa_rob1, g7
                call    gusya_ckeck
loc_2959C:                              # CODE XREF: collision+10↑j
                ret
# End of function collision
# =============== S U B R O U T I N E =======================================
finish_val_cont:                        # CODE XREF: collision+50↑p
                ldob    0x1A18(g7), r3  # Label from official source
                cmpobe  2, r3, loc_295EC
                cmpobe  1, r3, loc_295CC
                cmpobe  0, r3, loc_295B8
                b       loc_29600
# ---------------------------------------------------------------------------
loc_295B8:                              # CODE XREF: finish_val_cont+10↑j
                ldob    0x7D2(g8), r14
                bbc     0, r14, loc_29600
                mov     1, r15
                stib    r15, 0x1A18(g7)
loc_295CC:                              # CODE XREF: finish_val_cont+C↑j
                ld      0x710(g7), r3
                lda     0x41080000, r4
                cmpr    r4, r3
                bg      loc_29600
                mov     2, r15
                stib    r15, 0x1A18(g7)
loc_295EC:                              # CODE XREF: finish_val_cont+8↑j
                ldob    0xA29(g7), r14
                cmpobg  0xE, r14, loc_29600
                mov     3, r15
                stib    r15, 0x1A18(g7)
loc_29600:                              # CODE XREF: finish_val_cont+14↑j
                ret
# End of function finish_val_cont
# =============== S U B R O U T I N E =======================================
kabe_hit:                               # CODE XREF: collision+15C↑p
                ld      debug_flag, r15 # Label from official source
                bbs     5, r15, loc_29644
                mov     0, r15
                st      r15, 0x50A1F8
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                call    kabe_hit_chk
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                call    kabe_hit_chk
loc_29644:                              # CODE XREF: kabe_hit+8↑j
                ret
# End of function kabe_hit
# =============== S U B R O U T I N E =======================================
kabe_hit_chk:                           # CODE XREF: kabe_hit+28↑p
                ldob    also_mode, r3   # Label from Fighting Vipers source (code differs slightly)
                lda     mode9, r4
                cmpobne r4, r3, loc_29684
                ldob    also_sub_mode, r3
                lda     start_ip_add+2, r4
                cmpobe  r4, r3, loc_2967C
                lda     start_ip_add+3, r4
                cmpobne r4, r3, loc_29684
loc_2967C:                              # CODE XREF: kabe_hit_chk+24↑j
                ld      0x1A4(g7), r15
                bbs     0x1B, r15, loc_297A0
loc_29684:                              # CODE XREF: kabe_hit_chk+10↑j
                ld      0x1F8(g7), r3
                ld      cage_height, r4
                lda     0x40000000, r5
                addr    r5, r4, r4
                cmpr    r4, r3
                ble     loc_297A0
                ldob    4(g7), r3
                ldos    0x1F4(g13)[r3*2], r3
                clrbit  3, r3, r3
                cmpobl  5, r3, loc_297A0
                ld      0x644(g7), r14
                cmpobne 0, r14, loc_296C8
                ld      0x64C(g7), r14
                cmpobe  0, r14, loc_297A0
loc_296C8:                              # CODE XREF: kabe_hit_chk+74↑j
                ld      0x1A4(g7), r15
                bbs     4, r15, loc_296E0
                ld      0x1A4(g7), r15
                bbs     0, r15, loc_296E0
                ld      0x5B8(g7), r15
                bbc     0, r15, loc_297A0
loc_296E0:                              # CODE XREF: kabe_hit_chk+84↑j
                call    sub_297A4
                ld      0x1A0(g7), g6
                ld      0x1A4(g7), r15
                bbc     0x1B, r15, bark_bowling_throw
                ldos    (displacement72)(g6), r3
                shlo    0x19, 0x15, r13
                addi    r13, r3, r3
                st      r3, 0x198(g7)
                b       loc_297A0
# ---------------------------------------------------------------------------
bark_bowling_throw:                     # CODE XREF: kabe_hit_chk+A4↑j
                ld      0x70C(g7), r15
                bbc     0, r15, loc_297A0
                call    sound_chainlink_hit
                lda     0x1B4, r13
                ldos    0x1A8(g7), r14
                cmpobne r13, r14, loc_2972C
                lda     0xAE1359, g0    # sd_bowling
                call    sound_request_u
loc_2972C:                              # CODE XREF: kabe_hit_chk+D4↑j
                ldob    4(g7), r14
                shlo    7, r14, r14
                setbit  0, r14, r14
                st      r14, 0x50A378
                ldos    0xA04(g7), r3
                cmpobe  0, r3, kabh_no_damage
                mov     r3, g0
                call    damage_calculation # g7 = damage reciever
                mov     0, r15
                stis    r15, 0xC54(g7)
                mov     r3, g0
                call    kabe_parts_damage
kabh_no_damage:                         # CODE XREF: kabe_hit_chk+FC↑j
                ldos    0xA02(g7), r3   # Label from Fighting Vipers source (code differs slightly)
                lda     0x13A, r13
                cmpibne r13, r3, loc_29784
                ldos    (displacement76)(g6), r3
                ldob    0x7D2(g8), r14
                bbc     0, r14, loc_29784
                ldos    (displacement78)(g6), r3
loc_29784:                              # CODE XREF: kabe_hit_chk+120↑j
                mov     0, r15
                stib    r15, 0x843(g7)
                mov     0, r15
                stib    r15, 0x843(g8)
                shlo    0x18, 0x1B, r4
                addo    r3, r4, r4
                st      r4, 0x198(g7)
loc_297A0:                              # CODE XREF: kabe_hit_chk+38↑j
                ret
# End of function kabe_hit_chk
# =============== S U B R O U T I N E =======================================
sub_297A4:                              # CODE XREF: kabe_hit_chk:loc_296E0↑p
                ld      stage_x, r9
                ld      0x660(g7), r14
                cmpobe  0, r14, loc_297E4
                ld      0x50A1E4, r15
                setbit  0, r15, r15
                st      r15, 0x50A1E4
                ldt     0x1F4(g7), r4
                stt     r4, 0x1A00(g7)
                mov     r9, r7
                st      r7, 0x1A00(g7)
                b       loc_29888
# ---------------------------------------------------------------------------
loc_297E4:                              # CODE XREF: sub_297A4+C↑j
                ld      0x664(g7), r14
                cmpobe  0, r14, loc_2981C
                ld      0x50A1E4, r15
                setbit  1, r15, r15
                st      r15, 0x50A1E4
                ldt     0x1F4(g7), r4
                stt     r4, 0x1A00(g7)
                notbit  0x1F, r9, r7
                st      r7, 0x1A00(g7)
                b       loc_29888
# ---------------------------------------------------------------------------
loc_2981C:                              # CODE XREF: sub_297A4+44↑j
                ld      0x668(g7), r14
                cmpobe  0, r14, loc_29854
                ld      0x50A1E4, r15
                setbit  3, r15, r15
                st      r15, 0x50A1E4
                ldt     0x1F4(g7), r4
                stt     r4, 0x1A00(g7)
                mov     r9, r7
                st      r7, 0x1A08(g7)
                b       loc_29888
# ---------------------------------------------------------------------------
loc_29854:                              # CODE XREF: sub_297A4+7C↑j
                ld      0x66C(g7), r14
                cmpobe  0, r14, loc_29888
                ld      0x50A1E4, r15
                setbit  2, r15, r15
                st      r15, 0x50A1E4
                ldt     0x1F4(g7), r4
                stt     r4, 0x1A00(g7)
                notbit  0x1F, r9, r7
                st      r7, 0x1A08(g7)
loc_29888:                              # CODE XREF: sub_297A4+3C↑j
                ld      0x50A1E4, r3
                st      r3, 0x50A1F8
                ret
# End of function sub_297A4
# =============== S U B R O U T I N E =======================================
rob_ball_data_make:                     # CODE XREF: calc_unit_mat+F2C↑p
                ldob    4(g7), r15      # Label from official source
                ld      off_2E504[r15*4], r8
                ld      off_2E50C[r15*4], r3
                mov     0, r9
loc_298B4:                              # CODE XREF: ROM:000298CC↓j
                mulo    0xC, r9, r10
# End of function rob_ball_data_make
                ldt     (r8)[r10*1], r4
                ld      (r3)[r9*4], r7
                stq     r4, 0xD00(g7)[r9*16]
                cmpinco 0x1F, r9, r9
                bne     loc_298B4
                ret
# =============== S U B R O U T I N E =======================================
support_rob_position:                   # CODE XREF: collision+8C↑p
                ld      debug_flag, r15 # Label from official source
                bbs     5, r15, loc_2A258
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                mov     0, r15
                st      r15, 0x1B4(g13) # mod_fa_coli_add+0x1B4 = 0
                mov     0, r15
                st      r15, 0x1B8(g13) # mod_fa_coli_add+0x1B8 = 0
                mov     0, r15
                st      r15, 0x1BC(g13) # mod_fa_coli_add+0x1BC = 0
                mov     0, r15
                st      r15, 0x1C0(g13) # mod_fa_coli_add+0x1C0 = 0
                mov     0, r15
                st      r15, 0x1C4(g13) # mod_fa_coli_add+0x1C4 = 0
                mov     0, r15
                st      r15, 0x1C8(g13)
                mov     0, r15
                st      r15, 0x1CC(g13)
                mov     0, r15
                st      r15, 0x1DC(g13)
                mov     0, r15
                st      r15, 0x1E0(g13)
                mov     0, r15
                st      r15, 0x1E4(g13)
                ld      0x1B0(g13), r3
                and     1, r3, r3
                lda     0x3FE, r13
                or      r13, r3, r3
                st      r3, 0x1B0(g13)
                ldos    0x220(g13), r14
                addi    1, r14, r15
                stos    r15, 0x220(g13)
                ldos    0x23C(g13), r3
                cmpobe  0, r3, loc_29970
                subo    1, r3, r3
                stos    r3, 0x23C(g13)
loc_29970:                              # CODE XREF: support_rob_position+90↑j
                ldos    0x23E(g13), r3
                cmpobe  0, r3, loc_29980
                subo    1, r3, r3
                stos    r3, 0x23E(g13)
loc_29980:                              # CODE XREF: support_rob_position+A0↑j
                ldt     0x1F4(g7), r4
loc_29984:                              # DATA XREF: MAIN_DATA:0244C3D0↓o
                ldt     0x224(g13), r8
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                st      r7, 0x1E8(g13)
                ldt     0x1F4(g8), r4
                ldt     0x230(g13), r8
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, 0x1EC(g13)
                ld      0x5F4(g7), r3
                st      r3, 0x168(g13)
                ldt     0x18(g7), r4
                ldt     0x18(g8), r8
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                st      r7, 0x1DC(g13)
                ldt     0x1F4(g7), r4
                ldt     0x1F4(g8), r8
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, 0x1E0(g13)
                ld      0x1A4(g7), r15
                bbs     0x16, r15, loc_29A54
                ld      0x1A4(g8), r15
                bbs     0x16, r15, loc_29A54
                ld      0x1B0(g13), r15
                clrbit  5, r15, r15
                st      r15, 0x1B0(g13)
loc_29A54:                              # CODE XREF: support_rob_position+168↑j
                lda     off_2A49C, r10
                addo    0x1F, 0x1D, r13
                ldos    0x220(g13), r14
                cmpobl  r13, r14, loc_29A70
                lda     off_2A4BC, r10
loc_29A70:                              # CODE XREF: support_rob_position+190↑j
                ld      fa_camera, r3
                ldis    0x26(r3), r3    # r3 = mod_fa_camera_yangle
                shro    0xD, r3, r3
                and     7, r3, r3
                ld      (r10)[r3*4], r3
                st      r3, 0x21C(g13)
                ld      0x1B0(g13), r15
                clrbit  3, r15, r15
                st      r15, 0x1B0(g13)
                ldt     0x18(g7), r4
                ldt     0x18(g8), r8
                subr    r4, r8, r11
                subr    r6, r10, r12
                ldt     0x1F4(g7), r4
                ldt     0x1F4(g8), r8
                subr    r4, r8, r13
                subr    r6, r10, r14
                xor     r11, r13, r11
                xor     r12, r14, r12
                or      r11, r12, r11
                bbs     0x1F, r11, loc_29AD4
                ld      0x1B0(g13), r15
                clrbit  4, r15, r15
                st      r15, 0x1B0(g13)
loc_29AD4:                              # CODE XREF: support_rob_position+1F0↑j
                ld      0x1DC(g13), r7
                ld      0x1E0(g13), r11
                subi    r7, r11, r7
                lda     0x71C, r13
                addi    r13, r7, r7
                lda     0x7FFF, r13
                and     r13, r7, r7
                st      r7, 0x1E4(g13)
                lda     0xE38, r13
                cmpibl  r13, r7, loc_29B0C
                ld      0x1B0(g13), r15
                clrbit  1, r15, r15
                st      r15, 0x1B0(g13)
loc_29B0C:                              # CODE XREF: support_rob_position+228↑j
                ld      0xA08(g7), r4
                ld      0xA08(g8), r5
                or      r4, r5, r4
                bbs     0x17, r4, loc_29B28
                ld      0x1B0(g13), r15
                clrbit  8, r15, r15
                st      r15, 0x1B0(g13)
loc_29B28:                              # CODE XREF: support_rob_position+244↑j
                ldt     0x18(g7), r4
                ldt     0x1F4(g7), r8
                ld      0x1DC(g13), r7
                st      r7, 0x1C8(g13)
                ldt     0x18(g8), r4
                ldt     0x1F4(g8), r8
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, 0x1CC(g13)
                ld      0x1D4(g13), r12
                cmpr    r12, r7
                bl      loc_29B84
                cmpr    r12, r11
                bl      loc_29B84
                ld      0x1B0(g13), r15
                clrbit  2, r15, r15
                st      r15, 0x1B0(g13)
loc_29B84:                              # CODE XREF: support_rob_position+298↑j
                mov     0, g0
                ld      0x1A4(g7), r3
                addo    0x1F, 1, r4
                and     r4, r3, r4
                shro    5, r4, r4
                or      r4, g0, g0
                ld      0x1A4(g8), r3
                addo    0x1F, 1, r4
                and     r4, r3, r4
                shro    3, r4, r4
                or      r4, g0, g0
                and     0xA, g0, r3
                cmpobe  0, r3, loc_29BE4
                lda     0x3F666666, r4
                ld      0x1A4(g7), r6
                ld      0x1A4(g8), r7
                or      r6, r7, r6
                bbc     8, r6, loc_29BD8
                lda     0x3F000000, r4
loc_29BD8:                              # CODE XREF: support_rob_position+2F8↑j
                ld      0x168(g13), r3
                cmpr    r4, r3
                bg      loc_29BF0
loc_29BE4:                              # CODE XREF: support_rob_position+2E0↑j
                ld      0x1B0(g13), r15
                clrbit  6, r15, r15
                st      r15, 0x1B0(g13)
loc_29BF0:                              # CODE XREF: support_rob_position+30C↑j
                movt    0, r4
                ldt     0x80(g7), r8
                ldt     0x744(g7), r12
                subr    r8, r12, r8
                subr    r10, r14, r10
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                st      r3, 0x27C(g13)
                movt    0, r4
                ldt     0x1F4(g7), r8
                ldt     0x224(g13), r12
                subr    r8, r12, r8
                subr    r10, r14, r10
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                st      r3, 0x1B8(g13)
                ld      0x1D0(g13), r12
                cmpr    r12, r3
                bl      loc_29C74
                clrbit  0, g0, g0
                clrbit  1, g0, g0
loc_29C74:                              # CODE XREF: support_rob_position+394↑j
                movt    0, r4
                ldt     0x80(g8), r8
                ldt     0x744(g8), r12
                subr    r8, r12, r8
                subr    r10, r14, r10
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                st      r3, 0x280(g13)
                ldt     0x1F4(g8), r8
                ldt     0x230(g13), r12
                subr    r8, r12, r8
                subr    r10, r14, r10
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                st      r3, 0x1BC(g13)
                ld      0x1D0(g13), r12
                cmpr    r12, r3
                bl      loc_29CF4
                clrbit  2, g0, g0
                clrbit  3, g0, g0
loc_29CF4:                              # CODE XREF: support_rob_position+414↑j
                st      g0, 0x1B4(g13)
                ld      0x1E0(g13), r12
                shro    0xC, r12, r9
                and     0xF, r9, r9
                ld      0x21C(g13), r7
                ldis    2(r7)[r9*4], r10
                ldos    (r7)[r9*4], r7
                bbs     0x1F, r10, loc_29D24
                mov     r7, r15
                mov     r12, r7
                mov     r15, r12
loc_29D24:                              # CODE XREF: support_rob_position+440↑j
                cmpoble r12, r7, loc_29D34
                ld      0x1B0(g13), r15
                clrbit  7, r15, r15
                st      r15, 0x1B0(g13)
loc_29D34:                              # CODE XREF: support_rob_position:loc_29D24↑j
                ld      0x1B0(g13), r3
                cmpobne 0, r3, loc_29F48
                ld      off_2A25C[g0*16], r5
                bx      (r5)
# ---------------------------------------------------------------------------
loc_29D48:                              # DATA XREF: ROM:0002A2AC↓o
                ldt     0x18(g7), r4
                ldt     0x18(g8), r8
                ld      0x1DC(g13), r12
                shro    0xC, r12, r9
                and     0xF, r9, r14
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                lda     0x3F000000, r3
                mulr    r3, r11, r11
                addr    r4, r8, r4
                addr    r6, r10, r6
                mulr    r3, r4, r4
                mulr    r3, r6, r6
                ld      0x21C(g13), r13
                ldis    2(r13)[r14*4], r3
                ld      dword_2A260[g0*16], r13
                muli    r13, r3, r13
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r13
                ld      0x5F4(g7), r15
                clrbit  0x1F, r15, r15
                cmpobe  0, r15, loc_29DE8
                divr    r15, r13, r13
                lda     0xC001818, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r13
loc_29DE8:                              # CODE XREF: support_rob_position+4F8↑j
                st      r13, 0x1C0(g13)
                st      r13, 0x1C4(g13)
                addo    r13, r12, r12
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                addr    r8, r4, r10
                subr    r9, r6, r11
                st      r10, 0x18(g7)
                st      r11, 0x20(g7)
                subr    r8, r4, r10
                addr    r9, r6, r11
                st      r10, 0x18(g8)
                st      r11, 0x20(g8)
                b       loc_29F48
# ---------------------------------------------------------------------------
loc_29E48:                              # DATA XREF: ROM:0002A26C↓o
                ldt     0x18(g7), r4
                ldt     0x18(g8), r8
                ld      0x1DC(g13), r12
                shro    0xC, r12, r9
                and     0xF, r9, r14
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                ld      0x21C(g13), r13
                ldis    2(r13)[r14*4], r3
                ld      dword_2A260[g0*16], r13
                muli    r13, r3, r13
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r13
                ld      0x5F4(g7), r15
                clrbit  0x1F, r15, r15
                cmpobe  0, r15, loc_29ECC
                divr    r15, r13, r13
                lda     0xC001818, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r13
loc_29ECC:                              # CODE XREF: support_rob_position+5DC↑j
                st      r13, 0x1C0(g13)
                st      r13, 0x1C4(g13)
                addo    r13, r12, r12
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r13
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      dword_2A264[g0*16], g0
                cmpobe  1, g0, loc_29F30
                addr    r13, r8, r13
                subr    r14, r10, r14
                st      r13, 0x18(g7)
                st      r14, 0x20(g7)
                mov     0, r15
                st      r15, 0x1C4(g13)
                b       loc_29F48
# ---------------------------------------------------------------------------
loc_29F30:                              # CODE XREF: support_rob_position+63C↑j
                subr    r13, r4, r13
                addr    r14, r6, r14
                st      r13, 0x18(g8)
                st      r14, 0x20(g8)
                mov     0, r15
                st      r15, 0x1C0(g13)
loc_29F48:                              # CODE XREF: support_rob_position+464↑j
                ldt     0x1F4(g7), r4
                stt     r4, 0x224(g13)
                ldt     0x1F4(g8), r4
                stt     r4, 0x230(g13)
                ldt     0x80(g7), r4
                stt     r4, 0x744(g7)
                ldt     0x80(g8), r4
                stt     r4, 0x744(g8)
                ld      0x1A4(g7), r6
                ld      0x1A4(g8), r7
                ld      0x1E18(g7), r8
                ld      0x1E18(g8), r9
                bbc     0x12, r7, loc_29FA8
                mov     g7, r15
                mov     g8, g7
                mov     r15, g8
                mov     r6, r15
                mov     r7, r6
                mov     r15, r7
                mov     r8, r15
                mov     r9, r8
                mov     r15, r9
loc_29FA8:                              # CODE XREF: support_rob_position+6AC↑j
                ldob    0x85F(g8), r14
                cmpobe  0, r14, loc_2A258
                xor     r6, r8, r14
                xor     r7, r9, r15
                or      r14, r15, r15
                bbc     0x12, r15, loc_2A0BC
                ld      0x1E0(g13), r15
                stis    r15, 0x216(g13)
                ldob    4(g7), r10
                ldis    0x200(g13)[r10*2], r15
                stis    r15, 0x20E(g13)
                ld      0x204(g13)[r10*4], r15
                st      r15, 0x210(g13)
                ldis    0x216(g13), r12
                ldos    0x20E(g13), r11
                and     7, r11, r11
                shro    0xD, r12, r10
                and     7, r10, r10
                st      r11, 0x284(g13)
                ldob    0x85F(g8), r14
                bbc     0, r14, loc_2A008
                mov     2, r11
loc_2A008:                              # CODE XREF: support_rob_position+72C↑j
                cmpobne 0, r11, loc_2A034
                ldis    word_2A4DC[r10*2], r10
                stis    r10, 0x218(g13)
                subi    r12, r10, r10
                ldob    0x85F(g8), r14
                bbs     2, r14, loc_2A028
                mov     0, r10
loc_2A028:                              # CODE XREF: support_rob_position+74C↑j
                stis    r10, 0x214(g13)
                stis    r10, 0x21A(g13)
                b       loc_2A0BC
# ---------------------------------------------------------------------------
loc_2A034:                              # CODE XREF: support_rob_position:loc_2A008↑j
                cmpobne 1, r11, loc_2A060
                ldis    word_2A4EC[r10*2], r10
                stis    r10, 0x218(g13)
                subi    r12, r10, r10
                ldob    0x85F(g8), r14
                bbs     3, r14, loc_2A054
                mov     0, r10
loc_2A054:                              # CODE XREF: support_rob_position+778↑j
                stis    r10, 0x214(g13)
                stis    r10, 0x21A(g13)
                b       loc_2A0BC
# ---------------------------------------------------------------------------
loc_2A060:                              # CODE XREF: support_rob_position:loc_2A034↑j
                cmpobne 2, r11, loc_2A094
                ldis    word_2A4FC[r10*2], r10
                stis    r10, 0x218(g13)
                subi    r12, r10, r10
                ldob    0x85F(g8), r14
                bbs     1, r14, loc_2A088
                ldob    0x85F(g8), r14
                bbs     0, r14, loc_2A088
                mov     0, r10
loc_2A088:                              # CODE XREF: support_rob_position+7A4↑j
                stis    r10, 0x214(g13)
                stis    r10, 0x21A(g13)
                b       loc_2A0BC
# ---------------------------------------------------------------------------
loc_2A094:                              # CODE XREF: support_rob_position:loc_2A060↑j
                cmpobne 3, r11, loc_2A0BC
                ldis    word_2A50C[r10*2], r10
                stis    r10, 0x218(g13)
                subi    r12, r10, r10
                ldob    0x85F(g8), r14
                bbs     4, r14, loc_2A0B4
                mov     0, r10
loc_2A0B4:                              # CODE XREF: support_rob_position+7D8↑j
                stis    r10, 0x214(g13)
                stis    r10, 0x21A(g13)
loc_2A0BC:                              # CODE XREF: support_rob_position+6E8↑j
                bbc     0x12, r6, loc_2A258
                bbs     0x1D, r6, loc_2A258
                ldis    0x214(g13), r3
                cmpobe  0, r3, loc_2A258
                ldt     0x18(g8), r4
                ldt     0x1F4(g8), r8
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                ldis    0x20C(g13), r12
                bbc     0x1F, r3, loc_2A12C
                addi    r12, r3, r3
                cmpibl  0, r3, loc_2A1FC
                subi    r12, 0, r12
                b       loc_2A134
# ---------------------------------------------------------------------------
loc_2A12C:                              # CODE XREF: support_rob_position+844↑j
                subi    r12, r3, r3
                cmpibg  0, r3, loc_2A1FC
loc_2A134:                              # CODE XREF: support_rob_position+854↑j
                addi    r11, r12, r11
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r13
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                addr    r13, r8, r13
                subr    r14, r10, r14
                st      r13, 0x18(g8)
                st      r14, 0x20(g8)
                ldis    0x26(g8), r14
                addi    r12, r14, r15
                stis    r15, 0x26(g8)
                ldis    0x214(g13), r3
                ldt     0x18(g7), r4
                ldt     0x1F4(g8), r8
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                ldis    0x20C(g13), r12
                bbc     0x1F, r3, loc_2A1EC
                addi    r12, r3, r3
                cmpibl  0, r3, loc_2A1FC
                stis    r3, 0x214(g13)
                subi    r12, 0, r12
                b       loc_2A208
# ---------------------------------------------------------------------------
loc_2A1EC:                              # CODE XREF: support_rob_position+900↑j
                subi    r12, r3, r3
                cmpibg  0, r3, loc_2A1FC
                stis    r3, 0x214(g13)
                b       loc_2A208
# ---------------------------------------------------------------------------
loc_2A1FC:                              # CODE XREF: support_rob_position+84C↑j
                mov     0, r15
                stis    r15, 0x214(g13)
                b       loc_2A258
# ---------------------------------------------------------------------------
loc_2A208:                              # CODE XREF: support_rob_position+914↑j
                addi    r11, r12, r11
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r13
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                addr    r13, r8, r13
                subr    r14, r10, r14
                st      r13, 0x18(g7)
                st      r14, 0x20(g7)
                ldis    0x26(g7), r14
                addi    r12, r14, r15
                stis    r15, 0x26(g7)
loc_2A258:                              # CODE XREF: support_rob_position+8↑j
                ret
# End of function support_rob_position
# ---------------------------------------------------------------------------
off_2A25C:      .long loc_29F48         # DATA XREF: support_rob_position+468↑r
dword_2A260:    .long 0                 # DATA XREF: support_rob_position+4D0↑r
dword_2A264:    .long 0                 # DATA XREF: support_rob_position+634↑r
                .long 0
                .long loc_29E48
                .long 64
                .long 0
                .long 0
                .long loc_29E48
                .long 64
                .long 0
                .long 0
                .long loc_29E48
                .long 64
                .long 0
                .long 0
                .long loc_29E48
                .long 64
                .long 1
                .long 0
                .long loc_29D48
                .long 64
                .long 2
                .long 0
                .long loc_29E48
                .long 64
                .long 0
                .long 0
                .long loc_29E48
                .long 64
                .long 0
                .long 0
                .long loc_29E48
                .long 64
                .long 1
                .long 0
                .long loc_29E48
                .long 64
                .long 1
                .long 0
                .long loc_29D48
                .long 64
                .long 2
                .long 0
                .long loc_29D48
                .long 64
                .long 2
                .long 0
                .long loc_29E48
                .long 64
                .long 1
                .long 0
                .long loc_29E48
                .long 64
                .long 1
                .long 0
                .long loc_29D48
                .long 64
                .long 2
                .long 0
                .long loc_29D48
                .long 64
                .long 2
                .long 0
                .short 0x38E
                .short 0xFFFF
                .short 0x38E
                .short 0xFFFF
                .short 0x3C71
                .short 1
                .short 0x3C71
                .short 1
                .short 0x438E
                .short 0xFFFF
                .short 0x438E
                .short 0xFFFF
                .short 0x7C71
                .short 1
                .short 0x7C71
                .short 1
                .short 0x838E
                .short 0xFFFF
                .short 0x838E
                .short 0xFFFF
                .short 0xBC71
                .short 1
                .short 0xBC71
                .short 1
                .short 0xC38E
                .short 0xFFFF
                .short 0xC38E
                .short 0xFFFF
                .short 0xFC71
                .short 1
                .short 0xFC71
                .short 1
dword_2A39C:    .long 0xFFFE038E        # DATA XREF: ROM:0002A4A0↓o
                .long 0xFFFF038E
                .long 0xFFFF038E
                .long    0x13C71
                .long 0xFFFF438E
                .long    0x17C71
                .long    0x17C71
                .long    0x27C71
                .long 0xFFFE838E
                .long 0xFFFF838E
                .long 0xFFFF838E
                .long    0x1BC71
                .long 0xFFFFC38E
                .long    0x1FC71
                .long    0x1FC71
                .long    0x2FC71
dword_2A3DC:    .long 0xFFFF038E        # DATA XREF: ROM:off_2A49C↓o
                .long    0x13C71
                .long    0x13C71
                .long    0x23C71
                .long 0xFFFE438E
                .long 0xFFFF438E
                .long 0xFFFF438E
                .long    0x17C71
                .long 0xFFFF838E
                .long    0x1BC71
                .long    0x1BC71
                .long    0x2BC71
                .long 0xFFFEC38E
                .long 0xFFFFC38E
                .long 0xFFFFC38E
                .long    0x1FC71
dword_2A41C:    .long 0xFFFE038E        # DATA XREF: ROM:0002A4C0↓o
                .long 0xFFFE038E
                .long 0xFFFF038E
                .long 0xFFFF038E
                .long    0x17C71
                .long    0x17C71
                .long    0x27C71
                .long    0x27C71
                .long 0xFFFE838E
                .long 0xFFFE838E
                .long 0xFFFF838E
                .long 0xFFFF838E
                .long    0x1FC71
                .long    0x1FC71
                .long    0x2FC71
                .long    0x2FC71
dword_2A45C:    .long    0x13C71        # DATA XREF: ROM:off_2A4BC↓o
                .long    0x13C71
                .long    0x23C71
                .long    0x23C71
                .long 0xFFFE438E
                .long 0xFFFE438E
                .long 0xFFFF438E
                .long 0xFFFF438E
                .long    0x1BC71
                .long    0x1BC71
                .long    0x2BC71
                .long    0x2BC71
                .long 0xFFFEC38E
                .long 0xFFFEC38E
                .long 0xFFFFC38E
                .long 0xFFFFC38E
off_2A49C:      .long dword_2A3DC       # DATA XREF: support_rob_position:loc_29A54↑o
                .long dword_2A39C
                .long dword_2A39C
                .long dword_2A3DC
                .long dword_2A3DC
                .long dword_2A39C
                .long dword_2A39C
                .long dword_2A3DC
off_2A4BC:      .long dword_2A45C       # DATA XREF: support_rob_position+194↑o
                .long dword_2A41C
                .long dword_2A41C
                .long dword_2A45C
                .long dword_2A45C
                .long dword_2A41C
                .long dword_2A41C
                .long dword_2A45C
word_2A4DC:     .short 0xC000           # DATA XREF: support_rob_position+738↑r
                .fill 2, 2, 0
                .short 0x4000
                .long 0x80004000, 0xC0008000
word_2A4EC:     .short 0x4000           # DATA XREF: support_rob_position+764↑r
                .fill 2, 2, 0x8000
                .fill 2, 2, 0xC000
                .fill 2, 2, 0
                .short 0x4000
word_2A4FC:     .short 0                # DATA XREF: support_rob_position+790↑r
                .short 0x4000
                .short 0x4000
                .short 0x8000
                .short 0x8000
                .short 0xC000
                .short 0xC000
                .short 0
word_2A50C:     .short 0x8000           # DATA XREF: support_rob_position+7C4↑r
                .fill 2, 2, 0xC000
                .fill 2, 2, 0
                .short 0x4000
                .long 0x80004000
# =============== S U B R O U T I N E =======================================
no_coli_unit_set:                       # CODE XREF: collision+B4↑p
                ld      0x1A4(g7), r15  # Label from official source
                bbs     8, r15, loc_2A540
                ld      0x1A4(g8), r15
                bbc     8, r15, loc_2A540
                ldob    0xA29(g7), r14
                cmpobg  0x1E, r14, loc_2A540
                ldob    0xA29(g8), r14
                cmpobl  5, r14, loc_2A540
                b       loc_2A64C
# ---------------------------------------------------------------------------
loc_2A540:                              # CODE XREF: no_coli_unit_set+4↑j
                mov     0, r11
                ld      0x1A4(g7), r7
                ld      0x1A4(g8), r8
                ldob    0x821(g8), r6
                bbc     8, r8, loc_2A658
                bbs     1, r8, loc_2A658
                ld      0x1A4(g7), r15
                bbc     0xF, r15, loc_2A56C
                ldob    0x821(g8), r14
                cmpibe  4, r14, loc_2A56C
                b       loc_2A64C
# ---------------------------------------------------------------------------
loc_2A56C:                              # CODE XREF: no_coli_unit_set+40↑j
                ld      0x1A4(g7), r15
                bbc     0x10, r15, loc_2A588
                ldob    0x821(g8), r14
                cmpibe  4, r14, loc_2A588
                ldob    0x821(g8), r14
                cmpibe  8, r14, loc_2A588
                b       loc_2A64C
# ---------------------------------------------------------------------------
loc_2A588:                              # CODE XREF: no_coli_unit_set+54↑j
                ld      0x1A4(g7), r15
                bbs     0x1E, r15, loc_2A64C
                bbc     0xE, r7, loc_2A60C
                ldos    0x61C(g7), r14
                cmpobe  0, r14, loc_2A60C
                cmpibe  4, r6, loc_2A60C
                cmpibe  8, r6, loc_2A60C
                cmpibe  5, r6, loc_2A60C
                ldt     0x1F4(g7), r4
                ld      stage_soko, r5
                ld      stage_x, r14
                clrbit  0x1F, r4, r13
                cmpr    r13, r14
                bge     loc_2A5D8
                clrbit  0x1F, r6, r13
                cmpr    r13, r14
                bge     loc_2A5D8
                mov     0, r5
loc_2A5D8:                              # CODE XREF: no_coli_unit_set+A8↑j
                ld      no_coli_low, r10
                addr    r5, r10, r10
                lda     0x1F8(g7), r6
                mov     0, r9
loc_2A5EC:                              # CODE XREF: no_coli_unit_set+E8↓j
                ld      (r6), r5
                cmpr    r5, r10
                bge     loc_2A5FC
                setbit  r9, r11, r11
loc_2A5FC:                              # CODE XREF: no_coli_unit_set+D8↑j
                addo    0xC, r6, r6
                cmpinco 0xF, r9, r9
                bg      loc_2A5EC
                b       loc_2A658
# ---------------------------------------------------------------------------
loc_2A60C:                              # CODE XREF: no_coli_unit_set+74↑j
                ldob    0x821(g8), r14
                cmpibne 0, r14, loc_2A61C
                ld      0x1A4(g7), r15
                bbs     3, r15, loc_2A64C
loc_2A61C:                              # CODE XREF: no_coli_unit_set+F4↑j
                ldos    0x61C(g7), r14
                cmpobne 0, r14, loc_2A658
                bbs     0xE, r7, loc_2A658
                bbc     4, r7, loc_2A658
                cmpibe  0, r6, loc_2A658
                cmpibe  7, r6, loc_2A658
                ld      0x1F8(g7), r4
                ld      0x1E10(g7), r5
                cmpr    r4, r5
                bge     loc_2A64C
                b       loc_2A658
# ---------------------------------------------------------------------------
loc_2A64C:                              # CODE XREF: no_coli_unit_set+20↑j
                lda     loc_FFF8+7, r11
                b       loc_2A658
# ---------------------------------------------------------------------------
loc_2A658:                              # CODE XREF: no_coli_unit_set+34↑j
                stos    r11, 0x6F8(g7)
                ret
# End of function no_coli_unit_set
# =============== S U B R O U T I N E =======================================
cac_attack_cancel:                      # CODE XREF: coli_attack_chk+78↓p
                mov     0, r3           # Label from official source
                ld      0x5B8(g7), r15
                bbc     0, r15, cac_ac_ex
cac_ac_ex:                              # CODE XREF: cac_attack_cancel+8↑j
                bx      (g14)           # Label from official source
# End of function cac_attack_cancel
# ---------------------------------------------------------------------------
cac_ac_set:                             # Label from official source
                mov     1, r3
                bx      (g14)
# =============== S U B R O U T I N E =======================================
coli_attack_chk:                        # CODE XREF: collision+CC↑p
                ld      0x1A4(g7), r15  # Label from official source
                bbc     0x12, r15, loc_2A688
                mov     1, g9
                call    total_skill_adder_g7
loc_2A688:                              # CODE XREF: coli_attack_chk+4↑j
                ld      0x720(g7), r15
                bbs     0xF, r15, loc_2A7D0
                ldob    4(g7), r9
                ldos    0x8C(g13)[r9*2], r3
                ldos    0x1A8(g7), r4   # p1_mot_num or p2_mot_num
                stos    r4, 0x8C(g13)[r9*2]
                ld      0x1A4(g7), r15
                bbs     8, r15, loc_2A6B8
                bal     sub_2A7E4
                b       loc_2A7D0
# ---------------------------------------------------------------------------
loc_2A6B8:                              # CODE XREF: coli_attack_chk+34↑j
                ld      0x860(g7), r15
                bbs     0x16, r15, loc_2A6D0
                ld      0x2AC(g13), r14
                cmpobe  0, r14, loc_2A6E4
                bal     sub_2A7E4
                b       loc_2A7D0
# ---------------------------------------------------------------------------
loc_2A6D0:                              # CODE XREF: coli_attack_chk+44↑j
                cmpobe  r3, r4, loc_2A6DC
                bal     sub_2A7E4
                b       loc_2A7D0
# ---------------------------------------------------------------------------
loc_2A6DC:                              # CODE XREF: coli_attack_chk:loc_2A6D0↑j
                ldos    0x90(g13), r14
                bbs     r9, r14, loc_2A7D0
loc_2A6E4:                              # CODE XREF: coli_attack_chk+4C↑j
                ldos    0x1AA(g7), r13
                ldos    0x808(g7), r14
                cmpobl  r13, r14, loc_2A7D0
                bal     cac_attack_cancel
                cmpobne 0, r3, loc_2A7D0
                ldob    0x820(g7), r3
                ld      dword_CE020[r3*4], r3
                mov     0, r6
                cmpobe  1, r9, loc_2A728
loc_2A70C:                              # CODE XREF: coli_attack_chk+AC↓j
                scanbit r3, r5
                bno     loc_2A75C
                ld      0x90F600[r5*4], r15
                or      r15, r6, r6
                clrbit  r5, r3, r3
                b       loc_2A70C
# ---------------------------------------------------------------------------
loc_2A728:                              # CODE XREF: coli_attack_chk+90↑j
                scanbit r3, r5
                bno     loc_2A75C
                mov     0xF, r4
                mov     0, r7
loc_2A738:                              # CODE XREF: coli_attack_chk+D4↓j
                ld      0x90F600[r4*4], r15
                bbc     r5, r15, loc_2A748
                setbit  r4, r7, r7
loc_2A748:                              # CODE XREF: coli_attack_chk+C8↑j
                cmpdeco 1, r4, r4
                bl      loc_2A738
                or      r7, r6, r6
                clrbit  r5, r3, r3
                b       loc_2A728
# ---------------------------------------------------------------------------
loc_2A75C:                              # CODE XREF: coli_attack_chk+98↑j
                ldos    0x6F8(g8), r3
                andnot  r3, r6, r6
                stos    r6, 0x6F0(g8)
                cmpobe  0, r6, loc_2A7D0
                ldos    0x90(g13), r14
                setbit  r9, r14, r15
                stos    r15, 0x90(g13)
                scanbit r6, r6
                st      r6, 0x7E0(g8)
                mulo    0xC, r6, r6
                ldt     0x1F4(g8)[r6*1], r8
                ld      mod_fa_effect, r3
                stt     r8, 0x7C(r3)
                mov     0xA, r15
                st      r15, 0x78(r3)
                stt     r8, 0x50A3FC
                stt     r8, 0x8EC(r3)
                ldt     (r5)[r6*1], r8
                stt     r8, 0x8F8(r3)
                ldob    4(g7), r3
                mov     1, r15
                stis    r15, 0x274(g13)[r3*2]
                mov     8, r15
                st      r15, 0x2AC(g13)
                ret
# ---------------------------------------------------------------------------
loc_2A7D0:                              # CODE XREF: coli_attack_chk+14↑j
                ldob    4(g7), r3
                mov     0, r15
                stis    r15, 0x274(g13)[r3*2]
                ret
# End of function coli_attack_chk
# =============== S U B R O U T I N E =======================================
sub_2A7E4:                              # CODE XREF: coli_attack_chk+38↑p
                ldos    0x90(g13), r4
                clrbit  r9, r4, r4
                stos    r4, 0x90(g13)
                bx      (g14)
# End of function sub_2A7E4
# ---------------------------------------------------------------------------
attack_hit:                             # CODE XREF: collision+124↑p
                ldob    also_mode, r15  # Label from Fighting Vipers source
                lda     mode8, r14
                cmpobe  r14, r15, loc_2A814
                lda     mode9, r14
                cmpobne r14, r15, loc_2A858
loc_2A814:                              # CODE XREF: ROM:0002A804↑j
                ldob    also_sub_mode, r15
                lda     mode10, r14
                cmpobe  r14, r15, loc_2A858
                lda     start_ip_add+1, r14
                cmpobe  r14, r15, loc_2A858
                ldob    also_sub_mode, r15
                lda     mode8, r14
                cmpobe  r14, r15, loc_2A858
                lda     mode9, r14
                cmpo    r14, r15
                bne     loc_2B900
loc_2A858:                              # CODE XREF: ROM:0002A810↑j
                ldib    0x843(g7), r15
                stib    r15, 0x50FE02
                ldib    0x83E(g7), r15
                stib    r15, 0x50FE03
                ldis    0x828(g7), r15
                stis    r15, 0x50FE00
                ld      0x0(g8), r15
                bbc     0x1D, r15, loc_2A8AC
                mov     4, r15
                stib    r15, 0x50FE02
                lda     0x4006, r15
                stis    r15, 0x50FE00
                mov     2, r15
                stib    r15, 0x50FE03
loc_2A8AC:                              # CODE XREF: ROM:0002A880↑j
                mov     0, r15
                st      r15, 0x26C(g13)
                ld      0x1234(g7), r15
                lda     1(r15), r15
                st      r15, 0x1234(g7)
                ld      mod_fa_enemy0, r3
                ldob    4(g7), r14
                cmpobe  0, r14, loc_2A8E0
                ld      mod_fa_enemy1, r3
loc_2A8E0:                              # CODE XREF: ROM:0002A8D4↑j
                mov     1, r15
                stib    r15, 0x108(r3)
                ldob    0x19F(g8), r14
                cmpobne 0x12, r14, loc_2A8F8
                call    sub_19888
                b       loc_2B900
# ---------------------------------------------------------------------------
loc_2A8F8:                              # CODE XREF: ROM:0002A8EC↑j
                ld      0x26C(g13), r15
                setbit  0, r15, r15
                st      r15, 0x26C(g13)
                ldis    0x82A(g7), r13
                ldis    0x26(g7), r14
                addi    r13, r14, r10
                ldob    0x822(g7), r11
                cmpibl  0, r11, loc_2A938
                subi    r11, 0, r9
                be      loc_2A954
                scanbit r9, r14
                subi    r14, 0x17, r15
                clrbit  r14, r9, r9
                shlo    r15, r9, r9
                setbit  0x1F, r9, r9
                b       loc_2A948
# ---------------------------------------------------------------------------
loc_2A938:                              # CODE XREF: ROM:0002A914↑j
                scanbit r11, r14
                subi    r14, 0x17, r15
                clrbit  r14, r11, r9
                shlo    r15, r9, r9
loc_2A948:                              # CODE XREF: ROM:0002A934↑j
                lda     0x7F(r14), r14
                shlo    0x17, r14, r14
                or      r9, r14, r9
loc_2A954:                              # CODE XREF: ROM:0002A91C↑j
                lda     0x3C23D70A, r13
                mulr    r13, r9, r9
                lda     0xD001A1A, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                lda     0x42480000, r13
                mulr    r13, r9, r9
                ld      flt_2BA68, r13
                mulr    r13, r9, r9
                ldob    0x50FE02, r7
                addo    0x1F, 9, r13
                mulo    r13, r7, r7
                lda     0x50A800(r7), r7
                ld      8(r7), r13
                mulr    r13, r9, r9
                ld      0x1A4(g7), r15
                bbc     4, r15, loc_2A9F0
                ld      0x1A4(g7), r15
                bbc     0xC, r15, loc_2A9F0
                ldis    0x5C2(g7), r3
                subi    r3, r10, r3
                shlo    0xE, 1, r13
                addi    r13, r3, r3
                bbs     0xF, r3, loc_2A9F0
                lda     0x3F4CCCCD, r3
                ld      0x2C(g7), r14
                mulr    r3, r14, r15
                st      r15, 0x2C(g7)
                ld      0x34(g7), r14
                mulr    r3, r14, r15
                st      r15, 0x34(g7)
loc_2A9F0:                              # CODE XREF: ROM:0002A9B0↑j
                ld      0x1A4(g8), r15
                bbc     0xD, r15, loc_2AE40
                ld      0x5B8(g8), r15
                bbs     0, r15, loc_2AE40
                ld      0x0(g7), r15
                bbc     0x12, r15, loc_2AA18
                shlo    7, 5, r13
                ldos    0xC7C(g7), r14
                cmpible r13, r14, loc_2AA18
                b       loc_2AC74
# ---------------------------------------------------------------------------
loc_2AA18:                              # CODE XREF: ROM:0002AA04↑j
                ld      0xC70(g8), r14
                cmpibge 1, r14, loc_2AA48
                ldos    0x50FE00, r14
                bbs     0xC, r14, loc_2AA70
                ldos    0x50FE00, r14
                bbs     0xD, r14, loc_2AB54
                ldos    0x50FE00, r14
                bbc     9, r14, loc_2AC74
                b       loc_2AE40
# ---------------------------------------------------------------------------
loc_2AA48:                              # CODE XREF: ROM:0002AA1C↑j
                ldos    0x50FE00, r14
                bbs     0xC, r14, loc_2AB54
                ldos    0x50FE00, r14
                bbs     0xD, r14, loc_2AB54
                ldos    0x50FE00, r14
                bbc     9, r14, loc_2AC74
                b       loc_2AE40
# ---------------------------------------------------------------------------
loc_2AA70:                              # CODE XREF: ROM:0002AA28↑j
                ld      0x26C(g13), r15
                setbit  3, r15, r15
                st      r15, 0x26C(g13)
                mov     0x13, r15
                st      r15, 0xC6C(g8)
                ld      0xC70(g8), r3
                cmpobe  0, r3, loc_2AAA0
                subo    1, r3, r3
                cmpobe  0, r3, loc_2AA9C
                call    play_sd_cane_2d_knock_3 # sound_guard
                b       loc_2AAA0
# ---------------------------------------------------------------------------
loc_2AA9C:                              # CODE XREF: ROM:0002AA90↑j
                call    play_sd_cane_2d_knock_9 # sound_guard
loc_2AAA0:                              # CODE XREF: ROM:0002AA88↑j
                st      r3, 0xC70(g8)
                mov     1, g0
                mov     0, r8
                lda     0x10000002, r15
                st      r15, 0x194(g7)
                lda     0x13D, g0
                shlo    0x19, 5, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                ldis    0x6D0(g7), r15
                stis    r15, 0x6D8(g8)
                ldos    0x1224(g7), r14
                bbs     0, r14, loc_2AAE8
                ldos    0x1224(g7), r14
                bbc     1, r14, loc_2AB08
loc_2AAE8:                              # CODE XREF: ROM:0002AAD8↑j
                ld      0x1228(g7), r15
                st      r15, 0x121C(g7)
                ldis    0x1226(g7), r15
                stis    r15, 0x1220(g7)
loc_2AB08:                              # CODE XREF: ROM:0002AAE4↑j
                ldos    0x1248(g7), r14
                bbs     0, r14, loc_2AB20
                ldos    0x1248(g7), r14
                bbc     1, r14, loc_2AB30
loc_2AB20:                              # CODE XREF: ROM:0002AB10↑j
                ldis    0x124A(g7), r15
                stis    r15, 0x1244(g7)
loc_2AB30:                              # CODE XREF: ROM:0002AB1C↑j
                ldob    0x85C(g7), r3
                cmpobne 0, r3, loc_2AB4C
                ldos    0x1AA(g7), r4
                ldos    0x80C(g7), r5
                subi    r4, r5, r3
                cmpibge 0x1E, r3, loc_2AB4C
                mov     0x1E, r3
loc_2AB4C:                              # CODE XREF: ROM:0002AB34↑j
                mov     r3, r5
                b       loc_2AE0C
# ---------------------------------------------------------------------------
loc_2AB54:                              # CODE XREF: ROM:0002AA34↑j
                ld      0x26C(g13), r15
                setbit  3, r15, r15
                st      r15, 0x26C(g13)
                mov     0x13, r15
                st      r15, 0xC6C(g8)
                ld      0xC70(g8), r3
                cmpobe  0, r3, loc_2AB84
                subo    1, r3, r3
                cmpobe  0, r3, loc_2AB80
                call    play_sd_cane_2d_knock_3 # sound_guard
                b       loc_2AB84
# ---------------------------------------------------------------------------
loc_2AB80:                              # CODE XREF: ROM:0002AB74↑j
                call    play_sd_cane_2d_knock_9 # sound_guard
loc_2AB84:                              # CODE XREF: ROM:0002AB6C↑j
                st      r3, 0xC70(g8)
                mov     1, g0
                mov     0, r8
                lda     0x10000002, r15
                st      r15, 0x194(g7)
                call    sub_2B94C
                shlo    0x18, 0xB, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                ldis    0x6D0(g7), r15
                stis    r15, 0x6D8(g8)
                ldos    0x1224(g7), r14
                bbs     0, r14, loc_2ABCC
                ldos    0x1224(g7), r14
                bbc     1, r14, loc_2ABEC
loc_2ABCC:                              # CODE XREF: ROM:0002ABBC↑j
                ld      0x1228(g7), r15
                st      r15, 0x121C(g7)
                ldis    0x1226(g7), r15
                stis    r15, 0x1220(g7)
loc_2ABEC:                              # CODE XREF: ROM:0002ABC8↑j
                ldos    0x1248(g7), r14
                bbs     0, r14, loc_2AC04
                ldos    0x1248(g7), r14
                bbc     1, r14, loc_2AC14
loc_2AC04:                              # CODE XREF: ROM:0002ABF4↑j
                ldis    0x124A(g7), r15
                stis    r15, 0x1244(g7)
loc_2AC14:                              # CODE XREF: ROM:0002AC00↑j
                ldob    0x85C(g7), r3
                cmpobne 0, r3, loc_2AC28
                ldos    0x1AA(g7), r4
                ldos    0x80C(g7), r5
                subi    r4, r5, r3
loc_2AC28:                              # CODE XREF: ROM:0002AC18↑j
                ldos    0x50FE00, r14
                bbc     0xD, r14, loc_2AC40
                addo    0x1F, 9, r13
                cmpibge r13, r3, loc_2AC40
                addo    0x1F, 9, r3
loc_2AC40:                              # CODE XREF: ROM:0002AC30↑j
                mov     r3, r5
                b       loc_2AE0C
# ---------------------------------------------------------------------------
                ld      0x848(g7), g0
                st      g0, 0x198(g8)
                mov     5, g1
                call    calc_mht_adr
                ldos    1(g0), r3
                shlo    0x18, 0xD, r13
                addi    r13, r3, r15
                st      r15, 0x198(g7)
                ldib    3(g0), r15
                stib    r15, 0x822(g7)
                ret
# ---------------------------------------------------------------------------
loc_2AC74:                              # CODE XREF: ROM:0002AA14↑j
                ld      0x860(g7), r15
                bbc     0x13, r15, loc_2AC84
                ldob    0x822(g7), r14
                cmpobe  0, r14, loc_2B8C8
loc_2AC84:                              # CODE XREF: ROM:0002AC78↑j
                ld      0x1234(g7), r15
                lda     -1(r15), r15
                st      r15, 0x1234(g7)
                ld      0x1238(g7), r15
                lda     1(r15), r15
                st      r15, 0x1238(g7)
                ld      mod_fa_enemy0, r3
                ldob    4(g7), r14
                cmpobe  0, r14, loc_2ACC8
                ld      mod_fa_enemy1, r3
loc_2ACC8:                              # CODE XREF: ROM:0002ACBC↑j
                mov     1, r15
                stib    r15, 0x109(r3)
                shro    1, r11, g9
                call    total_skill_adder_g7
                call    play_sd_cane_2d # sound_guard
                mov     0, g0
                mov     0, r8
                lda     0x10000002, r15
                st      r15, 0x194(g7)
                call    sub_2B94C
                shlo    0x19, 5, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                ldis    0x6D0(g7), r15
                stis    r15, 0x6D8(g8)
                ldos    0x1224(g7), r14
                bbc     1, r14, loc_2AD34
                ld      0x1228(g7), r15
                st      r15, 0x121C(g7)
                ldis    0x1226(g7), r15
                stis    r15, 0x1220(g7)
loc_2AD34:                              # CODE XREF: ROM:0002AD10↑j
                ldos    0x1248(g7), r14
                bbc     1, r14, loc_2AD50
                ldis    0x124A(g7), r15
                stis    r15, 0x1244(g7)
loc_2AD50:                              # CODE XREF: ROM:0002AD3C↑j
                ldob    0x85C(g7), r5
                cmpobne 0, r5, loc_2AE0C
                ldob    0x50FE03, r3
                bbs     0, r3, loc_2AD90
                divo    3, r11, r3
                addo    r3, r3, r3
                ldob    byte_2BA7A, r13
                addi    r13, r3, r3
                ldob    guard_limit, r4
                mov     r4, r5
                cmpible r4, r3, loc_2AD8C
                mov     r3, r5
loc_2AD8C:                              # CODE XREF: ROM:0002AD84↑j
                b       loc_2AE0C
# ---------------------------------------------------------------------------
loc_2AD90:                              # CODE XREF: ROM:0002AD60↑j
                ldos    0x808(g7), r4
                ldos    0x80C(g7), r5
                subi    r4, r5, r3
                mov     r3, r6
                ldob    0x821(g7), r14
                cmpobne 0, r14, loc_2ADB8
                ldob    byte_2BA7D, r13
                subi    r13, r3, r3
                b       loc_2ADE0
# ---------------------------------------------------------------------------
loc_2ADB8:                              # CODE XREF: ROM:0002ADA4↑j
                ldob    0x821(g7), r14
                cmpobne 1, r14, loc_2ADD0
                ldob    byte_2BA7E, r13
                subi    r13, r3, r3
                b       loc_2ADE0
# ---------------------------------------------------------------------------
loc_2ADD0:                              # CODE XREF: ROM:0002ADBC↑j
                ldob    byte_2BA7F, r13
                subi    r13, r3, r3
                b       loc_2ADE0
# ---------------------------------------------------------------------------
loc_2ADE0:                              # CODE XREF: ROM:0002ADB4↑j
                ldob    guard_limit, r4
                mov     r4, r5
                cmpible r4, r3, loc_2ADF4
                mov     r3, r5
loc_2ADF4:                              # CODE XREF: ROM:0002ADEC↑j
                ldob    byte_2BA7C, r4
                cmpibge r5, r4, loc_2AE04
                mov     r4, r5
loc_2AE04:                              # CODE XREF: ROM:0002ADFC↑j
                stos    r5, 0x5DE(g8)
                b       loc_2AE28
# ---------------------------------------------------------------------------
loc_2AE0C:                              # CODE XREF: ROM:0002AB50↑j
                ldos    0x1AA(g7), r13
                ldos    0x80C(g7), r14
                subi    r13, r14, r3
                addo    6, r3, r3
                cmpible r5, r3, loc_2AE24
                mov     r3, r5
loc_2AE24:                              # CODE XREF: ROM:0002AE1C↑j
                stos    r5, 0x5DE(g8)
loc_2AE28:                              # CODE XREF: ROM:0002AE08↑j
                ld      0x26C(g13), r15
                setbit  2, r15, r15
                st      r15, 0x26C(g13)
                mov     0, r11
                mov     0, r6
                b       loc_2B738
# ---------------------------------------------------------------------------
loc_2AE40:                              # CODE XREF: ROM:0002A9F4↑j
                mov     2, r8
                ld      0x70C(g7), r15
                bbs     0x14, r15, loc_2AE54
                ld      0x5B8(g7), r15
                bbs     0, r15, loc_2B8C8
loc_2AE54:                              # CODE XREF: ROM:0002AE48↑j
                ld      0x0(g8), r15
                bbc     29, r15, _uk_display_hit_combo
                ld      0x860(g7), r15
                bbs     0x13, r15, loc_2B8C8
                ld      0x0(g8), r15
                clrbit  0x1D, r15, r15
                st      r15, 0x0(g8)
                mov     g7, r15
                mov     g8, g7
                mov     r15, g8
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                call    set_kamae_ram   # Set Stance Ram
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                mov     g7, r15
                mov     g8, g7
                mov     r15, g8
_uk_display_hit_combo:                  # CODE XREF: ROM:0002AE58↑j
                ld      0x860(g7), r15
                bbc     0x13, r15, loc_2AFB8
                ld      0x720(g7), r15
                bbs     0xC, r15, loc_2B8C8
                ld      0x720(g7), r15
                bbc     6, r15, loc_2AFA0
                ld      0x19C(g7), r15
                bbs     0x10, r15, loc_2B8C8
                b       loc_2AFB0
# ---------------------------------------------------------------------------
loc_2AFA0:                              # CODE XREF: ROM:0002AF90↑j
                ld      0x720(g7), r15
                bbc     7, r15, loc_2AFB0
                ld      0x19C(g7), r15
                bbs     0x11, r15, loc_2B8C8
loc_2AFB0:                              # CODE XREF: ROM:0002AF9C↑j
                ldob    0x822(g7), r14
                cmpobe  0, r14, loc_2B8C8
loc_2AFB8:                              # CODE XREF: ROM:0002AF80↑j
                lda     0x3E8, r13
                ldos    0xA0E(g8), r14
                cmpobg  r13, r14, loc_2AFCC
                lda     0x7D0, g9
                call    total_skill_adder_g7
loc_2AFCC:                              # CODE XREF: ROM:0002AFC0↑j
                mov     0, r15
                stis    r15, 0xA0E(g8)
                mov     r11, g9
                call    total_skill_adder_g7
                ld      0x1A4(g7), r15
                bbs     0x1A, r15, loc_2AFF4
                ld      0x26C(g13), r15
                setbit  1, r15, r15
                st      r15, 0x26C(g13)
                b       loc_2B000
# ---------------------------------------------------------------------------
loc_2AFF4:                              # CODE XREF: ROM:0002AFE0↑j
                ld      0x26C(g13), r15
                setbit  4, r15, r15
                st      r15, 0x26C(g13)
loc_2B000:                              # CODE XREF: ROM:0002AFF0↑j
                ldob    0x50FE02, r14
                cmpobne 4, r14, loc_2B018
                ld      0x26C(g13), r15
                setbit  5, r15, r15
                st      r15, 0x26C(g13)
loc_2B018:                              # CODE XREF: ROM:0002B008↑j
                ldob    0x6F4(g8), r3
                addo    1, r3, r3
                stob    r3, 0x6F4(g8)
                ld      debug_flag, r15
                bbs     9, r15, loc_2B0A4
                lda     0x10007DE, g9
                lda     TEXTURE_BUFFER, g1
                st      r3, 0x0(sp)
                mov     1, r15
                balx    sub_4ED24, r14
# ---------------------------------------------------------------------------
aDHitCombo:     .asciz "%d hit combo"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                call    print_mes
                cmpobne 1, r3, loc_2B0A4
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100085E, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "                  "
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
loc_2B0A4:                              # CODE XREF: ROM:0002B02C↑j
                lda     0x10000001, r15
                st      r15, 0x194(g7)
                ldos    0x1224(g7), r14
                bbc     0, r14, loc_2B0DC
                ld      0x1228(g7), r15
                st      r15, 0x121C(g7)
                ldis    0x1226(g7), r15
                stis    r15, 0x1220(g7)
loc_2B0DC:                              # CODE XREF: ROM:0002B0B8↑j
                ldos    0x1248(g7), r14
                bbc     0, r14, loc_2B0F8
                ldis    0x124A(g7), r15
                stis    r15, 0x1244(g7)
loc_2B0F8:                              # CODE XREF: ROM:0002B0E4↑j
                lda     aHit, g0        # "hit     "
                ld      0x0(g7), r15
                bbc     0x12, r15, loc_2B18C
                shlo    7, 5, r13
                ldos    0xC7C(g7), r14
                cmpible r13, r14, loc_2B18C
                shro    1, r11, r11
                ld      0x1A4(g8), r15
                bbc     0x10, r15, loc_2B130
                shro    2, r11, r11
                lda     aOcDp, g0       # "oc dp   "
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B130:                              # CODE XREF: ROM:0002B11C↑j
                ld      0x1A4(g8), r15
                bbc     4, r15, loc_2B164
                lda     aOcDown, g0     # "oc down "
                ldob    0x6F4(g8), r3
                cmpobge 8, r3, loc_2B14C
                mov     8, r3
loc_2B14C:                              # CODE XREF: ROM:0002B144↑j
                ld      flt_2E4E0[r3*4], r4
                cvtir   r11, r5
                mulr    r4, r5, r5
                cvtri   r5, r11
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B164:                              # CODE XREF: ROM:0002B134↑j
                ldob    0x6F4(g8), r3
                cmpobge 8, r3, loc_2B170
                mov     8, r3
loc_2B170:                              # CODE XREF: ROM:0002B168↑j
                ld      flt_2E4BC[r3*4], r4
                cvtir   r11, r5
                mulr    r4, r5, r5
                cvtri   r5, r11
                lda     aOrgCmbo, g0    # "org cmbo"
loc_2B18C:                              # CODE XREF: ROM:0002B104↑j
                ld      0x0(g8), r15
                bbc     0x1D, r15, loc_2B1A4
                shro    1, r11, r11
                lda     aUkemi, g0      # "ukemi   "
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B1A4:                              # CODE XREF: ROM:0002B190↑j
                ld      0x1A4(g8), r15
                bbc     8, r15, loc_2B220
                ldos    0x6F0(g8), r5
                lda     loc_D9AC+4, r3
                and     r5, r3, r15
                cmpobne 0, r15, loc_2B1F0
                lda     aCounter, g0    # "counter "
                ldob    0x822(g8), r12
                shro    2, r12, r12
                addo    r12, r11, r11
                lda     (r11)[r11*2], r11
                shro    1, r11, r11
                mov     3, r8
                lda     0x10000004, r15
                st      r15, 0x194(g7)
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B1F0:                              # CODE XREF: ROM:0002B1BC↑j
                lda     aSmlcntr, g0    # "smlcntr "
                ldob    0x822(g8), r12
                shro    3, r12, r12
                addo    r12, r11, r11
                shro    2, r11, r3
                addo    r3, r11, r11
                mov     3, r8
                lda     0x10000004, r15
                st      r15, 0x194(g7)
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B220:                              # CODE XREF: ROM:0002B1A8↑j
                ld      0x70C(g8), r15
                bbc     2, r15, loc_2B238
                shro    1, r11, r11
                lda     aUkemi, g0      # "ukemi   "
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B238:                              # CODE XREF: ROM:0002B224↑j
                ld      0x1A4(g8), r15
                bbc     0xE, r15, loc_2B25C
                ld      0x1A4(g8), r15
                bbs     0x10, r15, loc_2B25C
                shro    2, r11, r3
                subo    r3, r11, r11
                lda     aDown, g0       # "down    "
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B25C:                              # CODE XREF: ROM:0002B23C↑j
                ldob    0x821(g7), r14
                cmpibne 8, r14, loc_2B27C
                ld      0x1A4(g8), r15
                bbc     0x10, r15, loc_2B27C
                lda     aTetsu, g0      # "tetsu   "
                shro    1, r11, r11
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B27C:                              # CODE XREF: ROM:0002B260↑j
                lda     dword_4010, r13
                ld      0x1A4(g8), r14
                and     r13, r14, r3
                cmpobne 0x10, r3, loc_2B2A4
                lda     (r11)[r11*2], r11
                shro    1, r11, r11
                lda     aAir, g0        # "air     "
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B2A4:                              # CODE XREF: ROM:0002B28C↑j
                ldos    0x6F0(g8), r5
                ld      0x1A4(g8), r4
                bbs     0x10, r4, loc_2B2B4
                bbc     0xE, r4, loc_2B2D8
loc_2B2B4:                              # CODE XREF: ROM:0002B2AC↑j
                lda     loc_264C+3, r3
                and     r5, r3, r15
                cmpobne 0, r15, loc_2B304
                lda     aTender, g0     # "tender  "
                shro    2, r11, r3
                subo    r3, r11, r11
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B2D8:                              # CODE XREF: ROM:0002B2B0↑j
                ld      0x804(g8), r15
                bbc     8, r15, loc_2B304
                ld      0x1A4(g8), r15
                bbc     0, r15, loc_2B304
                shro    3, r11, r3
                lda     1(r11)[r3], r11
                addo    0x1F, 3, r8
                lda     aHit_0, g0      # " hit    "
                b       loc_2B304
# ---------------------------------------------------------------------------
loc_2B304:                              # CODE XREF: ROM:0002B12C↑j
                ld      0x0(g7), r15
                bbc     0x10, r15, loc_2B318
                lda     aMulti, g0      # "multi   "
                shro    1, r11, r11
loc_2B318:                              # CODE XREF: ROM:0002B308↑j
                ld      0x0(g7), r15
                setbit  0x10, r15, r15
                st      r15, 0x0(g7)
                ld      debug_flag, r15
                bbs     9, r15, loc_2B33C
                lda     0x10008E8, g9
                call    print_mes
loc_2B33C:                              # CODE XREF: ROM:0002B32C↑j
                cmpobe  0, r11, ah_hit_sd_end
                ld      0x1A4(g7), r15
                bbs     0x12, r15, ah_hit_sd_end
                mov     0, r4
                ldob    0x823(g7), r14
                cmpobe  0, r14, loc_2B3AC
                ldob    0x823(g7), r3
                subo    1, r3, r3
                ldob    0x1B1(g8), r5
                cmpobe  3, r5, audio_list1
                cmpobe  0xB, r5, loc_2B37C
                cmpobe  0xC, r5, loc_2B37C
                cmpobe  0xD, r5, loc_2B37C
                ld      off_DBE44(r3), r3
                b       loc_2B390
# ---------------------------------------------------------------------------
loc_2B37C:                              # CODE XREF: ROM:0002B364↑j
                ld      audio_list(r3), r3
                b       loc_2B390
# ---------------------------------------------------------------------------
audio_list1:                            # CODE XREF: ROM:0002B360↑j
                ld      off_DBF4C(r3), r3
loc_2B390:                              # CODE XREF: ROM:0002B378↑j
                ld      (r3)[r4*1], r5
                cmpobe  0, r5, ah_hit_sd_end
                mov     r5, g0
                call    check_same_sound
                call    sound_request_u
                addo    4, r4, r4
                b       loc_2B390
# ---------------------------------------------------------------------------
loc_2B3AC:                              # CODE XREF: ROM:0002B350↑j
                ldob    0x1B0(g8), r4
                mulo    0xC, r4, r4
                cmpobg  0xF, r11, loc_2B3C4
                addo    4, r4, r4
                cmpobg  0x1E, r11, loc_2B3C4
                addo    4, r4, r4
loc_2B3C4:                              # CODE XREF: ROM:0002B3B4↑j
                ld      dword_DB964(r4), r5
                ldob    0x820(g7), r6
                cmpobe  5, r6, loc_2B3F0
                cmpobe  6, r6, loc_2B3F0
                cmpobe  3, r6, loc_2B3F0
                cmpobe  4, r6, loc_2B3F0
                cmpobe  0x1A, r6, loc_2B3F0
                cmpobe  0x1B, r6, loc_2B3F0
                ld      dword_DB6F4(r4), r5
loc_2B3F0:                              # CODE XREF: ROM:0002B3D0↑j
                mov     r5, g0
                call    check_same_sound
                call    sound_request_u
ah_hit_sd_end:                          # CODE XREF: ROM:loc_2B33C↑j
                ldis    0x1AC(g8), r12  # Label from Fighting Vipers source
                mov     r11, g0
                call    sub_19730
                subi    g0, r12, r12
                cmpibl  0, r12, ah_not_finish_blow
                ldob    0x7D2(g7), r14
                setbit  0, r14, r15
                stob    r15, 0x7D2(g7)
                lda     0x1F4, g9
                call    total_skill_adder_g7
ah_not_finish_blow:                     # CODE XREF: ROM:0002B40C↑j
                ld      0x1A4(g8), r15  # Label from Fighting Vipers source
                bbs     0x10, r15, loc_2B560
                ld      0x1A4(g8), r15
                bbs     0xE, r15, loc_2B594
                ld      0x70C(g8), r15
                bbs     2, r15, loc_2B594
                ld      0x1A4(g8), r15
                bbs     4, r15, loc_2B5E4
                ldos    0x50FE00, r14
                bbs     0xE, r14, loc_2B5E4
                ldos    0x50FE00, r14
                bbs     0xA, r14, loc_2B474
                addo    0x1F, 0x13, r13
                cmpoble r13, r11, loc_2B5E4
                ldob    0x821(g7), r14
                cmpobne 1, r14, loc_2B474
                ld      0x1A4(g8), r15
                bbs     0x18, r15, loc_2B5E4
loc_2B474:                              # CODE XREF: ROM:0002B458↑j
                mov     r11, g0
                call    sub_19730
                ldos    0x1AC(g8), r13
                cmpoble r13, g0, loc_2B5E4
                b       loc_2B488
# ---------------------------------------------------------------------------
loc_2B488:                              # CODE XREF: ROM:0002B484↑j
                and     0x1F, r8, g0
                call    sub_2B94C
                shlo    0x18, 0xB, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                ldob    0x85D(g7), r3
                cmpobne 3, r8, loc_2B4A8
                ldob    0x85E(g7), r3
loc_2B4A8:                              # CODE XREF: ROM:0002B4A0↑j
                cmpobne 0, r3, loc_2B4E4
                mulo    4, r11, r3
                divo    5, r3, r3
                ldob    byte_2BA7B, r13
                addi    r13, r3, r3
                ldob    0x50FE03, r4
                bbc     3, r4, loc_2B4E0
                ldos    0x808(g7), r4
                ldos    0x80C(g7), r5
                subi    r4, r5, r5
                cmpibge r3, r5, loc_2B4E0
                mov     r5, r3
loc_2B4E0:                              # CODE XREF: ROM:0002B4C8↑j
                b       loc_2B4E4
# ---------------------------------------------------------------------------
loc_2B4E4:                              # CODE XREF: ROM:loc_2B4A8↑j
                ldos    0x1AA(g7), r13
                ldos    0x80C(g7), r14
                subi    r13, r14, r5
                addo    6, r5, r5
                cmpible r3, r5, loc_2B4FC
                mov     r5, r3
loc_2B4FC:                              # CODE XREF: ROM:0002B4F4↑j
                ld      0x1A4(g8), r15
                bbc     0x10, r15, loc_2B510
                shro    1, r11, r3
                subo    7, r3, r3
                addo    r3, r3, r3
loc_2B510:                              # CODE XREF: ROM:0002B500↑j
                stos    r3, 0x5DE(g8)
                ldob    attack_base, r13
                addi    r13, r3, r4
                ldos    0x808(g7), r4
                ldos    0x80C(g7), r6
                subi    r5, r6, r6
                cmpibge r4, r6, loc_2B534
                mov     r6, r4
loc_2B534:                              # CODE XREF: ROM:0002B52C↑j
                ldob    byte_2BA80, r5
                cmpible r4, r5, loc_2B544
                mov     r5, r4
loc_2B544:                              # CODE XREF: ROM:0002B53C↑j
                addo    0x1F, 3, r13
                cmpobe  r13, r8, loc_2B550
                cmpobne 3, r8, loc_2B554
loc_2B550:                              # CODE XREF: ROM:0002B548↑j
                subi    4, r3, r4
loc_2B554:                              # CODE XREF: ROM:0002B54C↑j
                addo    1, r4, r4
                mov     0, r6
                b       loc_2B738
# ---------------------------------------------------------------------------
loc_2B560:                              # CODE XREF: ROM:0002B428↑j
                ld      0x1A4(g7), r15
                bbc     0x16, r15, loc_2B5E4
                mov     5, g0
                call    sub_2B94C
                lda     0x8010000, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                shro    1, r11, r3
                subo    7, r3, r3
                addo    r3, r3, r3
                stos    r3, 0x5DE(g8)
                b       loc_2B898
# ---------------------------------------------------------------------------
loc_2B594:                              # CODE XREF: ROM:0002B430↑j
                ldob    0x6F5(g8), r3
                addo    1, r3, r3
                stob    r3, 0x6F5(g8)
                ld      debug_flag, r15
                bbs     9, r15, loc_2B5E4
                lda     0x100085E, g9
                lda     TEXTURE_BUFFER, g1
                st      r3, 0x0(sp)
                mov     1, r15
                balx    sub_4ED24, r14
# ---------------------------------------------------------------------------
aDDownHitCombo: .asciz "%d down hit combo"
                .short 0
# ---------------------------------------------------------------------------
                call    print_mes
loc_2B5E4:                              # CODE XREF: ROM:0002B440↑j
                ld      0x1A4(g7), r15
                bbc     0x16, r15, loc_2B5F8
                ld      0x1A4(g8), r4
                bbs     4, r4, loc_2B5F8
                bbs     0xB, r4, loc_2B560
loc_2B5F8:                              # CODE XREF: ROM:0002B5E8↑j
                mov     4, g0
                call    sub_2B94C
                ld      0x1A4(g8), r15
                bbc     4, r15, loc_2B624
                lda     0xE1, g0
                ldob    0x50FE02, r14
                cmpobne 7, r14, loc_2B61C
                lda     0x14E, g0
loc_2B61C:                              # CODE XREF: ROM:0002B614↑j
                cmpobne 4, r14, loc_2B624
                lda     0x10E, g0
loc_2B624:                              # CODE XREF: ROM:0002B604↑j
                call    sub_2BA44
                shlo    0x1B, 1, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                shro    1, r11, r3
                addo    r3, r3, r3
                stos    r3, 0x5DE(g8)
                mov     0x11, g1
                call    calc_mht_adr
                cmpobe  0, g0, loc_2B69C
                ldob    1(g0), r3
                ldob    2(g0), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                mov     r3, r6
                ldob    3(g0), r3
                ldob    4(g0), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    5(g0), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    6(g0), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mulr    r9, r3, r9
                lda     0x40000000, r3
                mulr    r9, r3, r9
                b       loc_2B738
# ---------------------------------------------------------------------------
loc_2B69C:                              # CODE XREF: ROM:0002B648↑j
                ld      0x1A4(g8), r15
                bbs     4, r15, loc_2B6C8
                cmpobe  3, r8, loc_2B6B8
                ldis    0x20(r7), r6
                ld      0x10(r7), r13
                mulr    r13, r9, r9
                b       loc_2B6E8
# ---------------------------------------------------------------------------
loc_2B6B8:                              # CODE XREF: ROM:0002B6A4↑j
                ldis    0x22(r7), r6
                ld      0x14(r7), r13
                mulr    r13, r9, r9
                b       loc_2B6E8
# ---------------------------------------------------------------------------
loc_2B6C8:                              # CODE XREF: ROM:0002B6A0↑j
                cmpobe  3, r8, loc_2B6DC
                ldis    0x24(r7), r6
                ld      0x18(r7), r13
                mulr    r13, r9, r9
                b       loc_2B6E8
# ---------------------------------------------------------------------------
loc_2B6DC:                              # CODE XREF: ROM:loc_2B6C8↑j
                ldis    0x26(r7), r6
                ld      0x1C(r7), r13
                mulr    r13, r9, r9
loc_2B6E8:                              # CODE XREF: ROM:0002B6B4↑j
                ldob    0x6F5(g8), r4
                ldob    combo_start, r3
                cmpoble r4, r3, loc_2B728
                subo    r3, r4, r4
                ldos    combo_sub, r13
                mulo    r13, r4, r4
                mov     r6, r15
                subo    r4, r6, r6
                ldos    combo_limit, r3
                cmpoble r3, r15, loc_2B720
                mov     0, r3
loc_2B720:                              # CODE XREF: ROM:0002B718↑j
                cmpibge r6, r3, loc_2B728
                mov     r3, r6
loc_2B728:                              # CODE XREF: ROM:0002B6F4↑j
                ldis    limit_xang, r3
                cmpible r6, r3, loc_2B738
                mov     r3, r6
loc_2B738:                              # CODE XREF: ROM:0002AE3C↑j
                ld      0x5D8(g8), r4
                lda     0x42700000, r3
                subr    r3, r4, r4
                lda     0x3E99999A, r13
                mulr    r13, r4, r4
                addr    r3, r4, r4
                divr    r4, r9, r4
                lda     0x40800000, r13
                mulr    r13, r4, r4
                lda     0xD001A1A, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                cmpobe  0, r8, loc_2B7E0
                ld      0x0(g7), r15
                bbc     0x12, r15, loc_2B7C0
                ldob    0x7D2(g7), r14
                bbs     0, r14, loc_2B7C0
                ld      0x70C(g7), r15
                bbs     0x1A, r15, loc_2B7C0
                lda     0x40800000, r13
                mulr    r13, r5, r5
                b       loc_2B7E0
# ---------------------------------------------------------------------------
loc_2B7C0:                              # CODE XREF: ROM:0002B79C↑j
                ld      0x1A4(g8), r15
                bbc     0x10, r15, loc_2B7D8
                lda     0x40000000, r13
                mulr    r13, r5, r5
                b       loc_2B7E0
# ---------------------------------------------------------------------------
loc_2B7D8:                              # CODE XREF: ROM:0002B7C4↑j
                ld      4(r7), r13
                mulr    r13, r5, r5
loc_2B7E0:                              # CODE XREF: ROM:0002B794↑j
                st      r5, 0x5E4(g8)
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                subi    r10, 0, r12
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                cmpobe  0, r8, loc_2B860
                ld      0x0(g7), r15
                bbc     0x12, r15, loc_2B850
                ldob    0x7D2(g7), r14
                bbs     0, r14, loc_2B850
                ld      0x70C(g7), r15
                bbs     0x1A, r15, loc_2B850
                b       loc_2B860
# ---------------------------------------------------------------------------
loc_2B850:                              # CODE XREF: ROM:0002B838↑j
                ld      0x0(r7), r13
                mulr    r13, r5, r5
                ld      0x0(r7), r13
                mulr    r13, r6, r6
loc_2B860:                              # CODE XREF: ROM:0002B830↑j
                st      r5, 0x5E0(g8)
                st      r6, 0x5E8(g8)
                ldob    0x7D2(g7), r14
                bbc     0, r14, loc_2B898
                ld      0x5E4(g8), r4
                ldob    0x843(g7), r3
                ldl     flt_2B904[r3*8], r8
                mulr    r4, r8, r4
                mulr    r5, r9, r5
                mulr    r6, r9, r6
                st      r4, 0x5E4(g8)
                st      r5, 0x5E0(g8)
                st      r6, 0x5E8(g8)
loc_2B898:                              # CODE XREF: ROM:0002B590↑j
                ldis    game_timer, r14
                cmpibge 0, r14, loc_2B8C4
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                mov     r11, g0
                call    damage_calculation # g7 = damage reciever
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
loc_2B8C4:                              # CODE XREF: ROM:0002B8A0↑j
                b       loc_2B900
# ---------------------------------------------------------------------------
loc_2B8C8:                              # CODE XREF: ROM:0002AC80↑j
                ld      0x1234(g7), r15
                lda     -1(r15), r15
                st      r15, 0x1234(g7)
                ld      mod_fa_enemy0, r3
                ld      mod_fa_enemy1, r4
                mov     0, r15
                stib    r15, 0x108(r3)
                mov     0, r15
                stib    r15, 0x108(r4)
loc_2B900:                              # CODE XREF: ROM:0002A854↑j
                ret
# ---------------------------------------------------------------------------
flt_2B904:      .float 1.0              # DATA XREF: ROM:0002B878↑r
                .float 1.0
                .float 1.0
                .float 1.0
                .float 1.6
                .float 1.0
                .float 1.2
                .float 2.0
                .float 1.0
                .float 1.2
                .float 1.0
                .float 1.0
                .float 1.0
                .float 1.0
                .float 1.0
                .float 1.0
                .float 1.6
                .float 1.0
# =============== S U B R O U T I N E =======================================
sub_2B94C:                              # CODE XREF: sub_1CED4+50↑p
                ldob    0x50FE00, r3
                ldob    0x1B1(g8), r4   # P1_SELECTED or P2_SELECTED
                ld      ptr_DA0B4[r4*4], r4
                ld      (r4)[r3*4], r11
                cmpobne 5, g0, loc_2B970
                addo    0x1F, 9, r3
                b       loc_2B9D0
# ---------------------------------------------------------------------------
loc_2B970:                              # CODE XREF: sub_2B94C+18↑j
                ldos    0x50FE00, r10
                mov     0, r9
                shro    0xF, r10, r5
                ld      0x0(g7), r3
                ld      0x0(g8), r4
                xor     r3, r4, r3
                shro    6, r3, r4
                xor     r4, r5, r5
                ld      0x1A4(g8), r3
                shro    0x15, r3, r4
                xor     r4, r5, r5
                and     1, r5, r5
                addo    r5, r9, r9
                ldis    0x82A(g7), r13
                ldis    0x26(g7), r14
                addi    r13, r14, r3
                ldis    0x5B4(g8), r13
                subi    r13, r3, r3
                shlo    0xE, 1, r13
                addi    r13, r3, r3
                bbs     0xF, r3, loc_2B9CC
                addo    2, r9, r9
loc_2B9CC:                              # CODE XREF: sub_2B94C+78↑j
                lda     (r9)[g0*8], r3
loc_2B9D0:                              # CODE XREF: sub_2B94C+20↑j
                ld      (r11)[r3*4], g0
                call    sub_2BA44
                ret
# End of function sub_2B94C
# ---------------------------------------------------------------------------
ptr_DA0B4:      .long uk_hit_motions    # DATA XREF: sub_2B94C+C↑r
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
                .long uk_hit_motions
# =============== S U B R O U T I N E =======================================
sub_2BA44:                              # CODE XREF: ROM:loc_2B624↑p
                lda     225, r13
                cmpobne r13, g0, loc_2BA64 # branch if hit_motion is not SNC_DOWN
                ld      0x1F8(g8), r3
                lda     0x3F666666, r4  # Float 0.9
                cmpr    r3, r4
                bg      loc_2BA64
                lda     0x106, g0
loc_2BA64:                              # CODE XREF: sub_2BA44+4↑j
                ret
# End of function sub_2BA44
# ---------------------------------------------------------------------------
flt_2BA68:      .float 0.0024999999     # DATA XREF: ROM:0002A980↑r
                .float 0.1
                .float 0.0218
                .float 0.039999999
                .byte 32
                .byte 0
byte_2BA7A:     .byte 4                 # DATA XREF: ROM:0002AD6C↑r
byte_2BA7B:     .byte 6                 # DATA XREF: ROM:0002B4B4↑r
byte_2BA7C:     .byte 8                 # DATA XREF: ROM:loc_2ADF4↑r
byte_2BA7D:     .byte 7                 # DATA XREF: ROM:0002ADA8↑r
byte_2BA7E:     .byte 7                 # DATA XREF: ROM:0002ADC0↑r
byte_2BA7F:     .byte 7                 # DATA XREF: ROM:loc_2ADD0↑r
byte_2BA80:     .byte 50                # DATA XREF: ROM:loc_2B534↑r
                .fill 3, 1, 0
# =============== S U B R O U T I N E =======================================
damage_unit:                            # CODE XREF: collision+128↑p
                ld      0x26C(g13), r15 # Label from Fighting Vipers source
                bbc     0, r15, loc_2BEF0
                ldos    0x6F0(g8), r9
loc_2BA90:                              # CODE XREF: damage_unit+98↓j
                cmpobe  0, r9, loc_2BB20
                scanbit r9, r6
                mov     1, r7
                cmpoble 9, r6, loc_2BAA4
                mov     0, r7
loc_2BAA4:                              # CODE XREF: damage_unit+18↑j
                ldob    0x821(g7), r5
                ldob    byte_2CA3C[r5], r5
                cmpobne r7, r5, loc_2BB18
                ldob    0x822(g7), r13
                ldos    0x1F00(g8)[r6*2], r14
                addi    r13, r14, r15
                stos    r15, 0x1F00(g8)[r6*2]
                ldob    0x822(g7), r12
                shro    1, r12, r12
                ld      0x1A4(g8), r15
                bbs     0x1A, r15, loc_2BAFC
                ld      0x1A4(g8), r15
                bbc     0xD, r15, loc_2BB20
                ldos    0x1F00(g8)[r6*2], r14
                addi    r12, r14, r15
                stos    r15, 0x1F00(g8)[r6*2]
                b       loc_2BB20
# ---------------------------------------------------------------------------
loc_2BAFC:                              # CODE XREF: damage_unit+54↑j
                ldob    0x822(g7), r13
                ldos    0x1F00(g8)[r6*2], r14
                addi    r13, r14, r15
                stos    r15, 0x1F00(g8)[r6*2]
                b       loc_2BB20
# ---------------------------------------------------------------------------
loc_2BB18:                              # CODE XREF: damage_unit+2C↑j
                clrbit  r6, r9, r9
                b       loc_2BA90
# ---------------------------------------------------------------------------
loc_2BB20:                              # CODE XREF: damage_unit:loc_2BA90↑j
                ldob    num_rounds_to_win, r3
                ldob    0x1F5C(g7), r4
                subi    1, r3, r3
                cmpobne r3, r4, loc_2BB70
                ld      mod_fa_effect, r10
                ld      0x914(r10), r3
                cmpobne 0, r3, loc_2BB70
                ldob    0x7D2(g7), r14
                bbc     0, r14, loc_2BB70
                mov     1, r15
                st      r15, 0x914(r10)
                mov     0, r10
                shlo    0xC, 1, r9
loc_2BB60:                              # CODE XREF: damage_unit+E8↓j
                stos    r9, 0x1F00(g8)[r10*2]
                addo    1, r10, r10
                cmpobne 0x10, r10, loc_2BB60
loc_2BB70:                              # CODE XREF: damage_unit+B0↑j
                mov     g7, r15
                mov     g8, g7
                mov     r15, g8
                call    calc_up_down_damage
                mov     g7, r15
                mov     g8, g7
                mov     r15, g8
                ld      mod_fa_effect, r10
                mov     0, r11
                ld      0x914(r10), r14
                cmpobe  0, r14, loc_2BBC4
                ld      0x7F0(g8), r15
                setbit  2, r15, r15
                st      r15, 0x7F0(g8)
                ld      0x7F0(g8), r15
                setbit  3, r15, r15
                st      r15, 0x7F0(g8)
                ld      0x0(g8), r15
                setbit  0x1C, r15, r15
                st      r15, 0x0(g8)
loc_2BBC4:                              # CODE XREF: damage_unit+118↑j
                mov     0, r15
                st      r15, 0x50E800
                ld      0x7F0(g8), r15
                st      r15, 0x50E804
loc_2BBDC:                              # CODE XREF: damage_unit+2F8↓j
                ldob    0x1B0(g8), r3
                ld      ptr_CE1CC[r3*4], r4 # Always word_CE1CC, which is always 0
                ldos    0x1F20(g8)[r11*2], r5
                cmpobe  4, r5, loc_2BD80
                mov     8, r8
                mulo    r8, r11, r8
                lda     (r4)[r8], r4
                ldob    (r4)[r5], r8
                addo    1, r5, r13
                ldob    (r4)[r13], g0
                cmpobe  0, r8, loc_2BD80
                ld      4(r4), r4
                addo    0x1F, 9, r12
                ldob    0x1F4C(g8)[r11], r7
                mulo    r7, r12, r12
                lda     (r4)[r12], r4
                ld      0x914(r10), r14
                cmpobne 0, r14, loc_2BCF8
                ld      0x26C(g13), r15
                bbs     1, r15, loc_2BC40
                ld      0x26C(g13), r15
                bbc     4, r15, loc_2BD80
loc_2BC40:                              # CODE XREF: damage_unit+1B0↑j
                ld      0x70C(g7), r15
                bbc     5, r15, loc_2BD80
                cmpoble 9, r11, loc_2BCA4
                ldob    0x821(g7), r5
                ldob    byte_2CA3C[r5], r5
                cmpobne 0, r5, loc_2BD80
                ld      0x1F74(g8), r12
                ld      0xAF0(g8), r13
                cmpobl  r12, r13, loc_2BD80
                ld      0x1F7C(g8), r12
                cmpobl  r12, r13, loc_2BD80
                ld      0x7EC(g8), r15
                bbs     5, r15, loc_2BD80
                ld      0x7F0(g8), r15
                setbit  2, r15, r15
                st      r15, 0x7F0(g8)
                ld      0x7F0(g8), r15
                bbc     3, r15, loc_2BCF8
                ld      0x0(g8), r15
                setbit  0x1C, r15, r15
                st      r15, 0x0(g8)
                b       loc_2BCF8
# ---------------------------------------------------------------------------
loc_2BCA4:                              # CODE XREF: damage_unit+1C4↑j
                ldob    0x821(g7), r5
                ldob    byte_2CA3C[r5], r5
                cmpobe  0, r5, loc_2BD80
                ld      0x1F78(g8), r12
                ld      0xAF4(g8), r13
                cmpobl  r12, r13, loc_2BD80
                ld      0x1F80(g8), r12
                cmpobl  r12, r13, loc_2BD80
                ld      0x7EC(g8), r15
                bbs     5, r15, loc_2BD80
                ld      0x7F0(g8), r15
                setbit  3, r15, r15
                st      r15, 0x7F0(g8)
                ld      0x7F0(g8), r15
                bbc     2, r15, loc_2BCF8
                ld      0x0(g8), r15
                setbit  0x1C, r15, r15
                st      r15, 0x0(g8)
loc_2BCF8:                              # CODE XREF: damage_unit+1A8↑j
                subo    1, 0, r15
                st      r15, 0x50E800
                ld      0x914(r10), r14
                cmpobne 0, r14, loc_2BD18
                ld      0x70C(g7), r15
                setbit  6, r15, r15
                st      r15, 0x70C(g7)
loc_2BD18:                              # CODE XREF: damage_unit+284↑j
                ldos    0x1F48(g8), r14
                setbit  r11, r14, r15
                stos    r15, 0x1F48(g8)
                cmpobne 0, g0, loc_2BD3C
                ldos    0x7E8(g8), r14
                clrbit  r11, r14, r15
                stos    r15, 0x7E8(g8)
loc_2BD3C:                              # CODE XREF: damage_unit+2A8↑j
                st      r4, 0x918(r10)
                stos    r8, 0x920(r10)
                stob    r11, 0x91E(r10)
                stob    r3, 0x91F(r10)
                call    efc_crush_parts_put_cont
                ldos    0x908(r10), r14
                setbit  3, r14, r15
                stos    r15, 0x908(r10)
                ldos    0x1F20(g8)[r11*2], r14
                addi    1, r14, r15
                stos    r15, 0x1F20(g8)[r11*2]
                addi    r8, r7, r7
                stob    r7, 0x1F4C(g8)[r11]
                b       loc_2BBDC
# ---------------------------------------------------------------------------
loc_2BD80:                              # CODE XREF: damage_unit+16C↑j
                addo    1, r11, r11
                cmpobne 0x10, r11, loc_2BBDC
                ld      0x50E800, r10
                cmpobe  0, r10, loc_2BDD4
                lda     displacement, g0
                call    check_same_sound
                call    sound_request_u
                ld      0x50E804, r10
                ld      0x7F0(g8), r11
                mov     0, g9
                xor     r10, r11, r10
                bbc     2, r10, loc_2BDC4
                lda     0x1F4, r13
                addi    r13, g9, g9
loc_2BDC4:                              # CODE XREF: damage_unit+334↑j
                bbc     3, r10, loc_2BDD0
                lda     0x1F4, r13
                addi    r13, g9, g9
loc_2BDD0:                              # CODE XREF: damage_unit:loc_2BDC4↑j
                call    total_skill_adder_g7
loc_2BDD4:                              # CODE XREF: damage_unit+30C↑j
                ld      mod_fa_effect, r3
                ldos    0x6F0(g8), r10
                stos    r10, 0x75C(g8)
                mov     0, r10
                ld      0x26C(g13), r15
                bbc     5, r15, loc_2BDFC
                ldos    0x908(r3), r14
                setbit  7, r14, r15
                stos    r15, 0x908(r3)
loc_2BDFC:                              # CODE XREF: damage_unit+368↑j
                ld      0x26C(g13), r15
                bbs     4, r15, loc_2BE20
                ld      0x26C(g13), r15
                bbs     3, r15, loc_2BE54
                ld      0x26C(g13), r15
                bbs     2, r15, loc_2BE64
                ld      0x26C(g13), r15
                bbs     1, r15, loc_2BE74
                b       loc_2BEE8
# ---------------------------------------------------------------------------
loc_2BE20:                              # CODE XREF: damage_unit+37C↑j
                ldos    0x908(r3), r14
                setbit  6, r14, r15
                stos    r15, 0x908(r3)
                mov     1, r10
                stos    r10, draw_particle # Value between 0 - 10
                ldob    0x50A416, r14
                setbit  0, r14, r15
                stob    r15, 0x50A416
                call    sub_32A5C
                b       loc_2BEE8
# ---------------------------------------------------------------------------
loc_2BE54:                              # CODE XREF: damage_unit+384↑j
                ldos    0x908(r3), r14
                setbit  4, r14, r15
                stos    r15, 0x908(r3)
                b       loc_2BEE8
# ---------------------------------------------------------------------------
loc_2BE64:                              # CODE XREF: damage_unit+38C↑j
                ldos    0x908(r3), r14
                setbit  2, r14, r15
                stos    r15, 0x908(r3)
                b       loc_2BEE8
# ---------------------------------------------------------------------------
loc_2BE74:                              # CODE XREF: damage_unit+394↑j
                ldob    also_mode, r15
                lda     mode8, r14
                cmpobe  r14, r15, loc_2BE94
                lda     mode9, r14
                cmpobne r14, r15, loc_2BEB4
loc_2BE94:                              # CODE XREF: damage_unit+400↑j
                ldob    also_sub_mode, r15
                lda     mode8, r14
                cmpobe  r14, r15, loc_2BEB4
                lda     mode9, r14
                cmpobne r14, r15, loc_2BEF0
loc_2BEB4:                              # CODE XREF: damage_unit+40C↑j
                mov     1, r10
                stos    r10, draw_particle # Value between 0 - 10
                ldob    0x50A416, r14
                setbit  0, r14, r15
                stob    r15, 0x50A416
                call    sub_32A5C
                ldos    0x908(r3), r14
                setbit  1, r14, r15
                stos    r15, 0x908(r3)
                b       loc_2BEE8
# ---------------------------------------------------------------------------
loc_2BEE8:                              # CODE XREF: damage_unit+398↑j
                ldos    0x908(r3), r10
                stos    r10, 0x75E(g8)
loc_2BEF0:                              # CODE XREF: damage_unit+4↑j
                ret
# End of function damage_unit
# =============== S U B R O U T I N E =======================================
sub_2BEF4:                              # CODE XREF: collision:loc_29534↑p
                ldob    also_mode, r15
                lda     mode8, r14
                cmpobe  r14, r15, loc_2BF14
                lda     mode9, r14
                cmpobne r14, r15, loc_2BF54
loc_2BF14:                              # CODE XREF: sub_2BEF4+10↑j
                ldob    also_sub_mode, r15
                lda     check_word1, r14
                cmpobe  r14, r15, loc_2BF54
                lda     check_word1+1, r14
                cmpobe  r14, r15, loc_2BF54
                ldob    also_sub_mode, r15
                lda     mode8, r14
                cmpobe  r14, r15, loc_2BF54
                lda     mode9, r14
                cmpobne r14, r15, loc_2C000
loc_2BF54:                              # CODE XREF: sub_2BEF4+1C↑j
                ld      mod_fa_tobi, g6 # Projectile (tobi = flight)
                lda     0x200(g6), g6
                ld      mod_fa_coli, r6
                mov     0x1E, r11
loc_2BF6C:                              # CODE XREF: sub_2BEF4+108↓j
                ld      0x0(g6), r3
                bbc     0x1F, r3, loc_2BFF0
                bbc     1, r3, loc_2BFF0
                ld      0x38(g6), r7
                ld      0x3C(g6), r8
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ldob    0x27(g6), r14
                cmpobe  0, r14, loc_2BFB0
                mov     r7, r15
                mov     r8, r7
                mov     r15, r8
                mov     g7, r15
                mov     g8, g7
                mov     r15, g8
loc_2BFB0:                              # CODE XREF: sub_2BEF4+A0↑j
                cmpobe  0, r8, loc_2BFC8
                ld      0x0(r6), r15
                bbc     0x1F, r15, loc_2BFC4
                call    loc_2C004
                b       loc_2BFC8
# ---------------------------------------------------------------------------
loc_2BFC4:                              # CODE XREF: sub_2BEF4+C4↑j
                call    sub_2C7B4
loc_2BFC8:                              # CODE XREF: sub_2BEF4:loc_2BFB0↑j
                bbc     4, r3, loc_2BFF0
                cmpobe  0, r7, loc_2BFF0
                mov     g7, r15
                mov     g8, g7
                mov     r15, g8
                ld      0x0(r6), r15
                bbc     0x1F, r15, loc_2BFEC
                call    loc_2C004
                b       loc_2BFF0
# ---------------------------------------------------------------------------
loc_2BFEC:                              # CODE XREF: sub_2BEF4+EC↑j
                call    sub_2C7B4
loc_2BFF0:                              # CODE XREF: sub_2BEF4+7C↑j
                shlo    8, 1, r13
                addi    r13, g6, g6
                cmpdeco 1, r11, r11
                bl      loc_2BF6C
loc_2C000:                              # CODE XREF: sub_2BEF4+5C↑j
                ret
# End of function sub_2BEF4
# ---------------------------------------------------------------------------
loc_2C004:                              # CODE XREF: sub_2BEF4+C8↑p
                ldis    0x72(g6), r10
                ldob    0x8E(g6), r5
                cmpobne 0, r5, loc_2C018
                ld      0x1A4(g8), r6
                bbs     3, r6, loc_2C7B0 # return
loc_2C018:                              # CODE XREF: ROM:0002C00C↑j
                ldob    0x8E(g6), r5
                cmpobne 1, r5, loc_2C030
                ld      0x1A4(g8), r15
                bbc     4, r15, loc_2C030
                ld      0x5B8(g7), r6
                bbs     9, r6, loc_2C7B0 # return
loc_2C030:                              # CODE XREF: ROM:0002C01C↑j
                ld      0x1A4(g8), r6
                bbs     0x1E, r6, loc_2C7B0 # return
                bbs     0x12, r6, loc_2C7B0 # return
                bbs     0x13, r6, loc_2C7B0 # return
                bbs     0xF, r6, loc_2C048
                bbc     0x10, r6, loc_2C04C
loc_2C048:                              # CODE XREF: ROM:0002C040↑j
                cmpibne 4, r5, loc_2C7B0 # return
loc_2C04C:                              # CODE XREF: ROM:0002C044↑j
                ldob    0x24(g6), r11
                cmpibl  0, r11, loc_2C074
                subi    r11, 0, r9
                be      loc_2C090
                scanbit r9, r14
                subi    r14, 0x17, r15
                clrbit  r14, r9, r9
                shlo    r15, r9, r9
                setbit  0x1F, r9, r9
                b       loc_2C084
# ---------------------------------------------------------------------------
loc_2C074:                              # CODE XREF: ROM:0002C050↑j
                scanbit r11, r14
                subi    r14, 0x17, r15
                clrbit  r14, r11, r9
                shlo    r15, r9, r9
loc_2C084:                              # CODE XREF: ROM:0002C070↑j
                lda     0x7F(r14), r14
                shlo    0x17, r14, r14
                or      r9, r14, r9
loc_2C090:                              # CODE XREF: ROM:0002C058↑j
                lda     0x3C23D70A, r13
                mulr    r13, r9, r9
                lda     0xD001A1A, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                lda     0x42480000, r13
                mulr    r13, r9, r9
                ld      flt_2BA68, r13
                mulr    r13, r9, r9
                ldob    0x25(g6), r7
                addo    0x1F, 9, r13
                mulo    r13, r7, r7
                lda     0x50A800(r7), r7
                ld      8(r7), r13
                mulr    r13, r9, r9
                ld      0x0(g6), r15
                setbit  5, r15, r15
                st      r15, 0x0(g6)
                ld      0x70C(g8), r15
                bbc     0x19, r15, loc_2C10C
                ld      0x0(g6), r15
                bbs     0x13, r15, loc_2C10C
                ld      0x1A4(g8), r15
                bbs     2, r15, loc_2C10C
                b       loc_2C7B0       # return
# ---------------------------------------------------------------------------
loc_2C10C:                              # CODE XREF: ROM:0002C0F4↑j
                ld      0x1A4(g8), r15
                bbc     0xD, r15, loc_2C1AC
                ld      0x0(g6), r15
                bbs     0x12, r15, loc_2C1AC
                ld      0x0(g6), r15
                bbs     0x14, r15, loc_2C140
                ldis    0x72(g6), r3
                ldis    0x26(g8), r4
                subi    r3, r4, r5
                shlo    0xE, 1, r12
                cmpibl  r12, r5, loc_2C140
                subi    r12, 0, r12
                cmpibl  r12, r5, loc_2C1A8
loc_2C140:                              # CODE XREF: ROM:0002C120↑j
                ldos    0x7E(g6), r14
                bbc     9, r14, loc_2C174
                b       loc_2C1AC
# ---------------------------------------------------------------------------
                call    play_sd_cane_2d
                mov     1, g0
                mov     0, r8
                call    sub_2B94C
                shlo    0x18, 0xB, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                ldis    0xA6(g6), r15
                stis    r15, 0x5DE(g8)
                b       loc_2C7B0       # return
# ---------------------------------------------------------------------------
loc_2C174:                              # CODE XREF: ROM:0002C144↑j
                call    play_sd_cane_2d
                mov     0, g0
                mov     0, r8
                call    sub_2B94C
                shlo    0x19, 5, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                ldos    0xA6(g6), r3
                subi    4, r3, r3
                stos    r3, 0x5DE(g8)
                mov     0, r11
                mov     0, r6
                b       loc_2C694
# ---------------------------------------------------------------------------
loc_2C1A8:                              # CODE XREF: ROM:0002C13C↑j
                b       loc_2C1AC
# ---------------------------------------------------------------------------
loc_2C1AC:                              # CODE XREF: ROM:0002C110↑j
                ld      0x80(g6), r3
                ldis    0x72(g6), r4
                cmpobe  0, r3, loc_2C204
                cmpobe  1, r3, loc_2C1D8
                ld      0x1F4(g8), r4
                ld      0x1FC(g8), r5
                ld      0x44(g6), r12
                ld      0x4C(g6), r13
                subr    r12, r4, r4
                subr    r13, r5, r5
                b       loc_2C1E0
# ---------------------------------------------------------------------------
loc_2C1D8:                              # CODE XREF: ROM:0002C1B8↑j
                ld      0x5C(g6), r4
                ld      0x64(g6), r5
loc_2C1E0:                              # CODE XREF: ROM:0002C1D4↑j
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                mov     0, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r10
loc_2C204:                              # CODE XREF: ROM:0002C1B4↑j
                mov     2, r8
                ld      0x0(g8), r15
                bbc     0x1D, r15, loc_2C328
                ld      0x0(g8), r15
                clrbit  0x1D, r15, r15
                st      r15, 0x0(g8)
                mov     g7, r15
                mov     g8, g7
                mov     r15, g8
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                call    set_kamae_ram   # Set Stance Ram
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                mov     g7, r15
                mov     g8, g7
                mov     r15, g8
loc_2C328:                              # CODE XREF: ROM:0002C20C↑j
                ldob    0x6F4(g8), r3
                addo    1, r3, r3
                stob    r3, 0x6F4(g8)
                ld      debug_flag, r15
                bbs     9, r15, loc_2C3B4
                lda     0x10007DE, g9
                lda     TEXTURE_BUFFER, g1
                st      r3, 0x0(sp)
                mov     1, r15
                balx    sub_4ED24, r14
# ---------------------------------------------------------------------------
aDHitCombo_0:   .asciz "%d hit combo"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                call    print_mes
                cmpobne 1, r3, loc_2C3B4
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100085E, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "                  "
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
loc_2C3B4:                              # CODE XREF: ROM:0002C33C↑j
                ld      0x70C(g8), r15
                bbc     2, r15, loc_2C3CC
                shro    1, r11, r11
                lda     aUkemi, g0      # "ukemi   "
                b       loc_2C410
# ---------------------------------------------------------------------------
loc_2C3CC:                              # CODE XREF: ROM:0002C3B8↑j
                ld      0x1A4(g8), r15
                bbc     0xE, r15, loc_2C3F0
                ld      0x1A4(g8), r15
                bbs     0x10, r15, loc_2C3F0
                shro    2, r11, r3
                subo    r3, r11, r11
                lda     aDown, g0       # "down    "
                b       loc_2C410
# ---------------------------------------------------------------------------
loc_2C3F0:                              # CODE XREF: ROM:0002C3D0↑j
                ldob    0x8E(g6), r14
                cmpibne 8, r14, loc_2C410
                ld      0x1A4(g8), r15
                bbc     0x10, r15, loc_2C410
                lda     aTetsu, g0      # "tetsu   "
                shro    1, r11, r11
                b       loc_2C410
# ---------------------------------------------------------------------------
loc_2C410:                              # CODE XREF: ROM:0002C3C8↑j
                cmpobe  0, r11, loc_2C480
                ld      0x1A4(g7), r15
                bbs     0x12, r15, loc_2C480
                mov     0, r4
                ldob    0x88(g6), r14
                cmpobe  0, r14, loc_2C454
                ldob    0x88(g6), r3
                subo    1, r3, r3
                ld      off_DBE44(r3), r3
loc_2C438:                              # CODE XREF: ROM:0002C450↓j
                ld      (r3)[r4*1], r5
                cmpobe  0, r5, loc_2C480
                mov     r5, g0
                call    check_same_sound
                call    sound_request_u
                addo    4, r4, r4
                b       loc_2C438
# ---------------------------------------------------------------------------
loc_2C454:                              # CODE XREF: ROM:0002C424↑j
                ldob    0x1B0(g8), r4
                mulo    0xC, r4, r4
                cmpobg  0xF, r11, loc_2C46C
                addo    4, r4, r4
                cmpobg  0x1E, r11, loc_2C46C
                addo    4, r4, r4
loc_2C46C:                              # CODE XREF: ROM:0002C45C↑j
                ld      dword_DBBD4(r4), r5
                mov     r5, g0
                call    check_same_sound
                call    sound_request_u
loc_2C480:                              # CODE XREF: ROM:loc_2C410↑j
                ld      0x1A4(g8), r15
                bbs     0x10, r15, loc_2C4E4
                ld      0x1A4(g8), r15
                bbs     0xE, r15, loc_2C514
                ld      0x1A4(g8), r15
                bbs     4, r15, loc_2C564
                ldos    0x7E(g6), r14
                bbs     0xE, r14, loc_2C564
                ldos    0x7E(g6), r14
                bbs     0xA, r14, loc_2C4B0
                addo    0x1F, 0x13, r13
                cmpoble r13, r11, loc_2C564
loc_2C4B0:                              # CODE XREF: ROM:0002C4A4↑j
                ldos    0x1AC(g8), r13
                cmpoble r13, r11, loc_2C564
                and     0x1F, r8, g0
                call    sub_2C7E4
                shlo    0x18, 0xB, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                ldos    0xA6(g6), r3
                ld      0x1A4(g8), r15
                bbc     0x10, r15, loc_2C4DC
                shri    2, r3, r3
loc_2C4DC:                              # CODE XREF: ROM:0002C4D4↑j
                stos    r3, 0x5DE(g8)
                b       loc_2C694
# ---------------------------------------------------------------------------
loc_2C4E4:                              # CODE XREF: ROM:0002C484↑j
                ld      0x1A4(g7), r15
                bbc     0x16, r15, loc_2C564
                mov     5, g0
                call    sub_2C7E4
                lda     0x8010000, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                ldos    0xA6(g6), r3
                shri    2, r3, r3
                stos    r3, 0x5DE(g8)
                b       loc_2C780
# ---------------------------------------------------------------------------
loc_2C514:                              # CODE XREF: ROM:0002C48C↑j
                ldob    0x6F5(g8), r3
                addo    1, r3, r3
                stob    r3, 0x6F5(g8)
                ld      debug_flag, r15
                bbs     9, r15, loc_2C564
                lda     0x100085E, g9
                lda     TEXTURE_BUFFER, g1
                st      r3, 0x0(sp)
                mov     1, r15
                balx    sub_4ED24, r14
# ---------------------------------------------------------------------------
aDDownHitCombo_0:.asciz "%d down hit combo"
                .short 0
# ---------------------------------------------------------------------------
                call    print_mes
loc_2C564:                              # CODE XREF: ROM:0002C494↑j
                mov     4, g0
                call    sub_2C7E4
                ld      0x1A4(g8), r15
                bbc     4, r15, loc_2C578
                lda     0xE1, g0
loc_2C578:                              # CODE XREF: ROM:0002C570↑j
                call    sub_2BA44
                shlo    0x1B, 1, r14
                addi    g0, r14, r15
                st      r15, 0x198(g8)
                ldos    0xA6(g6), r3
                ld      0x1A4(g8), r15
                bbc     0x10, r15, loc_2C598
                shri    2, r3, r3
loc_2C598:                              # CODE XREF: ROM:0002C590↑j
                stos    r3, 0x5DE(g8)
                mov     0x11, g1
                call    calc_mht_adr
                cmpobe  0, g0, loc_2C5F8
                ldob    1(g0), r3
                ldob    2(g0), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                mov     r3, r6
                ldob    3(g0), r3
                ldob    4(g0), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    5(g0), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    6(g0), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mulr    r9, r3, r9
                lda     0x40000000, r3
                mulr    r9, r3, r9
                b       loc_2C694
# ---------------------------------------------------------------------------
loc_2C5F8:                              # CODE XREF: ROM:0002C5A4↑j
                ld      0x1A4(g8), r15
                bbs     4, r15, loc_2C624
                cmpobe  3, r8, loc_2C614
                ldis    0x20(r7), r6
                ld      0x10(r7), r13
                mulr    r13, r9, r9
                b       loc_2C644
# ---------------------------------------------------------------------------
loc_2C614:                              # CODE XREF: ROM:0002C600↑j
                ldis    0x22(r7), r6
                ld      0x14(r7), r13
                mulr    r13, r9, r9
                b       loc_2C644
# ---------------------------------------------------------------------------
loc_2C624:                              # CODE XREF: ROM:0002C5FC↑j
                cmpobe  3, r8, loc_2C638
                ldis    0x24(r7), r6
                ld      0x18(r7), r13
                mulr    r13, r9, r9
                b       loc_2C644
# ---------------------------------------------------------------------------
loc_2C638:                              # CODE XREF: ROM:loc_2C624↑j
                ldis    0x26(r7), r6
                ld      0x1C(r7), r13
                mulr    r13, r9, r9
loc_2C644:                              # CODE XREF: ROM:0002C610↑j
                ldob    0x6F5(g8), r4
                ldob    combo_start, r3
                cmpoble r4, r3, loc_2C684
                subo    r3, r4, r4
                ldos    combo_sub, r13
                mulo    r13, r4, r4
                mov     r6, r15
                subo    r4, r6, r6
                ldos    combo_limit, r3
                cmpoble r3, r15, loc_2C67C
                mov     0, r3
loc_2C67C:                              # CODE XREF: ROM:0002C674↑j
                cmpibge r6, r3, loc_2C684
                mov     r3, r6
loc_2C684:                              # CODE XREF: ROM:0002C650↑j
                ldis    limit_xang, r3
                cmpible r6, r3, loc_2C694
                mov     r3, r6
loc_2C694:                              # CODE XREF: ROM:0002C1A4↑j
                ld      0x5D8(g8), r4
                lda     0x42700000, r3
                subr    r3, r4, r4
                lda     0x3E99999A, r13
                mulr    r13, r4, r4
                addr    r3, r4, r4
                divr    r4, r9, r4
                lda     0x40800000, r13
                mulr    r13, r4, r4
                lda     0xD001A1A, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                cmpobe  0, r8, loc_2C714
                ld      0x1A4(g8), r15
                bbc     0x10, r15, loc_2C70C
                lda     0x40000000, r13
                mulr    r13, r5, r5
                b       loc_2B7E0
# ---------------------------------------------------------------------------
loc_2C70C:                              # CODE XREF: ROM:0002C6F8↑j
                ld      4(r7), r13
                mulr    r13, r5, r5
loc_2C714:                              # CODE XREF: ROM:0002C6F0↑j
                st      r5, 0x5E4(g8)
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                subi    r10, 0, r12
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                cmpobe  0, r8, loc_2C778
                ld      0x0(r7), r13
                mulr    r13, r5, r5
                ld      0x0(r7), r13
                mulr    r13, r6, r6
loc_2C778:                              # CODE XREF: ROM:0002C764↑j
                st      r5, 0x5E0(g8)
                st      r6, 0x5E8(g8)
loc_2C780:                              # CODE XREF: ROM:0002C510↑j
                ldis    game_timer, r14
                cmpibge 0, r14, loc_2C7AC
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                mov     r11, g0
                call    damage_calculation # g7 = damage reciever
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
loc_2C7AC:                              # CODE XREF: ROM:0002C788↑j
                b       loc_2C7B0       # return
# ---------------------------------------------------------------------------
loc_2C7B0:                              # CODE XREF: ROM:0002C014↑j
                ret                     # return
# =============== S U B R O U T I N E =======================================
sub_2C7B4:                              # CODE XREF: sub_2BEF4:loc_2BFC4↑p
                ldob    0x8E(g6), r5
                ld      0x1A4(g8), r6
                bbs     0x1E, r6, loc_2C7E0
                bbs     0x12, r6, loc_2C7E0
                bbs     0x13, r6, loc_2C7E0
                bbs     0xF, r6, loc_2C7D0
                bbc     0x10, r6, loc_2C7D4
loc_2C7D0:                              # CODE XREF: sub_2C7B4+14↑j
                cmpibne 4, r5, loc_2C7E0
loc_2C7D4:                              # CODE XREF: sub_2C7B4+18↑j
                ld      0x0(g6), r15
                setbit  5, r15, r15
                st      r15, 0x0(g6)
loc_2C7E0:                              # CODE XREF: sub_2C7B4+8↑j
                ret
# End of function sub_2C7B4
# =============== S U B R O U T I N E =======================================
sub_2C7E4:                              # CODE XREF: ROM:0002C4BC↑p
                ldob    0x7E(g6), r3
                ld      uk_hit_motions[r3*4], r11
                cmpobne 5, g0, loc_2C7FC
                addo    0x1F, 9, r3
                b       loc_2C85C
# ---------------------------------------------------------------------------
loc_2C7FC:                              # CODE XREF: sub_2C7E4+C↑j
                ldos    0x7E(g6), r10
                mov     0, r9
                ld      0x1A4(g8), r15
                bbc     3, r15, loc_2C810
                addo    4, r9, r9
loc_2C810:                              # CODE XREF: sub_2C7E4+24↑j
                shro    0xF, r10, r5
                ld      0x0(g7), r3
                ld      0x0(g8), r4
                xor     r3, r4, r3
                shro    6, r3, r4
                xor     r4, r5, r5
                ld      0x1A4(g8), r3
                shro    0x15, r3, r4
                xor     r4, r5, r5
                and     1, r5, r5
                addo    r5, r9, r9
                ldis    0x72(g6), r3
                ldis    0x5B4(g8), r13
                subi    r13, r3, r3
                shlo    0xE, 1, r13
                addi    r13, r3, r3
                bbs     0xF, r3, loc_2C858
                addo    2, r9, r9
loc_2C858:                              # CODE XREF: sub_2C7E4+6C↑j
                lda     (r9)[g0*8], r3
loc_2C85C:                              # CODE XREF: sub_2C7E4+14↑j
                ld      (r11)[r3*4], g0
                call    sub_2BA44
                ret
# End of function sub_2C7E4
# =============== S U B R O U T I N E =======================================
zibaku_ckeck:                           # CODE XREF: collision+170↑p
                ld      0x0(g7), r15    # Label from Fighting Vipers source (slightly different)
                bbs     0x1C, r15, loc_2CA38
                ld      0x70C(g7), r15
                bbc     8, r15, loc_2CA38
                ld      0x7F0(g7), r15
                setbit  0, r15, r15
                st      r15, 0x7F0(g7)
                ld      0x7F0(g7), r15
                setbit  1, r15, r15
                st      r15, 0x7F0(g7)
                ld      0x7F0(g7), r15
                setbit  2, r15, r15
                st      r15, 0x7F0(g7)
                ld      0x7F0(g7), r15
                setbit  3, r15, r15
                st      r15, 0x7F0(g7)
                subo    1, 0, r15
                st      r15, 0x50E800
                ld      0x70C(g7), r15
                setbit  6, r15, r15
                st      r15, 0x70C(g7)
                ld      0x0(g7), r15
                setbit  0x1C, r15, r15
                st      r15, 0x0(g7)
                mov     0x10, r9
                ld      0xAF0(g7), r10
                ld      0xAF4(g7), r15
                addo    r10, r15, r10
                mov     0, r6
loc_2C8E0:                              # CODE XREF: zibaku_ckeck+94↓j
                ldos    0x1F00(g7)[r6*2], r14
                addi    r10, r14, r15
                stos    r15, 0x1F00(g7)[r6*2]
                addo    1, r6, r6
                cmpdeco 1, r9, r9
                bl      loc_2C8E0
                ld      mod_fa_effect, r10
                mov     0, r11
                st      r11, 0x50E800
loc_2C914:                              # CODE XREF: zibaku_ckeck+15C↓j
                ldob    0x1B0(g7), r3
                ld      ptr_CE1CC[r3*4], r4 # Always word_CE1CC, which is always 0
                ldos    0x1F20(g7)[r11*2], r5
                cmpobe  4, r5, loc_2C9C8
                mov     8, r8
                mulo    r8, r11, r8
                lda     (r4)[r8], r4
                ldob    (r4)[r5], r8
                addo    1, r5, r13
                ldob    (r4)[r13], g0
                cmpobe  0, r8, loc_2C9C8
                ld      4(r4), r4
                addo    0x1F, 9, r12
                ldob    0x1F4C(g7)[r11], r7
                mulo    r7, r12, r12
                lda     (r4)[r12], r4
                ldos    0x1F48(g7), r14
                setbit  r11, r14, r15
                stos    r15, 0x1F48(g7)
                cmpobne 0, g0, loc_2C984
                ldos    0x7E8(g7), r14
                clrbit  r11, r14, r15
                stos    r15, 0x7E8(g7)
loc_2C984:                              # CODE XREF: zibaku_ckeck+10C↑j
                st      r4, 0x918(r10)
                stos    r8, 0x920(r10)
                stob    r11, 0x91E(r10)
                stob    r3, 0x91F(r10)
                call    efc_crush_parts_put_cont
                ldos    0x908(r10), r14
                setbit  3, r14, r15
                stos    r15, 0x908(r10)
                ldos    0x1F20(g7)[r11*2], r14
                addi    1, r14, r15
                stos    r15, 0x1F20(g7)[r11*2]
                addi    r8, r7, r7
                stob    r7, 0x1F4C(g7)[r11]
                b       loc_2C914
# ---------------------------------------------------------------------------
loc_2C9C8:                              # CODE XREF: zibaku_ckeck+C0↑j
                addo    1, r11, r11
                cmpobne 0x10, r11, loc_2C914
                shlo    2, 0x19, g9
                ldob    stage_num, r12
                addo    1, r12, r12
                subi    r12, 0, r12
                addi    0xA, r12, r12
                cmpibl  0, r12, loc_2C9F0
                mov     1, r12
loc_2C9F0:                              # CODE XREF: zibaku_ckeck+180↑j
                mulo    r12, g9, g9
                ldob    curr_round_num, r14
                cmpobne 1, r14, loc_2CA18
                shlo    8, 7, r13
                ldos    game_timer, r14
                cmpobg  r13, r14, loc_2CA18
                addo    g9, g9, g9
                b       loc_2CA18
# ---------------------------------------------------------------------------
loc_2CA18:                              # CODE XREF: zibaku_ckeck+194↑j
                call    total_skill_adder_g7
                ld      0x50E800, r10
                cmpobe  0, r10, loc_2CA38
                lda     displacement, g0
                call    check_same_sound
                call    sound_request_u
loc_2CA38:                              # CODE XREF: zibaku_ckeck+4↑j
                ret
# End of function zibaku_ckeck
# ---------------------------------------------------------------------------
byte_2CA3C:     .byte 0                 # DATA XREF: damage_unit+24↑r
                .byte 0
                .byte 1
                .byte 0
                .byte 1
                .byte 1
                .byte 1
                .byte 0
                .byte 1
                .byte 0
                .byte 0
                .byte 0
# =============== S U B R O U T I N E =======================================
calc_up_down_damage:                    # CODE XREF: damage_unit+F8↑p
                ld      0x1F74(g7), r15 # Label from Fighting Vipers source
                st      r15, 0x1F7C(g7)
                ld      0x1F78(g7), r15
                st      r15, 0x1F80(g7)
                mov     0, r10
                mov     0, r8
                mov     0, r9
loc_2CA74:                              # CODE XREF: calc_up_down_damage+48↓j
                ldos    0x1F00(g7)[r10*2], r3
                cmpoble 9, r10, loc_2CA88
                addo    r3, r8, r8
                b       loc_2CA8C
# ---------------------------------------------------------------------------
loc_2CA88:                              # CODE XREF: calc_up_down_damage+34↑j
                addo    r3, r9, r9
loc_2CA8C:                              # CODE XREF: calc_up_down_damage+3C↑j
                addo    1, r10, r10
                cmpobne 0x10, r10, loc_2CA74
                st      r8, 0x1F74(g7)
                st      r9, 0x1F78(g7)
                ld      0x7F0(g7), r15
                bbs     2, r15, loc_2CAC0
                ld      0xAF0(g7), r12
                cmpobl  r8, r12, loc_2CAC0
                ld      0x7F0(g7), r15
                setbit  0, r15, r15
                st      r15, 0x7F0(g7)
loc_2CAC0:                              # CODE XREF: calc_up_down_damage+60↑j
                ld      0x7F0(g7), r15
                bbs     3, r15, loc_2CADC
                ld      0xAF4(g7), r12
                cmpobl  r9, r12, loc_2CADC
                ld      0x7F0(g7), r15
                setbit  1, r15, r15
                st      r15, 0x7F0(g7)
loc_2CADC:                              # CODE XREF: calc_up_down_damage+7C↑j
                ret
# End of function calc_up_down_damage
# =============== S U B R O U T I N E =======================================
kabe_parts_damage:                      # CODE XREF: play_motion+988↑p
                divo    4, g0, r3       # Label from Fighting Vipers source
                mov     0x10, r9
                mov     0, r8
loc_2CAEC:                              # CODE XREF: kabe_parts_damage+28↓j
                ldos    0x1F00(g7)[r8*2], r14
                addi    r3, r14, r15
                stos    r15, 0x1F00(g7)[r8*2]
                addo    1, r8, r8
                cmpdeco 1, r9, r9
                bl      loc_2CAEC
                call    calc_up_down_damage
                ret
# End of function kabe_parts_damage
# =============== S U B R O U T I N E =======================================
sub_2CB14:                              # CODE XREF: efc_cont:loc_31CD4↓p
                ldob    also_mode, r3
                ldob    also_sub_mode, r4
                lda     start_ip_add, r15
                cmpobe  r15, r3, loc_2CBB8
                lda     start_ip_add+1, r15
                cmpobe  r15, r3, loc_2CBB8
                lda     mode9, r15
                cmpobne r15, r3, loc_2CB64
                lda     check_word1+1, r5
                cmpobe  r4, r5, loc_2CBB8
                lda     check_word2+3, r5
                cmpobe  r4, r5, loc_2CBB8
                b       loc_2CBBC
# ---------------------------------------------------------------------------
loc_2CB64:                              # CODE XREF: sub_2CB14+30↑j
                lda     displacement3, r15
                cmpobne r15, r3, loc_2CBBC
                lda     prcb+1, r5
                cmpobe  r4, r5, loc_2CBBC
                lda     mode10, r5
                cmpobe  r4, r5, loc_2CBBC
                lda     mode9, r5
                cmpobe  r4, r5, loc_2CBBC
                lda     start_ip_add+3, r5
                cmpobe  r4, r5, loc_2CBBC
                lda     start_ip_add+2, r5
                cmpobe  r4, r5, loc_2CBBC
                lda     check_word1, r5
                cmpobe  r4, r5, loc_2CBBC
loc_2CBB8:                              # CODE XREF: sub_2CB14+18↑j
                call    sub_2BEF4
loc_2CBBC:                              # CODE XREF: sub_2CB14+4C↑j
                ret
# End of function sub_2CB14
# ---------------------------------------------------------------------------
                ret
# ---------------------------------------------------------------------------
                mov     0, r10
loc_2CBC8:                              # CODE XREF: ROM:0002CD40↓j
                ldob    0x1B0(g8), r4
                ld      ptr_CE1CC[r4*4], r8 # Always word_CE1CC, which is always 0
                lda     (r8)[r10*8], g5
                ld      4(g5), g1
                cmpobe  0, g1, loc_2CD3C
                mov     0, g0
                lda     0x1F60(g8), g4
                mov     0, r11
loc_2CBF0:                              # CODE XREF: ROM:0002CD38↓j
                ldos    (g4), r6
                ldos    8(g4), r7
                and     r6, r7, r8
                xor     r6, r7, r9
                bbs     r10, r9, loc_2CC0C
                bbc     r10, r8, loc_2CD3C
                b       loc_2CD18
# ---------------------------------------------------------------------------
loc_2CC0C:                              # CODE XREF: ROM:0002CC00↑j
                st      g1, 0x918(g13)
                ldob    (g5), r3
                stos    r3, 0x920(g13)
                ldob    0x1B0(g8), r3
                stob    r3, 0x91F(g13)
                stob    r10, 0x91E(g13)
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                call    efc_crush_parts_put_cont
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
loc_2CD18:                              # CODE XREF: ROM:0002CC08↑j
                addo    1, g0, g0
                ldob    (g5), r3
                addo    0x1F, 9, r14
                mulo    r14, r3, r3
                addo    r3, g1, g1
                addo    1, g5, g5
                addo    2, g4, g4
                addo    1, r11, r11
                cmpobne 4, r11, loc_2CBF0
loc_2CD3C:                              # CODE XREF: ROM:0002CBDC↑j
                addo    1, r10, r10
                cmpobne 0x10, r10, loc_2CBC8
                ret
# ---------------------------------------------------------------------------
                ret
# =============== S U B R O U T I N E =======================================
gusya_ckeck:                            # CODE XREF: collision+198↑p
                ret                     # Label from Fighting Vipers source
# End of function gusya_ckeck
# ---------------------------------------------------------------------------
NORMAL:         .long 0xFFFE            # DATA XREF: decide_coli_kind:loc_2D0E4↓o
                .long 0xFFFE
                .float 0.5
                .float 0.5
                .long aNormal           # "NORMAL  "
                .long 0
                .long 0xFFFE
                .long 0xFFFE
FIX_0:          .fill 2, 4, 0xFFFE      # DATA XREF: decide_coli_kind+270↓o
                .long 0
                .float 1.0
                .long aFix0             # "FIX 0   "
                .long 1
                .long 0xFFFE
                .long 0xFFFE
FIX_1:          .long 0xFFFE            # DATA XREF: decide_coli_kind+254↓o
                .long 0xFFFE
                .float 1.0
                .long 0
                .long aFix1             # "FIX 1   "
                .long 2
                .long 0xFFFE
                .long 0xFFFE
BODY:           .long 0x264A            # DATA XREF: decide_coli_kind+1A8↓o
                .long 0x264A
                .long 0
                .float 1.0
                .long aBody             # "BODY    "
                .long 3
                .long 0xFFFE
                .long 0xFFFE
BODY_0:         .long 0x264A            # DATA XREF: decide_coli_kind:loc_2D1A8↓o
                .long 0x264A
                .float 1.0
                .long 0
                .long aBody             # "BODY    "
                .long 3
                .long 0xFFFE
                .long 0xFFFE
KABE:           .fill 2, 4, 0xFFFE      # DATA XREF: decide_coli_kind+1E0↓o
                .float 0.5
                .float 0.5
                .long aKabe             # "KABE    "
                .long 3
                .long 0xFFFE
                .long 0xFFFE
KABE_0:         .long 0xFFFE            # DATA XREF: decide_coli_kind+224↓o
                .long 0xFFFE
                .float 0.5
                .float 0.5
                .long aKabe             # "KABE    "
                .long 3
                .long 0xFFFE
                .long 0xFFFE
RIDE_1:         .long 0xFFFE            # DATA XREF: decide_coli_kind+160↓o
                .long 0xFFFE
                .long 0
                .float 1.0
                .long aRide1            # "RIDE 1  "
                .long 4
                .long 0xFFFE
                .long 0xFFFE
RIDE_0:         .long 0xFFFE            # DATA XREF: decide_coli_kind+194↓o
                .long 0xFFFE
                .float 1.0
                .long 0
                .long aRide0            # "RIDE 0  "
                .long 5
                .long 0xFFFE
                .long 0xFFFE
JUMP_0:         .long 0xFFFE            # DATA XREF: decide_coli_kind+234↓o
                .long 0xFFFE
                .float 0.5
                .float 0.5
                .long aJump0            # "JUMP 0  "
                .long 6
                .long 0x27FE
                .long 0xFFFE
JUMP_1:         .long 0xFFFE            # DATA XREF: decide_coli_kind+240↓o
                .long 0xFFFE
                .float 0.5
                .float 0.5
                .long aJump1            # "JUMP 1  "
                .long 7
                .long 0xFFFE
                .long 0x27FE
RISE_0:         .long 0xFFFE            # DATA XREF: decide_coli_kind+27C↓o
                .long 0xFFFE
                .float 9.8999996
                .float 9.8999996
                .long aRise0            # "RISE 0  "
                .long 8
                .long 0xFFFE
                .long 0xFFFE
RISE_1:         .long 0xFFFE            # DATA XREF: decide_coli_kind+260↓o
                .long 0xFFFE
                .float 9.8999996
                .float 9.8999996
                .long aRise1            # "RISE 1  "
                .long 9
                .long 0xFFFE
                .long 0xFFFE
TOBIKOE0:       .long 0xFFFE            # DATA XREF: decide_coli_kind:loc_2D058↓o
                .long 0xFFFE
                .long 0
                .float 1.0
                .long aTobikoe0         # "TOBIKOE0"
                .long 0xA
                .long 0
                .long 0
TOBIKOE1:       .long 0xFFFE            # DATA XREF: decide_coli_kind:loc_2D0A4↓o
                .long 0xFFFE
                .float 1.0
                .long 0
                .long aTobikoe1         # "TOBIKOE1"
                .long 0xB
                .long 0
                .long 0
aNormal:        .asciz "NORMAL  "    # DATA XREF: ROM:0002CD60↑o
aTobikoe0:      .asciz "TOBIKOE0"    # DATA XREF: ROM:0002CF00↑o
aTobikoe1:      .asciz "TOBIKOE1"    # DATA XREF: ROM:0002CF20↑o
aFix0:          .asciz "FIX 0   "    # DATA XREF: ROM:0002CD80↑o
aFix1:          .asciz "FIX 1   "    # DATA XREF: ROM:0002CDA0↑o
aBody:          .asciz "BODY    "    # DATA XREF: ROM:0002CDC0↑o
aKabe:          .asciz "KABE    "    # DATA XREF: ROM:0002CE00↑o
aRide1:         .asciz "RIDE 1  "    # DATA XREF: ROM:0002CE40↑o
aRide0:         .asciz "RIDE 0  "    # DATA XREF: ROM:0002CE60↑o
aJump0:         .asciz "JUMP 0  "    # DATA XREF: ROM:0002CE80↑o
aJump1:         .asciz "JUMP 1  "    # DATA XREF: ROM:0002CEA0↑o
aRise0:         .asciz "RISE 0  "    # DATA XREF: ROM:0002CEC0↑o
aRise1:         .asciz "RISE 1  "    # DATA XREF: ROM:0002CEE0↑o
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
# START OF FUNCTION CHUNK FOR decide_coli_kind
player_mot_nums_read:                   # CODE XREF: decide_coli_kind+34↓j
                ldos    0x1A8(g7), r3   # p1_motion_num
                ldos    0x1A8(g8), r4   # p2_motion_num
                b       loc_2CFF4
# END OF FUNCTION CHUNK FOR decide_coli_kind
# ---------------------------------------------------------------------------
                setbit  1, g6, g6
                b       loc_2D0D8
# =============== S U B R O U T I N E =======================================
decide_coli_kind:                       # CODE XREF: coli_cont_cop+B0↓p
# FUNCTION CHUNK AT 0002CFA8 SIZE 0000000C BYTES
                ld      fa_rob0, g7     # Label from official source
                ld      fa_rob1, g8
                ld      0x1A4(g7), r7
                ld      0x1A4(g8), r8
                ld      0x70C(g7), r5
                ld      0x70C(g8), r6
                or      r7, r8, r9
                and     r7, r8, r10
                xor     r7, r8, r11
                xor     r5, r6, r5
                mov     0, g6
                b       player_mot_nums_read
# ---------------------------------------------------------------------------
loc_2CFF4:                              # CODE XREF: decide_coli_kind-C↑j
                bbc     0x12, r9, loc_2D000
                setbit  0, g6, g6
                b       loc_2D0D8
# ---------------------------------------------------------------------------
loc_2D000:                              # CODE XREF: decide_coli_kind:loc_2CFF4↑j
                bbs     0x12, r5, loc_2D00C
                bbc     8, r11, loc_2D0CC
                b       loc_2D0B0
# ---------------------------------------------------------------------------
loc_2D00C:                              # CODE XREF: decide_coli_kind:loc_2D000↑j
                bbc     3, r11, loc_2D0B0
                ld      0x70C(g7), r15
                bbs     0x12, r15, loc_2D064
                bbc     3, r7, loc_2D0B0
                ld      0xC58(g8), r15
                bbc     0x12, r15, loc_2D028
                bbc     4, r8, loc_2D0B0
loc_2D028:                              # CODE XREF: decide_coli_kind+64↑j
                ldos    0x1AA(g8), r14
                cmpobg  4, r14, loc_2D0B0
                bbs     1, r8, loc_2D058
                ld      0x5B8(g7), r15
                bbs     9, r15, loc_2D058
                ld      0x5B8(g7), r15
                bbs     8, r15, loc_2D058
                ld      0x5F4(g7), r3
                lda     0x3ECCCCCD, r4
                cmpr    r3, r4
                bg      loc_2D0B0
loc_2D058:                              # CODE XREF: decide_coli_kind+74↑j
                lda     TOBIKOE0, r12
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D064:                              # CODE XREF: decide_coli_kind+58↑j
                bbc     3, r8, loc_2D0B0
                ld      0xC58(g7), r15
                bbc     0x12, r15, loc_2D074
                bbc     4, r7, loc_2D0B0
loc_2D074:                              # CODE XREF: decide_coli_kind+B0↑j
                ldos    0x1AA(g7), r14
                cmpobg  4, r14, loc_2D0B0
                bbs     1, r7, loc_2D0A4
                ld      0x5B8(g8), r15
                bbs     9, r15, loc_2D0A4
                ld      0x5B8(g8), r15
                bbs     8, r15, loc_2D0A4
                ld      0x5F4(g8), r3
                lda     0x3ECCCCCD, r4
                cmpr    r3, r4
                bg      loc_2D0B0
loc_2D0A4:                              # CODE XREF: decide_coli_kind+C0↑j
                lda     TOBIKOE1, r12
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D0B0:                              # CODE XREF: decide_coli_kind+4C↑j
                addo    0x1F, 0xA, r14
                ldob    0x820(g7), r15
                cmpobe  r14, r15, loc_2D0D8
                ldob    0x820(g8), r15
                cmpobe  r14, r15, loc_2D0D8
                setbit  1, g6, g6
                b       loc_2D0D8
# ---------------------------------------------------------------------------
loc_2D0CC:                              # CODE XREF: decide_coli_kind+48↑j
                bbc     8, r10, loc_2D0D8
                setbit  2, g6, g6
                b       loc_2D0D8
# ---------------------------------------------------------------------------
loc_2D0D8:                              # CODE XREF: ROM:0002CFB8↑j
                bbc     0xE, r9, loc_2D0E4
                setbit  3, g6, g6
                b       loc_2D0E4
# ---------------------------------------------------------------------------
loc_2D0E4:                              # CODE XREF: decide_coli_kind:loc_2D0D8↑j
                lda     NORMAL, r12
                bbs     0, g6, loc_2D248
                bbs     2, g6, loc_2D208
                bbc     0x10, r7, loc_2D128
                bbs     0xF, r7, loc_2D20C
                bbc     0x16, r8, loc_2D20C
                ld      0x804(g8), r15
                bbs     0xC, r15, loc_2D118
                ld      0x804(g8), r15
                bbs     4, r15, loc_2D118
                setbit  7, g6, g6
                b       loc_2D20C
# ---------------------------------------------------------------------------
loc_2D118:                              # CODE XREF: decide_coli_kind+148↑j
                setbit  6, g6, g6
                lda     RIDE_1, r12
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D128:                              # CODE XREF: decide_coli_kind+138↑j
                bbc     0x10, r8, loc_2D15C
                bbs     0xF, r8, loc_2D20C
                bbc     0x16, r7, loc_2D20C
                ld      0x804(g7), r15
                bbs     0xC, r15, loc_2D14C
                ld      0x804(g7), r15
                bbs     4, r15, loc_2D14C
                setbit  5, g6, g6
                b       loc_2D20C
# ---------------------------------------------------------------------------
loc_2D14C:                              # CODE XREF: decide_coli_kind+17C↑j
                setbit  4, g6, g6
                lda     RIDE_0, r12
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D15C:                              # CODE XREF: decide_coli_kind:loc_2D128↑j
                bbc     1, g6, loc_2D1EC
                bbc     8, r7, loc_2D1A8
                lda     BODY, r12
                ld      0x1E0(g13), r3
                shro    0xD, r3, r3
                mov     7, r4
                and     r3, r4, r3
                ld      dword_2E290[r3*4], r3
                ld      0x650(g8)[r3*1], r3
                lda     0x3DCCCCCD, r4
                cmpr    r4, r3
                bl      loc_2D248
                lda     KABE, r12
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D1A8:                              # CODE XREF: decide_coli_kind+1A4↑j
                lda     BODY_0, r12
                ld      0x1E0(g13), r3
                shro    0xD, r3, r3
                mov     7, r4
                and     r3, r4, r3
                ld      dword_2E270[r3*4], r3
                ld      0x650(g7)[r3*1], r3
                lda     0x3DCCCCCD, r4
                cmpr    r4, r3
                bl      loc_2D248
                lda     KABE_0, r12
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D1EC:                              # CODE XREF: decide_coli_kind:loc_2D15C↑j
                bbc     4, r11, loc_2D248
                lda     JUMP_0, r12
                bbs     4, r7, loc_2D248
                lda     JUMP_1, r12
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D208:                              # CODE XREF: decide_coli_kind+134↑j
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D20C:                              # CODE XREF: decide_coli_kind+13C↑j
                bbs     0x10, r7, loc_2D228
                lda     FIX_1, r12
                bbc     0xF, r8, loc_2D248
                lda     RISE_1, r12
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D228:                              # CODE XREF: decide_coli_kind:loc_2D20C↑j
                bbs     0x10, r8, loc_2D244
                lda     FIX_0, r12
                bbc     0xF, r7, loc_2D248
                lda     RISE_0, r12
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D244:                              # CODE XREF: decide_coli_kind:loc_2D228↑j
                b       loc_2D248
# ---------------------------------------------------------------------------
loc_2D248:                              # CODE XREF: decide_coli_kind+A4↑j
                ld      fa_rob0, r3
                ld      0x1D14(r3), g1  # g1 = P1_PARTS+0x1D14
                ld      0x0(r12), g0
                call    unit_to_ball
                not     g0, g0
                st      g0, 0xC0(g13)
                ld      fa_rob1, r3
                ld      0x1D14(r3), g1
                ld      4(r12), g0
                call    unit_to_ball
                not     g0, g0
                st      g0, 0xC4(g13)
                ld      8(r12), r10
                ld      0xC(r12), r11
                lda     0x411E6666, r14
                cmpr    r14, r10
                bne     loc_2D2D4
                ld      0x27C(g13), r10
                ld      0x280(g13), r11
                clrbit  0x1F, r10, r10
                clrbit  0x1F, r11, r11
                or      r10, r11, r9
                cmpobe  0, r9, loc_2D2D4
                lda     0x2D005A5A, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r10
                ld      (g11)[g12*1], r11
loc_2D2D4:                              # CODE XREF: decide_coli_kind+2E0↑j
                st      r10, 0xCC(g13)
                st      r11, 0xD0(g13)
                ld      0x10(r12), r15
                st      r15, 0xC8(g13)
                ld      0x14(r12), r15
                st      r15, 0x88(g13)
                ld      fa_rob0, r3
                ld      0x1D14(r3), g1
                ld      0x18(r12), g0
                call    unit_to_ball
                st      g0, 0x264(g13)
                ld      fa_rob1, r3
                ld      0x1D14(r3), g1
                ld      0x1C(r12), g0
                call    unit_to_ball
                st      g0, 0x268(g13)
                ret
# End of function decide_coli_kind
# =============== S U B R O U T I N E =======================================
unit_to_ball:                           # CODE XREF: decide_coli_kind+2A0↑p
                cmpobe  0, g0, loc_2D368 # Label from official source
                mov     g0, r10
                mov     0, g0
loc_2D334:                              # CODE XREF: unit_to_ball+3C↓j
                scanbit r10, r11
                cmpibge 0, r11, loc_2D368
                lda     (g1)[r11*8], r8
                mov     0, r4
loc_2D344:                              # CODE XREF: unit_to_ball+34↓j
                ldob    (r8)[r4], r6
                shro    2, r6, r6
                cmpobe  0, r4, loc_2D354
                cmpobe  0, r6, loc_2D360
loc_2D354:                              # CODE XREF: unit_to_ball+24↑j
                setbit  r6, g0, g0
                addo    1, r4, r4
                b       loc_2D344
# ---------------------------------------------------------------------------
loc_2D360:                              # CODE XREF: unit_to_ball+28↑j
                clrbit  r11, r10, r10
                b       loc_2D334
# ---------------------------------------------------------------------------
loc_2D368:                              # CODE XREF: unit_to_ball↑j
                ret
# End of function unit_to_ball
# =============== S U B R O U T I N E =======================================
coli_cont_cop:                          # CODE XREF: collision+A8↑p
                ldt     0x1F4(g7), r4   # Label from official source
                ldt     0x1F4(g8), r8
                subr    r4, r8, r12
                subr    r6, r10, r14
                lda     0x1F003E3E, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      fa_rob0, g7
                call    calc_attack_flag # g7 = P1_PARTS or P2_PARTS
                mov     g3, r3
                ld      fa_rob1, g7
                call    calc_attack_flag # g7 = P1_PARTS or P2_PARTS
                mov     g3, r7
                ld      fa_rob0, g7
                ldob    0x821(g7), r11
                ld      fa_rob1, g7
                ldob    0x821(g7), r12
                lda     0x1D003A3A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                call    coli_ram_init
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                call    area_coli
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                call    area_coli
                call    decide_coli_kind
                ld      fa_rob0, g7
                ld      0x1A4(g7), r14
                bbs     0x1D, r14, loc_2D48C
                ld      fa_rob1, g8
                ld      0x1A4(g8), r14
                bbs     0x1D, r14, loc_2D48C
                bbs     0, g6, loc_2D480
                bbs     5, g6, loc_2D450
                bbs     7, g6, loc_2D468
                b       loc_2D490
# ---------------------------------------------------------------------------
loc_2D450:                              # CODE XREF: coli_cont_cop+D8↑j
                ldos    0x1AA(g7), r3
                ldos    0x80A(g7), r7
                addo    0xF, r7, r11
                cmpobl  r3, r7, loc_2D490
                cmpobl  r3, r11, loc_2D480
                b       loc_2D490
# ---------------------------------------------------------------------------
loc_2D468:                              # CODE XREF: coli_cont_cop+DC↑j
                ldos    0x1AA(g8), r3
                ldos    0x80A(g8), r7
                addo    0xF, r7, r11
                cmpobl  r3, r7, loc_2D490
                cmpobl  r3, r11, loc_2D480
                b       loc_2D490
# ---------------------------------------------------------------------------
loc_2D480:                              # CODE XREF: coli_cont_cop+D4↑j
                call    decide_dir
                bal     coli_recalc_pos
                b       loc_2D530
# ---------------------------------------------------------------------------
loc_2D48C:                              # CODE XREF: coli_cont_cop+C0↑j
                call    decide_dir
loc_2D490:                              # CODE XREF: coli_cont_cop+E0↑j
                ld      fa_rob0, g7
                ld      0x768(g7), r11
                ld      fa_rob1, g8
                ld      0x768(g8), r12
                ld      0x88(g13), r3
                ld      0xC0(g13), r13
                ld      0xC4(g13), r14
                lda     0x1D803B3B, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                ld      0x264(g13), r13
                ld      0x268(g13), r14
                st      r13, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                ld      (g11)[g12*1], r13
                ld      (g11)[g12*1], g4
                ld      (g11)[g12*1], g5
                st      r12, 0x160(g13)
                st      r13, 0x164(g13)
                ld      0x100(g13), r15
                ld      0xFC(g13), r14
                addr    r14, r15, r15
                st      r14, 0x100(g13)
                ld      0xF8(g13), r14
                addr    r14, r15, r15
                st      r14, 0xFC(g13)
                addr    g5, r15, r15
                st      g5, 0xF8(g13)
                lda     0x40800000, r14
                divr    r14, r15, g5
                bal     coli_recalc_pos
loc_2D530:                              # CODE XREF: coli_cont_cop+11C↑j
                ret
# End of function coli_cont_cop
# =============== S U B R O U T I N E =======================================
coli_ram_init:                          # CODE XREF: coli_cont_cop+84↑p
                movq    0, r12          # Label from official source
                stq     r12, 0x170(g13)
                stq     r12, 0x180(g13)
                stq     r12, 0x190(g13)
                stq     r12, 0x1A0(g13)
                ld      fa_rob0, r3
                stos    r12, 0x75C(r3)
                stos    r12, 0x75E(r3)
                stl     r12, 0xA68(r3)
                ld      fa_rob1, r3
                stos    r12, 0x75C(r3)
                stos    r12, 0x75E(r3)
                stl     r12, 0xA68(r3)
                st      r12, 0x98(g13)
                st      r12, 0x9C(g13)
                st      r12, 0xA0(g13)
                st      r12, 0xA4(g13)
                st      r12, 0xA8(g13)
                ret
# End of function coli_ram_init
# =============== S U B R O U T I N E =======================================
decide_dir:                             # CODE XREF: coli_cont_cop:loc_2D480↑p
                ld      fa_rob0, g7     # Label from official source
                ld      fa_rob1, g8
                lda     0x3ECCCCCD, r12
                ld      0x1A4(g7), r3
                ld      0x1A4(g8), r4
                or      r3, r4, r5
                bbs     0x1D, r5, loc_2D620
                bbs     0x12, r5, loc_2D620
                ld      0x804(g7), r6
                ld      0x804(g8), r7
                or      r6, r7, r15
                bbc     8, r15, loc_2D5F0
                ldob    0x821(g7), r8
                ldob    0x821(g8), r9
                bbs     8, r6, loc_2D5E0
                bbc     8, r7, loc_2D5F0
                mov     r9, r15
                mov     r8, r9
                mov     r15, r8
loc_2D5E0:                              # CODE XREF: decide_dir+44↑j
                cmpobne 5, r8, loc_2D5F0
                lda     0x3E99999A, r12
                b       loc_2D5FC
# ---------------------------------------------------------------------------
loc_2D5F0:                              # CODE XREF: decide_dir+38↑j
                bbc     0xE, r3, loc_2D5FC
                lda     0x3F59999A, r12
loc_2D5FC:                              # CODE XREF: decide_dir+64↑j
                ld      0x5F4(g7), r13
                ld      0x7D4(g7), r14
                cmpr    r13, r14
                bl      loc_2D610
                mov     0, r12
loc_2D610:                              # CODE XREF: decide_dir+80↑j
                st      r12, 0x270(g13)
                ld      0x168(g13), r3
                cmpr    r12, r3
                bg      loc_2D678
loc_2D620:                              # CODE XREF: decide_dir+24↑j
                ldt     0x1F4(g7), r4
                ldt     0x1F4(g8), r8
                subr    r4, r8, r12
                mov     0, r13
                subr    r6, r10, r14
                or      r12, r14, r15
                clrbit  0x1F, r15, r15
                cmpobne 0, r15, loc_2D648
                movt    0, r12
                b       loc_2D66C
# ---------------------------------------------------------------------------
loc_2D648:                              # CODE XREF: decide_dir+B4↑j
                lda     0x18003030, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                ld      (g11)[g12*1], r13
                ld      (g11)[g12*1], r14
loc_2D66C:                              # CODE XREF: decide_dir+BC↑j
                st      r12, 0xD4(g13)
                st      r13, 0xD8(g13)
                st      r14, 0xDC(g13)
loc_2D678:                              # CODE XREF: decide_dir+94↑j
                ret
# End of function decide_dir
# =============== S U B R O U T I N E =======================================
coli_recalc_pos:                        # CODE XREF: coli_cont_cop+118↑p
                ld      fa_rob0, g7     # Label from official source
                ld      fa_rob1, g8
                ld      0x1A4(g7), r14
                bbs     0x1D, r14, loc_2D6A8
                ld      0x1A4(g8), r14
                bbs     0x1D, r14, loc_2D6A8
                bbs     0, g6, loc_2D84C
                bbc     3, g6, loc_2D6A8
                call    decide_dir
loc_2D6A8:                              # CODE XREF: coli_recalc_pos+14↑j
                ld      0x164(g13), r3
                cmpobl  0, r3, loc_2D6C0
                call    decide_dir
                movt    0, r8
                movt    0, r12
                b       loc_2D830
# ---------------------------------------------------------------------------
loc_2D6C0:                              # CODE XREF: coli_recalc_pos+30↑j
                ld      0x88(g13), r15
                cmpobne 5, r15, loc_2D6FC
                ld      0x678(g7), r12
                addr    g5, r12, r15
                lda     0x3E19999A, r14
                cmpr    r14, r15
                bg      loc_2D6E8
                mov     r14, r15
                subr    r12, r14, g5
loc_2D6E8:                              # CODE XREF: coli_recalc_pos+60↑j
                st      r15, 0x678(g7)
                movt    0, r8
                movt    0, r12
                mov     g5, r9
                b       loc_2D830
# ---------------------------------------------------------------------------
loc_2D6FC:                              # CODE XREF: coli_recalc_pos+48↑j
                cmpobne 4, r15, loc_2D734
                ld      0x678(g8), r12
                addr    g5, r12, r15
                lda     0x3E19999A, r14
                cmpr    r14, r15
                bg      loc_2D720
                mov     r14, r15
                subr    r12, r14, g5
loc_2D720:                              # CODE XREF: coli_recalc_pos+98↑j
                st      r15, 0x678(g8)
                movt    0, r8
                movt    0, r12
                mov     g5, r13
                b       loc_2D830
# ---------------------------------------------------------------------------
loc_2D734:                              # CODE XREF: coli_recalc_pos:loc_2D6FC↑j
                subr    r4, r8, r4
                subr    r6, r10, r6
                ld      0xD4(g13), r8
                ld      0xDC(g13), r10
                lda     0x3E99999A, r15
                ld      0x804(g7), r7
                ld      0x1A4(g7), r11
                and     r7, r11, r13
                bbs     8, r13, loc_2D7B0
                ld      0x804(g8), r3
                ld      0x1A4(g8), r12
                and     r3, r12, r14
                bbs     8, r14, loc_2D7B0
                lda     loc_2100, g0
                and     g0, r7, r13
                and     g0, r3, r14
                or      r13, r14, r13
                cmpobne g0, r13, loc_2D790
                lda     0x3F333333, r15
                b       loc_2D7B0
# ---------------------------------------------------------------------------
loc_2D790:                              # CODE XREF: coli_recalc_pos+104↑j
                shro    6, r7, r13
                and     r11, r13, r13
                bbs     2, r13, loc_2D7A8
                shro    6, r3, r14
                and     r12, r14, r14
                bbc     2, r14, loc_2D7B0
loc_2D7A8:                              # CODE XREF: coli_recalc_pos+11C↑j
                lda     0x3F266666, r15
loc_2D7B0:                              # CODE XREF: coli_recalc_pos+DC↑j
                st      r15, 0x67C(g7)
                st      r15, 0x67C(g8)
                mulr    r8, r15, r9
                mulr    r10, r15, r11
                subr    r9, r4, r4
                subr    r11, r6, r6
                mulr    r4, r8, r4
                mulr    r6, r10, r6
                addr    r4, r6, r4
                bbc     0x1F, r4, loc_2D7E0
                notbit  0x1F, r4, r4
                addr    g4, r4, g4
loc_2D7E0:                              # CODE XREF: coli_recalc_pos+158↑j
                lda     0x3E99999A, r15
                bbs     0x1F, g4, loc_2D7F8
                cmpr    r15, g4
                bge     loc_2D7F8
                mov     r15, g4
loc_2D7F8:                              # CODE XREF: coli_recalc_pos+16C↑j
                ld      0xD4(g13), r12
                ld      0xD8(g13), r13
                ld      0xDC(g13), r14
                ld      0xCC(g13), r3
                notbit  0x1F, r3, r3
                mulr    g4, r3, r3
                mulr    r3, r12, r8
                mulr    r3, r13, r9
                mulr    r3, r14, r10
                ld      0xD0(g13), r3
                mulr    g4, r3, r3
                mulr    r3, r12, r12
                mulr    r3, r13, r13
                mulr    r3, r14, r14
loc_2D830:                              # CODE XREF: coli_recalc_pos+40↑j
                st      r8, 0xE0(g13)
                st      r9, 0xE4(g13)
                st      r10, 0xE8(g13)
                st      r12, 0xEC(g13)
                st      r13, 0xF0(g13)
                st      r14, 0xF4(g13)
                b       loc_2D8B4
# ---------------------------------------------------------------------------
loc_2D84C:                              # CODE XREF: coli_recalc_pos+20↑j
                movt    0, r8
                movt    0, r12
                st      r8, 0xE0(g13)
                st      r9, 0xE4(g13)
                st      r10, 0xE8(g13)
                st      r12, 0xEC(g13)
                st      r13, 0xF0(g13)
                st      r14, 0xF4(g13)
                ld      0x1A4(g7), r3
                shlo    1, r3, r4
                or      r3, r4, r3
                bbc     0x13, r3, loc_2D8B4
                ld      0x1A4(g8), r3
                shlo    1, r3, r4
                or      r3, r4, r3
                bbc     0x13, r3, loc_2D8B4
                ld      0x644(g7), r3
                ld      0x644(g8), r4
                addr    r3, r4, r4
                st      r4, 0x644(g7)
                st      r4, 0x644(g8)
                ld      0x64C(g7), r3
                ld      0x64C(g8), r4
                addr    r3, r4, r4
                st      r4, 0x64C(g7)
                st      r4, 0x64C(g8)
loc_2D8B4:                              # CODE XREF: coli_recalc_pos+1CC↑j
                ldos    0x23C(g13), r3
                cmpobe  0, r3, loc_2D8D8
                ldis    0x26(g7), r3
                shlo    1, r3, r4
                xor     r3, r4, r3
                bbs     0xE, r3, loc_2D8D4
                mov     0, r8
                b       loc_2D8D8
# ---------------------------------------------------------------------------
loc_2D8D4:                              # CODE XREF: coli_recalc_pos+24C↑j
                mov     0, r10
loc_2D8D8:                              # CODE XREF: coli_recalc_pos+23C↑j
                ldos    0x23E(g13), r3
                cmpobe  0, r3, loc_2D8FC
                ldis    0x26(g8), r3
                shlo    1, r3, r4
                xor     r3, r4, r3
                bbs     0xE, r3, loc_2D8F8
                mov     0, r12
                b       loc_2D8FC
# ---------------------------------------------------------------------------
loc_2D8F8:                              # CODE XREF: coli_recalc_pos+270↑j
                mov     0, r14
loc_2D8FC:                              # CODE XREF: coli_recalc_pos+260↑j
                mov     0, r7
                ld      0x680(g7), r4
                ld      0x680(g8), r11
                cmpr    r4, r11
                bge     loc_2D914
                mov     1, r7
loc_2D914:                              # CODE XREF: coli_recalc_pos+290↑j
                mov     0, r3
                ld      0x644(g7), r15
                cmpibe  0, r15, loc_2D96C
                cmpobne 0, r7, loc_2D96C
                ld      0x1A4(g8), r11
                lda     0x3F800000, r15
                bbs     8, r11, loc_2D958
                lda     0x3F666666, r15
                ldob    4(g8), r4
                ld      0x1E8(g13)[r4*4], r4
                ld      0x1D8(g13), r11
                cmpr    r11, r4
                bl      loc_2D958
                mov     0, r15
loc_2D958:                              # CODE XREF: coli_recalc_pos+2B4↑j
                mulr    r8, r15, r15
                subr    r15, r12, r12
                mov     0, r8
                mov     0, r10
                setbit  0, r3, r3
loc_2D96C:                              # CODE XREF: coli_recalc_pos+2A0↑j
                ld      0x64C(g7), r15
                cmpibe  0, r15, loc_2D9C0
                cmpobne 0, r7, loc_2D9C0
                ld      0x1A4(g8), r11
                lda     0x3F800000, r15
                bbs     8, r11, loc_2D9AC
                lda     0x3F666666, r15
                ldob    4(g8), r4
                ld      0x1E8(g13)[r4*4], r4
                ld      0x1D8(g13), r11
                cmpr    r11, r4
                bl      loc_2D9AC
                mov     0, r15
loc_2D9AC:                              # CODE XREF: coli_recalc_pos+308↑j
                mulr    r10, r15, r15
                subr    r15, r14, r14
                mov     0, r10
                mov     0, r8
                setbit  1, r3, r3
loc_2D9C0:                              # CODE XREF: coli_recalc_pos+2F4↑j
                ld      0x644(g8), r15
                cmpibe  0, r15, loc_2DA14
                cmpobne 1, r7, loc_2DA14
                ld      0x1A4(g7), r11
                lda     0x3F800000, r15
                bbs     8, r11, loc_2DA00
                lda     0x3F666666, r15
                ldob    4(g7), r4
                ld      0x1E8(g13)[r4*4], r4
                ld      0x1D8(g13), r11
                cmpr    r11, r4
                bl      loc_2DA00
                mov     0, r15
loc_2DA00:                              # CODE XREF: coli_recalc_pos+35C↑j
                mulr    r14, r15, r15
                subr    r15, r8, r8
                mov     0, r12
                mov     0, r14
                setbit  2, r3, r3
loc_2DA14:                              # CODE XREF: coli_recalc_pos+348↑j
                ld      0x64C(g8), r15
                cmpibe  0, r15, loc_2DA68
                cmpobne 1, r7, loc_2DA68
                ld      0x1A4(g7), r11
                lda     0x3F800000, r15
                bbs     8, r11, loc_2DA54
                lda     0x3F666666, r15
                ldob    4(g7), r4
                ld      0x1E8(g13)[r4*4], r4
                ld      0x1D8(g13), r11
                cmpr    r11, r4
                bl      loc_2DA54
                mov     0, r15
loc_2DA54:                              # CODE XREF: coli_recalc_pos+3B0↑j
                mulr    r14, r15, r15
                subr    r15, r10, r10
                mov     0, r14
                mov     0, r12
                setbit  3, r3, r3
loc_2DA68:                              # CODE XREF: coli_recalc_pos+39C↑j
                st      r8, 0xE0(g13)
                st      r9, 0xE4(g13)
                st      r10, 0xE8(g13)
                st      r12, 0xEC(g13)
                st      r13, 0xF0(g13)
                st      r14, 0xF4(g13)
                bbs     0, r3, loc_2DAB0
                bbs     0x1F, r8, loc_2DA9C
                ld      0x650(g7), r15
                cmpr    r15, r8
                bge     loc_2DAB0
                mov     r15, r8
                b       loc_2DAB0
# ---------------------------------------------------------------------------
loc_2DA9C:                              # CODE XREF: coli_recalc_pos+408↑j
                ld      0x654(g7), r15
                notbit  0x1F, r15, r15
                cmpr    r15, r8
                ble     loc_2DAB0
                mov     r15, r8
loc_2DAB0:                              # CODE XREF: coli_recalc_pos+404↑j
                bbs     1, r3, loc_2DAE0
                ld      0x658(g7), r15
                bbs     0x1F, r10, loc_2DACC
                cmpr    r15, r10
                bge     loc_2DAE0
                mov     r15, r10
                b       loc_2DAE0
# ---------------------------------------------------------------------------
loc_2DACC:                              # CODE XREF: coli_recalc_pos+43C↑j
                ld      0x65C(g7), r15
                notbit  0x1F, r15, r15
                cmpr    r15, r10
                ble     loc_2DAE0
                mov     r15, r10
loc_2DAE0:                              # CODE XREF: coli_recalc_pos:loc_2DAB0↑j
                bbs     2, r3, loc_2DB10
                bbs     0x1F, r12, loc_2DAFC
                ld      0x650(g8), r15
                cmpr    r15, r12
                bge     loc_2DB10
                mov     r15, r12
                b       loc_2DB10
# ---------------------------------------------------------------------------
loc_2DAFC:                              # CODE XREF: coli_recalc_pos+468↑j
                ld      0x654(g8), r15
                notbit  0x1F, r15, r15
                cmpr    r15, r12
                ble     loc_2DB10
                mov     r15, r12
loc_2DB10:                              # CODE XREF: coli_recalc_pos:loc_2DAE0↑j
                bbs     3, r3, crp_addcoli
                ld      0x658(g8), r15
                bbs     0x1F, r14, loc_2DB2C
                cmpr    r15, r14
                bge     crp_addcoli
                mov     r15, r14
                b       crp_addcoli
# ---------------------------------------------------------------------------
loc_2DB2C:                              # CODE XREF: coli_recalc_pos+49C↑j
                ld      0x65C(g8), r15
                notbit  0x1F, r15, r15
                cmpr    r15, r14
                ble     crp_addcoli
                mov     r15, r14
crp_addcoli:                            # CODE XREF: coli_recalc_pos:loc_2DB10↑j
                ld      0x644(g7), r3   # Label from Fighting Vipers source
                subr    r3, r8, r8
                ld      0x64C(g7), r3
                subr    r3, r10, r10
                ld      0x644(g8), r3
                subr    r3, r12, r12
                ld      0x64C(g8), r3
                subr    r3, r14, r14
                st      r8, 0xA68(g7)
                st      r10, 0xA6C(g7)
                st      r12, 0xA68(g8)
                st      r14, 0xA6C(g8)
                lda     0x1E803D3D, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                lda     0x39007272, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                stob    r3, 0xA29(g7)
                lda     0x39007272, r15
                st      r15, (g11)[g12*1]
                ldob    4(g8), r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                stob    r3, 0xA29(g8)
                ld      0x18(g7), r4
                ld      0x20(g7), r6
                addr    r4, r8, r4
                addr    r6, r10, r6
                st      r4, 0x18(g7)
                st      r6, 0x20(g7)
                ld      0x18(g8), r4
                ld      0x20(g8), r6
                addr    r4, r12, r4
                addr    r6, r14, r6
                st      r4, 0x18(g8)
                st      r6, 0x20(g8)
                ld      0x678(g7), r15
                lda     0x3CF5C28F, r14
                subr    r14, r15, r15
                bbc     0x1F, r15, loc_2DC24
                mov     0, r15
loc_2DC24:                              # CODE XREF: coli_recalc_pos+5A0↑j
                st      r15, 0x678(g7)
                ld      0x678(g8), r15
                lda     0x3CF5C28F, r14
                subr    r14, r15, r15
                bbc     0x1F, r15, loc_2DC40
                mov     0, r15
loc_2DC40:                              # CODE XREF: coli_recalc_pos+5BC↑j
                st      r15, 0x678(g8)
                bx      (g14)
# End of function coli_recalc_pos
# =============== S U B R O U T I N E =======================================
# g7 = P1_PARTS or P2_PARTS
calc_attack_flag:                       # CODE XREF: coli_cont_cop+38↑p
                mov     0, r3           # Label from official source
                mov     0, g3
                ld      0x1A4(g7), r15  # p1_mot_kind
                bbc     8, r15, loc_2DC98
                ldos    0x1AA(g7), r13  # p1_motion_coma
                ldos    0x808(g7), r14  # p1_info
                cmpobl  r13, r14, loc_2DC98
                ldob    0x820(g7), r3   # P1_PARTS+0x820
                addo    31, 10, r4      # r4 = 41
                cmpobe  r3, r4, loc_2DC98
                ld      dword_CE020[r3*4], r3
                ld      0x1D18(g7), r5  # P1_PARTS+0x1D18
                mov     0, r6
loc_2DC84:                              # CODE XREF: calc_attack_flag+4C↓j
                ld      (r5)[r6*4], r7
                bbc     r7, r3, loc_2DC90
                setbit  r6, g3, g3
loc_2DC90:                              # CODE XREF: calc_attack_flag+40↑j
                cmpinco 0x1F, r6, r6
                bne     loc_2DC84
loc_2DC98:                              # CODE XREF: calc_attack_flag+C↑j
                st      r3, 0xAC8(g7)
                st      g3, 0x768(g7)
                ret
# End of function calc_attack_flag
# =============== S U B R O U T I N E =======================================
area_coli:                              # CODE XREF: coli_cont_cop+98↑p
                lda     0x9801313, r15  # Label from official source
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x38007070, r15
                st      r15, (g11)[g12*1]
                ld      0x1C(g7), r15
                st      r15, (g11)[g12*1]
                ld      stage_soko, r15
                st      r15, (g11)[g12*1]
                ld      stage_x, r15
                st      r15, (g11)[g12*1]
                ld      cage_height, r15
                lda     0x3E428F5C, r14
                subr    r14, r15, r15
                ldob    0x1A18(g7), r14
                cmpoble 2, r14, loc_2DD1C
                ld      0x70C(g7), r13
                bbs     9, r13, loc_2DD1C
                lda     0x41200000, r14
                addr    r14, r15, r15
loc_2DD1C:                              # CODE XREF: area_coli+60↑j
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                ldob    0x1A18(g7), r14
                cmpobne 3, r14, loc_2DD34
                setbit  0x1F, r15, r15
loc_2DD34:                              # CODE XREF: area_coli+88↑j
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x118(g13)
                ld      (g11)[g12*1], r15
                st      r15, 0x11C(g13)
                ld      (g11)[g12*1], r15
                st      r15, 0x120(g13)
                ld      (g11)[g12*1], r15
                st      r15, 0x124(g13)
                ld      (g11)[g12*1], r15
                st      r15, 0x670(g7)
                ld      (g11)[g12*1], r15
                st      r15, 0x710(g7)
                ldq     (g11)[g12*1], r4
                stq     r4, 0x660(g7)
                ldq     (g11)[g12*1], r4
                stq     r4, 0xA58(g7)
                ldq     (g11)[g12*1], r4
                stq     r4, 0x650(g7)
                ldq     (g11)[g12*1], r4
                st      r4, 0x614(g7)
                st      r5, 0x674(g7)
                st      r6, 0x624(g7)
                st      r7, 0x618(g7)
                ldob    0xA29(g7), r14
                cmpobne 0, r14, loc_2DDA4
                mov     0, r15
                st      r15, 0x624(g7)
loc_2DDA4:                              # CODE XREF: area_coli+F4↑j
                ldob    0x1A18(g7), r14
                cmpobne 3, r14, loc_2DDE4
                ldq     0xA58(g7), r4
                stq     r4, 0x660(g7)
                lda     0xBF800000, r13
                ld      0x660(g7), r14
                mulr    r13, r14, r15
                st      r15, 0x660(g7)
                lda     0xBF800000, r13
                ld      0x668(g7), r14
                mulr    r13, r14, r15
                st      r15, 0x668(g7)
                b       ac_make_vect_outset
# ---------------------------------------------------------------------------
loc_2DDE4:                              # CODE XREF: area_coli+108↑j
                lda     0xBF800000, r13
                ld      0x664(g7), r14
                mulr    r13, r14, r15
                st      r15, 0x664(g7)
                lda     0xBF800000, r13
                ld      0x66C(g7), r14
                mulr    r13, r14, r15
                st      r15, 0x66C(g7)
ac_make_vect_outset:                    # CODE XREF: area_coli+13C↑j
                lda     0x80000000, r13 # Label from Fighting Vipers source
                ld      0x660(g7), r14
                cmpobne r13, r14, loc_2DE24
                mov     0, r15
                st      r15, 0x660(g7)
loc_2DE24:                              # CODE XREF: area_coli+174↑j
                lda     0x80000000, r13
                ld      0x664(g7), r14
                cmpobne r13, r14, loc_2DE3C
                mov     0, r15
                st      r15, 0x664(g7)
loc_2DE3C:                              # CODE XREF: area_coli+18C↑j
                lda     0x80000000, r13
                ld      0x668(g7), r14
                cmpobne r13, r14, loc_2DE54
                mov     0, r15
                st      r15, 0x668(g7)
loc_2DE54:                              # CODE XREF: area_coli+1A4↑j
                lda     0x80000000, r13
                ld      0x66C(g7), r14
                cmpobne r13, r14, loc_2DE6C
                mov     0, r15
                st      r15, 0x66C(g7)
loc_2DE6C:                              # CODE XREF: area_coli+1BC↑j
                ldl     0x660(g7), r4
                addr    r4, r5, r4
                st      r4, 0x644(g7)
                ldl     0x668(g7), r4
                addr    r4, r5, r4
                st      r4, 0x64C(g7)
                ldob    also_mode, r3
                ldob    also_sub_mode, r4
                lda     displacement3, r15
                cmpobne r15, r3, loc_2DEBC
                lda     prcb+1, r5
                cmpobne r4, r5, loc_2DEBC
                mov     0, r15
                st      r15, 0x644(g7)
                mov     0, r15
                st      r15, 0x64C(g7)
loc_2DEBC:                              # CODE XREF: area_coli+1F8↑j
                ld      0x644(g7), r10
                ld      0x64C(g7), r11
                mov     0, r3
                cmpibe  0, r10, loc_2DED8
                shro    0x1F, r10, r10
                st      r3, 0x650(g7)[r10*4]
loc_2DED8:                              # CODE XREF: area_coli+224↑j
                cmpibe  0, r11, loc_2DEE8
                shro    0x1F, r11, r11
                st      r3, 0x658(g7)[r11*4]
loc_2DEE8:                              # CODE XREF: area_coli:loc_2DED8↑j
                ldt     0x1F4(g7), r4
                movt    0, r8
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                st      r4, 0x680(g7)
                ldob    4(g7), r8
                ld      0x644(g7), r11
                ld      0x64C(g7), r12
                clrbit  0x1F, r11, r11
                clrbit  0x1F, r12, r12
                cmpobe  0, r11, loc_2DFA8
                cmpobe  0, r12, loc_2DF38
                cmpr    r11, r12
                bl      loc_2DFA8
loc_2DF38:                              # CODE XREF: area_coli+288↑j
                ld      0x644(g7), r10
                clrbit  0x1F, r10, r11
                cmpobe  0, r11, loc_2DFA8
                ldis    0x26(g7), r4    # p1_yang_0
                stis    r4, 0x1F0(g13)[r8*2]
                xor     r4, r10, r12
                shro    0x1C, r12, r12
                and     8, r12, r12
                shlo    0xC, 7, r13
                and     r13, r4, r4
                shlo    8, r12, r3
                ld      0xA08(g7), r14
                or      r3, r14, r15
                st      r15, 0xA08(g7)
                shro    0xC, r4, r4
                or      r4, r12, r4
                ldob    byte_2E260[r4], r11
                or      r11, r12, r12
                mov     2, r15
                stis    r15, 0x23C(g13)[r8*2]
                stos    r12, 0x1F4(g13)[r8*2]
                clrbit  3, r12, r12
                stos    r12, 0xAE2(g7)
                b       loc_2E030
# ---------------------------------------------------------------------------
loc_2DFA8:                              # CODE XREF: area_coli+284↑j
                ld      0x64C(g7), r10
                clrbit  0x1F, r10, r11
                cmpobe  0, r11, loc_2E030
                ld      0x644(g7), r14
                clrbit  0x1F, r14, r14
                cmpr    r11, r14
                bl      loc_2E030
                ldis    0x26(g7), r4
                stis    r4, 0x1F0(g13)[r8*2]
                shlo    0xE, 1, r5
                subo    r5, r4, r4
                shro    0x10, r10, r10
                xor     r4, r10, r9
                shro    0xC, r9, r9
                and     8, r9, r9
                shlo    0xC, 7, r13
                and     r13, r4, r4
                shro    0xC, r4, r4
                shlo    8, r9, r3
                ld      0xA08(g7), r14
                or      r3, r14, r15
loc_2E000:                              # DATA XREF: MAIN_DATA:028B8C80↓o
                st      r15, 0xA08(g7)
                or      r4, r9, r4
                ldob    byte_2E260[r4], r11
                or      r11, r9, r9
                mov     2, r15
                stis    r15, 0x23C(g13)[r8*2]
                stos    r9, 0x1F4(g13)[r8*2]
                clrbit  3, r9, r9
                stos    r9, 0xAE2(g7)
loc_2E030:                              # CODE XREF: area_coli+300↑j
                ld      0x650(g7), r4
                lda     0x654(g7), r5
                mov     0, r10
                mov     3, r11
loc_2E040:                              # CODE XREF: area_coli+3C4↓j
                ld      (r5), r6
                cmpr    r4, r6
                bl      loc_2E060
                subi    r11, 0, r10
                addi    4, r10, r10
                mov     r4, r15
                mov     r6, r4
                mov     r15, r6
loc_2E060:                              # CODE XREF: area_coli+3A4↑j
                lda     4(r5), r5
                cmpdeco 1, r11, r11
                bl      loc_2E040
                bbs     1, r10, loc_2E074
                mov     r12, r9
loc_2E074:                              # CODE XREF: area_coli+3C8↑j
                and     7, r9, r9
                shlo    4, r10, r10
                or      r10, r9, r9
                stos    r9, 0x1F8(g13)[r8*2]
                ldob    4(g7), r7
                not     r7, r10
                and     1, r10, r10
                ld      fa_rob0[r10*4], r3
                ld      0x650(r3), r4
                lda     0x654(r3), r5
                mov     0, r10
                mov     3, r11
loc_2E0AC:                              # CODE XREF: area_coli+430↓j
                ld      (r5), r6
                cmpr    r4, r6
                bl      loc_2E0CC
                subi    r11, 0, r10
                addi    4, r10, r10
                mov     r4, r15
                mov     r6, r4
                mov     r15, r6
loc_2E0CC:                              # CODE XREF: area_coli+410↑j
                lda     4(r5), r5
                cmpdeco 1, r11, r11
                bl      loc_2E0AC
                st      r4, 0x204(g13)[r8*4]
                bbc     0, r7, loc_2E0F4
                not     r10, r11
                and     2, r10, r10
                and     1, r11, r11
                or      r10, r11, r10
loc_2E0F4:                              # CODE XREF: area_coli+43C↑j
                ld      0x1E0(g13), r12
                addo    r12, r12, r11
                xor     r12, r11, r11
                shro    0xC, r11, r11
                and     4, r11, r11
                or      r11, r10, r10
                shro    0xD, r12, r12
                ldos    word_2E250[r12*2], r12
                or      r10, r12, r10
                ldos    word_2E230[r10*2], r11
                stos    r10, 0x1FC(g13)[r8*2]
                stos    r11, 0x200(g13)[r8*2]
                ret
# End of function area_coli
# ---------------------------------------------------------------------------
                .long 1
                .long 1
                .long 1
                .long 1
                .long 1
                .long 1
                .long 1
                .long 0
                .long 0
                .long 1
                .long 1
                .long 1
                .long 1
                .long 1
                .long 1
                .long 1
                .long 0
                .long 0
                .float 1.0
                .long 0
                .long 1
                .float -1.0
                .long 0
                .long 0
                .long 2
                .long 0
                .float -1.0
                .long 0
                .long 3
                .float 1.0
                .long 0
                .long 0
# =============== S U B R O U T I N E =======================================
total_skill_adder_g7:                   # CODE XREF: coli_attack_chk+C↑p
                mov     g7, r7          # Label from Fighting Vipers source
                mov     g8, r8
                b       loc_2E1CC
# ---------------------------------------------------------------------------
total_skill_adder_g8:                   # Label from Fighting Vipers source
                mov     g8, r7
                mov     g7, r8
loc_2E1CC:                              # CODE XREF: total_skill_adder_g7+8↑j
                ldos    rank_mode, r15
                bbc     0, r15, loc_2E20C
                bbs     7, r15, loc_2E20C
                ld      select0_flag, r10
                ldob    4(r7), r14
                cmpobe  0, r14, loc_2E1F4
                ld      select1_flag, r10
loc_2E1F4:                              # CODE XREF: total_skill_adder_g7+30↑j
                bbc     2, r10, loc_2E20C
                ld      total_skill, r14
                addi    g9, r14, r15
                st      r15, total_skill
loc_2E20C:                              # CODE XREF: total_skill_adder_g7+1C↑j
                ret
# End of function total_skill_adder_g7
# ---------------------------------------------------------------------------
                .float 1.0
                .float 0.0
                .float 0.0
                .float 1.0
                .float 1.0
                .float 0.0
                .float 0.0
                .float 1.0
word_2E230:     .short 0                # DATA XREF: area_coli+478↑r
                .short 1
                .short 2
                .short 3
                .short 2
                .short 3
                .short 1
                .short 0
                .short 1
                .short 0
                .short 3
                .short 2
                .short 3
                .short 2
                .short 0
                .short 1
word_2E250:     .short 0                # DATA XREF: area_coli+46C↑r
                .short 8
                .short 8
                .short 8
                .short 8
                .short 0
                .short 0
                .short 0
byte_2E260:     .byte 7                 # DATA XREF: area_coli+2D8↑r
                .byte 5
                .byte 3
                .byte 1
                .byte 0
                .byte 2
                .byte 4
                .byte 6
                .byte 6
                .byte 4
                .byte 2
                .byte 0
                .byte 1
                .byte 3
                .byte 5
                .byte 7
dword_2E270:    .long 0xC               # DATA XREF: decide_coli_kind+204↑r
                .long 0
                .long 0
                .long 8
                .long 8
                .long 4
                .long 4
                .long 0xC
dword_2E290:    .long 8                 # DATA XREF: decide_coli_kind+1C0↑r
                .long 4
                .long 4
                .long 0xC
                .long 0xC
                .long 0
                .long 0
                .long 8
# =============== S U B R O U T I N E =======================================
sub_2E2B0:                              # CODE XREF: game_engine_setup↓p
                lda     list_90_floats_ROM, r14
                lda     list_90_floats_RAM, r13
                lda     90, r12         # Loop counter init
populate_ram_floats:                    # CODE XREF: sub_2E2B0+28↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      populate_ram_floats
                ld      lau_mul_J_rom, r15
                st      r15, lau_mul_J
                ld      flt_2E518, r15
                st      r15, 0x50A0AC
                ldis    lau_add_xang_rom, r15
                stis    r15, lau_add_xang
                ldis    word_2E51E, r15
                stis    r15, 0x50A0B2
                ldis    limit_xang_rom, r15
                stis    r15, limit_xang
                mov     3, r15
                stib    r15, combo_start
                shlo    7, 0xB, r15
                stis    r15, combo_sub
                shlo    0xB, 1, r15
                stis    r15, combo_limit
                ret
# End of function sub_2E2B0
# ---------------------------------------------------------------------------
list_90_floats_ROM:.float 1.0           # DATA XREF: sub_2E2B0↑o
                .float 5.0
                .float 1.0
                .float 1.0
                .float 1.0
                .float 2.0
                .float 1.0
                .float 1.5
                .long 0x60004000
                .long 0x28002400
                .float 2.0
                .float 4.5
                .float 1.0
                .float 1.0
                .float 1.0
                .float 2.0
                .float 1.0
                .float 1.5
                .long 0x60004000
                .long 0x28002400
                .float 1.0
                .float 7.0
                .float 1.0
                .float 1.0
                .float 1.0
                .float 2.0
                .float 1.0
                .float 1.5
                .long 0x48004000
                .long 0x38001000
                .float 4.0
                .float 10.0
                .float 1.0
                .float 0.5
                .float 0.80000001
                .float 0.80000001
                .float 0.40000001
                .float 0.80000001
                .long 0x48004000
                .long 0x38005000
                .long 0x41A00000
                .long 0x40C00000
                .long 0x3F800000
                .float 1.2
                .float 1.0
                .float 1.2
                .float 0.5
                .float 1.0
                .long 0x60004000
                .long 0x40002400
                .float 1.0
                .float 1.5
                .float 0.5
                .float 0.5
                .float 1.0
                .float 2.0
                .float 1.0
                .float 1.5
                .short 0x4000
                .short 0x6000
                .short 0x2400
                .short 0x3800
                .float 1.0
                .float 8.0
                .float 1.0
                .float 1.0
                .float 1.0
                .float 2.0
                .float 1.0
                .float 1.5
                .short 0x4000
                .short 0x6000
                .short 0x2400
                .short 0x3800
                .float 1.0
                .float -10.0
                .float 1.0
                .float 1.0
                .float 1.0
                .float 2.0
                .float 1.0
                .float 1.5
                .short 0x4000
                .short 0x6000
                .short 0x2400
                .short 0x3800
                .float 0.80000001
                .float 12.0
                .float 1.0
                .float 0.5
                .float 0.5
                .float 0.5
                .float 0.5
                .float 0.5
                .short 0x4000
                .short 0x4800
                .short 0x4000
                .short 0x4800
flt_2E4BC:      .float 1.0              # DATA XREF: ROM:loc_2B170↑r
                .float 0.80000001
                .float 0.60000002
                .float 0.40000001
                .float 0.30000001
                .float 0.25
                .float 0.2
                .float 0.15000001
                .float 0.1
flt_2E4E0:      .float 1.0              # DATA XREF: ROM:loc_2B14C↑r
                .float 1.0
                .float 1.0
                .float 0.80000001
                .float 0.60000002
                .float 0.40000001
                .float 0.30000001
                .float 0.2
                .float 0.1
off_2E504:      .long 0x90FA00      # DATA XREF: rob_ball_data_make+4↑r
                .long 0x91FA00
off_2E50C:      .long 0x50A204        # DATA XREF: rob_ball_data_make+C↑r
                .long cb_r_0
lau_mul_J_rom:  .float 1.17             # DATA XREF: sub_2E2B0+2C↑r
flt_2E518:      .float 1.2              # DATA XREF: sub_2E2B0+3C↑r
lau_add_xang_rom:.short 0x500           # DATA XREF: sub_2E2B0+4C↑r
word_2E51E:     .short 0                # DATA XREF: sub_2E2B0+5C↑r
limit_xang_rom: .short 0x3600           # DATA XREF: sub_2E2B0+6C↑r
                .short 0
aHit:           .asciz "hit     "    # DATA XREF: ROM:loc_2B0F8↑o
aTender:        .asciz "tender  "    # DATA XREF: ROM:0002B2C4↑o
aCounter:       .asciz "counter "    # DATA XREF: ROM:0002B1C0↑o
aSmlcntr:       .asciz "smlcntr "    # DATA XREF: ROM:loc_2B1F0↑o
aAir:           .asciz "air     "    # DATA XREF: ROM:0002B298↑o
aUkemi:         .asciz "ukemi   "    # DATA XREF: ROM:0002B198↑o
aDown:          .asciz "down    "    # DATA XREF: ROM:0002B250↑o
aTetsu:         .asciz "tetsu   "    # DATA XREF: ROM:0002B26C↑o
aMulti:         .asciz "multi   "    # DATA XREF: ROM:0002B30C↑o
aHit_0:         .asciz " hit    "    # DATA XREF: ROM:0002B2F8↑o
aOcDp:          .asciz "oc dp   "    # DATA XREF: ROM:0002B124↑o
aOcDown:        .asciz "oc down "    # DATA XREF: ROM:0002B138↑o
aOrgCmbo:       .asciz "org cmbo"    # DATA XREF: ROM:0002B184↑o
                .fill 3, 1, 0
# =============== S U B R O U T I N E =======================================
_Scroll_Initialize:                     # CODE XREF: ROM:00003698↑p
                call    _ScrollCG_Initialize # Label from official source
                addo    1, g0, g0
                call    _ScrollColor_Initialize
                ret
# End of function _Scroll_Initialize
# =============== S U B R O U T I N E =======================================
_ScrollCG_Initialize:                   # CODE XREF: _Scroll_Initialize↑p
                shlo    3, 0x17, r13    # Label from official source
                cmpoble r13, g0, loc_2E60C
                lda     cg_offsets, r3
                ld      displacement(r3)[g0*4], r9
                cmpobe  0, r9, loc_2E60C
                b       loc_2E5D0
# ---------------------------------------------------------------------------
_ScrollCG_Initialize_old:               # CODE XREF: init_fix+14↑p
                mov     g0, r9          # Label from official source
loc_2E5D0:                              # CODE XREF: _ScrollCG_Initialize+1C↑j
                ld      (r9), r3
                addo    r9, 4, r9
                cmpibe  0, r3, loc_2E60C
                ld      (r9), r5
                addo    r9, 4, r9
                ld      0x0(r3), r4
                shli    4, r4, r4
                lda     4(r3), r6
loc_2E5F0:                              # CODE XREF: _ScrollCG_Initialize+5C↓j
                cmpdeci 0, r4, r4
                be      loc_2E5D0
                ldis    (r6), r7
                stis    r7, (r5)
                addo    r5, 2, r5
                addo    r6, 2, r6
                b       loc_2E5F0
# ---------------------------------------------------------------------------
loc_2E60C:                              # CODE XREF: _ScrollCG_Initialize+4↑j
                ret
# End of function _ScrollCG_Initialize
# =============== S U B R O U T I N E =======================================
_ScrollColor_Initialize:                # CODE XREF: _Scroll_Initialize+8↑p
                shlo    3, 0x17, r13    # Label from official source
                cmpoble r13, g0, loc_2E60C
                lda     cg_offsets, r3  # CG hits by here
                ld      (r3)[g0*4], r9
                cmpobe  0, r9, loc_2E664
                b       loc_2E630
# ---------------------------------------------------------------------------
_ScrollColor_Initialize_old:            # CODE XREF: init_fix+20↑p
                mov     g0, r9          # Label from official source
loc_2E630:                              # CODE XREF: _ScrollColor_Initialize+18↑j
                ld      (r9), r3
                addo    r9, 4, r9
                cmpibe  0, r3, loc_2E664
                ld      (r9), r4
                shrdi   1, r4, r4
                addo    r9, 4, r9
loc_2E648:                              # CODE XREF: _ScrollColor_Initialize+50↓j
                cmpdeci 0, r4, r4
                be      loc_2E630
                ld      (r9), r5
                st      r5, (r3)
                addo    r9, 4, r9
                addo    r3, 4, r3
                b       loc_2E648
# ---------------------------------------------------------------------------
loc_2E664:                              # CODE XREF: _ScrollColor_Initialize+14↑j
                ret
# End of function _ScrollColor_Initialize
# =============== S U B R O U T I N E =======================================
_Scroll_Initialize2:                    # CODE XREF: sel_disp_init+5E0↓p
                call    _ScrollCG_Initialize2 # Label from official source
                addo    1, g0, g0
                call    _ScrollColor_Initialize2
                ret
# End of function _Scroll_Initialize2
# =============== S U B R O U T I N E =======================================
_ScrollCG_Initialize2:                  # CODE XREF: _Scroll_Initialize2↑p
                shlo    3, 0x17, r13
                cmpoble r13, g0, loc_2E60C
                lda     cg_offsets, r3
                ld      displacement(r3)[g0*4], r9
                cmpobe  0, r9, loc_2E6D8
                shlo    0xC, g1, r10
loc_2E698:                              # CODE XREF: _ScrollCG_Initialize2+48↓j
                ld      (r9), r3
                addo    r9, 4, r9
                cmpibe  0, r3, loc_2E6D8
                ld      (r9), r5
                addo    r10, r5, r5
                addo    r9, 4, r9
                ld      0x0(r3), r4
                shli    4, r4, r4
                lda     4(r3), r6
loc_2E6BC:                              # CODE XREF: _ScrollCG_Initialize2+5C↓j
                cmpdeci 0, r4, r4
                be      loc_2E698
                ldis    (r6), r7
                stis    r7, (r5)
                addo    r5, 2, r5
                addo    r6, 2, r6
                b       loc_2E6BC
# ---------------------------------------------------------------------------
loc_2E6D8:                              # CODE XREF: _ScrollCG_Initialize2+18↑j
                ret
# End of function _ScrollCG_Initialize2
# =============== S U B R O U T I N E =======================================
_ScrollColor_Initialize2:               # CODE XREF: _Scroll_Initialize2+8↑p
                shlo    3, 0x17, r13
                cmpoble r13, g0, loc_2E60C
                lda     cg_offsets, r3
                ld      (r3)[g0*4], r9
                cmpobe  0, r9, loc_2E730
                shlo    5, g1, r10
loc_2E6F8:                              # CODE XREF: _ScrollColor_Initialize2+3C↓j
                ld      (r9), r3
                addo    r9, 4, r9
                cmpibe  0, r3, loc_2E730
                addo    r10, r3, r3
                ld      (r9), r4
                shrdi   1, r4, r4
                addo    r9, 4, r9
loc_2E714:                              # CODE XREF: _ScrollColor_Initialize2+50↓j
                cmpdeci 0, r4, r4
                be      loc_2E6F8
                ld      (r9), r5
                st      r5, (r3)
                addo    r9, 4, r9
                addo    r3, 4, r3
                b       loc_2E714
# ---------------------------------------------------------------------------
loc_2E730:                              # CODE XREF: _ScrollColor_Initialize2+14↑j
                ret
# End of function _ScrollColor_Initialize2
# =============== S U B R O U T I N E =======================================
draw_name_texures:                      # CODE XREF: sel_disp_init+5F4↓p
                mov     g0, r3
                ld      texture_palette_offsets[r3*4], g0
                ldos    (g0), r4
                shlo    7, g1, r13
                addo    r13, r4, r4
                ldl     4(g0), r6
                addo    0xC, g0, r8
                shlo    7, 1, r5
                mov     g9, r9
loc_2E75C:                              # CODE XREF: draw_name_texures+54↓j
                mov     r9, r11
                mov     r7, r12
loc_2E764:                              # CODE XREF: draw_name_texures+48↓j
                ldis    (r8), r15
                addo    2, r8, r8
                addo    r4, r15, r15
                stos    r15, (r11)
                addo    2, r11, r11
                cmpdeco 1, r12, r12
                bl      loc_2E764
                addo    r5, r9, r9
                cmpdeco 1, r6, r6
                bl      loc_2E75C
                lda     (g9)[r7*2], g9
                ret
# End of function draw_name_texures
# =============== S U B R O U T I N E =======================================
possible_ascii_leftover:                # CODE XREF: ROM:0000369C↑p
                lda     0x10801E0, r4
                lda     dword_2E7C4, r5
                shlo    4, 7, r3        # r3 = 0x70 or 112, or the word count in 0x2E7C4
loc_2E7A8:                              # CODE XREF: possible_ascii_leftover+28↓j
                ldos    (r5), r12
                addo    2, r5, r5
                stos    r12, (r4)
                addo    2, r4, r4
                cmpdeco 1, r3, r3
                bl      loc_2E7A8
                ret
# End of function possible_ascii_leftover
# ---------------------------------------------------------------------------
dword_2E7C4:    .long 0x1F0000F1        # DATA XREF: possible_ascii_leftover:loc_2E79C↑o
                .long 0x1F0000F1
                .long 0x1FFFFFF1
                .long 0x11111111
                .long 0x11111111
                .long 0x1FFFFFF1
                .long 0x1F0000F1
                .long 0x1F0000F1
                .long 0x1F0000F1
                .long 0x1F0000F1
                .long 0x1FFFFFF1
                .long 0x11111111
                .long 0x11111111
                .long 0xFFFFFFFF
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0xFFFFFFFF
                .long 0x11111111
                .long 0x11111111
                .long 0x1FFFFFF1
                .long 0x1F0000F1
                .long 0x1F0000F1
                .long 0x1F0000F1
                .long 0x1F0000F1
                .long 0x1F00FFF1
                .long 0x1F001111
                .long 0x1F001111
                .long 0x1F00FFF1
                .long 0x1F0000F1
                .long 0x1F0000F1
                .long 0x1F0000F1
                .long 0x1F0000F1
                .long 0x1FFF00F1
                .long 0x111100F1
                .long 0x111100F1
                .long 0x1FFF00F1
                .long 0x1F0000F1
                .long 0x1F0000F1
                .long 0x11111111
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0xFFFFFFFF
                .long 0x11111111
                .long 0x11111111
                .long 0xFFFFFFFF
                .long 0
                .long 0
# =============== S U B R O U T I N E =======================================
init_health_bar_flag:                   # CODE XREF: ROM:00007214↑p
                mov     6, r4
                st      r4, health_bar_flag
                ret
# End of function init_health_bar_flag
# =============== S U B R O U T I N E =======================================
draw_health_bars:                       # CODE XREF: VsyncScr+60↑p
                ld      frame_counter, r3
                ld      CTRL_TIMER, r7
                ld      health_bar_flag, r11
                ld      mod_fa_game_disp, r12
                ld      0x0(r12), r13   # r13 = mod_fa_game_disp_add
                bbs     30, r13, loc_2EA10 # branch if mod_fa_game_disp_add bit 30 is set
                and     3, r3, r4
                ld      fa_rob0, r5
                ldos    0x1AC(r5), r3   # r3 = P1_HEALTH
                ldos    energy_max, r12
                divo    10, r12, r12
                lda     health_clr_green, r6
                bbs     0, r11, loc_2E924 # r11 = 0b110; does not branch
                mulo    3, r12, r13
                cmpobg  r3, r13, loc_2E924
                lda     health_clr_yellow, r6
                mulo    1, r12, r13
                cmpobg  r3, r13, loc_2E924
                lda     health_clr_red, r6
loc_2E924:                              # CODE XREF: draw_health_bars+4C↑j
                ldq     (r6), r12       # r12 = health bar color
                stos    r12, 0x18000C2 # 0x008300
                shro    16, r12, r12
                stos    r12, 0x18000C4 # 0x00AC00
                stos    r13, 0x18000C6 # 0x00D500
                shro    16, r13, r13
                stos    r13, 0x18000C8 # 0x00FF00
                stos    r14, 0x18000CA # 0x006200
                shro    16, r14, r14
                stos    r14, 0x18000CC # 0x008B00
                stos    r15, 0x18000CE # 0x00B400
                shro    16, r15, r15
                stos    r15, 0x18000D0 # 0x00DE00
                ld      fa_rob1, r5
                ldos    0x1AC(r5), r3
                ldos    energy_max, r12
                divo    0xA, r12, r12
                lda     health_clr_green, r6
                bbs     0, r11, loc_2E9BC # r11 = 0b110; does not branch
                mulo    3, r12, r13
                cmpobg  r3, r13, loc_2E9BC
                lda     health_clr_yellow, r6
                mulo    1, r12, r13
                cmpobg  r3, r13, loc_2E9BC
                lda     health_clr_red, r6
loc_2E9BC:                              # CODE XREF: draw_health_bars+E4↑j
                ldq     (r6), r12
                stos    r12, 0x18000E2 # 0x008300
                shro    0x10, r12, r12
                stos    r12, 0x18000E4 # 0x00AC00
                stos    r13, 0x18000E6 # 0x00D500
                shro    0x10, r13, r13
                stos    r13, 0x18000E8 # 0x00FF00
                stos    r14, 0x18000EA # 0x006200
                shro    0x10, r14, r14
                stos    r14, 0x18000EC # 0x008B00
                stos    r15, 0x18000EE # 0x00B400
                shro    0x10, r15, r15
                stos    r15, 0x18000F0 # 0x00DE00
loc_2EA10:                              # CODE XREF: draw_health_bars+24↑j
                bbc     1, r11, loc_2EA28
                remo    0xA, r7, r4
                ldos    word_2ED64[r4*2], r5
                stos    r5, 0x1800842 # 0x009CFF
loc_2EA28:                              # CODE XREF: draw_health_bars:loc_2EA10↑j
                bbc     2, r11, loc_2EA48
                remo    0xA, r7, r4
                ldos    word_2ED4C[r4*2], r5
                stos    r5, 0x1800802 # 0x0FF0000
                stos    r5, 0x1800822 # 0x0FF0000
loc_2EA48:                              # CODE XREF: draw_health_bars:loc_2EA28↑j
                ld      health_bar_flag, r15
                bbc     3, r15, loc_2EA58
                call    sub_2EB10
loc_2EA58:                              # CODE XREF: draw_health_bars+19C↑j
                ld      health_bar_flag, r15
                bbc     4, r15, loc_2EA68
                call    sub_2EC54
loc_2EA68:                              # CODE XREF: draw_health_bars+1AC↑j
                ld      mod_fa_game_disp, r12
                ld      0x0(r12), r15
                bbs     30, r15, loc_2EA7C
                call    sub_2EA80
loc_2EA7C:                              # CODE XREF: draw_health_bars+1C0↑j
                ret
# End of function draw_health_bars
# =============== S U B R O U T I N E =======================================
sub_2EA80:                              # CODE XREF: draw_health_bars+1C4↑p
                ldos    game_timer, r3
                lda     word_2EAF0, r10
                shlo    7, 5, r4
                cmpobg  r3, r4, loc_2EAB0
                lda     word_2EAFA, r10
                shlo    6, 5, r4
                cmpobg  r3, r4, loc_2EAB0
                lda     word_2EB04, r10
loc_2EAB0:                              # CODE XREF: sub_2EA80+14↑j
                ldos    (r10), r11      # r11 = 0x2EAF0
                ldos    2(r10), r12     # r12 = 0x2EAF0+0x02
                ldos    4(r10), r13
                ldos    6(r10), r14
                ldos    8(r10), r15
                stos    r11, 0x1800382 # 0x00ACFF
                stos    r12, 0x1800384 # 0x007BEE
                stos    r13, 0x1800386 # 0x0062E6
                stos    r14, 0x1800388 # 0x0031D5
                stos    r15, 0x180038A # 0x0FFFFFF
                ret
# End of function sub_2EA80
# ---------------------------------------------------------------------------
word_2EAF0:     .short 0xFEA0           # DATA XREF: sub_2EA80+8↑o
                .short 0xF5E0
                .short 0xF180
                .short 0xE8C0
                .short 0xFFFF
word_2EAFA:     .short 0x83FF           # DATA XREF: sub_2EA80+18↑o
                .short 0x835F
                .short 0x823F
                .short 0x825F
                .short 0xFFFF
word_2EB04:     .short 0x80BF           # DATA XREF: sub_2EA80+28↑o
                .short 0x805F
                .short 0x801A
                .short 0x8016
                .short 0xFFFF
                .short 0
# =============== S U B R O U T I N E =======================================
sub_2EB10:                              # CODE XREF: draw_health_bars+1A0↑p
                ld      mod_fa_sel_disp, r11
                ld      frame_counter, r9
                shro    1, r9, r10
                and     0xF, r10, r10
                ld      select0_flag, r15
                bbc     6, r15, loc_2EB3C
                and     1, r9, r10
                shlo    3, r10, r10
loc_2EB3C:                              # CODE XREF: sub_2EB10+20↑j
                ldob    0x61(r11), r12
                cmpobne 0, r12, loc_2EB58
                ldos    word_2EC14[r10*2], r4
                ldos    word_2EC34, r6
                b       loc_2EB68
# ---------------------------------------------------------------------------
loc_2EB58:                              # CODE XREF: sub_2EB10+30↑j
                ldos    word_2EC14, r4
                ldos    word_2EC34[r10*2], r6
loc_2EB68:                              # CODE XREF: sub_2EB10+44↑j
                stos    r4, 0x180078C # 0x0FF8300
                stos    r6, 0x1800792 # 0x06A0000
                stos    r4, 0x18007AC # 0x0FF0000
                stos    r6, 0x18007B2 # 0x0FFFFFF
                stos    r4, 0x18007CC # 0x0949494
                stos    r6, 0x18007D2 # 0x0414141
                shro    1, r9, r10
                and     0xF, r10, r10
                ld      select1_flag, r15
                bbc     6, r15, loc_2EBB4
                and     1, r9, r10
                shlo    3, r10, r10
loc_2EBB4:                              # CODE XREF: sub_2EB10+98↑j
                ldob    0x7D(r11), r12
                cmpobne 0, r12, loc_2EBD0
                ldos    word_2EC14[r10*2], r4
                ldos    word_2EC34, r6
                b       loc_2EBE0
# ---------------------------------------------------------------------------
loc_2EBD0:                              # CODE XREF: sub_2EB10+A8↑j
                ldos    word_2EC14, r4
                ldos    word_2EC34[r10*2], r6
loc_2EBE0:                              # CODE XREF: sub_2EB10+BC↑j
                stos    r4, 0x18007EC # 0x0FF9400
                stos    r6, 0x18007F2 # 0x0FF4A00
                stos    r4, 0x180080C # 0x007BFF
                stos    r6, 0x1800812 # 0x000000
                stos    r4, 0x180082C # 0x007BFF
                stos    r6, 0x1800832 # 0x000000
                ret
# End of function sub_2EB10
# ---------------------------------------------------------------------------
word_2EC14:     .short 0x800B           # DATA XREF: sub_2EB10+34↑r
                .short 0x800D
                .short 0x8010
                .short 0x8012
                .short 0x8015
                .short 0x8017
                .short 0x801A
                .short 0x801C
                .short 0x801F
                .short 0x801C
                .short 0x801A
                .short 0x8017
                .short 0x8015
                .short 0x8012
                .short 0x8010
                .short 0x800D
word_2EC34:     .short 0xAC00           # DATA XREF: sub_2EB10+3C↑r
                .short 0xB400
                .short 0xC000
                .short 0xC800
                .short 0xD400
                .short 0xDC00
                .short 0xE800
                .short 0xF000
                .short 0xFC00
                .short 0xF000
                .short 0xE800
                .short 0xDC00
                .short 0xD400
                .short 0xC800
                .short 0xC000
                .short 0xB400
# =============== S U B R O U T I N E =======================================
sub_2EC54:                              # CODE XREF: draw_health_bars+1B0↑p
                lda     0x1800442, r9 # 0x0E6FFFF
                ld      fa_rob0, g7
                balx    sub_2EC88, r11
                lda     0x1800452, r9 # 0x0E6FFFF
                ld      fa_rob1, g7
                balx    sub_2EC88, r11
                ret
# End of function sub_2EC54
# =============== S U B R O U T I N E =======================================
sub_2EC88:                              # CODE XREF: sub_2EC54+10↑p
                mov     7, r7
                ldos    0xC7E(g7), r3   # r3 = P1_PARTS+0xC7E or P2_PARTS+0xC7E
                shlo    6, 1, r13
                cmpoble r13, r3, loc_2ECC0
                cmpobl  0, r3, loc_2ECB4
                ld      0xC70(g7), r3   # r3 = P1_PARTS+0xC70 or P2_PARTS+0xC70
                cmpobe  0, r3, loc_2ECE4
                b       loc_2ECA8
# ---------------------------------------------------------------------------
loc_2ECA8:                              # CODE XREF: sub_2EC88+1C↑j
                lda     word_2ECE8, r10
                b       loc_2ECC8
# ---------------------------------------------------------------------------
loc_2ECB4:                              # CODE XREF: sub_2EC88+10↑j
                lda     word_2ECF6, r10
                b       loc_2ECC8
# ---------------------------------------------------------------------------
loc_2ECC0:                              # CODE XREF: sub_2EC88+C↑j
                lda     word_2ED04, r10
loc_2ECC8:                              # CODE XREF: sub_2EC88+28↑j
                ldos    (r10), r15
                addo    2, r10, r10
                stos    r15, (r9)
                addo    2, r9, r9
                cmpdeco 1, r7, r7
                bl      loc_2ECC8
                bx      (r11)
# ---------------------------------------------------------------------------
loc_2ECE4:                              # CODE XREF: sub_2EC88+18↑j
                bx      (r11)
# End of function sub_2EC88
# ---------------------------------------------------------------------------
word_2ECE8:     .short 0xFFFC           # DATA XREF: sub_2EC88:loc_2ECA8↑o
                .short 0xFFB8
                .short 0xFF95
                .short 0xFF51
                .short 0xFF0D
                .short 0xFEEA
                .short 0xFEA6
word_2ECF6:     .short 0xFFFF           # DATA XREF: sub_2EC88:loc_2ECB4↑o
                .short 0xEBFF
                .short 0xD7FF
                .short 0xBFFF
                .short 0xABFF
                .short 0x97FF
                .short 0x83FF
word_2ED04:     .short 0x83FF           # DATA XREF: sub_2EC88:loc_2ECC0↑o
                .short 0x835F
                .short 0x82BF
                .short 0x81FF
                .short 0x815F
                .short 0x80BF
                .short 0x801F
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
health_clr_green:.byte 0, 0x82, 0xA0, 0x82, 0x40, 0x83, 0xE0, 0x83, 0x80
                .byte 0x81, 0x20, 0x82, 0xC0, 0x82, 0x60, 0x83
health_clr_yellow:.byte 0xFF, 0x82, 0x5F, 0x83, 0xFF, 0x83, 0xFF, 0xB3, 0x7F
                .byte 0x82, 0xDF, 0x82, 0x7F, 0x83, 0xFF, 0xA3
health_clr_red: .byte 0x15, 0x80, 0x19, 0x80, 0x1C, 0x80, 0x1F, 0x80, 0x11
                .byte 0x80, 0x15, 0x80, 0x18, 0x80, 0x1B, 0x80
word_2ED4C:     .short 0x88DE           # DATA XREF: draw_health_bars+17C↑r
                .short 0x801E
                .short 0x8018
                .short 0x8012
                .short 0x800C
                .short 0x8006
                .short 0x8006
                .short 0x800C
                .short 0x8012
                .short 0x8018
                .short 0x801E
                .short 0x88DE
word_2ED64:     .short 0xFD60           # DATA XREF: draw_health_bars+164↑r
                .short 0xFCC0
                .short 0xFC00
                .short 0xDC00
                .short 0xB800
                .short 0x9800
                .short 0x9800
                .short 0xB800
                .short 0xDC00
                .short 0xFC00
                .short 0xFCC0
                .short 0xFD60
                .short 0x5C2
                .short 0x180
                .short 0x602
                .short 0x180
                .short 0x6A2
                .short 0x180
                .short 0x5C2
                .short 0x180
                .short 0x642
                .short 0x180
                .short 0x702
                .short 0x180
                .short 0x6E2
                .short 0x180
                .short 0x682
                .short 0x180
                .short 0x5C2
                .short 0x180
                .short 0x5C2
                .short 0x180
                .short 0x742
                .short 0x180
                .short 0x5C2
                .short 0x180
                .short 0x5C2
                .short 0x180
                .short 0x7FFF
                .short 0x1F
                .short 0x7FFF
                .short 0x1F
                .short 0x7FFF
                .short 0xFE80
                .short 0x7FFF
                .short 0xFE80
                .short 0x7FFF
                .short 0x1F
                .short 0x7FFF
                .short 0xFE80
                .short 0
                .short 0
# =============== S U B R O U T I N E =======================================
scr_bg_int:                             # CODE XREF: ADV_MOVIE_INT+60↑p
                mov     0, r15          # Label from official source
                stis    r15, scrB_H_page
                mov     0, r15
                stis    r15, scrB_V_page
                ldob    stage_num, r3
                and     0xF, r3, r3
                shlo    8, r3, r4
                ldos    stage_bg_color(r4), g0 # Color 0x0031E6
                mov     0, g1
                lda     CG_DATA_START, g2
                call    change_bg_color # Adds 0x4000 to g1 for color code
                call    bg_col_set
                ret
# End of function scr_bg_int
# =============== S U B R O U T I N E =======================================
# Adds 0x4000 to g1 for color code
# Uses g2 as starting offset to draw color
change_bg_color:                        # CODE XREF: WARNING_INT+58↑p
                stos    g0, 0x1801002 # Label from official source
                shlo    0xE, 1, r3      # r3 = 0x4000
                or      g1, r3, r3      # if g1 = 0x8000, r3 = 0xC000
                or      7, r3, r3       # if r3 = 0xC000, r3 = 0xC007
                shlo    16, r3, r4      # if r3 = 0xC007, r4 = 0xC0070000
                or      r3, r4, r4      # if r4 = 0xC0070000, r4 = 0xC007C007
                mov     r4, r5          # r5 = 0xC007C007
                movl    r4, r6          # r6 = 0xC007C007
                addo    31, 17, r11     # r11 = 0x30 or 48
                shlo    7, 1, r15       # r15 = 0x80 or 128
loc_2EE40:                              # CODE XREF: change_bg_color+54↓j
                stq     r4, 0x0(g2)
                stq     r4, 0x10(g2)
                stq     r4, 0x20(g2)
                stq     r4, 0x30(g2)
                stq     r4, 0x40(g2)
                stq     r4, 0x50(g2)
                stq     r4, 0x60(g2)
                stq     r4, 0x70(g2)
                addo    r15, g2, g2     # g2 = g2 + 0x80
                cmpdeco 1, r11, r11
                bl      loc_2EE40
                ret
# End of function change_bg_color
# ---------------------------------------------------------------------------
set_window_bit:                         # Label from official source
                shro    4, g0, r3
                lda     0x100C000[r3*2], r11
                lda     0xFFFF, r6
                shlo    4, r3, r3
                subo    r3, g0, g0
                subo    r3, g2, g2
                shro    g0, r6, r10
loc_2EE94:                              # CODE XREF: ROM:0002EECC↓j
                subi    0x10, g2, g2
                cmpible 0, g2, loc_2EEA8
                not     g2, r3
                shro    r3, r10, r10
                shlo    r3, r10, r10
loc_2EEA8:                              # CODE XREF: ROM:0002EE98↑j
                mov     g1, r9
loc_2EEAC:                              # CODE XREF: ROM:0002EEBC↓j
                ldos    (r11)[r9*8], r3
                or      r10, r3, r3
                stos    r3, (r11)[r9*8]
                addo    1, r9, r9
                cmpoble r9, g3, loc_2EEAC
                cmpibg  0, g2, loc_2EED0
                addo    2, r11, r11
                mov     r6, r10
                b       loc_2EE94
# ---------------------------------------------------------------------------
loc_2EED0:                              # CODE XREF: ROM:0002EEC0↑j
                ret
# ---------------------------------------------------------------------------
set_window_bit_alt:                     # unreachable code
                shro    4, g0, r3
                lda     0x100C000[r3*2], r11
                lda     0xFFFF, r6
                shlo    4, r3, r3
                subo    r3, g0, g0
                subo    r3, g2, g2
                shro    g0, r6, r10
loc_2EEF8:                              # CODE XREF: ROM:0002EF30↓j
                subi    0x10, g2, g2
                cmpible 0, g2, loc_2EF0C
                not     g2, r3
                shro    r3, r10, r10
                shlo    r3, r10, r10
loc_2EF0C:                              # CODE XREF: ROM:0002EEFC↑j
                mov     g1, r9
loc_2EF10:                              # CODE XREF: ROM:0002EF20↓j
                ldos    (r11)[r9*8], r3
                andnot  r10, r3, r3
                stos    r3, (r11)[r9*8]
                addo    1, r9, r9
                cmpoble r9, g3, loc_2EF10
                cmpibg  0, g2, loc_2EF34
                addo    2, r11, r11
                mov     r6, r10
                b       loc_2EEF8
# ---------------------------------------------------------------------------
loc_2EF34:                              # CODE XREF: ROM:0002EF24↑j
                ret
# =============== S U B R O U T I N E =======================================
calc_rob_angle_int:                     # CODE XREF: set_motion+244↑p
# FUNCTION CHUNK AT 0002EFE0 SIZE 00000268 BYTES
                ldob    0x84C(g7), r8   # Label from official source
                ldob    0x85B(g7), r9   # P1_PARTS+0x85B P2_PARTS+0x85B
                cmpobe  r8, r9, loc_2F064 # branch if r8 and r9 are equal
                ldob    0x1B0(g7), r7   # P1_CHAR_VALUE or P2_CHAR_VALUE
                ld      SKELETON_TYPE_DATA[r8*4], r3
                ld      (r3)[r7*4], r3
                ld      CHAR_PARTS[r7*4], r4
                mov     0, r15
                st      r15, 0x2A3C(g7) # P1_PARTS+0x2A3C P2_PARTS+0x2A3C
                ld      0x0(g7), r9
                ld      0x0(r4), r7
                cmpobge 1, r8, loc_2EFE0
                shlo    6, 1, r13
                addi    r13, r7, r7
                cmpobge 2, r8, loc_2EFE0
                ld      8(r4), r7
                balx    sub_2EF9C, r5
                bbc     6, r9, loc_2EFE0
                shlo    6, 1, r13
                addi    r13, r7, r7
                b       loc_2EFE0
# End of function calc_rob_angle_int
# =============== S U B R O U T I N E =======================================
sub_2EF9C:                              # CODE XREF: calc_rob_angle_int+4C↑p
                ldob    0x1B0(g7), r15
                cmpobe  7, r15, loc_2EFAC
                addo    0x1F, 2, r13
                cmpobne r13, r15, loc_2EFDC
loc_2EFAC:                              # CODE XREF: sub_2EF9C+4↑j
                bbc     6, r9, loc_2EFC8
                ld      0x2A3C(g7), r15
                setbit  8, r15, r15
                st      r15, 0x2A3C(g7)
                b       loc_2EFDC
# ---------------------------------------------------------------------------
loc_2EFC8:                              # CODE XREF: sub_2EF9C:loc_2EFAC↑j
                ld      0x2A3C(g7), r15
                setbit  5, r15, r15
                st      r15, 0x2A3C(g7)
loc_2EFDC:                              # CODE XREF: sub_2EF9C+C↑j
                bx      (r5)
# End of function sub_2EF9C
# ---------------------------------------------------------------------------
# START OF FUNCTION CHUNK FOR calc_rob_angle_int
loc_2EFE0:                              # CODE XREF: calc_rob_angle_int+38↑j
                lda     (r7), r14       # r7 is HONEY_PARTS 0xC4984
                lda     0x40(g7), r13   # P1_PARTS+0x40
                mov     0x10, r12
loc_2EFEC:                              # CODE XREF: calc_rob_angle_int+C8↓j
                ld      (r14), r15
                st      r15, (r13)      # For Honey, doing her grab:
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_2EFEC
                bbc     6, r9, loc_2F03C
                lda     0x8C(g7), r4
                mov     0, r10
loc_2F010:                              # CODE XREF: calc_rob_angle_int+FC↓j
                ldib    byte_316A4(r10), r11
                ld      (r3)[r10*4], r8
                bbc     0x1F, r11, loc_2F028
                subi    r11, 0, r11
                notbit  0x1F, r8, r8
loc_2F028:                              # CODE XREF: calc_rob_angle_int+E4↑j
                st      r8, (r4)[r11*4]
                addo    1, r10, r10
                addo    0x1F, 0xE, r15
                cmpobg  r15, r10, loc_2F010
                b       loc_2F060
# ---------------------------------------------------------------------------
loc_2F03C:                              # CODE XREF: calc_rob_angle_int+CC↑j
                lda     (r3), r14
                lda     0x8C(g7), r13
                addo    0x1F, 0xE, r12
loc_2F048:                              # CODE XREF: calc_rob_angle_int+124↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_2F048
loc_2F060:                              # CODE XREF: calc_rob_angle_int+100↑j
                call    send_init_ram_coli_data
loc_2F064:                              # CODE XREF: calc_rob_angle_int+8↑j
                ldos    0x1A8(g7), r5
                cmpobe  0, r5, loc_2F244
                ld      offset_list_motions[r5*4], r9
                addo    2, r9, r9
                mov     0x14, r8
                addo    r9, r8, r8
                ld      0xBD8(g7), g6
                mov     0, r11
                mov     r11, r12
                lda     0x78C(g6), g5
                mov     0, r3
loc_2F094:                              # CODE XREF: calc_rob_angle_int+1B0↓j
                mov     0, r6
loc_2F098:                              # CODE XREF: calc_rob_angle_int+1A4↓j
                ldob    (r9), r5
                shro    6, r5, r10
                and     3, r10, r10
                cmpobe  0, r10, loc_2F0B0
                subo    1, r10, r5
                b       loc_2F0BC
# ---------------------------------------------------------------------------
loc_2F0B0:                              # CODE XREF: calc_rob_angle_int+16C↑j
                shro    r6, r5, r5
                and     3, r5, r5
                addo    3, r5, r5
loc_2F0BC:                              # CODE XREF: calc_rob_angle_int+174↑j
                stob    r5, (g5)
                addo    1, g5, g5
                cmpobge 4, r5, loc_2F0D8
                ldob    (r8), r5
                addo    r5, r11, r11
                addo    1, r8, r8
                addo    1, r12, r12
loc_2F0D8:                              # CODE XREF: calc_rob_angle_int+18C↑j
                addo    2, r6, r6
                cmpobg  6, r6, loc_2F098
                addo    1, r9, r9
                addo    1, r3, r3
                cmpobg  0x14, r3, loc_2F094
                st      r9, 0x784(g6)
                addo    0x16, r12, r14
                and     3, r14, r14
                subo    r14, 4, r14
                and     3, r14, r14
                addo    r14, r8, r8
                st      r8, 0x788(g6)
                shlo    2, r11, r15
                addo    r15, r8, r7
                st      r7, 0x780(g6)
                mov     r9, g2
                lda     0x78C(g6), g5
                mov     0, r3
                stob    r3, 0xBDC(g7)
                mov     r3, r10
loc_2F128:                              # CODE XREF: calc_rob_angle_int+308↓j
                mov     r10, r9
loc_2F12C:                              # CODE XREF: calc_rob_angle_int+300↓j
                ldob    (g5), r5
                cmpobl  5, r5, loc_2F204
                be      loc_2F220
                cmpobl  3, r5, loc_2F1F8
                be      loc_2F1F4
                cmpobl  1, r5, loc_2F198
                be      loc_2F158
                ldt     (r7), r12
                stt     r12, 0x80(g7)
                addo    0xC, r7, r7
                b       loc_2F1EC
# ---------------------------------------------------------------------------
loc_2F158:                              # CODE XREF: calc_rob_angle_int+20C↑j
                subo    0xC, r3, r4
                ldob    0xBDC(g7), r13
                setbit  r4, r13, r13
                stob    r13, 0xBDC(g7)
                ld      dword_316E4[r4*4], r4
                addo    g7, r4, r4
                ldt     (r7), r12
                cvtri   r12, r12
                stos    r12, (r4)
                cvtri   r13, r13
                stos    r13, 2(r4)
                cvtri   r14, r14
                stos    r14, 4(r4)
                addo    0xC, r7, r7
                b       loc_2F1EC
# ---------------------------------------------------------------------------
loc_2F198:                              # CODE XREF: calc_rob_angle_int+208↑j
                ld      (r7), r5
                addo    4, r7, r7
                subo    0xC, r3, r4
                ldob    0xBDC(g7), r13
                setbit  r4, r13, r13
                stob    r13, 0xBDC(g7)
                ld      dword_316E4[r4*4], r4
                addo    g7, r4, r4
                cvtri   r5, r5
                stos    r5, (r4)
                ld      4(r7), r5
                cvtri   r5, r5
                stos    r5, 2(r4)
                ld      8(r7), r5
                cvtri   r5, r5
                stos    r5, 4(r4)
                ld      0xC(r7), r5
                cvtri   r5, r5
                stos    r5, 6(r4)
                addo    0x10, r7, r7
loc_2F1EC:                              # CODE XREF: calc_rob_angle_int+21C↑j
                addo    3, g5, g5
                b       loc_2F23C
# ---------------------------------------------------------------------------
loc_2F1F4:                              # CODE XREF: calc_rob_angle_int+204↑j
                b       loc_2F230
# ---------------------------------------------------------------------------
loc_2F1F8:                              # CODE XREF: calc_rob_angle_int+200↑j
                ld      (r7), r5
                addo    4, r7, r7
                b       loc_2F230
# ---------------------------------------------------------------------------
loc_2F204:                              # CODE XREF: calc_rob_angle_int+1F8↑j
                ldob    (g2), r4
                addo    1, g2, g2
                shlo    1, r4, r15
                addo    r4, r15, r4
                shlo    2, r4, r4
                addo    r4, r7, r7
                b       loc_2F230
# ---------------------------------------------------------------------------
loc_2F220:                              # CODE XREF: calc_rob_angle_int+1FC↑j
                ldob    (g2), r4
                addo    1, g2, g2
                shlo    2, r4, r4
                addo    r4, r7, r7
loc_2F230:                              # CODE XREF: calc_rob_angle_int:loc_2F1F4↑j
                addo    1, g5, g5
                addo    1, r9, r9
                cmpobg  3, r9, loc_2F12C
loc_2F23C:                              # CODE XREF: calc_rob_angle_int+2B8↑j
                addo    1, r3, r3
                cmpobg  0x14, r3, loc_2F128
loc_2F244:                              # CODE XREF: calc_rob_angle_int+130↑j
                ret
# END OF FUNCTION CHUNK FOR calc_rob_angle_int
# =============== S U B R O U T I N E =======================================
# Set Stance Ram
set_kamae_ram:                          # CODE XREF: action_init+588↑p
                ld      0x1A0(g7), r9   # Label from official source
                ld      0xBD8(g7), r8
                ld      0x0(g7), r15
                bbs     0x1D, r15, loc_2F29C
                ldos    displacement(r9), g0
                lda     0x1E0(r8), g3
                call    get_kamae_value # Get Stance Value
                ldos    displacement8(r9), g0
                lda     0x2D0(r8), g3
                call    get_kamae_value # Get Stance Value
                ldos    (displacement10)(r9), g0
                lda     0x3C0(r8), g3
                call    get_kamae_value # Get Stance Value
                ldos    (displacement80)(r9), g0
                lda     0x5A0(r8), g3
                call    get_kamae_value # Get Stance Value
                ret
# ---------------------------------------------------------------------------
loc_2F29C:                              # CODE XREF: set_kamae_ram+C↑j
                ldos    (displacement2)(r9), g0
                lda     0x1E0(r8), g3
                call    get_kamae_value # Get Stance Value
                ret
# End of function set_kamae_ram
# =============== S U B R O U T I N E =======================================
smooth_int:                             # CODE XREF: set_motion+248↑p
                mov     0, r3           # Label from official source
                stos    r3, 0xBE2(g7)
                ldob    0x508008, r15
                cmpobne 0, r15, loc_2F36C
                ld      0x0(g7), r15
                bbc     0x1A, r15, loc_2F36C
                ld      0x70C(g7), r15
                bbs     1, r15, loc_2F36C
                ld      0x860(g7), r15
                bbs     2, r15, loc_2F36C
                ldob    0xBE4(g7), r5
                cmpobe  1, r5, loc_2F36C
                ldos    0x800(g7), r6
                ld      0x1A4(g7), r5
                bbs     0x11, r5, loc_2F364
                ld      0x804(g7), r15
                shlo    0x12, 1, r14
                and     r14, r15, r15
                cmpobne 0, r15, loc_2F354
                ld      0x804(g7), r15
                shlo    0x13, 1, r14
                and     r14, r15, r15
                cmpobne 0, r15, loc_2F35C
                ld      0xC30(g7), r13
                lda     loc_8040, r12
                and     r12, r13, r13
                cmpobe  r12, r13, loc_2F36C
                ldob    0x814(g7), r4
                mov     4, r14
                cmpobe  r14, r4, loc_2F36C
                lda     0x7F, r12
                cmpobe  r12, r4, loc_2F35C
                shlo    0x1A, 1, r15
                and     r15, r5, r14
                cmpobne 0, r14, loc_2F354
                lda     loc_6600, r15
                and     r15, r5, r14
                cmpobne 0, r14, loc_2F35C
loc_2F354:                              # CODE XREF: smooth_int+4C↑j
                mov     3, r3
                b       loc_2F380
# ---------------------------------------------------------------------------
loc_2F35C:                              # CODE XREF: smooth_int+5C↑j
                mov     1, r3
                b       loc_2F380
# ---------------------------------------------------------------------------
loc_2F364:                              # CODE XREF: smooth_int+3C↑j
                mov     2, r3
                b       loc_2F380
# ---------------------------------------------------------------------------
loc_2F36C:                              # CODE XREF: smooth_int+10↑j
                stob    r3, 0xBE5(g7)
                mov     0, r3
                stob    r3, 0xBDD(g7)
                stob    r3, 0xBE4(g7)
                ret
# ---------------------------------------------------------------------------
loc_2F380:                              # CODE XREF: smooth_int+A8↑j
                mov     r6, r7
                cmpobge 2, r7, loc_2F36C
                cmpobge 4, r7, loc_2F39C
                cmpobge 8, r7, loc_2F3A0
                cmpobge 0x10, r7, loc_2F3A4
                mov     8, r8
                b       loc_2F3A8
# ---------------------------------------------------------------------------
loc_2F39C:                              # CODE XREF: smooth_int+D8↑j
                mov     1, r8
loc_2F3A0:                              # CODE XREF: smooth_int+DC↑j
                mov     2, r8
loc_2F3A4:                              # CODE XREF: smooth_int+E0↑j
                mov     4, r8
loc_2F3A8:                              # CODE XREF: smooth_int+E8↑j
                subo    r8, r7, r7
                ldob    0xA00(g7), r15
                cmpobe  0, r15, loc_2F3C0
                ldos    0x808(g7), r13
                cmpobge r7, r13, loc_2F3C0
                clrbit  1, r3, r3
loc_2F3C0:                              # CODE XREF: smooth_int+100↑j
                ldob    0xBE5(g7), r14
                bbc     1, r14, loc_2F3D4
                ldob    0xBDD(g7), r13
                bbc     1, r13, loc_2F3D4
                clrbit  0, r3, r3
loc_2F3D4:                              # CODE XREF: smooth_int+114↑j
                mov     0, r15
                stob    r3, 0xBDD(g7)
                stos    r8, 0xBDE(g7)
                stos    r7, 0xBE0(g7)
                stob    r15, 0xBE5(g7)
                cmpobe  2, r3, loc_2F874
                ld      0xBD8(g7), r6
                lda     0x50E000, g5
                call    get_start_value
                lda     0x690(r6), r11
                lda     0x50E0F0, r10
                mov     0x14, r15
loc_2F40C:                              # CODE XREF: smooth_int+170↓j
                ldt     (r11), r12
                stt     r12, (r10)
                addo    0xC, r11, r11
                addo    0xC, r10, r10
                cmpdeco 1, r15, r15
                bl      loc_2F40C
                lda     0x50E000, r11
                lda     0x690(r6), r10
                mov     0x14, r15
loc_2F434:                              # CODE XREF: smooth_int+198↓j
                ldt     (r11), r12
                stt     r12, (r10)
                addo    0xC, r11, r11
                addo    0xC, r10, r10
                cmpdeco 1, r15, r15
                bl      loc_2F434
                mov     8, r10
                ld      0x50E090, r14
                ld      0x50E098, r13
                or      r14, r13, r15
                cmpobe  0, r15, loc_2F4BC
                lda     0x50E090, r12
loc_2F470:                              # CODE XREF: smooth_int+208↓j
                ld      (r12), r11
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, (r12)
                ld      8(r12), r11
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, 8(r12)
                addo    0xC, r12, r12
                cmpdeco 1, r10, r10
                bl      loc_2F470
loc_2F4BC:                              # CODE XREF: smooth_int+1B4↑j
                mov     8, r10
                ld      0x50E180, r14
                ld      0x50E188, r13
                or      r14, r13, r15
                cmpobe  0, r15, loc_2F52C
                lda     0x50E180, r12
loc_2F4E0:                              # CODE XREF: smooth_int+278↓j
                ld      (r12), r11
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, (r12)
                ld      8(r12), r11
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, 8(r12)
                addo    0xC, r12, r12
                cmpdeco 1, r10, r10
                bl      loc_2F4E0
loc_2F52C:                              # CODE XREF: smooth_int+224↑j
                ld      0xC30(g7), r15
                bbs     0x14, r5, loc_2F538
                bbc     6, r15, loc_2F668
loc_2F538:                              # CODE XREF: smooth_int+280↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x1F803F3F, r15
                st      r15, (g11)[g12*1]
                ldis    0x50E038, r12
                ldis    0x50E034, r13
                ldis    0x50E030, r14
                stt     r12, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0xC04(g7), r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0xC00(g7), r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0xC02(g7), r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x140(g7), r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x142(g7), r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x144(g7), r15
                subi    r15, 0, r15
                st      r15, (g11)[g12*1]
                mov     8, g0
                lda     0x50E180, r10
loc_2F618:                              # CODE XREF: smooth_int+3A8↓j
                ld      0x0(r10), r13
                mov     0, r12
                ld      8(r10), r11
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r13
                ld      (g11)[g12*1], r12
                ld      (g11)[g12*1], r11
                st      r13, 0x0(r10)
                st      r11, 8(r10)
                addo    0xC, r10, r10
                cmpdeco 1, g0, g0
                bl      loc_2F618
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_2F668:                              # CODE XREF: smooth_int+284↑j
                ld      0xC30(g7), r15
                b       loc_2F714
# ---------------------------------------------------------------------------
                bbc     0xA, r15, loc_2F714
                bbs     0xA, r5, loc_2F36C
                bbc     9, r5, loc_2F714
                ld      0x0(g7), r14
                bbs     6, r14, loc_2F68C
                bbs     0xB, r15, loc_2F6B4
                b       loc_2F690
# ---------------------------------------------------------------------------
loc_2F68C:                              # CODE XREF: smooth_int+3D0↑j
                bbc     0xB, r15, loc_2F6B4
loc_2F690:                              # CODE XREF: smooth_int+3D8↑j
                ld      0x50E1D0, r14
                ld      0x50E0E0, r13
                lda     0x3E0F5C29, r15
                st      r15, 0x50E1CC
                b       loc_2F6C4
# ---------------------------------------------------------------------------
loc_2F6B4:                              # CODE XREF: smooth_int+3D4↑j
                ld      0x50E1DC, r14
                ld      0x50E0EC, r13
loc_2F6C4:                              # CODE XREF: smooth_int+400↑j
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                mov     8, r10
                lda     0x50E098, r12
loc_2F6E8:                              # CODE XREF: smooth_int+460↓j
                ld      (r12), r14
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                st      r14, (r12)
                addo    0xC, r12, r12
                cmpdeco 1, r10, r10
                bl      loc_2F6E8
loc_2F714:                              # CODE XREF: smooth_int+3BC↑j
                call    unit_smooth_cancel_front
                cmpobe  8, r8, loc_2F728
                cmpobe  4, r8, loc_2F730
                mov     1, r8
                b       loc_2F734
# ---------------------------------------------------------------------------
loc_2F728:                              # CODE XREF: smooth_int+468↑j
                mov     3, r8
                b       loc_2F734
# ---------------------------------------------------------------------------
loc_2F730:                              # CODE XREF: smooth_int+46C↑j
                mov     2, r8
loc_2F734:                              # CODE XREF: smooth_int+474↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x50E000, r4
                lda     0xBE8(g7), r5
                lda     0x50E0F0, r13
                lda     0x0(r6), r12
                mov     0xC, r11
                ld      0x0(g7), g4
                ld      0x1A4(g7), r10
                ld      0xC30(g7), r9
                mov     0, g3
loc_2F76C:                              # CODE XREF: smooth_int+560↓j
                bbs     0x14, r10, loc_2F774
                bbc     6, r9, loc_2F788
loc_2F774:                              # CODE XREF: smooth_int:loc_2F76C↑j
                cmpobg  8, r11, loc_2F788
                stis    g3, 0x0(r12)
                stis    g3, 4(r12)
                stis    g3, 8(r12)
                b       loc_2F7FC
# ---------------------------------------------------------------------------
loc_2F788:                              # CODE XREF: smooth_int+4C0↑j
                lda     0x2A005454, r15
                st      r15, (g11)[g12*1]
                ldis    0x0(r4), g0
                subo    g0, 0, g0
                ldis    4(r4), g1
                subo    g1, 0, g1
                ldis    8(r4), g2
                subo    g2, 0, g2
                stt     g0, (g11)[g12*1]
                ldis    8(r13), g0
                ldis    4(r13), g1
                ldis    0x0(r13), g2
                stt     g0, (g11)[g12*1]
                ldis    2(r5), g0
                ldis    0x0(r5), g1
                ldis    4(r5), g2
                stt     g0, (g11)[g12*1]
                ldis    (g11)[g12*1], g0
                ldis    (g11)[g12*1], g1
                ldis    (g11)[g12*1], g2
                subi    g0, 0, g0
                shri    r8, g0, g0
                stis    g0, 4(r12)
                shri    r8, g1, g1
                stis    g1, 0x0(r12)
                subi    g2, 0, g2
                shri    r8, g2, g2
                stis    g2, 8(r12)
loc_2F7FC:                              # CODE XREF: smooth_int+4D4↑j
                addo    0xC, r12, r12
                addo    0xC, r13, r13
                addo    0xC, r4, r4
                addo    6, r5, r5
                cmpdeco 1, r11, r11
                bl      loc_2F76C
                mov     1, r15
                shlo    r8, r15, r8
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                lda     0x3F800000, r14
                divr    r8, r14, r8
                mov     0x18, r11
loc_2F840:                              # CODE XREF: smooth_int+5B4↓j
                ld      (r4), r10
                ld      (r13), r9
                subr    r10, r9, r10
                mulr    r8, r10, r10
                st      r10, (r12)
                addo    4, r12, r12
                addo    4, r13, r13
                addo    4, r4, r4
                cmpdeco 1, r11, r11
                bl      loc_2F840
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_2F874:                              # CODE XREF: smooth_int+138↑j
                ret
# End of function smooth_int
# =============== S U B R O U T I N E =======================================
rear_smooth_int:                        # CODE XREF: get_frame_dat:loc_30640↓p
                ldob    0xBE4(g7), r5   # Label from official source
                cmpobe  1, r5, loc_2F36C
                ld      0x1A4(g7), r5
                ld      0xBD8(g7), r6
                ldos    0xBE0(g7), r7
                lda     0x50E0F0, g5
                call    get_end_value
                ldob    0x814(g7), r11
                mov     0, r15
                cmpobe  r15, r11, loc_2F8D4
                shlo    7, 1, r15
                cmpobe  r15, r11, loc_2F8DC
                mov     3, r15
                cmpobe  r15, r11, loc_2F8E4
                mov     4, r15
                cmpobe  r15, r11, loc_2F8F4
                lda     0x83, r15
                cmpobe  r15, r11, loc_2F8EC
                ldob    0xBDD(g7), r14
                clrbit  1, r14, r14
                stob    r14, 0xBDD(g7)
                b       loc_2FC3C
# ---------------------------------------------------------------------------
loc_2F8D4:                              # CODE XREF: rear_smooth_int+28↑j
                lda     0x1E0(r6), g0
                b       loc_2F8F8
# ---------------------------------------------------------------------------
loc_2F8DC:                              # CODE XREF: rear_smooth_int+30↑j
                lda     0x2D0(r6), g0
                b       loc_2F8F8
# ---------------------------------------------------------------------------
loc_2F8E4:                              # CODE XREF: rear_smooth_int+38↑j
                lda     0x3C0(r6), g0
                b       loc_2F8F8
# ---------------------------------------------------------------------------
loc_2F8EC:                              # CODE XREF: rear_smooth_int+48↑j
                lda     0x4B0(r6), g0
                b       loc_2F8F8
# ---------------------------------------------------------------------------
loc_2F8F4:                              # CODE XREF: rear_smooth_int+40↑j
                lda     0x5A0(r6), g0
loc_2F8F8:                              # CODE XREF: rear_smooth_int+60↑j
                lda     0x50E000, r10
                mov     0x14, r11
loc_2F904:                              # CODE XREF: rear_smooth_int+A0↓j
                ldt     (g0), r12
                stt     r12, (r10)
                addo    0xC, g0, g0
                addo    0xC, r10, r10
                cmpdeco 1, r11, r11
                bl      loc_2F904
                mov     8, r10
                ld      0x50E180, r14
                ld      0x50E188, r13
                or      r14, r13, r15
                cmpobe  0, r15, loc_2F98C
                lda     0x50E180, r12
loc_2F940:                              # CODE XREF: rear_smooth_int+110↓j
                ld      (r12), r11
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, (r12)
                ld      8(r12), r11
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, 8(r12)
                addo    0xC, r12, r12
                cmpdeco 1, r10, r10
                bl      loc_2F940
loc_2F98C:                              # CODE XREF: rear_smooth_int+BC↑j
                mov     8, r10
                ld      0x50E090, r14
                ld      0x50E098, r13
                or      r14, r13, r15
                cmpobe  0, r15, loc_2F9FC
                lda     0x50E090, r12
loc_2F9B0:                              # CODE XREF: rear_smooth_int+180↓j
                ld      (r12), r11
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, (r12)
                ld      8(r12), r11
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                st      r11, 8(r12)
                addo    0xC, r12, r12
                cmpdeco 1, r10, r10
                bl      loc_2F9B0
loc_2F9FC:                              # CODE XREF: rear_smooth_int+12C↑j
                mov     0, r14
                ld      0x804(g7), r15
                bbc     0x15, r15, loc_2FA0C
                xor     1, r14, r14
loc_2FA0C:                              # CODE XREF: rear_smooth_int+18C↑j
                ld      0x0(g7), r13
                bbc     6, r13, loc_2FA18
                xor     1, r14, r14
loc_2FA18:                              # CODE XREF: rear_smooth_int+198↑j
                bbc     0, r14, loc_2FA28
                lda     0x50E000, g5
                call    set_mirror
loc_2FA28:                              # CODE XREF: rear_smooth_int:loc_2FA18↑j
                bbc     6, r5, loc_2FAF0
                ldis    0x812(g7), r9
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                mov     8, g0
                lda     0x50E090, r10
loc_2FA64:                              # CODE XREF: rear_smooth_int+22C↓j
                ld      0x0(r10), r13
                mov     0, r12
                ld      8(r10), r11
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r13
                ld      (g11)[g12*1], r12
                ld      (g11)[g12*1], r11
                st      r13, 0x0(r10)
                st      r11, 8(r10)
                addo    0xC, r10, r10
                cmpdeco 1, g0, g0
                bl      loc_2FA64
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ldis    0x50E034, r15
                addi    r9, r15, r15
                stis    r15, 0x50E034
                ldis    0x50E028, r15
                addi    r9, r15, r15
                stis    r15, 0x50E028
                ldis    0x50E01C, r15
                addi    r9, r15, r15
                stis    r15, 0x50E01C
loc_2FAF0:                              # CODE XREF: rear_smooth_int:loc_2FA28↑j
                call    unit_smooth_cancel_rear
                ldos    0x800(g7), g6
                subo    r7, g6, r7
                cmpobe  8, r7, loc_2FB0C
                cmpobe  4, r7, loc_2FB14
                mov     1, r7
                b       loc_2FB18
# ---------------------------------------------------------------------------
loc_2FB0C:                              # CODE XREF: rear_smooth_int+284↑j
                mov     3, r7
                b       loc_2FB18
# ---------------------------------------------------------------------------
loc_2FB14:                              # CODE XREF: rear_smooth_int+288↑j
                mov     2, r7
loc_2FB18:                              # CODE XREF: rear_smooth_int+290↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x50E0F0, r4
                lda     0xBE8(g7), r5
                lda     0x50E000, r13
                lda     0xF0(r6), r12
                mov     0xC, r11
                ld      0x0(g7), g4
                ld      0x1A4(g7), r10
                ld      0xC30(g7), r9
                mov     0, g3
loc_2FB50:                              # CODE XREF: rear_smooth_int+360↓j
                lda     0x2A805555, r15
                st      r15, (g11)[g12*1]
                ldis    4(r5), g0
                ldis    0x0(r5), g1
                ldis    2(r5), g2
                stt     g0, (g11)[g12*1]
                ldis    0x0(r4), g0
                subo    g0, 0, g0
                ldis    4(r4), g1
                subo    g1, 0, g1
                ldis    8(r4), g2
                subo    g2, 0, g2
                stt     g0, (g11)[g12*1]
                ldis    8(r13), g0
                ldis    4(r13), g1
                ldis    0x0(r13), g2
                stt     g0, (g11)[g12*1]
                ldis    (g11)[g12*1], g0
                ldis    (g11)[g12*1], g1
                ldis    (g11)[g12*1], g2
                subi    g0, 0, g0
                shri    r7, g0, g0
                stis    g0, 4(r12)
                shri    r7, g1, g1
                stis    g1, 0x0(r12)
                subi    g2, 0, g2
                shri    r7, g2, g2
                stis    g2, 8(r12)
                addo    0xC, r12, r12
                addo    0xC, r13, r13
                addo    0xC, r4, r4
                addo    6, r5, r5
                cmpdeco 1, r11, r11
                bl      loc_2FB50
                mov     1, r15
                shlo    r7, r15, r7
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     0x3F800000, r14
                divr    r7, r14, r7
                mov     0x18, r11
loc_2FC08:                              # CODE XREF: rear_smooth_int+3B4↓j
                ld      (r4), r10
                ld      (r13), r9
                subr    r10, r9, r10
                mulr    r7, r10, r10
                st      r10, (r12)
                addo    4, r12, r12
                addo    4, r13, r13
                addo    4, r4, r4
                cmpdeco 1, r11, r11
                bl      loc_2FC08
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_2FC3C:                              # CODE XREF: rear_smooth_int+58↑j
                ret
# End of function rear_smooth_int
# =============== S U B R O U T I N E =======================================
unit_smooth_cancel_rear:                # CODE XREF: rear_smooth_int:loc_2FAF0↑p
                lda     0x50E0F0, r5 # Label from official source
                lda     0x50E000, r4
                ld      0x860(g7), r9
                b       usc_skelton_go
# End of function unit_smooth_cancel_rear
# =============== S U B R O U T I N E =======================================
unit_smooth_cancel_front:               # CODE XREF: smooth_int:loc_2F714↑p
                lda     0x50E0F0, r4 # Label from official source
                lda     0x50E000, r5
                ld      0xC5C(g7), r9
                bbc     0xC, r9, usc_now_kind
                ld      0x860(g7), r12
                bbs     0xC, r12, usc_skelton_end # return
                b       usc_skelton_go
# ---------------------------------------------------------------------------
usc_now_kind:                           # CODE XREF: unit_smooth_cancel_front+14↑j
                ld      0x860(g7), r9   # Label from official source
                bbc     0xC, r9, usc_skelton_end # return
usc_skelton_go:                         # CODE XREF: unit_smooth_cancel_rear+14↑j
                shlo    0xD, 0xF, r12   # Label from official source
                and     r12, r9, r10
                shro    0xD, r10, r10
                lda     dword_2FD64, r11
                ld      0x0(g7), r15
                bbc     6, r15, usc_skelton_mir
                lda     dword_2FD74, r11
usc_skelton_mir:                        # CODE XREF: unit_smooth_cancel_front+44↑j
                scanbit r10, r8         # Label from official source
                cmpibg  0, r8, usc_skelton_end # return
                ldob    displacement(r11)[r8*4], r7
                ld      displacement(r5)[r7*1], r15
                st      r15, displacement(r4)[r7*1]
                ld      4(r5)[r7*1], r15
                st      r15, 4(r4)[r7*1]
                ld      8(r5)[r7*1], r15
                st      r15, 8(r4)[r7*1]
                ldob    1(r11)[r8*4], r7
                ld      displacement(r5)[r7*1], r15
                st      r15, displacement(r4)[r7*1]
                ld      4(r5)[r7*1], r15
                st      r15, 4(r4)[r7*1]
                ld      8(r5)[r7*1], r15
                st      r15, 8(r4)[r7*1]
                ldob    2(r11)[r8*4], r7
                ld      displacement(r5)[r7*1], r15
                st      r15, displacement(r4)[r7*1]
                ld      4(r5)[r7*1], r15
                st      r15, 4(r4)[r7*1]
                ld      8(r5)[r7*1], r15
                st      r15, 8(r4)[r7*1]
                clrbit  r8, r10, r10
                b       usc_skelton_mir
# ---------------------------------------------------------------------------
usc_skelton_end:                        # CODE XREF: unit_smooth_cancel_front+1C↑j
                ret                     # Label from official source
# End of function unit_smooth_cancel_front
# ---------------------------------------------------------------------------
dword_2FD64:    .long 0x54B4            # DATA XREF: unit_smooth_cancel_front+38↑o
                .long 0xC60C0
                .long 0x1878D8
                .long 0x2484E4
dword_2FD74:    .long 0xC60C0           # DATA XREF: unit_smooth_cancel_front+48↑o
                .long 0x54B4
                .long 0x2484E4
                .long 0x1878D8
# =============== S U B R O U T I N E =======================================
# Get Stance Value
get_kamae_value:                        # CODE XREF: set_kamae_ram+1C↑p
                ld      offset_list_motions[g0*4], r9 # Label from official source
                addo    2, r9, r9
                mov     0x14, r8
                addo    r9, r8, r8
                lda     0x50E2D0, g6
                mov     0, r11
                mov     r11, r12
                lda     0x78C(g6), g5
                mov     0, r3
loc_2FDB0:                              # CODE XREF: get_kamae_value+80↓j
                mov     0, r6
loc_2FDB4:                              # CODE XREF: get_kamae_value+74↓j
                ldob    (r9), r5
                shro    6, r5, r10
                and     3, r10, r10
                cmpobe  0, r10, loc_2FDCC
                subo    1, r10, r5
                b       loc_2FDD8
# ---------------------------------------------------------------------------
loc_2FDCC:                              # CODE XREF: get_kamae_value+3C↑j
                shro    r6, r5, r5
                and     3, r5, r5
                addo    3, r5, r5
loc_2FDD8:                              # CODE XREF: get_kamae_value+44↑j
                stob    r5, (g5)
                addo    1, g5, g5
                cmpobge 4, r5, loc_2FDF4
                ldob    (r8), r5
                addo    r5, r11, r11
                addo    1, r8, r8
                addo    1, r12, r12
loc_2FDF4:                              # CODE XREF: get_kamae_value+5C↑j
                addo    2, r6, r6
                cmpobg  6, r6, loc_2FDB4
                addo    1, r9, r9
                addo    1, r3, r3
                cmpobg  0x14, r3, loc_2FDB0
                addo    0x16, r12, r14
                and     3, r14, r14
                subo    r14, 4, r14
                and     3, r14, r14
                addo    r14, r8, r8
                shlo    2, r11, r7
                addo    r8, r7, r7
                mov     r9, g2
                lda     0x78C(g6), g5
                mov     0, r3
                mov     r3, r10
loc_2FE34:                              # CODE XREF: get_kamae_value+158↓j
                mov     r10, r9
loc_2FE38:                              # CODE XREF: get_kamae_value+150↓j
                ldob    (g5), r5
                cmpobl  5, r5, loc_2FE88
                be      loc_2FEB0
                cmpobl  3, r5, loc_2FE74
                be      loc_2FE68
                cmpobl  1, r5, loc_2FE60
                ldt     (r7), r12
                stt     r12, (g3)
                addo    0xC, r7, r7
                addo    0xC, g3, g3
loc_2FE60:                              # CODE XREF: get_kamae_value+C8↑j
                addo    3, g5, g5
                b       loc_2FED8
# ---------------------------------------------------------------------------
loc_2FE68:                              # CODE XREF: get_kamae_value+C4↑j
                st      r10, (g3)
                addo    4, g3, g3
                b       loc_2FECC
# ---------------------------------------------------------------------------
loc_2FE74:                              # CODE XREF: get_kamae_value+C0↑j
                ld      (r7), r5
                addo    4, r7, r7
                st      r5, (g3)
                addo    4, g3, g3
                b       loc_2FECC
# ---------------------------------------------------------------------------
loc_2FE88:                              # CODE XREF: get_kamae_value+B8↑j
                ld      (r7), r5
                st      r5, (g3)
                addo    4, g3, g3
                ldob    (g2), r14
                addo    1, g2, g2
                shlo    1, r14, r15
                addo    r14, r15, r14
                shlo    2, r14, r14
                addo    r14, r7, r7
                b       loc_2FECC
# ---------------------------------------------------------------------------
loc_2FEB0:                              # CODE XREF: get_kamae_value+BC↑j
                ld      (r7), r5
                st      r5, (g3)
                addo    4, g3, g3
                ldob    (g2), r4
                addo    1, g2, g2
                shlo    2, r4, r15
                addo    r15, r7, r7
loc_2FECC:                              # CODE XREF: get_kamae_value+EC↑j
                addo    1, g5, g5
                addo    1, r9, r9
                cmpobg  3, r9, loc_2FE38
loc_2FED8:                              # CODE XREF: get_kamae_value+E0↑j
                addo    1, r3, r3
                cmpobg  0x14, r3, loc_2FE34
                shlo    4, 0xF, r15
                subo    r15, g3, g3
                addo    0x1F, 5, r12
loc_2FEEC:                              # CODE XREF: get_kamae_value:loc_2FF00↓j
                ld      (g3), r13
                cvtri   r13, r13
                stis    r13, (g3)
                addo    4, g3, g3
                cmpdeco 1, r12, r12
loc_2FF00:                              # DATA XREF: MAIN_DATA:028918D0↓o
                bl      loc_2FEEC
                ret
# End of function get_kamae_value
# =============== S U B R O U T I N E =======================================
calc_rob_angle:                         # CODE XREF: play_motion:pm_load↑p
                ldos    0x1AA(g7), r15  # Label from official source
                cmpobne 1, r15, loc_2FF28
                ldos    0xC4E(g7), r15
                cmpobne 1, r15, loc_2FF28
                ldos    0xC4C(g7), r15
                ldos    0x1A8(g7), r14
                cmpobne r14, r15, loc_2FF28
                ret
# ---------------------------------------------------------------------------
loc_2FF28:                              # CODE XREF: calc_rob_angle+4↑j
                call    get_frame_dat
# End of function calc_rob_angle
# =============== S U B R O U T I N E =======================================
calc_rob_angle_cont:                    # CODE XREF: action_init:calc_rob_angle_cont_call↑p
                lda     0x9801313, r15  # Label from official source
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x31006262, r15
                st      r15, (g11)[g12*1]
                ld      0x80(g7), r12
                ld      0x84(g7), r13
                ld      0x88(g7), r14
                stt     r12, (g11)[g12*1]
                ldis    0x144(g7), r12
                ldis    0x142(g7), r13
                ldis    0x140(g7), r14
                stt     r12, (g11)[g12*1]
                ldis    0xC02(g7), r12
                ldis    0xC00(g7), r13
                ldis    0xC04(g7), r14
                stt     r12, (g11)[g12*1]
                lda     0x33806767, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_2FF9C
                shlo    9, 0x1D, r15
                b       loc_2FFA4
# ---------------------------------------------------------------------------
loc_2FF9C:                              # CODE XREF: calc_rob_angle_cont+64↑j
                lda     0x3B00, r15
loc_2FFA4:                              # CODE XREF: calc_rob_angle_cont+6C↑j
                st      r15, (g11)[g12*1]
                ldob    0x84C(g7), r15
                ld      off_C2058[r15*4], g6
                ldob    0x1B0(g7), r15
                ld      (g6)[r15*4], g6
                ld      0x860(g7), r15
                bbc     0xC, r15, loc_2FFC8
                lda     0x8C(g7), g6
loc_2FFC8:                              # CODE XREF: calc_rob_angle_cont+94↑j
                lda     0xBA8(g7), g5
                lda     0xB00(g7), g4
                mov     1, g1
                lda     0x146(g7), g0
                lda     0xC06(g7), g3
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                call    calc_unit_1
                lda     0x33806767, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                bbs     0, r15, loc_30024
                lda     0x3A0C, r15
                b       loc_3002C
# ---------------------------------------------------------------------------
loc_30024:                              # CODE XREF: calc_rob_angle_cont+E8↑j
                lda     0x3B0C, r15
loc_3002C:                              # CODE XREF: calc_rob_angle_cont+F4↑j
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                call    calc_unit_1
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x35806B6B, r15
                st      r15, (g11)[g12*1]
                ld      0x0(g6), r12
                ld      4(g6), r13
                ld      8(g6), r14
                stt     r12, (g11)[g12*1]
                ldis    4(g5), r12
                ldis    2(g5), r13
                ldis    0x0(g5), r14
                stt     r12, (g11)[g12*1]
                ldis    2(g3), r12
                ldis    0x0(g3), r13
                ldis    4(g3), r14
                stt     r12, (g11)[g12*1]
                ld      0x0(g4), r12
                ld      4(g4), r13
                ld      8(g4), r14
                stt     r12, (g11)[g12*1]
                ld      0x18(g6), r12
                ld      0xC(g6), r13
# ---------------------------------------------------------------------------
                .long 0x9A66DC1C        # stl     r12, (g11)[g12]
# ---------------------------------------------------------------------------
                ldob    4(g7), r15
                bbs     0, r15, loc_3011C
                lda     0x3A30, r15
                st      r15, (g11)[g12*1]
                lda     0x3A24, r15
                st      r15, (g11)[g12*1]
                b       loc_30134
# ---------------------------------------------------------------------------
loc_3011C:                              # CODE XREF: calc_rob_angle_cont+1D0↑j
                lda     0x3B30, r15
                st      r15, (g11)[g12*1]
                lda     0x3B24, r15
                st      r15, (g11)[g12*1]
loc_30134:                              # CODE XREF: calc_rob_angle_cont+1EC↑j
                mov     0, r15
                st      r15, (g11)[g12*1]
                addo    0x1F, 5, r15
                addo    r15, g6, g6
                addo    6, g5, g5
                addo    0xC, g4, g4
                addo    6, g3, g3
                addo    1, g1, g1
                addo    0xE, g0, g0
                ld      (g11)[g12*1], r15
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x35806B6B, r15
                st      r15, (g11)[g12*1]
                ld      0x0(g6), r12
                ld      4(g6), r13
                ld      8(g6), r14
                stt     r12, (g11)[g12*1]
                ldis    4(g5), r12
                ldis    2(g5), r13
                ldis    0x0(g5), r14
                stt     r12, (g11)[g12*1]
                ldis    2(g3), r12
                ldis    0x0(g3), r13
                ldis    4(g3), r14
                stt     r12, (g11)[g12*1]
                ld      0x0(g4), r12
                ld      4(g4), r13
                ld      8(g4), r14
                stt     r12, (g11)[g12*1]
                ld      0x18(g6), r12
                ld      0xC(g6), r13
# End of function calc_rob_angle_cont
# ---------------------------------------------------------------------------
                .long 0x9A66DC1C        # stl     r12, (g11)[g12]
# ---------------------------------------------------------------------------
                ldob    4(g7), r15
                bbs     0, r15, loc_30214
                lda     0x3A54, r15
                st      r15, (g11)[g12*1]
                lda     0x3A48, r15
                st      r15, (g11)[g12*1]
                b       loc_3022C
# ---------------------------------------------------------------------------
loc_30214:                              # CODE XREF: ROM:000301F4↑j
                lda     0x3B54, r15
                st      r15, (g11)[g12*1]
                lda     0x3B48, r15
                st      r15, (g11)[g12*1]
loc_3022C:                              # CODE XREF: ROM:00030210↑j
                mov     0, r15
                st      r15, (g11)[g12*1]
                addo    0x1F, 5, r15
                addo    r15, g6, g6
                addo    6, g5, g5
                addo    0xC, g4, g4
                addo    6, g3, g3
                addo    1, g1, g1
                addo    0xE, g0, g0
                ld      (g11)[g12*1], r15
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                call    calc_unit_1
                mov     r15, r15
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15  # float 3.08328e-33
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                mov     r15, r15
                lda     0x9801313, r15  # float 3.08328e-33
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x35806B6B, r15 # float 9.56801e-07
                st      r15, (g11)[g12*1]
                ld      0x0(g6), r12
                ld      4(g6), r13
                ld      8(g6), r14
                stt     r12, (g11)[g12*1]
                ldis    4(g5), r12
                ldis    2(g5), r13
                ldis    0x0(g5), r14
                stt     r12, (g11)[g12*1]
                ldis    2(g3), r12
                ldis    0x0(g3), r13
                ldis    4(g3), r14
                stt     r12, (g11)[g12*1]
                ld      0x0(g4), r12
                ld      4(g4), r13
                ld      8(g4), r14
                stt     r12, (g11)[g12*1]
                ld      0x18(g6), r12
                ld      0xC(g6), r13
# ---------------------------------------------------------------------------
                .long 0x9A66DC1C        # stl     r12, (g11)[g12]
# ---------------------------------------------------------------------------
                ldob    4(g7), r15
                bbs     0, r15, loc_3033C
                lda     0x3A84, r15
                st      r15, (g11)[g12*1]
                lda     0x3A78, r15
                st      r15, (g11)[g12*1]
                b       loc_30354
# ---------------------------------------------------------------------------
loc_3033C:                              # CODE XREF: ROM:0003031C↑j
                lda     loc_3B84, r15
                st      r15, (g11)[g12*1]
                lda     loc_3B78, r15
                st      r15, (g11)[g12*1]
loc_30354:                              # CODE XREF: ROM:00030338↑j
                mov     1, r15
                st      r15, (g11)[g12*1]
                addo    0x1F, 5, r15
                addo    r15, g6, g6
                addo    6, g5, g5
                addo    0xC, g4, g4
                addo    6, g3, g3
                addo    1, g1, g1
                addo    0xE, g0, g0
                ld      (g11)[g12*1], r15
                mov     r15, r15
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15  # float 3.08328e-33
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x9801313, r15  # float 3.08328e-33
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x35806B6B, r15
                st      r15, (g11)[g12*1]
                ld      0x0(g6), r12
                ld      4(g6), r13
                ld      8(g6), r14
                stt     r12, (g11)[g12*1]
                ldis    4(g5), r12
                ldis    2(g5), r13
                ldis    0x0(g5), r14
                stt     r12, (g11)[g12*1]
                ldis    2(g3), r12
                ldis    0x0(g3), r13
                ldis    4(g3), r14
                stt     r12, (g11)[g12*1]
                ld      0x0(g4), r12
                ld      4(g4), r13
                ld      8(g4), r14
                stt     r12, (g11)[g12*1]
                ld      0x18(g6), r12
                ld      0xC(g6), r13
# ---------------------------------------------------------------------------
                .long 0x9A66DC1C        # stl     r12, (g11)[g12]
# ---------------------------------------------------------------------------
                ldob    4(g7), r15
                bbs     0, r15, loc_30438
                lda     loc_3AA8, r15
                st      r15, (g11)[g12*1]
                lda     loc_3A98+4, r15
                st      r15, (g11)[g12*1]
                b       loc_30450
# ---------------------------------------------------------------------------
loc_30438:                              # CODE XREF: ROM:00030418↑j
                lda     loc_3BA8, r15
                st      r15, (g11)[g12*1]
                lda     loc_3B9C, r15
                st      r15, (g11)[g12*1]
loc_30450:                              # CODE XREF: ROM:00030434↑j
                mov     1, r15
                st      r15, (g11)[g12*1]
                addo    0x1F, 5, r15
                addo    r15, g6, g6
                addo    6, g5, g5
                addo    0xC, g4, g4
                addo    6, g3, g3
                addo    1, g1, g1
                addo    0xE, g0, g0
                ld      (g11)[g12*1], r15
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ldob    0x84C(g7), r15
                ld      _uk_gravity[r15*4], r14
                ldob    0x1B0(g7), r15
                ld      (r14)[r15*4], r9
                cmpobne 0, r9, loc_304A4
                st      r9, 0xC50(g7)
                b       loc_304BC
# ---------------------------------------------------------------------------
loc_304A4:                              # CODE XREF: ROM:00030498↑j
                lda     0x3F59999A, r15 # float 0.85
                mulr    r15, r9, r9
                ld      0x84(g7), r13
                mulr    r9, r13, r9
                st      r9, 0xC50(g7)
loc_304BC:                              # CODE XREF: ROM:000304A0↑j
                ldos    0x1A8(g7), r15
                stos    r15, 0xC4C(g7)
                ret
# =============== S U B R O U T I N E =======================================
get_frame_dat:                          # CODE XREF: calc_rob_angle:loc_2FF28↑p
                ldos    0x1AA(g7), g6   # Label from official source
                ld      0xBD8(g7), r6
                lda     0x690(r6), g5
                ld      not_scr_bg_move, r10
                bbc     0x11, r10, loc_3050C
                ldos    replay_countdown, r14
                bbc     0, r14, loc_3050C
                ldos    0x800(g7), r13
                cmpobe  g6, r13, loc_3050C
                cvtir   g6, g6
                lda     0x3F000000, r13 # float 1.0
                addr    r13, g6, g6
                call    get_fcurve_value_f
                b       loc_30580
# ---------------------------------------------------------------------------
loc_3050C:                              # CODE XREF: get_frame_dat+14↑j
                ld      0x854(g7), r10
                cmpobe  0, r10, loc_30560
loc_30514:                              # CODE XREF: get_frame_dat+64↓j
                mov     r4, r5
                ldob    (r10), r4
                cmpobe  r4, g6, loc_3055C
                mov     r7, r8
                ldob    1(r10), r7
                addo    2, r10, r10
                cmpobl  r4, g6, loc_30514
                subo    r5, g6, r12
                subo    r8, r7, r13
                mulo    r13, r12, r12
                subo    r5, r4, r13
                mulo    r13, r8, r14
                addo    r12, r14, r12
                cvtir   r12, r12
                cvtir   r13, r13
                divr    r13, r12, g6
                call    get_fcurve_value_f
                b       loc_30580
# ---------------------------------------------------------------------------
loc_3055C:                              # CODE XREF: get_frame_dat+54↑j
                mov     r4, g6
loc_30560:                              # CODE XREF: get_frame_dat+48↑j
                cmpobne 1, g6, loc_3057C
                ldob    0x19F(g7), r15
                cmpobe  0x14, r15, loc_3057C
                ldob    0xBDD(g7), r15
                bbs     0, r15, loc_30580
                call    get_start_value
                b       loc_30580
# ---------------------------------------------------------------------------
loc_3057C:                              # CODE XREF: get_frame_dat:loc_30560↑j
                call    get_fcurve_value
loc_30580:                              # CODE XREF: get_frame_dat+40↑j
                ldos    0x1AA(g7), g6
                ld      0x804(g7), r15
                lda     loc_20010, r14
                and     r14, r15, r15
                cmpobe  0, r15, loc_305A4
                ldos    0xBE2(g7), g6
                addo    1, g6, g6
                stos    g6, 0xBE2(g7)
loc_305A4:                              # CODE XREF: get_frame_dat+CC↑j
                ldob    0xBDD(g7), r15
                cmpobe  0, r15, loc_306CC
                cmpobe  2, r15, loc_30628
                ldos    0xBDE(g7), r3
                cmpoble r3, g6, loc_30628
                subo    g6, r3, g6
                lda     0x0(r6), r14
                lda     0xBE8(g7), r13
                addo    0x1F, 5, r12
loc_305C8:                              # CODE XREF: get_frame_dat+118↓j
                ldis    (r14), r11
                muli    g6, r11, r11
                stis    r11, (r13)
                addo    2, r13, r13
                addo    4, r14, r14
                cmpdeco 1, r12, r12
                bl      loc_305C8
                lda     0x720(r6), r13
                mov     0x18, r12
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      g6, (g11)[g12*1]
                ld      (g11)[g12*1], r9
loc_30600:                              # CODE XREF: get_frame_dat+158↓j
                ld      (r14), r11
                ld      (r13), r10
                mulr    r9, r11, r11
                addr    r10, r11, r11
                st      r11, (r13)
                addo    4, r13, r13
                addo    4, r14, r14
                cmpdeco 1, r12, r12
                bl      loc_30600
                b       loc_306F8
# ---------------------------------------------------------------------------
loc_30628:                              # CODE XREF: get_frame_dat+E4↑j
                ldos    0x1AA(g7), r4
                cmpobe  1, r15, loc_306CC
                ldos    0xBE0(g7), r7
                cmpobge r7, r4, loc_306CC
                ldob    0xBE5(g7), r13
                bbs     0, r13, loc_30648
                call    rear_smooth_int
                or      1, r13, r13
loc_30648:                              # CODE XREF: get_frame_dat+174↑j
                subo    r7, r4, g6
                ldos    0xBDE(g7), r15
                subo    1, r15, r15
                cmpobne r15, g6, loc_3065C
                or      2, r13, r13
loc_3065C:                              # CODE XREF: get_frame_dat+18C↑j
                stob    r13, 0xBE5(g7)
                lda     0xF0(r6), r14
                lda     0xBE8(g7), r13
                addo    0x1F, 5, r12
loc_3066C:                              # CODE XREF: get_frame_dat+1BC↓j
                ldis    (r14), r11
                muli    g6, r11, r11
                stis    r11, (r13)
                addo    2, r13, r13
                addo    4, r14, r14
                cmpdeco 1, r12, r12
                bl      loc_3066C
                lda     0x720(r6), r13
                mov     0x18, r12
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      g6, (g11)[g12*1]
                ld      (g11)[g12*1], r9
loc_306A4:                              # CODE XREF: get_frame_dat+1FC↓j
                ld      (r14), r11
                ld      (r13), r10
                mulr    r9, r11, r11
                addr    r10, r11, r11
                st      r11, (r13)
                addo    4, r13, r13
                addo    4, r14, r14
                cmpdeco 1, r12, r12
                bl      loc_306A4
                b       loc_306F8
# ---------------------------------------------------------------------------
loc_306CC:                              # CODE XREF: get_frame_dat+E0↑j
                lda     0xBE8(g7), r10
                mov     4, r11
                mov     0, r12
                mov     r12, r13
                mov     r12, r14
                mov     r12, r15
loc_306E4:                              # CODE XREF: get_frame_dat+228↓j
                stq     r12, (r10)
                addo    0x10, r10, r10
                cmpdeco 1, r11, r11
                bl      loc_306E4
                stl     r12, (r10)
loc_306F8:                              # CODE XREF: get_frame_dat+15C↑j
                ld      0x0(g7), r15
                bbc     2, r15, loc_3077C
                ld      0x1C(g7), r11
                ld      0x724(r6), r12
                subr    r12, r11, r10
                ld      0x18(g7), r12
                ld      0x20(g7), r11
                ld      stage_soko, r8
                ld      stage_x, r14
                clrbit  0x1F, r12, r13
                cmpr    r13, r14
                bge     loc_30740
                clrbit  0x1F, r11, r13
                cmpr    r13, r14
                bge     loc_30740
                mov     0, r8
loc_30740:                              # CODE XREF: get_frame_dat+264↑j
                lda     0x3DCCCCCD, r14
                addr    r14, r8, r8
                mov     7, r9
                lda     0x730(r6), r7
loc_30754:                              # CODE XREF: get_frame_dat+2B0↓j
                ld      (r7), r3
                addr    r3, r10, r4
                cmpr    r8, r4
                ble     loc_30770
                subr    r4, r8, r5
                addr    r3, r5, r4
                st      r4, (r7)
loc_30770:                              # CODE XREF: get_frame_dat+298↑j
                addo    0xC, r7, r7
                cmpdeco 1, r9, r9
                bl      loc_30754
loc_3077C:                              # CODE XREF: get_frame_dat+234↑j
                lda     0x690(r6), r10
                mov     0, r9
loc_30784:                              # CODE XREF: get_frame_dat+2E0↓j
                ld      dword_316D4[r9*4], r4
                addo    g7, r4, r4
                ldt     (r10), r12
                addo    0xC, r10, r10
                stos    r12, (r4)
                stos    r13, 2(r4)
                stos    r14, 4(r4)
                addo    1, r9, r9
                cmpobg  4, r9, loc_30784
                ldt     (r10), r12
                addo    0xC, r10, r10
                stos    r12, 0x140(g7)
                stos    r13, 0x142(g7)
                stos    r14, 0x144(g7)
                mov     7, r9
                lda     0xBA8(g7), g5
loc_307C8:                              # CODE XREF: get_frame_dat+31C↓j
                ldt     (r10), r12
                addo    0xC, r10, r10
                stos    r12, (g5)
                stos    r13, 2(g5)
                stos    r14, 4(g5)
                addo    6, g5, g5
                cmpdeco 1, r9, r9
                bl      loc_307C8
                ldt     (r10), r12
                addo    0xC, r10, r10
                stt     r12, 0x80(g7)
                mov     7, r9
                lda     0xB00(g7), g5
loc_307FC:                              # CODE XREF: get_frame_dat+348↓j
                ldt     (r10), r12
                addo    0xC, r10, r10
loc_30804:                              # DATA XREF: RAM2BASE:002A4C44↓o
                stt     r12, (g5)
                addo    0xC, g5, g5
                cmpdeco 1, r9, r9
                bl      loc_307FC
                mov     0, r15
                stob    r15, 0x7D3(g7)
                ld      0x0(g7), r15
                bbs     0x13, r15, loc_30994
                ldob    mode_flag, r15
                lda     prcb+3, r14
                bbs     r14, r15, loc_309C4
                ld      0x500034, r12
                lda     loc_10000, r13
                lda     0x20000(r13), r13
                lda     0x100000(r13), r13
                lda     0x200000(r13), r13
                lda     check_word1(r13), r13
                lda     displacement32(r13), r13
                lda     0x4000(r13), r13
                lda     0x8000(r13), r13
                lda     0x10000000(r13), r13
                lda     0x20000000(r13), r13
                and     r13, r12, r13
                cmpobne 0, r13, loc_309C4
                ld      0x0(g7), r15
                shlo    0x15, 5, r14
                and     r14, r15, r14
                cmpobne 0, r14, loc_309C4
                bbs     0x17, r15, loc_309C4
                ld      0x0(g7), r15
                bbs     8, r15, loc_309C4
                ld      0x1A4(g7), r15
                lda     0x802C119, r14
                and     r14, r15, r15
                cmpobne 0, r15, loc_309C4
                mov     1, r15
                stob    r15, 0x7D3(g7)
                ld      fa_camera, r11
                ldos    0x26(r11), r13
                ldos    0x26(g7), r14
                subi    r13, r14, r3
                shli    0x10, r3, r3
                mov     4, r4
                divi    r4, r3, r3
                shri    0x10, r3, r3
                ldos    0x26(g7), r4
                subi    r3, r4, r3
                lda     0x31806363, r15
                st      r15, (g11)[g12*1]
                ldt     0x18(g7), r12
                mov     r3, r15
                stq     r12, (g11)[g12*1]
                ldt     0x20C(g8), r12
                stt     r12, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0xB0C(g7)
                ld      0x0(g7), r15
                bbs     0x13, r15, loc_30994
                ld      0x0(g7), r15
                bbc     0x11, r15, loc_309C4
                ld      fa_camera, r11
                ldt     0x18(r11), r4
                ldt     0x20C(g8), r8
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                lda     0x3F000000, r7
                mulr    r4, r7, r4
                mulr    r5, r7, r5
                mulr    r6, r7, r6
                stt     r4, 0x41C(r11)
                lda     0x31806363, r15
                st      r15, (g11)[g12*1]
                ldt     0x18(g7), r12
                ldis    0x26(g7), r15
                stq     r12, (g11)[g12*1]
                ldt     0x41C(r11), r12
                stt     r12, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0xB0C(g7)
                b       loc_309C4
# ---------------------------------------------------------------------------
loc_30994:                              # CODE XREF: get_frame_dat+358↑j
                ld      fa_camera, r11
                lda     0x31806363, r15
                st      r15, (g11)[g12*1]
                ldt     0x18(g7), r12
                ldis    0x26(g7), r15
                stq     r12, (g11)[g12*1]
                ldt     0x41C(r11), r12
                stt     r12, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0xB0C(g7)
loc_309C4:                              # CODE XREF: get_frame_dat+36C↑j
                b       loc_30A88       # return
# ---------------------------------------------------------------------------
                ldos    0x1AA(g7), r11
                cmpobg  0xD, r11, loc_30A88 # return
                lda     0x9D, r10
                cmpobl  r10, r11, loc_30A88 # return
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1B003636, r15
                st      r15, (g11)[g12*1]
                ldob    4(g8), r15
                st      r15, (g11)[g12*1]
                mov     0x18, r15
                st      r15, (g11)[g12*1]
                lda     0x3E19999A, r12
                mov     0, r13
                lda     0xBD4CCCCD, r14
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                stt     r12, (g11)[g12*1]
                ldt     (g11)[g12*1], r8
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x0(g7), r15
                bbs     6, r15, loc_30A64
                lda     0x31806363, r15
                st      r15, (g11)[g12*1]
                ldt     0x18(g7), r12
                ldis    0x26(g7), r15
                stq     r12, (g11)[g12*1]
                stt     r8, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0xB18(g7)
                b       loc_30A88       # return
# ---------------------------------------------------------------------------
loc_30A64:                              # CODE XREF: get_frame_dat+570↑j
                lda     0x31806363, r15
                st      r15, (g11)[g12*1]
                ldt     0x18(g7), r12
                ldis    0x26(g7), r15
                stq     r12, (g11)[g12*1]
                stt     r8, (g11)[g12*1]
                ldt     (g11)[g12*1], r12
                stt     r12, 0xB24(g7)
loc_30A88:                              # CODE XREF: get_frame_dat:loc_309C4↑j
                ret                     # return
# End of function get_frame_dat
# =============== S U B R O U T I N E =======================================
get_start_value:                        # CODE XREF: smooth_int+148↑p
                ld      0xBD8(g7), r4   # Label from official source
                lda     0x78C(r4), g4
                ld      0x784(r4), g3
                ld      0x780(r4), g2
                addo    0x1F, 0x1D, g1
loc_30AA0:                              # CODE XREF: get_start_value+8C↓j
                ldob    (g4), r6
                cmpobe  4, r6, loc_30B00
                bg      loc_30AE8
                ldob    (g3), r11
                addo    1, g3, g3
                cmpobe  5, r6, loc_30AD4
                ld      (g2), r14
                st      r14, (g5)
                shlo    1, r11, r4
                addo    r4, r11, r4
                shlo    2, r4, r4
                addo    r4, g2, g2
                b       loc_30B0C
# ---------------------------------------------------------------------------
loc_30AD4:                              # CODE XREF: get_start_value+28↑j
                ld      (g2), r14
                st      r14, (g5)
                shlo    2, r11, r4
                addo    r4, g2, g2
                b       loc_30B0C
# ---------------------------------------------------------------------------
loc_30AE8:                              # CODE XREF: get_start_value+1C↑j
                cmpobe  3, r6, loc_30AF4
                addo    4, g2, g2
                b       loc_30B0C
# ---------------------------------------------------------------------------
loc_30AF4:                              # CODE XREF: get_start_value:loc_30AE8↑j
                mov     0, r3
                st      r3, (g5)
                b       loc_30B0C
# ---------------------------------------------------------------------------
loc_30B00:                              # CODE XREF: get_start_value+18↑j
                ld      (g2), r3
                st      r3, (g5)
                addo    4, g2, g2
loc_30B0C:                              # CODE XREF: get_start_value+44↑j
                addo    1, g4, g4
                addo    4, g5, g5
                cmpdeco 1, g1, g1
                bl      loc_30AA0
                shlo    4, 0xF, r15
                subo    r15, g5, g5
                addo    0x1F, 5, r12
loc_30B28:                              # CODE XREF: get_start_value+B0↓j
                ld      (g5), r13
                cvtri   r13, r13
                stis    r13, (g5)
                addo    4, g5, g5
                cmpdeco 1, r12, r12
                bl      loc_30B28
                shlo    4, 9, r15
                subo    r15, g5, g5
                ld      0x0(g7), r15
                bbs     6, r15, set_mirror
                ret
# End of function get_start_value
# =============== S U B R O U T I N E =======================================
get_end_value:                          # CODE XREF: rear_smooth_int+1C↑p
                ld      0xBD8(g7), r4   # Label from official source
                lda     0x78C(r4), g4
                ld      0x784(r4), g3
                ld      0x780(r4), g2
                addo    0x1F, 0x1D, g1
loc_30B68:                              # CODE XREF: get_end_value+94↓j
                ldob    (g4), r6
                cmpobe  4, r6, loc_30BD0
                bg      loc_30BB8
                ldob    (g3), r11
                addo    1, g3, g3
                cmpobe  5, r6, loc_30BA0
                shlo    1, r11, r4
                addo    r4, r11, r4
                shlo    2, r4, r4
                addo    r4, g2, g2
                ld      -0xC(g2), r14
                st      r14, (g5)
                b       loc_30BDC
# ---------------------------------------------------------------------------
loc_30BA0:                              # CODE XREF: get_end_value+28↑j
                shlo    2, r11, r4
                addo    r4, g2, g2
                ld      -4(g2), r14
                st      r14, (g5)
                b       loc_30BDC
# ---------------------------------------------------------------------------
loc_30BB8:                              # CODE XREF: get_end_value+1C↑j
                cmpobe  3, r6, loc_30BC4
                addo    4, g2, g2
                b       loc_30BDC
# ---------------------------------------------------------------------------
loc_30BC4:                              # CODE XREF: get_end_value:loc_30BB8↑j
                mov     0, r3
                st      r3, (g5)
                b       loc_30BDC
# ---------------------------------------------------------------------------
loc_30BD0:                              # CODE XREF: get_end_value+18↑j
                ld      (g2), r3
                st      r3, (g5)
                addo    4, g2, g2
loc_30BDC:                              # CODE XREF: get_end_value+48↑j
                addo    1, g4, g4
                addo    4, g5, g5
                cmpdeco 1, g1, g1
                bl      loc_30B68
                shlo    4, 0xF, r15
                subo    r15, g5, g5
                addo    0x1F, 5, r12
loc_30BF8:                              # CODE XREF: get_end_value+B8↓j
                ld      (g5), r13
                cvtri   r13, r13
                stis    r13, (g5)
                addo    4, g5, g5
                cmpdeco 1, r12, r12
                bl      loc_30BF8
                shlo    4, 9, r15
                subo    r15, g5, g5
                ld      0x0(g7), r15
                bbs     6, r15, set_mirror
                ret
# End of function get_end_value
# =============== S U B R O U T I N E =======================================
get_fcurve_value:                       # CODE XREF: get_frame_dat:loc_3057C↑p
                cvtir   g6, g6          # Label from official source
# End of function get_fcurve_value
# =============== S U B R O U T I N E =======================================
get_fcurve_value_f:                     # CODE XREF: get_frame_dat+3C↑p
                ld      0xBD8(g7), r4   # Label from official source
                lda     0x78C(r4), g4
                ld      0x788(r4), g3
                ld      0x780(r4), g2
                addo    0x1F, 0x1D, g1
                ld      0x784(r4), g0
loc_30C40:                              # CODE XREF: get_fcurve_value_f+1A4↓j
                mov     g3, r10
                ldob    (g4), r6
                cmpobe  4, r6, loc_30DB4
                bg      loc_30D9C
                ldob    (g0), r11
                addo    1, g0, g0
                mov     0, r9
                cmpobe  5, r6, loc_30D10
loc_30C60:                              # CODE XREF: get_fcurve_value_f+4C↓j
                ld      (r10), r8
                addo    4, r10, r10
                cmpoble g6, r8, loc_30C94
                mov     r8, r7
                addo    1, r9, r9
                cmpobg  r11, r9, loc_30C60
                shlo    2, r11, r4
                addo    r4, g3, g3
                shlo    1, r11, r4
                addo    r4, r11, r4
                shlo    2, r4, r4
                addo    r4, g2, g2
                b       loc_30DC0
# ---------------------------------------------------------------------------
loc_30C94:                              # CODE XREF: get_fcurve_value_f+40↑j
                shlo    2, r11, r4
                addo    r4, g3, g3
                shlo    1, r9, r4
                addo    r4, r9, r4
                shlo    2, r4, r9
                addo    g2, r9, r9
                shlo    1, r11, r4
                addo    r4, r11, r4
                shlo    2, r4, r11
                addo    g2, r11, g2
                cmpobe  g6, r8, loc_30D90
                subr    r7, r8, r3
                subr    r7, g6, r4
                ld      -0xC(r9), r5
                ld      (r9), r6
                ld      -4(r9), r7
                ld      4(r9), r8
                lda     0x19003232, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                st      r3, (g5)
                b       loc_30DC0
# ---------------------------------------------------------------------------
loc_30D10:                              # CODE XREF: get_fcurve_value_f+34↑j
                ld      (r10), r8
                addo    4, r10, r10
                cmpoble g6, r8, loc_30D38
                mov     r8, r7
                addo    1, r9, r9
                cmpobg  r11, r9, loc_30D10
                shlo    2, r11, r4
                addo    r4, g3, g3
                addo    r4, g2, g2
                b       loc_30DC0
# ---------------------------------------------------------------------------
loc_30D38:                              # CODE XREF: get_fcurve_value_f+F0↑j
                shlo    2, r11, r4
                addo    r4, g3, g3
                shlo    2, r9, r9
                addo    g2, r9, r9
                shlo    2, r11, r11
                addo    g2, r11, g2
                cmpobe  g6, r8, loc_30D90
                subr    r7, r8, r6
                subr    r7, g6, r5
                ld      (r9), r4
                ld      -4(r9), r3
                lda     0x18803131, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                st      r3, (g5)
                b       loc_30DC0
# ---------------------------------------------------------------------------
loc_30D90:                              # CODE XREF: get_fcurve_value_f+94↑j
                ld      (r9), r3
                st      r3, (g5)
                b       loc_30DC0
# ---------------------------------------------------------------------------
loc_30D9C:                              # CODE XREF: get_fcurve_value_f+24↑j
                cmpobe  3, r6, loc_30DA8
                addo    4, g2, g2
                b       loc_30DC0
# ---------------------------------------------------------------------------
loc_30DA8:                              # CODE XREF: get_fcurve_value_f:loc_30D9C↑j
                mov     0, r3
                st      r3, (g5)
                b       loc_30DC0
# ---------------------------------------------------------------------------
loc_30DB4:                              # CODE XREF: get_fcurve_value_f+20↑j
                ld      (g2), r3
                st      r3, (g5)
                addo    4, g2, g2
loc_30DC0:                              # CODE XREF: get_fcurve_value_f+68↑j
                addo    1, g4, g4
                addo    4, g5, g5
                cmpdeco 1, g1, g1
                bl      loc_30C40
                shlo    4, 0xF, r15
                subo    r15, g5, g5
                addo    0x1F, 5, r12
loc_30DDC:                              # CODE XREF: get_fcurve_value_f+1C8↓j
                ld      (g5), r13
                cvtri   r13, r13
                stis    r13, (g5)
                addo    4, g5, g5
                cmpdeco 1, r12, r12
                bl      loc_30DDC
                shlo    4, 9, r15
                subo    r15, g5, g5
                ld      0x0(g7), r15
                bbc     6, r15, loc_30FE4
# End of function get_fcurve_value_f
# =============== S U B R O U T I N E =======================================
set_mirror:                             # CODE XREF: rear_smooth_int+1AC↑p
                shlo    0xF, 1, r3      # Label from official source
                ldis    0x34(g5), r15
                subi    r15, 0, r15
                stis    r15, 0x34(g5)
                ldis    0x38(g5), r15
                subi    r15, 0, r15
                stis    r15, 0x38(g5)
                ld      0x90(g5), r15
                notbit  0x1F, r15, r15
                st      r15, 0x90(g5)
                ldos    0x3C(g5), r15
                subo    r15, r3, r15
                stos    r15, 0x3C(g5)
                ldos    0x44(g5), r15
                subo    r15, r3, r15
                stos    r15, 0x44(g5)
                ld      0x9C(g5), r15
                notbit  0x1F, r15, r15
                st      r15, 0x9C(g5)
                ld      0xA8(g5), r15
                notbit  0x1F, r15, r15
                st      r15, 0xA8(g5)
                ld      0x60(g5), r15
                ld      0x54(g5), r14
                subi    r15, 0, r15
                subi    r14, 0, r14
                st      r14, 0x60(g5)
                st      r15, 0x54(g5)
                ld      0x64(g5), r15
                ld      0x58(g5), r14
                subi    r15, 0, r15
                subi    r14, 0, r14
                st      r14, 0x64(g5)
                st      r15, 0x58(g5)
                ld      0x68(g5), r15
                ld      0x5C(g5), r14
                st      r14, 0x68(g5)
                st      r15, 0x5C(g5)
                ld      0xC0(g5), r15
                ld      0xB4(g5), r14
                notbit  0x1F, r15, r15
                notbit  0x1F, r14, r14
                st      r14, 0xC0(g5)
                st      r15, 0xB4(g5)
                ld      0xC4(g5), r15
                ld      0xB8(g5), r14
                st      r14, 0xC4(g5)
                st      r15, 0xB8(g5)
                ld      0xC8(g5), r15
                ld      0xBC(g5), r14
                st      r14, 0xC8(g5)
                st      r15, 0xBC(g5)
                ld      0xC(g5), r15
                ld      0x0(g5), r14
                subi    r15, 0, r15
                subi    r14, 0, r14
                st      r14, 0xC(g5)
                st      r15, 0x0(g5)
                ld      0x10(g5), r15
                ld      4(g5), r14
                subi    r15, 0, r15
                subi    r14, 0, r14
                st      r14, 0x10(g5)
                st      r15, 4(g5)
                ld      0x14(g5), r15
loc_30F08:                              # DATA XREF: RAM2BASE:002A478C↓o
                ld      8(g5), r14
                st      r14, 0x14(g5)
                st      r15, 8(g5)
                ldos    0x6C(g5), r15
                subo    r15, r3, r15
                stos    r15, 0x6C(g5)
                ldos    0x74(g5), r15
                subo    r15, r3, r15
                stos    r15, 0x74(g5)
                ld      0x84(g5), r15
                ld      0x78(g5), r14
                subi    r15, 0, r15
                subi    r14, 0, r14
                st      r14, 0x84(g5)
                st      r15, 0x78(g5)
                ld      0x88(g5), r15
                ld      0x7C(g5), r14
                subi    r15, 0, r15
                subi    r14, 0, r14
                st      r14, 0x88(g5)
                st      r15, 0x7C(g5)
                ld      0x8C(g5), r15
                ld      0x80(g5), r14
                st      r14, 0x8C(g5)
                st      r15, 0x80(g5)
                ld      0xE4(g5), r15
                ld      0xD8(g5), r14
                notbit  0x1F, r15, r15
                notbit  0x1F, r14, r14
                st      r14, 0xE4(g5)
                st      r15, 0xD8(g5)
                ld      0xE8(g5), r15
                ld      0xDC(g5), r14
                st      r14, 0xE8(g5)
                st      r15, 0xDC(g5)
                ld      0xEC(g5), r15
                ld      0xE0(g5), r14
                st      r14, 0xEC(g5)
                st      r15, 0xE0(g5)
                ld      0x24(g5), r15
                ld      0x18(g5), r14
                st      r14, 0x24(g5)
                st      r15, 0x18(g5)
                ld      0x28(g5), r15
                ld      0x1C(g5), r14
                subi    r15, 0, r15
                subi    r14, 0, r14
                st      r14, 0x28(g5)
                st      r15, 0x1C(g5)
                ld      0x2C(g5), r15
                ld      0x20(g5), r14
                subi    r15, 0, r15
                subi    r14, 0, r14
                st      r14, 0x2C(g5)
                st      r15, 0x20(g5)
loc_30FE4:                              # CODE XREF: get_fcurve_value_f+1D8↑j
                ret
# End of function set_mirror
# =============== S U B R O U T I N E =======================================
calc_unit_1:                            # CODE XREF: calc_rob_angle_cont+D4↑p
                cmpobne 2, g1, loc_31000 # Label from official source
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0xBE6(g7), r15
                st      r15, (g11)[g12*1]
loc_31000:                              # CODE XREF: calc_unit_1↑j
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ldt     (g6), r12
                stt     r12, (g11)[g12*1]
                lda     0x1F803F3F, r15
                st      r15, (g11)[g12*1]
                ldis    4(g5), r12
                ldis    2(g5), r13
                ldis    0x0(g5), r14
                stt     r12, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                addo    6, g5, g5
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    2(g3), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x0(g3), r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    4(g3), r15
                st      r15, (g11)[g12*1]
                addo    6, g3, g3
                ldob    0xBDC(g7), r3
                bbc     g1, r3, loc_3108C
                ldos    4(g0), r4
                ldos    2(g0), r5
                b       loc_31320
# ---------------------------------------------------------------------------
loc_3108C:                              # CODE XREF: calc_unit_1+94↑j
                cmpobne 1, g1, loc_31174
                ld      0x1A4(g7), r14
                shlo    0xD, 0xB, r15
                and     r15, r14, r15
                cmpobne 0, r15, loc_310AC
                lda     0x20C, r15
                and     r15, r14, r14
                cmpobne 0, r14, loc_310B8
loc_310AC:                              # CODE XREF: calc_unit_1+B4↑j
                mov     0, r11
                stis    r11, 0xBE6(g7)
                b       loc_31174
# ---------------------------------------------------------------------------
loc_310B8:                              # CODE XREF: calc_unit_1+C0↑j
                lda     0x35006A6A, r15
                st      r15, (g11)[g12*1]
                ldt     0xB0C(g7), r8
                stt     r8, (g11)[g12*1]
                ldt     (g11)[g12*1], r8
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ldis    (g11)[g12*1], r11
                ld      0x0(g7), r15
                bbc     6, r15, loc_310F4
                subi    r11, 0, r11
loc_310F4:                              # CODE XREF: calc_unit_1+104↑j
                mov     r11, r6
                cmpibg  0, r11, loc_3111C
                shlo    0xD, 1, r12
                cmpibl  r12, r11, loc_3110C
                shri    1, r11, r11
                b       loc_31120
# ---------------------------------------------------------------------------
loc_3110C:                              # CODE XREF: calc_unit_1+118↑j
                shlo    0xD, 3, r13
                cmpibl  r13, r11, loc_31174
                shlo    0xC, 1, r11
                b       loc_31120
# ---------------------------------------------------------------------------
loc_3111C:                              # CODE XREF: calc_unit_1+110↑j
                mov     0, r11
loc_31120:                              # CODE XREF: calc_unit_1+120↑j
                ldis    0xBE6(g7), r10
                ld      0x0(g7), r15
                bbc     6, r15, loc_31130
                subi    r10, 0, r10
loc_31130:                              # CODE XREF: calc_unit_1+140↑j
                subi    r10, r11, r9
                shlo    8, 1, r8
                cmpibge r8, r9, loc_31150
                addi    r8, r10, r11
                shlo    0xC, 1, r7
                cmpibge r7, r11, loc_31164
                mov     r7, r11
                b       loc_31164
# ---------------------------------------------------------------------------
loc_31150:                              # CODE XREF: calc_unit_1+150↑j
                subo    r8, 0, r8
                cmpible r8, r9, loc_31164
                addi    r8, r10, r11
                cmpible 0, r11, loc_31164
                mov     0, r11
loc_31164:                              # CODE XREF: calc_unit_1+15C↑j
                ld      0x0(g7), r15
                bbc     6, r15, loc_31170
                subi    r11, 0, r11
loc_31170:                              # CODE XREF: calc_unit_1+180↑j
                stis    r11, 0xBE6(g7)
loc_31174:                              # CODE XREF: calc_unit_1:loc_3108C↑j
                lda     0x35006A6A, r15
                st      r15, (g11)[g12*1]
                ldt     0x0(g4), r8
                stt     r8, (g11)[g12*1]
                ldt     (g11)[g12*1], r8
                cmpobne 2, g1, not_kao_lim
                ld      0x0(g7), r15
                bbc     0x15, r15, loc_311A4
                clrbit  0x15, r15, r15
                st      r15, 0x0(g7)
                b       not_kao_lim
# ---------------------------------------------------------------------------
loc_311A4:                              # CODE XREF: calc_unit_1+1AC↑j
                cmpible 0, r9, loc_311E8
                mov     0, r9
                cmpibg  0, r8, loc_311D0
                lda     0x3F000000, r11
                cmpr    r11, r8
                bl      loc_311E8
                ldos    4(g0), r12
                shlo    0xF, 1, r13
                cmpobe  r12, r13, loc_31240
                b       loc_311E8
# ---------------------------------------------------------------------------
loc_311D0:                              # CODE XREF: calc_unit_1+1C4↑j
                lda     0xBF000000, r11
                cmpr    r11, r8
                bg      loc_311E8
                ldos    4(g0), r12
                cmpobe  0, r12, loc_31240
loc_311E8:                              # CODE XREF: calc_unit_1:loc_311A4↑j
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                subi    r4, 0, r4
                mov     r4, r3
                ldis    4(g0), r11
                subi    r11, r4, r4
                shlo    0xB, 1, r12
                ldob    0x7D3(g7), r15
                cmpobne 0, r15, loc_31220
                shlo    0xD, 1, r12
loc_31220:                              # CODE XREF: calc_unit_1+230↑j
                cmpibg  r12, r4, loc_3122C
                mov     r12, r4
                b       loc_31238
# ---------------------------------------------------------------------------
loc_3122C:                              # CODE XREF: calc_unit_1:loc_31220↑j
                subi    r12, 0, r13
                cmpible r13, r4, loc_31238
                mov     r13, r4
loc_31238:                              # CODE XREF: calc_unit_1+240↑j
                addi    r4, r11, r4
                stos    r4, 4(g0)
loc_31240:                              # CODE XREF: calc_unit_1+1E0↑j
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ldis    (g11)[g12*1], r5
                mov     r5, r6
                ldis    2(g0), g2
                subi    g2, r5, r5
                shlo    0xA, 1, r12
                ldob    0x7D3(g7), r15
                cmpobne 0, r15, loc_3128C
                shlo    0xD, 1, r12
loc_3128C:                              # CODE XREF: calc_unit_1+29C↑j
                cmpibg  r12, r5, loc_31298
                mov     r12, r5
                b       loc_312A4
# ---------------------------------------------------------------------------
loc_31298:                              # CODE XREF: calc_unit_1:loc_3128C↑j
                subi    r12, 0, r13
                cmpible r13, r5, loc_312A4
                mov     r13, r5
loc_312A4:                              # CODE XREF: calc_unit_1+2AC↑j
                addi    r5, g2, r5
                shlo    0xD, 1, r12
                cmpibg  r12, r5, loc_312B8
                mov     r12, r5
                b       loc_312C4
# ---------------------------------------------------------------------------
loc_312B8:                              # CODE XREF: calc_unit_1+2C4↑j
                subi    r12, 0, r13
                cmpible r13, r5, loc_312C4
                mov     r13, r5
loc_312C4:                              # CODE XREF: calc_unit_1+2CC↑j
                stos    r5, 2(g0)
                b       loc_31340
# ---------------------------------------------------------------------------
not_kao_lim:                            # CODE XREF: calc_unit_1+1A4↑j
                lda     0x13802727, r15 # Label from official source
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ldis    (g11)[g12*1], r4
                subi    r4, 0, r4
                stos    r4, 4(g0)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ldis    (g11)[g12*1], r5
                stos    r5, 2(g0)
loc_31320:                              # CODE XREF: calc_unit_1+A0↑j
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
loc_31340:                              # CODE XREF: calc_unit_1+2E0↑j
                addo    0xC, g6, g6
                addo    0xC, g4, g4
                addo    6, g0, g0
                addo    1, g1, g1
                ret
# End of function calc_unit_1
# ---------------------------------------------------------------------------
_uk_gravity:    .long float_distance_from_floor
                .long dword_31434
                .long dword_31504
                .long dword_315D4
float_distance_from_floor:.long 0       # DATA XREF: ROM:_uk_gravity↑o
                .float -0.15000001      # Tails
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .float 1.1799999        # Bean
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .float -0.15000001      # Tails_I
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .float 1.1799999        # Bean_I
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
dword_31434:    .long 0                 # DATA XREF: ROM:00031358↑o
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
dword_31504:    .long 0                 # DATA XREF: ROM:0003135C↑o
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
dword_315D4:    .long 0                 # DATA XREF: ROM:00031360↑o
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
byte_316A4:     .byte 0                 # DATA XREF: calc_rob_angle_int:loc_2F010↑r
                .byte 1
                .byte 2
                .byte 3
                .byte 4
                .byte 5
                .byte 0xF
                .byte 0x10
                .byte 0xEF
                .byte 0x12
                .byte 0x13
                .byte 0x14
                .byte 0x15
                .byte 0x16
                .byte 0x17
                .byte 6
                .byte 7
                .byte 0xF8
                .byte 9
                .byte 0xA
                .byte 0xB
                .byte 0xC
                .byte 0xD
                .byte 0xE
                .byte 0x18
                .byte 0x19
                .byte 0x1A
                .byte 0x24
                .byte 0x25
                .byte 0xDA
                .byte 0x27
                .byte 0x28
                .byte 0x29
                .byte 0x2A
                .byte 0x2B
                .byte 0x2C
                .byte 0x1B
                .byte 0x1C
                .byte 0xE3
                .byte 0x1E
                .byte 0x1F
                .byte 0x20
                .byte 0x21
                .byte 0x22
                .byte 0x23
                .byte 0
                .byte 0
                .byte 0
dword_316D4:    .long 346               # DATA XREF: get_frame_dat:loc_30784↑r
                .long 360
                .long 380
                .long 394
dword_316E4:    .long 320               # DATA XREF: calc_rob_angle_int+230↑r
                .long 326
                .long 332
                .long 338
                .long 352
                .long 366
                .long 372
                .long 386
# =============== S U B R O U T I N E =======================================
# return
user_always:                            # CODE XREF: main_loop+50↑p
                ret                     # Label from official source
# End of function user_always
# =============== S U B R O U T I N E =======================================
# return
fa_user:                                # DATA XREF: sub_5905C+64↓o
                ret
# End of function fa_user
# =============== S U B R O U T I N E =======================================
stage_efc_init:                         # DATA XREF: ROM:0008F21C↓o
                lda     0x130(g13), r14 # Label from Fighting Vipers source
                mov     0, r15
                mov     8, r13
loc_31718:                              # CODE XREF: stage_efc_init+18↓j
                st      r15, (r14)
                lda     4(r14), r14
                cmpdeco 1, r13, r13
                bl      loc_31718
                lda     stage_efc_dsp, r15
                st      r15, 0xC(g13)
stage_efc_dsp:                          # DATA XREF: stage_efc_init+1C↑o
                ret                     # Label from Fighting Vipers source
# End of function stage_efc_init
# ---------------------------------------------------------------------------
ending_fade_init:                       # Label from Fighting Vipers source
                mov     0, r15          # unreachable code
                stib    r15, 0x5003A6
                subo    1, 0, r15
                stib    r15, 0x5003A7
                ret
# ---------------------------------------------------------------------------
                stob    g0, 0x5003A6 # unreachable code
                mov     0, r15
                stib    r15, 0x5003A7
                ret
# =============== S U B R O U T I N E =======================================
sub_3176C:                              # CODE XREF: ROM:loc_FF04↑p
                ldob    0x5003A6, r3
                cmpobe  0, r3, loc_31788
                subo    1, r3, r3
                ld      off_3178C[r3*4], r4
                callx   (r4)
loc_31788:                              # CODE XREF: sub_3176C+8↑j
                ret
# End of function sub_3176C
# ---------------------------------------------------------------------------
off_3178C:      .long loc_31818         # DATA XREF: sub_3176C+10↑r
                .long loc_31800
                .long loc_31848
                .long loc_31830
                .long loc_317E8
                .long loc_317D0
                .long loc_318C8
                .long loc_318B0
                .long loc_31958
                .long loc_31940
# ---------------------------------------------------------------------------
loc_317B4:                              # CODE XREF: ROM:00031874↓j
                mov     0, r15
                stib    r15, 0x5003A6
                subo    1, 0, r15
                stib    r15, 0x5003A7
                ret
# ---------------------------------------------------------------------------
loc_317D0:                              # DATA XREF: ROM:000317A0↑o
                lda     0x100A002, r3
                lda     0x100C000, r5
                subo    1, 0, r8
                b       loc_3185C
# ---------------------------------------------------------------------------
loc_317E8:                              # DATA XREF: ROM:0003179C↑o
                lda     0x100A002, r3
                lda     0x100C000, r5
                mov     0, r8
                b       loc_3185C
# ---------------------------------------------------------------------------
loc_31800:                              # DATA XREF: ROM:00031790↑o
                lda     0x100A000, r3
                lda     0x100C000, r5
                subo    1, 0, r8
                b       loc_3185C
# ---------------------------------------------------------------------------
loc_31818:                              # DATA XREF: ROM:off_3178C↑o
                lda     0x100A000, r3
                lda     0x100C000, r5
                mov     0, r8
                b       loc_3185C
# ---------------------------------------------------------------------------
loc_31830:                              # DATA XREF: ROM:00031798↑o
                lda     scrB_H_page, r3
                lda     0x100D000, r5
                subo    1, 0, r8
                b       loc_3185C
# ---------------------------------------------------------------------------
loc_31848:                              # DATA XREF: ROM:00031794↑o
                lda     scrB_H_page, r3
                lda     0x100D000, r5
                mov     0, r8
loc_3185C:                              # CODE XREF: ROM:000317E4↑j
                mov     0, r4
                stos    r4, (r3)
                stos    r4, 8(r3)
                mov     0x1C, r4
                ldob    0x5003A7, r7
                cmpobl  7, r7, loc_317B4
                addo    1, r7, r15
                stob    r15, 0x5003A7
                shlo    7, 5, r13
                addi    r13, r5, r5
                shlo    3, r7, r7
                addo    r7, r5, r5
                shlo    6, 1, r9
loc_31898:                              # CODE XREF: ROM:000318A8↓j
                st      r8, (r5)
                st      r8, 4(r5)
                addo    r9, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_31898
                ret
# ---------------------------------------------------------------------------
loc_318B0:                              # DATA XREF: ROM:000317A8↑o
                ldob    0x5003A7, r3
                and     0xF, r3, r3
                ld      dword_347E4[r3*4], r8
                b       loc_318DC
# ---------------------------------------------------------------------------
loc_318C8:                              # DATA XREF: ROM:000317A4↑o
                ldob    0x5003A7, r3
                and     0xF, r3, r3
                ld      dword_34864[r3*4], r8
loc_318DC:                              # CODE XREF: ROM:000318C4↑j
                lda     0x100A000, r3
                ldos    (r3), r4
                setbit  0xF, r4, r4
                stos    r4, (r3)
                ldos    8(r3), r4
                setbit  0xE, r4, r4
                stos    r4, 8(r3)
                ldob    0x5003A7, r7
                cmpobl  0xF, r7, loc_317B4
                addo    1, r7, r15
                stob    r15, 0x5003A7
                lda     0x1008000, r5
                shlo    5, 5, r13
                addi    r13, r5, r5
                shlo    5, 7, r4
loc_31928:                              # CODE XREF: ROM:00031938↓j
                stis    r8, (r5)
                addo    2, r5, r5
                subi    r8, 0, r8
                cmpdeco 1, r4, r4
                bl      loc_31928
                ret
# ---------------------------------------------------------------------------
loc_31940:                              # DATA XREF: ROM:000317B0↑o
                ldob    0x5003A7, r3
                and     0xF, r3, r3
                ld      dword_347E4[r3*4], r8
                b       loc_3196C
# ---------------------------------------------------------------------------
loc_31958:                              # DATA XREF: ROM:000317AC↑o
                ldob    0x5003A7, r3
                and     0xF, r3, r3
                ld      word_34824[r3*4], r8
loc_3196C:                              # CODE XREF: ROM:00031954↑j
                lda     0x100A000, r3
                ldos    (r3), r4
                setbit  0xF, r4, r4
                stos    r4, (r3)
                ldos    8(r3), r4
                setbit  0xE, r4, r4
                stos    r4, 8(r3)
                ldob    0x5003A7, r7
                cmpobl  0xF, r7, loc_317B4
                addo    1, r7, r15
                stob    r15, 0x5003A7
                lda     0x1008000, r5
                shlo    5, 0x13, r13
                addi    r13, r5, r6
                shlo    4, 5, r4
loc_319B8:                              # CODE XREF: ROM:000319CC↓j
                stis    r8, (r5)
                stis    r8, (r6)
                addo    2, r5, r5
                addo    2, r6, r6
                cmpdeco 1, r4, r4
                bl      loc_319B8
                ret
# =============== S U B R O U T I N E =======================================
fa_effect:                              # DATA XREF: ADV_MOVIE_INT+194↑o
                call    efc_ram_init
                lda     efc_cont, r15
                st      r15, 0xC(g13)
                ret
# End of function fa_effect
# =============== S U B R O U T I N E =======================================
change_unit_init:                       # CODE XREF: efc_ram_init↓p
                ld      fa_rob0, r3     # Label from Fighting Vipers source
                mov     0, r4
                stos    r4, 0x1F48(r3)  # P1_PARTS_ADD+0x1F48 set to 0
                stos    r4, 0x1F60(r3)
                stos    r4, 0x1F62(r3)
                stos    r4, 0x1F64(r3)
                stos    r4, 0x1F66(r3)
                stos    r4, 0x1F68(r3)
                stos    r4, 0x1F6A(r3)
                stos    r4, 0x1F6C(r3)
                stos    r4, 0x1F6E(r3)
                st      r4, 0x1F4C(r3)
                st      r4, 0x1F50(r3)
                st      r4, 0x1F54(r3)
                st      r4, 0x1F58(r3)
                ld      fa_rob1, r3
                st      r4, 0x1F4C(r3)
                st      r4, 0x1F50(r3)
                st      r4, 0x1F54(r3)
                st      r4, 0x1F58(r3)
                stos    r4, 0x1F48(r3)
                stos    r4, 0x1F60(r3)
                stos    r4, 0x1F62(r3)
                stos    r4, 0x1F64(r3)
                stos    r4, 0x1F66(r3)
                stos    r4, 0x1F68(r3)
                stos    r4, 0x1F6A(r3)
                stos    r4, 0x1F6C(r3)
                stos    r4, 0x1F6E(r3)
                ret
# End of function change_unit_init
# =============== S U B R O U T I N E =======================================
sub_31AD0:                              # CODE XREF: ROUND_DSP+55C↑p
                ld      mod_fa_effect, r3
                mov     0, r4
                mov     1, r8
                lda     0x88(r3), r9
loc_31AE4:                              # CODE XREF: sub_31AD0+54↓j
                ld      0x24(r9), r15
                bbc     0xB, r15, loc_31B14
                ld      0x38(r9), r5
                lda     0xEF, r6
                st      r6, 0x50A36C
                cmpoble r5, r6, loc_31B14
                lda     0xC1200000, r10
                ld      4(r9), r11
                cmpr    r10, r11
                bg      loc_31B14
loc_31B14:                              # CODE XREF: sub_31AD0+18↑j
                st      r4, 0x24(r9)
                stos    r4, 0x22(r9)
                lda     0x48(r9), r9
                cmpdeco 1, r8, r8
                bl      loc_31AE4
                b       loc_31B54
# End of function sub_31AD0
# =============== S U B R O U T I N E =======================================
efc_ram_init:                           # CODE XREF: ROM:00008B28↑p
                call    change_unit_init # Label from Fighting Vipers source
                ld      mod_fa_effect, r3
                mov     0, r4
                mov     0x12, r8
                lda     0x88(r3), r9
loc_31B44:                              # CODE XREF: efc_ram_init+24↓j
                st      r4, (r9)
                lda     4(r9), r9
                cmpdeco 1, r8, r8
                bl      loc_31B44
loc_31B54:                              # CODE XREF: sub_31AD0+58↑j
                movq    0, r4
                stq     r4, 0x78(r3)
                movt    0, r4
                mov     0x10, r8
                lda     0x310(r3), r9
loc_31B68:                              # CODE XREF: efc_ram_init+5C↓j
                stt     r4, 0x0(r9)
                stt     r4, 0xC(r9)
                stos    r4, 0x18(r9)
                stos    r4, 0x1A(r9)
                st      r4, 0x1C(r9)
                st      r4, 0x20(r9)
                lda     0x24(r9), r9
                cmpdeco 1, r8, r8
                bl      loc_31B68
                movq    0, r4
                mov     6, r8
                lda     0x790(r3), r9
loc_31B98:                              # CODE XREF: efc_ram_init+80↓j
                stt     r4, 0x0(r9)
                stos    r4, 0x18(r9)
                stos    r4, 0x1A(r9)
                lda     0x20(r9), r9
                cmpdeco 1, r8, r8
                bl      loc_31B98
                movt    0, r4
                mov     4, r8
                lda     0x8B0(r3), r9
loc_31BBC:                              # CODE XREF: efc_ram_init+9C↓j
                stt     r4, 0x0(r9)
                lda     0xC(r9), r9
                cmpdeco 1, r8, r8
                bl      loc_31BBC
                stt     r4, 0x8E0(r3)
                stt     r4, 0x8EC(r3)
                stt     r4, 0x8F8(r3)
                stt     r4, 0x904(r3)
                st      r4, 0x910(r3)
                stt     r4, 0x914(r3)
                ld      fa_rob0, g7
                ldob    p1_wins, r4
                stob    r4, 0x1F5C(g7)
                ld      fa_rob1, g7
                ldob    p2_wins, r4
                stob    r4, 0x1F5C(g7)
                ret
# End of function efc_ram_init
# =============== S U B R O U T I N E =======================================
efc_rob_poly_para_init:                 # CODE XREF: ADV_MOVIE_INT+1A0↑p
                ld      fa_rob0, r3     # Label from Fighting Vipers source
                mov     0, r15
                stis    r15, 0x70A(r3)
                movq    0, r4
                stq     r4, 0x1F00(r3)
                stq     r4, 0x1F10(r3)
                stq     r4, 0x1F20(r3)
                stq     r4, 0x1F30(r3)
                stl     r4, 0x1F74(r3)
                stl     r4, 0x1F7C(r3)
                st      r4, 0x7F0(r3)
                ld      fa_rob1, r3
                mov     0, r15
                stis    r15, 0x70A(r3)
                stq     r4, 0x1F00(r3)
                stq     r4, 0x1F10(r3)
                stq     r4, 0x1F20(r3)
                stq     r4, 0x1F30(r3)
                stl     r4, 0x1F74(r3)
                stl     r4, 0x1F7C(r3)
                st      r4, 0x7F0(r3)
                ret
# End of function efc_rob_poly_para_init
# =============== S U B R O U T I N E =======================================
efc_cont:                               # DATA XREF: fa_effect+4↑o
                ld      debug_flag, r15 # Label from official source
                bbs     5, r15, loc_31D7C
                ld      0x44(g13), r14
                addi    1, r14, r15
                st      r15, 0x44(g13)
                ld      0x78(g13), r14
                cmpobe  0, r14, loc_31CD4
                ld      0x78(g13), r14
                subi    1, r14, r15
                st      r15, 0x78(g13)
loc_31CD4:                              # CODE XREF: efc_cont+1C↑j
                call    sub_2CB14
                call    efc_parts_cont
                call    sub_32A24
                call    sub_33A5C
                call    uk_if_fang
                call    sub_327E8
                ld      fa_rob0, g7
                ldis    0x1F60(g7), r15
                stis    r15, 0x1F68(g7)
                ldis    0x1F62(g7), r15
                stis    r15, 0x1F6A(g7)
                ldis    0x1F64(g7), r15
                stis    r15, 0x1F6C(g7)
                ldis    0x1F66(g7), r15
                stis    r15, 0x1F6E(g7)
                ld      fa_rob1, g7
                ldis    0x1F60(g7), r15
                stis    r15, 0x1F68(g7)
                ldis    0x1F62(g7), r15
                stis    r15, 0x1F6A(g7)
                ldis    0x1F64(g7), r15
                stis    r15, 0x1F6C(g7)
                ldis    0x1F66(g7), r15
                stis    r15, 0x1F6E(g7)
loc_31D7C:                              # CODE XREF: efc_cont+8↑j
                ret
# End of function efc_cont
# =============== S U B R O U T I N E =======================================
efc_parts_cont:                         # CODE XREF: efc_cont+30↑p
                lda     0x88(g13), g2   # Label from official source
                mov     1, g1
loc_31D88:                              # CODE XREF: efc_parts_cont+30↓j
                ldos    0x22(g2), r3
                cmpobe  0, r3, loc_31DA8
                ld      0x38(g2), r14
                addi    1, r14, r15
                st      r15, 0x38(g2)
                bal     epc_oidasi      # "Connection"
                bal     epc_parts_pos_calc
                bal     epc_parts_ang_calc
loc_31DA8:                              # CODE XREF: efc_parts_cont+C↑j
                lda     0x48(g2), g2
                cmpdeco 1, g1, g1
                bl      loc_31D88
                ret
# End of function efc_parts_cont
# =============== S U B R O U T I N E =======================================
# "Connection"
epc_oidasi:                             # CODE XREF: efc_parts_cont+1C↑p
                ld      fa_rob0, r3     # Label from official source
                ld      fa_rob1, r4
                ldob    0x7D2(r3), r14  # P1_PARTS+0x7D2
                bbs     0, r14, loc_31E54
                ldob    0x7D2(r4), r14  # P1_PARTS+0x7D2
                bbs     0, r14, loc_31E54
                ldt     0x0(g2), r8
                ld      0x18(g2), r11
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x3B807777, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                ld      (g11)[g12*1], r12
                ld      (g11)[g12*1], r15
                ld      (g11)[g12*1], r15
                ld      (g11)[g12*1], r15
                ld      (g11)[g12*1], r15
                ld      (g11)[g12*1], r15
                ld      (g11)[g12*1], r15
                ld      (g11)[g12*1], r15
                lda     0x3E23D70A, r13
                mulr    r13, r11, r11
                mulr    r13, r12, r12
                addr    r8, r11, r8
                addr    r10, r12, r10
                stt     r8, 0x0(g2)
loc_31E54:                              # CODE XREF: epc_oidasi+14↑j
                bx      (g14)           # Execute P1_PARTS+0x7D2 or P2_PARTS+0x7D2
# End of function epc_oidasi
# =============== S U B R O U T I N E =======================================
epc_parts_pos_calc:                     # CODE XREF: efc_parts_cont+20↑p
                ldt     0xC(g2), r4     # Label from official source
                ldt     0x0(g2), r8
                ld      0x24(g2), r15
                bbc     7, r15, loc_31EA0
                ld      0x24(g2), r15
                bbc     3, r15, loc_31F5C
                ld      0x914(g13), r3
                cmpobne 0, r3, loc_31F5C
                stt     r8, 0x50A314
                ld      0x18(g2), r15
                st      r15, 0x50A364
                call    sub_3464C
                ld      0x50A368, r15
                cmpobe  0, r15, loc_32034
                b       loc_31F5C
# ---------------------------------------------------------------------------
loc_31EA0:                              # CODE XREF: epc_parts_pos_calc+C↑j
                ld      0x50A000, r12
                subr    r12, r5, r5
                lda     0x3F7AE148, r12
                mulr    r4, r12, r4
                mulr    r6, r12, r6
                addr    r4, r8, r8
                addr    r5, r9, r9
                addr    r6, r10, r10
                ld      0x40(g2), r12
                ld      0x24(g2), r15
                bbc     0x13, r15, loc_31EE0
                ld      stage_soko, r15
                addr    r15, r12, r12
loc_31EE0:                              # CODE XREF: epc_parts_pos_calc+78↑j
                cmpr    r9, r12
                bg      loc_31F5C
                ld      0x3C(g2), r13
                addo    1, r13, r13
                st      r13, 0x3C(g2)
                cmpobl  2, r13, loc_31EFC
                call    sub_3FA78
loc_31EFC:                              # CODE XREF: epc_parts_pos_calc+9C↑j
                subr    r5, r9, r9
                lda     0x3E4CCCCD, r12
                ld      0x34(g2), r14
                lda     0x3E4CCCCD, r15
                divr    r14, r15, r14
                addr    r14, r12, r12
                mulr    r12, r5, r5
                notbit  0x1F, r5, r5
                clrbit  0x1F, r5, r13
                lda     0x3A83126F, r14
                cmpr    r13, r14
                bg      loc_31F4C
                ld      0x24(g2), r15
                setbit  7, r15, r15
                st      r15, 0x24(g2)
                movt    0, r4
                b       loc_31F5C
# ---------------------------------------------------------------------------
loc_31F4C:                              # CODE XREF: epc_parts_pos_calc+DC↑j
                lda     0x3F666666, r12
                mulr    r12, r4, r4
                mulr    r12, r6, r6
loc_31F5C:                              # CODE XREF: epc_parts_pos_calc+14↑j
                lda     0xBE99999A, r3
                lda     0x80000000, r7
                ld      stage_x, r12
                lda     0x3F000000, r15
                addr    r15, r12, r14
                ld      stage_x, r12
                ld      0x18(g2), r13
                subr    r13, r12, r12
                ld      cage_height, r15
                cmpr    r15, r9
                bl      loc_32040
                clrbit  0x1F, r8, r13
                cmpr    r13, r14
                bg      loc_31FDC
                ld      finish_wall_flag, g9
                bbc     0x1F, r8, loc_31FC0
                bbs     1, g9, loc_31FE8
                b       loc_31FC4
# ---------------------------------------------------------------------------
loc_31FC0:                              # CODE XREF: epc_parts_pos_calc+15C↑j
                bbs     3, g9, loc_31FE8
loc_31FC4:                              # CODE XREF: epc_parts_pos_calc+164↑j
                cmpr    r13, r12
                ble     loc_31FE8
                mulr    r3, r4, r4
                and     r7, r8, r15
                or      r15, r12, r8
                b       loc_31FE8
# ---------------------------------------------------------------------------
loc_31FDC:                              # CODE XREF: epc_parts_pos_calc+150↑j
                ld      0x24(g2), r15
                setbit  0x13, r15, r15
                st      r15, 0x24(g2)
loc_31FE8:                              # CODE XREF: epc_parts_pos_calc+160↑j
                clrbit  0x1F, r10, r13
                cmpr    r13, r14
                bg      loc_32024
                ld      finish_wall_flag, g9
                bbc     0x1F, r8, loc_32008
                bbs     2, g9, loc_32040
                b       loc_3200C
# ---------------------------------------------------------------------------
loc_32008:                              # CODE XREF: epc_parts_pos_calc+1A4↑j
                bbs     0, g9, loc_32040
loc_3200C:                              # CODE XREF: epc_parts_pos_calc+1AC↑j
                cmpr    r13, r12
                ble     loc_32040
                mulr    r3, r6, r6
                and     r7, r10, r15
                or      r15, r12, r10
                b       loc_32040
# ---------------------------------------------------------------------------
loc_32024:                              # CODE XREF: epc_parts_pos_calc+198↑j
                ld      0x24(g2), r15
                setbit  0x13, r15, r15
                st      r15, 0x24(g2)
                b       loc_32040
# ---------------------------------------------------------------------------
loc_32034:                              # CODE XREF: epc_parts_pos_calc+40↑j
                mov     0, r11
                stos    r11, 0x22(g2)
                st      r11, 0x24(g2)
loc_32040:                              # CODE XREF: epc_parts_pos_calc+144↑j
                stt     r4, 0xC(g2)
                stt     r8, 0x0(g2)
                bx      (g14)
# End of function epc_parts_pos_calc
# =============== S U B R O U T I N E =======================================
epc_parts_ang_calc:                     # CODE XREF: efc_parts_cont+24↑p
                ld      0x24(g2), r12   # Label from official source
                ldis    0x1C(g2), r4
                ldis    0x1E(g2), r5
                ldis    0x20(g2), r6
                ldis    0x2E(g2), r7
                ld      0x3C(g2), r13
                shlo    0xC, 1, r11
                bbs     7, r12, loc_32080
                cmpobe  0, r13, loc_32124
                cmpobe  1, r13, loc_32124
                cmpobe  2, r13, loc_32124
                cmpobe  3, r13, loc_32124
                shlo    0xB, 1, r11
loc_32080:                              # CODE XREF: epc_parts_ang_calc+1C↑j
                subi    r11, 0, r14
                ldis    0x28(g2), r8
                ldis    0x2A(g2), r9
                ldis    0x2C(g2), r10
                cmpobe  0, r8, loc_320B8
                cmpibe  r8, r4, loc_320B8
                subi    r8, r4, r13
                cmpibl  r11, r13, loc_320AC
                cmpibg  r14, r13, loc_320B4
                mov     r8, r4
                b       loc_320B8
# ---------------------------------------------------------------------------
loc_320AC:                              # CODE XREF: epc_parts_ang_calc+50↑j
                subi    r11, r4, r4
                b       loc_320B8
# ---------------------------------------------------------------------------
loc_320B4:                              # CODE XREF: epc_parts_ang_calc+54↑j
                addi    r11, r4, r4
loc_320B8:                              # CODE XREF: epc_parts_ang_calc+44↑j
                cmpobe  0, r9, loc_320F8
                cmpibe  r9, r5, loc_320F8
                subi    r9, r5, r13
                cmpibl  r11, r13, loc_320D4
                cmpibg  r14, r13, loc_320E8
                mov     r9, r5
                b       loc_320F8
# ---------------------------------------------------------------------------
loc_320D4:                              # CODE XREF: epc_parts_ang_calc+78↑j
                ld      0x3C(g2), r14
                addo    1, r14, r14
                divi    r14, r11, r11
                subi    r11, r5, r5
                b       loc_320F8
# ---------------------------------------------------------------------------
loc_320E8:                              # CODE XREF: epc_parts_ang_calc+7C↑j
                ld      0x3C(g2), r14
                addo    1, r14, r14
                divi    r14, r11, r11
                addi    r11, r5, r5
loc_320F8:                              # CODE XREF: epc_parts_ang_calc:loc_320B8↑j
                cmpobe  0, r10, loc_32138
                cmpibe  r10, r6, loc_32138
                subi    r10, r6, r13
loc_32104:                              # DATA XREF: MAIN_DATA:02481B18↓o
                cmpibl  r11, r13, loc_32114
                cmpibg  r14, r13, loc_3211C
                mov     r10, r6
                b       loc_32138
# ---------------------------------------------------------------------------
loc_32114:                              # CODE XREF: epc_parts_ang_calc:loc_32104↑j
                subi    r11, r6, r6
                b       loc_32138
# ---------------------------------------------------------------------------
loc_3211C:                              # CODE XREF: epc_parts_ang_calc+BC↑j
                addi    r11, r6, r6
                b       loc_32138
# ---------------------------------------------------------------------------
loc_32124:                              # CODE XREF: epc_parts_ang_calc+20↑j
                bbc     0xC, r12, loc_3212C
                addi    r7, r4, r4
loc_3212C:                              # CODE XREF: epc_parts_ang_calc:loc_32124↑j
                addi    r7, r5, r5
                bbc     0xE, r12, loc_32138
                addi    r7, r6, r6
loc_32138:                              # CODE XREF: epc_parts_ang_calc:loc_320F8↑j
                stis    r4, 0x1C(g2)
                stis    r5, 0x1E(g2)
                stis    r6, 0x20(g2)
                bx      (g14)
# End of function epc_parts_ang_calc
# =============== S U B R O U T I N E =======================================
efc_crush_parts_put_cont:               # CODE XREF: damage_unit+2C8↑p
                ld      mod_fa_effect, g9 # Label from official source
                ldob    0x91E(g9), g1
                ldob    0x91F(g9), g4
                call    efc_crushpts_speed_cont
                call    efc_crush_parts_set
                ret
# End of function efc_crush_parts_put_cont
# =============== S U B R O U T I N E =======================================
efc_crush_parts_set:                    # CODE XREF: efc_crush_parts_put_cont+14↑p
                ldos    0x920(g9), g6   # Label from official source
                ld      0x918(g9), g0
                ld      0x1C(g0), r3
                bbc     2, r3, loc_32188
                ld      0x1F40(g8), r14
                setbit  g1, r14, r15
loc_32180:                              # DATA XREF: zanzou_control↓o
                st      r15, 0x1F40(g8)
loc_32188:                              # CODE XREF: efc_crush_parts_set+C↑j
                mulo    0xC, g1, r12
                ldt     0x1F4(g8)[r12*1], r4
                lda     0x8B0(g9), g5
loc_32198:                              # CODE XREF: efc_crush_parts_set+138↓j
                call    delete_parts_weight
                ld      0x1C(g0), r3
                ldob    4(g8), r13
                or      r13, r3, r3
                bbc     3, r3, loc_321C4
                bbc     1, r3, loc_321C0
                ld      0x914(g9), r15
                cmpobe  1, r15, loc_321C4
                call    efc_remain_parts
                cmpobg  2, g3, loc_321C4
loc_321C0:                              # CODE XREF: efc_crush_parts_set+48↑j
                b       loc_322A0
# ---------------------------------------------------------------------------
loc_321C4:                              # CODE XREF: efc_crush_parts_set+44↑j
                mov     1, r12
                lda     0x88(g9), r14
loc_321CC:                              # CODE XREF: efc_crush_parts_set+78↓j
                ld      0x24(r14), r13
                cmpobe  0, r13, loc_321E4
                lda     0x48(r14), r14
                cmpdeco 1, r12, r12
                bl      loc_321CC
                b       loc_322A0
# ---------------------------------------------------------------------------
loc_321E4:                              # CODE XREF: efc_crush_parts_set+6C↑j
                setbit  0xB, r3, r3
                st      r3, 0x24(r14)
                stt     r4, 0x0(r14)
                ldos    6(g0), r7
                stos    r7, 0x22(r14)
                ldt     0x0(g5), r8
                ld      0x18(g0), r11
                stq     r8, 0xC(r14)
                stos    g1, 0x32(r14)
                stos    g4, 0x30(r14)
                ldos    0xE(g0), r13
                stos    r13, 0x28(r14)
                ldos    0x26(g8), r7
                ldos    0x10(g0), r13
                stos    r13, 0x2A(r14)
                ldos    0x12(g0), r13
                stos    r13, 0x2C(r14)
                ldos    8(g0), r13
                stos    r13, 0x1C(r14)
                ldos    0x26(g8), r7
                ldos    0xA(g0), r13
                addo    r7, r13, r13
                stos    r13, 0x1E(r14)
                ld      0xC(g0), r13
                stos    r13, 0x20(r14)
                ld      0x14(g0), r13
                st      r13, 0x34(r14)
                mov     r13, r15
                ld      0x20(g0), r13
                st      r13, 0x40(r14)
                ld      0x24(g0), r13
                st      r13, 0x44(r14)
                mov     0, r13
                st      r13, 0x38(r14)
                st      r13, 0x3C(r14)
                addo    r4, r15, r15
                addo    r5, r15, r15
                addo    r6, r15, r15
                shlo    0x1C, r15, r15
                shro    0x1C, r15, r15
                ldos    word_CE340[r15*2], r7
                stos    r7, 0x2E(r14)
                subi    1, g6, g6
                lda     0xC(g5), g5
                lda     0x28(g0), g0
                cmpibl  0, g6, loc_32198
loc_322A0:                              # CODE XREF: efc_crush_parts_set:loc_321C0↑j
                ldob    also_mode, r3
                ldob    also_sub_mode, r4
                lda     start_ip_add, r15
                cmpobe  r15, r3, loc_323E0
                lda     start_ip_add+1, r15
                cmpobe  r15, r3, loc_323E0
                lda     check_word1+1, r15
                cmpobe  r15, r3, loc_32350
                lda     mode9, r15
                cmpobne r15, r3, loc_322FC
                lda     check_word1+1, r5
                cmpobe  r4, r5, loc_323E0
                lda     check_word2+3, r5
                cmpobe  r4, r5, loc_323E0
                b       loc_32350
# ---------------------------------------------------------------------------
loc_322FC:                              # CODE XREF: efc_crush_parts_set+178↑j
                lda     displacement3, r15
                cmpobne r15, r3, loc_323E0
                lda     prcb+1, r5
                cmpobe  r4, r5, loc_32350
                lda     mode10, r5
                cmpobe  r4, r5, loc_32350
                lda     mode9, r5
                cmpobe  r4, r5, loc_32350
                lda     start_ip_add+3, r5
                cmpobe  r4, r5, loc_32350
                lda     start_ip_add+2, r5
                cmpobe  r4, r5, loc_32350
                lda     check_word1, r5
                cmpobne r4, r5, loc_323E0
loc_32350:                              # CODE XREF: efc_crush_parts_set+16C↑j
                ld      0x918(g9), g0
                ldis    4(g0), r15
                st      r15, 0x40(g8)[g1*4]
                ldos    0x1F60(g8), r14
                bbs     g1, r14, loc_32384
                ldos    0x1F60(g8), r14
                setbit  g1, r14, r15
                stos    r15, 0x1F60(g8)
                b       loc_323E0
# ---------------------------------------------------------------------------
loc_32384:                              # CODE XREF: efc_crush_parts_set+204↑j
                ldos    0x1F62(g8), r14
                bbs     g1, r14, loc_323A8
                ldos    0x1F62(g8), r14
                setbit  g1, r14, r15
                stos    r15, 0x1F62(g8)
                b       loc_323E0
# ---------------------------------------------------------------------------
loc_323A8:                              # CODE XREF: efc_crush_parts_set+228↑j
                ldos    0x1F64(g8), r14
                bbs     g1, r14, loc_323CC
                ldos    0x1F64(g8), r14
                setbit  g1, r14, r15
                stos    r15, 0x1F64(g8)
                b       loc_323E0
# ---------------------------------------------------------------------------
loc_323CC:                              # CODE XREF: efc_crush_parts_set+24C↑j
                ldos    0x1F66(g8), r14
                setbit  g1, r14, r15
                stos    r15, 0x1F66(g8)
loc_323E0:                              # CODE XREF: efc_crush_parts_set+154↑j
                ret
# End of function efc_crush_parts_set
# =============== S U B R O U T I N E =======================================
efc_crushpts_speed_cont:                # CODE XREF: efc_crush_parts_put_cont+10↑p
                ldos    0x920(g9), g6   # Label from official source
                cmpobl  4, g6, loc_32534
                ld      0x918(g9), g0
                ldob    0x83D(g7), r6
                lda     0x46, r14
                cmpobl  r6, r14, loc_32400
                mov     r14, r6
loc_32400:                              # CODE XREF: efc_crushpts_speed_cont+14↑j
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                lda     0x42700000, r13
                divr    r13, r6, r6
                ldob    0x843(g7), r14
                ld      flt_34A4C[r14*4], r14
                mulr    r14, r6, r6
                lda     0x8B0(g9), r13
                mov     0, g5
loc_32438:                              # CODE XREF: efc_crushpts_speed_cont+14C↓j
                lda     0x3F800000, r10
                ld      0x914(g9), r3
                cmpobne 1, r3, loc_32450
                lda     0x3FC00000, r10
loc_32450:                              # CODE XREF: efc_crushpts_speed_cont+60↑j
                ldob    0x843(g7), r9
                ld      flt_34A64[r9*4], r9
                ldob    0x83D(g7), r3
                lda     0x46, r14
                cmpobl  r3, r14, loc_3246C
                mov     r14, r3
loc_3246C:                              # CODE XREF: efc_crushpts_speed_cont+80↑j
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x42700000, r15
                divr    r15, r3, r3
                mulr    r9, r3, r3
                lda     0x3D75C28F, r9
                addr    r3, r9, r9
                mulr    r10, r9, r9
                ldis    0x26(g7), r5
                ldis    0x82A(g7), r12
                addo    r12, r5, r10
                addo    r10, g1, r10
                ldos    6(g0), r11
                addo    r11, r10, r10
                ld      0x14(g0), r11
                addo    r11, r10, r10
                mov     0xF, r11
                and     r11, r10, r10
                ldis    word_34A7C[r10*2], r11
                subi    r11, r12, r12
                addi    r5, r12, r5
                ld      word_34A9C[r10*4], r11
                addr    r11, r6, r6
                addr    r11, r9, r9
                addr    r11, r9, r9
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                notbit  0x1F, r8, r8
                lda     0x12802525, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r10
                stt     r8, 0x0(r13)
                addi    1, g5, g5
                lda     0x28(g0), g0
                lda     0xC(r13), r13
                cmpobg  g6, g5, loc_32438
loc_32534:                              # CODE XREF: efc_crushpts_speed_cont+4↑j
                ret
# End of function efc_crushpts_speed_cont
# =============== S U B R O U T I N E =======================================
delete_parts_weight:                    # CODE XREF: efc_crush_parts_set:loc_32198↑p
                ldob    also_mode, r3   # Label from Fighting Vipers source
                lda     start_ip_add, r15
                cmpobe  r15, r3, loc_32618
                lda     start_ip_add+1, r15
                cmpobe  r15, r3, loc_32618
                lda     check_word1+1, r15
                cmpobe  r15, r3, loc_325FC
                lda     mode9, r15
                cmpobne r15, r3, loc_325AC
                ldob    also_sub_mode, r3
                lda     check_word1+1, r4
                cmpobe  r3, r4, loc_32618
                lda     check_word1, r4
                cmpobe  r3, r4, loc_32618
                lda     check_word2+3, r4
                cmpobe  r3, r4, loc_32618
                lda     check_word2+2, r4
                cmpobne r3, r4, loc_325FC
                b       loc_32618
# ---------------------------------------------------------------------------
loc_325AC:                              # CODE XREF: delete_parts_weight+34↑j
                lda     displacement3, r15
                cmpobne r15, r3, loc_32618
                ldob    also_sub_mode, r4
                lda     mode10, r5
                cmpobe  r4, r5, loc_325FC
                lda     mode9, r5
                cmpobe  r4, r5, loc_325FC
                lda     start_ip_add+3, r5
                cmpobe  r4, r5, loc_325FC
                lda     start_ip_add+2, r5
                cmpobe  r4, r5, loc_325FC
                lda     check_word1, r5
                cmpobne r4, r5, loc_32618
loc_325FC:                              # CODE XREF: delete_parts_weight+28↑j
                ld      0x14(g0), r3
                ld      0x7D8(g8), r4
                subr    r3, r4, r4
                st      r4, 0x7D8(g8)
                ld      0x7DC(g8), r5
                addr    r4, r5, r5
                st      r5, 0x5D8(g8)
loc_32618:                              # CODE XREF: delete_parts_weight+10↑j
                ret
# End of function delete_parts_weight
# =============== S U B R O U T I N E =======================================
sub_3261C:                              # CODE XREF: action_init+308↑p
                ldob    0x1B0(g7), r3
                ld      ptr_CE1CC[r3*4], r4 # Always word_CE1CC, which is always 0
                mov     0x10, r10
                mov     0, r5
                mov     0, r6
                mov     0, r7
loc_32638:                              # CODE XREF: sub_3261C+78↓j
                ldob    [r4], r11
                ldob    1[r4], r12
                addo    r12, r11, r11
                ldob    2[r4], r12
                addo    r12, r11, r11
                ldob    3[r4], r12
                addo    r12, r11, r11
                cmpobe  0, r11, loc_32688
                ld      4(r4), r9
                cmpobe  0, r9, loc_32688
                setbit  r7, r6, r6
loc_32674:                              # CODE XREF: sub_3261C+68↓j
                ld      0x14(r9), r14
                addr    r14, r5, r5
                lda     0x28(r9), r9
                cmpdeco 1, r11, r11
                bl      loc_32674
loc_32688:                              # CODE XREF: sub_3261C+48↑j
                lda     8(r4), r4
                addo    1, r7, r7
                cmpdeco 1, r10, r10
                bl      loc_32638
                mov     r5, g0
                mov     r6, g1
                ret
# End of function sub_3261C
# =============== S U B R O U T I N E =======================================
efc_remain_parts:                       # CODE XREF: efc_crush_parts_set+54↑p
                mov     0, g3           # Label from Fighting Vipers source
                ld      mod_fa_effect, r10
                lda     0x88(r10), r10
                mov     1, r9
loc_326B8:                              # CODE XREF: efc_remain_parts+2C↓j
                ld      0x24(r10), r3
                bbc     0xB, r3, loc_326C8
                bbc     3, r3, loc_326C8
                addo    1, g3, g3
loc_326C8:                              # CODE XREF: efc_remain_parts+18↑j
                lda     0x48(r10), r10
                cmpdeco 1, r9, r9
                bl      loc_326B8
                ret
# End of function efc_remain_parts
# =============== S U B R O U T I N E =======================================
sub_326D8:                              # CODE XREF: sub_327E8+30↓p
                ld      fa_rob0, g7
                bbc     7, g0, loc_326EC
                ld      fa_rob1, g7
loc_326EC:                              # CODE XREF: sub_326D8+8↑j
                ldob    4(g7), r14
                lda     0x90FA00, r10
                cmpobe  0, r14, loc_32704
                lda     0x91FA00, r10
loc_32704:                              # CODE XREF: sub_326D8+20↑j
                mov     r10, r7
                mov     0, r9
                subo    1, 0, r11
                subo    1, 0, r12
                mov     0, r5
                mov     0, r6
loc_3271C:                              # CODE XREF: sub_326D8+7C↓j
                ld      (r10), r3
                ld      8(r10), r4
                clrbit  0x1F, r3, r3
                clrbit  0x1F, r4, r4
                cmpr    r3, r5
                bl      loc_3273C
                mov     r3, r5
                mov     r9, r11
loc_3273C:                              # CODE XREF: sub_326D8+58↑j
                cmpr    r4, r6
                bl      loc_3274C
                mov     r4, r6
                mov     r9, r12
loc_3274C:                              # CODE XREF: sub_326D8+68↑j
                lda     0xC(r10), r10
                addo    1, r9, r9
                cmpobne 0x1E, r9, loc_3271C
                cmpr    r5, r6
                bl      loc_32784
                mulo    0xC, r11, r11
                ldt     (r7)[r11*1], r4
                ld      stage_x, r7
                lda     0x80000000, r13
                and     r13, r4, r4
                or      r4, r7, r4
                b       loc_327A4
# ---------------------------------------------------------------------------
loc_32784:                              # CODE XREF: sub_326D8+84↑j
                mulo    0xC, r12, r12
                ldt     (r7)[r12*1], r4
                ld      stage_x, r7
                lda     0x80000000, r13
                and     r13, r6, r6
                or      r6, r7, r6
loc_327A4:                              # CODE XREF: sub_326D8+A8↑j
                ld      cage_height, r14
                cmpr    r14, r5
                bg      loc_327B8
                mov     r14, r5
loc_327B8:                              # CODE XREF: sub_326D8+D8↑j
                stt     r4, 0x50E000
                b       loc_327E4
# ---------------------------------------------------------------------------
                lda     0x447A0000, r4
                st      r4, 0x50E000
                st      r4, 0x50E004
                st      r4, 0x50E008
loc_327E4:                              # CODE XREF: sub_326D8+E8↑j
                ret
# End of function sub_326D8
# =============== S U B R O U T I N E =======================================
sub_327E8:                              # CODE XREF: efc_cont+40↑p
                ld      mod_fa_coli, g5
                ld      mod_fa_effect, g6
                ld      0x50A378, g0
                st      g0, 0x50A37C
                cmpobe  0, g0, loc_32914
                mov     0, r15
                st      r15, 0x50A378
                call    sub_326D8
                ldt     0x50E000, r4
                lda     0x790(g6), r12
                lda     spark_ka_pow, r10
                stt     r4, 0x0(r12)
                ld      0x0(r10), r13
                stos    r13, 0x18(r12)
                ld      4(r10), r13
                st      r13, 0xC(r12)
                st      r13, 0x10(r12)
                st      r13, 0x20(r12)
                lda     8(r10), r10
                st      r10, 0x1C(r12)
                mov     0, r15
                stis    r15, 0x1A(r12)
                lda     0x20(r12), r12
                lda     no_effect_float_7, r10
                stt     r4, 0x0(r12)
                ld      0x0(r10), r13
                stos    r13, 0x18(r12)
                ld      4(r10), r13
                st      r13, 0xC(r12)
                st      r13, 0x10(r12)
                st      r13, 0x20(r12)
                lda     8(r10), r10
                st      r10, 0x1C(r12)
                mov     0, r15
                stis    r15, 0x1A(r12)
                lda     0x20(r12), r12
                lda     no_effect_float_1, r10
                stt     r4, 0x0(r12)
                ld      0x0(r10), r13
                stos    r13, 0x18(r12)
                ld      4(r10), r13
                lda     0x3E4CCCCD, r14
                st      r14, 0xC(r12)
                st      r13, 0x10(r12)
                st      r14, 0x20(r12)
                lda     8(r10), r10
                st      r10, 0x1C(r12)
                mov     0, r15
                stis    r15, 0x1A(r12)
                lda     0x20(r12), r12
                lda     no_effect_float_7_0, r10
                stt     r4, 0x0(r12)
                ld      0x0(r10), r13
                stos    r13, 0x18(r12)
                ld      4(r10), r13
                lda     0x3E4CCCCD, r14
                st      r13, 0xC(r12)
                st      r14, 0x10(r12)
                st      r14, 0x20(r12)
                lda     8(r10), r10
                st      r10, 0x1C(r12)
                mov     0, r15
                stis    r15, 0x1A(r12)
loc_32914:                              # CODE XREF: sub_327E8+20↑j
                lda     0x790(g6), r12
                mov     6, r11
loc_3291C:                              # CODE XREF: sub_327E8+158↓j
                ldos    0x18(r12), r3
                cmpobe  0, r3, loc_32938
                subo    1, r3, r3
                stos    r3, 0x18(r12)
                ldos    0x1A(r12), r3
                addo    1, r3, r3
                stos    r3, 0x1A(r12)
loc_32938:                              # CODE XREF: sub_327E8+138↑j
                lda     0x20(r12), r12
                cmpdeco 1, r11, r11
                bl      loc_3291C
                ret
# End of function sub_327E8
# =============== S U B R O U T I N E =======================================
sub_32948:                              # CODE XREF: ACT_RC_DOWN+9C↑p
                ldt     0x1F4(g7), r4
                lda     0x3C23D70A, r5
                stt     r4, 0x50A3FC
                mov     6, r3
                stos    r3, draw_particle # Value between 0 - 10
                ldob    0x50A416, r14
                setbit  2, r14, r15
                stob    r15, 0x50A416
                call    sub_32A5C
                ret
# End of function sub_32948
# =============== S U B R O U T I N E =======================================
sub_32984:                              # CODE XREF: play_motion:loc_1C8F0↑p
                ldos    3(g4), r3
                ld      0x0(g7), r8
                bbc     6, r8, loc_3299C
                lda     byte_32A14, r7
                ldob    (r7)[r3], r3
loc_3299C:                              # CODE XREF: sub_32984+8↑j
                lda     0x1F4(g7), r7
                mulo    0xC, r3, r3
                ldt     (r7)[r3*1], r4
                ldos    5(g4), r7
                cmpobe  1, r7, loc_329D4
                cmpobne 6, r7, loc_329F0
                lda     0x3C23D70A, r5
                ldob    0x50A416, r14
                setbit  2, r14, r15
                stob    r15, 0x50A416
                b       loc_329F0
# ---------------------------------------------------------------------------
loc_329D4:                              # CODE XREF: sub_32984+28↑j
                lda     0x1F4(g8), r4
                ldt     (r4)[r3*1], r4
                ldob    0x50A416, r14
                setbit  0, r14, r15
                stob    r15, 0x50A416
loc_329F0:                              # CODE XREF: sub_32984+2C↑j
                stos    r7, draw_particle # Value between 0 - 10
                stt     r4, 0x50A3FC
                ldt     0x13(g4), r8
                stt     r8, 0x50A408
                call    sub_32A5C
                ret
# End of function sub_32984
# ---------------------------------------------------------------------------
byte_32A14:     .byte 0                 # DATA XREF: sub_32984+C↑o
                .byte 1
                .byte 2
                .byte 6
                .byte 7
                .byte 8
                .byte 3
                .byte 4
                .byte 5
                .byte 9
                .byte 13
                .byte 14
                .byte 15
                .byte 10
                .byte 11
                .byte 12
# =============== S U B R O U T I N E =======================================
sub_32A24:                              # CODE XREF: efc_cont+34↑p
                call    sub_32A5C
                call    sub_32B10
                ret
# End of function sub_32A24
# ---------------------------------------------------------------------------
collision_particle_effects:.long 0      # DATA XREF: sub_32A5C+44↓r
                .long knock_down_floor_anim
                .long three_frame_explosion
                .long three_frame_explosion
                .long three_frame_explosion
                .long _uk_particle_effect # No effect it seems
                .long knock_down_floor_anim_1
                .long two_frame_sparkles
                .long two_frame_sparkles_fad
                .long star_smack
                .long blue_sparkles
# =============== S U B R O U T I N E =======================================
sub_32A5C:                              # CODE XREF: sub_27E3C+C0↑p
                ld      mod_fa_effect, r12
                lda     0x310(r12), r12
                ldob    also_sub_mode, r15
                lda     check_word3+2, r14
                cmpobe  r14, r15, loc_32A88
                lda     check_word3+3, r14
                cmpobne r14, r15, loc_32A90
loc_32A88:                              # CODE XREF: sub_32A5C+1C↑j
                addo    0x1F, 1, r9
                b       loc_32A94
# ---------------------------------------------------------------------------
loc_32A90:                              # CODE XREF: sub_32A5C+28↑j
                mov     0x10, r9
loc_32A94:                              # CODE XREF: sub_32A5C+30↑j
                ldos    draw_particle, r7 # Value between 0 - 10
                cmpobe  0, r7, loc_32B0C # return
                ld      collision_particle_effects[r7*4], r7
                ldt     0x50A3FC, r4
loc_32AB0:                              # CODE XREF: sub_32A5C+90↓j
                ld      0x1C(r12), r8
                cmpobne 0, r8, loc_32AE4
                st      r7, 0x1C(r12)
                stt     r4, 0x0(r12)
                ld      (r7), r4
                st      r4, 0x20(r12)
                ldt     0x50A408, r4
                stt     r4, 0xC(r12)
                ldob    0x50A416, r4
                stob    r4, 0x19(r12)
                b       loc_32AF0
# ---------------------------------------------------------------------------
loc_32AE4:                              # CODE XREF: sub_32A5C+58↑j
                lda     0x24(r12), r12
                cmpdeco 1, r9, r9
                bl      loc_32AB0
loc_32AF0:                              # CODE XREF: sub_32A5C+84↑j
                movt    0, r4
                stt     r4, 0x50A3FC
                stt     r4, 0x50A408
                st      r4, draw_particle # Value between 0 - 10
loc_32B0C:                              # CODE XREF: sub_32A5C+40↑j
                ret                     # return
# End of function sub_32A5C
# =============== S U B R O U T I N E =======================================
sub_32B10:                              # CODE XREF: sub_32A24+4↑p
                ld      mod_fa_effect, g6
                lda     0x310(g6), r3
                mov     0x10, r7
loc_32B20:                              # CODE XREF: sub_32B10+84↓j
                ld      0x1C(r3), r11
                cmpobe  0, r11, loc_32B8C
                ldos    4(r11), r4
                ldob    0x18(r3), r5
                cmpobge r5, r4, loc_32B70
                lda     8(r11), r6
                ldos    6(r11), r8
                divi    r8, r5, r8
                ldos    (r6)[r8*2], r6
                stos    r6, 0x1A(r3)
                ldob    0x19(r3), r5
                bbc     3, r5, loc_32B60
                ldob    0x18(r3), r5
                ld      floats_1_to_4_5[r5*4], r5
                st      r5, 0x20(r3)
loc_32B60:                              # CODE XREF: sub_32B10+3C↑j
                ldob    0x18(r3), r5
                addo    1, r5, r5
                stob    r5, 0x18(r3)
                b       loc_32B8C
# ---------------------------------------------------------------------------
loc_32B70:                              # CODE XREF: sub_32B10+20↑j
                movt    0, r4
                stt     r4, 0x0(r3)
                stt     r4, 0xC(r3)
                stos    r4, 0x18(r3)
                stos    r4, 0x1A(r3)
                st      r4, 0x1C(r3)
                st      r4, 0x20(r3)
loc_32B8C:                              # CODE XREF: sub_32B10+14↑j
                lda     0x24(r3), r3
                cmpdeco 1, r7, r7
                bl      loc_32B20
                ret
# End of function sub_32B10
# =============== S U B R O U T I N E =======================================
efc_face_opt_disp:                      # CODE XREF: camera_init+1630↑p
                ld      fa_rob0, g7     # Label from official source
                call    efc_face_opt_cont
                ld      fa_rob1, g7
                call    efc_face_opt_cont
                ld      fa_rob0, g7
                ret
# End of function efc_face_opt_disp
# =============== S U B R O U T I N E =======================================
efc_face_opt_cont:                      # CODE XREF: efc_face_opt_disp+8↑p
                ldob    0x2A70(g7), r3  # Label from official source
                cmpobe  4, r3, draw_shock
                cmpobe  5, r3, draw_questionmark
                cmpobe  20, r3, draw_NO
                b       loc_32E80
# ---------------------------------------------------------------------------
draw_shock:                             # CODE XREF: efc_face_opt_cont+8↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     0x20C(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3F800000, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ldos    0x26(g13), r9
                shlo    0xE, 1, r3
                addo    r3, r9, r9
                mov     0, r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     816, g0         # Shock lines above head
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_32E80
# ---------------------------------------------------------------------------
draw_questionmark:                      # CODE XREF: efc_face_opt_cont+C↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     0x20C(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3F800000, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ldos    0x26(g13), r9
                shlo    0xE, 3, r3
                addo    r3, r9, r9
                mov     0, r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     817, g0         # question mark
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_32E80
# ---------------------------------------------------------------------------
un_draw_frustration:                    # unrefrenced code
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     0x20C(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3F800000, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ldos    0x26(g13), r9
                shlo    0xE, 3, r3
                addo    r3, r9, r9
                mov     0, r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      frame_counter, r3
                mov     3, r4
                and     r3, r4, r3
                shro    1, r3, r3
                ldos    frustrated_thought_bubble[r3*2], r3
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_32E80
# ---------------------------------------------------------------------------
draw_NO:                                # CODE XREF: efc_face_opt_cont+10↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     0x20C(g7), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3F800000, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ldos    0x26(g13), r9
                shlo    0xE, 3, r3
                addo    r3, r9, r9
                mov     0, r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     2297, g0        # purple and yellow NO!
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_32E80:                              # CODE XREF: efc_face_opt_cont+14↑j
                ret                     # return
# End of function efc_face_opt_cont
# ---------------------------------------------------------------------------
frustrated_thought_bubble:.short 2710   # DATA XREF: efc_face_opt_cont+1FC↑r
                .short 2711
# =============== S U B R O U T I N E =======================================
efc_asease_cont:                        # CODE XREF: rob_disp+6A8↑p
                ldob    0x2A70(g7), r3  # Label from official source
                cmpobne 9, r3, loc_32F20 # if =9 then sweat
                ldos    0x1A8(g7), r3
                lda     0xDD, r4
                cmpobe  r3, r4, loc_32E80
                lda     0x3F800000, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                shlo    0xE, 3, r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                shlo    0xF, 1, r9
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      frame_counter, r3
                lda     0x3F, r4
                and     r3, r4, r3
                shro    1, r3, r3
                ldos    sweat_animation_obj_list[r3*2], r3
                mov     0, g1
                lda     (r3), g0
                call    set_obj
loc_32F20:                              # CODE XREF: efc_asease_cont+8↑j
                ret
# End of function efc_asease_cont
# =============== S U B R O U T I N E =======================================
# mabuta = eyelid
efc_mabuta_cont:                        # CODE XREF: rob_disp+6AC↑p
                ldob    also_mode, r15  # Label from official source
                lda     start_ip_add+2, r14
                cmpobe  r14, r15, loc_330A0
                lda     start_ip_add+3, r14
                cmpobe  r14, r15, loc_330A0
                ld      fa_camera, r4
                ld      0x0(r4), r15
                bbc     1, r15, loc_330A0
                ld      0x0(r4), r15
                bbc     2, r15, loc_330A0
                ld      0x1A4(g7), r3   # p1_mot_kind or p2_mot_kind
                bbs     8, r3, loc_330A0
                ldob    0x2A92(g7), r3  # P1_PARTS+0x2A92 or P2_PARTS+0x2A92
                bbs     2, r3, render_eyelids
                bbs     1, r3, loc_32F78
                b       loc_3309C       # return
# ---------------------------------------------------------------------------
loc_32F78:                              # CODE XREF: efc_mabuta_cont+4C↑j
                call    rand            # Random value stored to g0
                mov     0xF, r6
                and     r6, g0, r5
                cmpobge 6, r5, loc_33038
                setbit  2, r3, r3
                stob    r3, 0x2A92(g7)
render_eyelids:                         # CODE XREF: efc_mabuta_cont+48↑j
                ldob    0x2A93(g7), r5
                mov     0xA, r6
                cmpobe  r6, r5, loc_33038
                ldob    0x1B0(g7), r7
                ld      eyelid_data[r7*4], r6
                cmpobe  0, r6, loc_33038
                ldos    (r6)[r5*2], r6
                stos    r6, 0x2A94(g7)
                mov     0, g1
                lda     (r6), g0
                call    set_obj
                cmpobe  2, r7, uk_amy_heads
                cmpobe  28, r7, uk_amy_i_heads
                b       loc_33018
# ---------------------------------------------------------------------------
uk_amy_heads:                           # CODE XREF: efc_mabuta_cont+A8↑j
                lda     amy_heads, r7
                ld      0x0(g7), r15
                bbc     1, r15, loc_32FF0
                ldos    (r7), r6
                b       loc_33014
# ---------------------------------------------------------------------------
loc_32FF0:                              # CODE XREF: efc_mabuta_cont+C0↑j
                ldos    2(r7), r6
                b       loc_33014
# ---------------------------------------------------------------------------
uk_amy_i_heads:                         # CODE XREF: efc_mabuta_cont+AC↑j
                lda     amy_i_heads, r7
                ld      0x0(g7), r15
                bbc     1, r15, loc_33010
                ldos    (r7), r6
                b       loc_33014
# ---------------------------------------------------------------------------
loc_33010:                              # CODE XREF: efc_mabuta_cont+E0↑j
                ldos    2(r7), r6
loc_33014:                              # CODE XREF: efc_mabuta_cont+C8↑j
                stos    r6, 0x48(g7)
loc_33018:                              # CODE XREF: efc_mabuta_cont+B0↑j
                ld      debug_flag, r15
                bbs     5, r15, loc_3309C # return
                mov     1, r4
                addo    r4, r5, r5
                stob    r5, 0x2A93(g7)
                b       loc_3309C       # return
# ---------------------------------------------------------------------------
loc_33038:                              # CODE XREF: efc_mabuta_cont+60↑j
                mov     0, r4
                stos    r4, 0x2A92(g7)
                stos    r4, 0x2A94(g7)
                ldob    0x1B0(g7), r7
                cmpobe  2, r7, uk_amy_heads_1
                cmpobe  28, r7, uk_amy_i_heads_1
                b       loc_3309C       # return
# ---------------------------------------------------------------------------
uk_amy_heads_1:                         # CODE XREF: efc_mabuta_cont+12C↑j
                lda     amy_heads, r7
                ld      0x0(g7), r15
                bbc     1, r15, loc_33074
                ldos    4(r7), r6
                b       loc_33098
# ---------------------------------------------------------------------------
loc_33074:                              # CODE XREF: efc_mabuta_cont+144↑j
                ldos    6(r7), r6
                b       loc_33098
# ---------------------------------------------------------------------------
uk_amy_i_heads_1:                       # CODE XREF: efc_mabuta_cont+130↑j
                lda     amy_i_heads, r7
                ld      0x0(g7), r15
                bbc     1, r15, loc_33094
                ldos    4(r7), r6
                b       loc_33098
# ---------------------------------------------------------------------------
loc_33094:                              # CODE XREF: efc_mabuta_cont+164↑j
                ldos    6(r7), r6
loc_33098:                              # CODE XREF: efc_mabuta_cont+14C↑j
                stos    r6, 0x48(g7)
loc_3309C:                              # CODE XREF: efc_mabuta_cont+50↑j
                ret                     # return
# ---------------------------------------------------------------------------
loc_330A0:                              # CODE XREF: efc_mabuta_cont+10↑j
                mov     0, r4
                stos    r4, 0x2A92(g7)
                stos    r4, 0x2A94(g7)
                ret
# End of function efc_mabuta_cont
# =============== S U B R O U T I N E =======================================
efc_medama_put:                         # CODE XREF: ROM:loc_644FC↓p
                ldos    0x2A94(g7), r3  # Label from official source
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                ret
# End of function efc_medama_put
# =============== S U B R O U T I N E =======================================
load_action_from_list:                  # CODE XREF: play_motion:_uk_player_action_related↑p
                ldob    3(g4), r3
                ld      player_action_list[r3*4], r3
                cmpobe  0, r3, loc_330E4
                callx   (r3)
loc_330E4:                              # CODE XREF: load_action_from_list+C↑j
                ret
# End of function load_action_from_list
# =============== S U B R O U T I N E =======================================
player_head_change_action:              # DATA XREF: ROM:00033340↓o
                ldob    4(g4), r3       # g4 = 0xD16B1
                stob    r3, 0x2A70(g7)  # P1_HEAD_OFFSET or P2_HEAD_OFFSET
                ld      PLAYER_HEAD_LIST[r3*4], g0
                ldob    0x1B0(g7), r4   # r4 = P1_CHAR_VALUE or P2_CHAR_VALUE
                ld      (g0)[r4*4], g0
                cmpobne 0, g0, loc_33124
                mov     0, r3
                stob    r3, 0x2A70(g7)
                ld      PLAYER_HEAD_LIST[r3*4], g0
                ldob    0x1B0(g7), r4
                ld      (g0)[r4*4], g0
loc_33124:                              # CODE XREF: player_head_change_action+1C↑j
                ldos    0x0(g0), r3
                ldos    2(g0), r4
                stob    r3, 0x2A79(g7)
                stob    r4, 0x2A7A(g7)
                mov     0, r3
                stob    r3, 0x2A78(g7)
                lda     4(g0), g0
                st      g0, 0x2A74(g7)
                ret
# End of function player_head_change_action
# =============== S U B R O U T I N E =======================================
player_head_change_2:                   # CODE XREF: play_motion+C70↑p
                ld      0x2A74(g7), g0  # P1_HEAD_OFFSET or P2_HEAD_OFFSET
                cmpobe  0, g0, loc_33250 # return
                ldob    0x2A78(g7), r4  # P1_PARTS+0x2A78 or P2_PARTS+0x2A78
                ldos    8(g0), r6
                cmpobe  0, r6, loc_33180
                divo    r6, r4, r6
                mulo    0x14, r6, r6
                lda     (g0)[r6], g0
loc_33180:                              # CODE XREF: player_head_change_2+18↑j
                ld      0x0(g7), r15
                bbc     1, r15, loc_33190
                ldos    0x0(g0), r6
                b       loc_33194
# ---------------------------------------------------------------------------
loc_33190:                              # CODE XREF: player_head_change_2+2C↑j
                ldos    2(g0), r6       # Honey g0 = honey_open_mouth_smile+0x4
loc_33194:                              # CODE XREF: player_head_change_2+34↑j
                stos    r6, 0x48(g7)    # P1_HEAD_OBJ or P2_HEAD_OBJ
                ldos    4(g0), r7
                ldos    6(g0), r8
                stos    r7, 0x2050(g7)  # P1_PARTS+0x2050
                stos    r8, 0x2054(g7)  # P1_PARTS+0x2054
                ldob    0xA(g0), r7
                ldob    0xB(g0), r8
                stob    r7, 0x2A72(g7)
                stob    r8, 0x2A73(g7)
                ld      0xC(g0), r7     # load player head routine (honey_default_face_1+0x10)into r7
                ld      0x10(g0), r8    # load player head routine (honey_default_face_1+0x14)into r8
                st      r7, 0x2A80(g7)  # P1_PARTS+0x2A80
                st      r8, 0x2A84(g7)  # P1_PARTS+0x2A84
                ldob    0x2A78(g7), r4
                ldob    0x2A79(g7), r3
                cmpobge r4, r3, loc_33210
                ld      debug_flag, r15
                bbs     5, r15, loc_33250 # return
                addo    1, r4, r4
                stob    r4, 0x2A78(g7)
                b       loc_33250       # return
# ---------------------------------------------------------------------------
loc_33210:                              # CODE XREF: player_head_change_2+98↑j
                mov     0, r5
                stob    r5, 0x2A78(g7)
                ldob    0x2A7A(g7), r5
                cmpobe  0, r5, loc_3322C
                b       loc_33250       # return
# ---------------------------------------------------------------------------
loc_3322C:                              # CODE XREF: player_head_change_2+CC↑j
                mov     0, r5
                st      r5, 0x2A74(g7)
                stob    r5, 0x2A79(g7)
                stob    r5, 0x2A7A(g7)
                stob    r5, 0x2A78(g7)
loc_33250:                              # CODE XREF: player_head_change_2+8↑j
                ret                     # return
# End of function player_head_change_2
# =============== S U B R O U T I N E =======================================
player_hand_change_action:              # DATA XREF: ROM:0003334C↓o
                ldob    0x1B0(g7), r3
                ld      player_hand_animations[r3*4], g0
                ldob    3(g4), r3
                ld      0x0(g7), r4
                bbc     6, r4, loc_33284
                cmpobe  8, r3, loc_3327C
                mov     8, r3
                mov     1, r5
                b       loc_33284
# ---------------------------------------------------------------------------
loc_3327C:                              # CODE XREF: player_hand_change_action+18↑j
                mov     5, r3
                mov     0, r5
loc_33284:                              # CODE XREF: player_hand_change_action+14↑j
                cmpobe  8, r3, loc_33294
                mov     0, r5
                mulo    0x10, r5, r5
                b       loc_3329C
# ---------------------------------------------------------------------------
loc_33294:                              # CODE XREF: player_hand_change_action:loc_33284↑j
                mov     1, r5
                mulo    0x10, r5, r5
loc_3329C:                              # CODE XREF: player_hand_change_action+3C↑j
                ldob    4(g4), r4       # Looking for Sonic Hammer Holding
                stob    r4, 0x2A7B(g7)  # g7 = P1_PARTS
                addo    r5, r4, r4      # r4 seems to stay 0x9
                ldos    (g0)[r4*2], r5  # g0 = 0xC69FC
                cmpobe  0, r5, loc_332CC
                ldis    (g0)[r4*2], r15
                st      r15, 0x40(g7)[r3*4] # This stores hand objects
                ldos    0x1A8(g7), r3
                stos    r3, 0x2A7C(g7)
loc_332CC:                              # CODE XREF: player_hand_change_action+5C↑j
                ret
# End of function player_hand_change_action
# =============== S U B R O U T I N E =======================================
player_foot_change_action:              # DATA XREF: ROM:00033368↓o
                ld      0x0(g7), r3
                bbs     0x1D, r3, loc_33304
                ldob    0x1B0(g7), r3
                ld      player_foot_animation[r3*4], r3
                cmpobe  0, r3, loc_33304
                ldob    4(g4), r4
                ldob    3(g4), r5
                cmpobe  0xC, r5, loc_332F8
                lda     4(r3), r3
loc_332F8:                              # CODE XREF: player_foot_change_action+20↑j
                ldis    (r3)[r4*2], r15
                st      r15, 0x40(g7)[r5*4]
loc_33304:                              # CODE XREF: player_foot_change_action+4↑j
                ret
# End of function player_foot_change_action
# =============== S U B R O U T I N E =======================================
player_body_change_action:              # DATA XREF: ROM:0003333C↓o
                ld      0x0(g7), r3
                bbs     0x1D, r3, loc_33334
                ldob    0x1B0(g7), r3
                ld      player_body_animation[r3*4], r3
                cmpobe  0, r3, loc_33334
                ldob    4(g4), r4
                ldob    3(g4), r5
                ldis    (r3)[r4*2], r15
                st      r15, 0x40(g7)[r5*4]
loc_33334:                              # CODE XREF: player_body_change_action+4↑j
                ret
# End of function player_body_change_action
# ---------------------------------------------------------------------------
player_action_list:.long 0              # DATA XREF: load_action_from_list+4↑r
                .long player_body_change_action
                .long player_head_change_action
                .long 0
                .long 0
                .long player_hand_change_action
                .long 0
                .long 0
                .long player_hand_change_action
                .long 0
                .long 0
                .long 0
                .long player_foot_change_action
                .long 0
                .long 0
                .long player_foot_change_action
# =============== S U B R O U T I N E =======================================
sub_33378:                              # CODE XREF: play_motion:loc_1C8E4↑p
                movt    0, r4
                ldos    3(g4), r3
                ldos    5(g4), r7
                cmpobe  0, r7, loc_33394
                setbit  r3, r4, r4
                setbit  r3, r5, r5
                ldos    0x1A8(g7), r6
loc_33394:                              # CODE XREF: sub_33378+C↑j
                stos    r4, 0x2744(g7)
                stos    r5, 0x2746(g7)
                stos    r6, 0x2748(g7)
                ret
# End of function sub_33378
# =============== S U B R O U T I N E =======================================
# Effect Fang Chest Change
efc_fang_mune_change:                   # CODE XREF: rob_disp+460↑p
                ldos    0x1A8(g7), r3   # Label from official source
                lda     0x169, r4
                cmpobe  r3, r4, loc_333C8
                lda     0x16A, r4
                cmpobe  r3, r4, loc_33400
                b       loc_33434
# ---------------------------------------------------------------------------
loc_333C8:                              # CODE XREF: efc_fang_mune_change+8↑j
                ldob    0x1B0(g7), r3
                cmpobe  0x1E, r3, loc_333DC
                lda     fang_tail_bounce_anim, r3
                b       loc_333E4
# ---------------------------------------------------------------------------
loc_333DC:                              # CODE XREF: efc_fang_mune_change+1C↑j
                lda     fang_i_tail_bounce_anim, r3
loc_333E4:                              # CODE XREF: efc_fang_mune_change+28↑j
                ldos    0x1AA(g7), r4
                subo    1, r4, r4
loc_333EC:                              # DATA XREF: MAIN_DATA:0282D645↓o
                mov     1, r5
                ldis    (r3)[r4*2], r15
                st      r15, 0x40(g7)[r5*4]
                b       loc_33434
# ---------------------------------------------------------------------------
loc_33400:                              # CODE XREF: efc_fang_mune_change+10↑j
                ldob    0x1B0(g7), r3
                cmpobe  0x1E, r3, loc_33414
                lda     fang_tail_bounce_anim_1, r3
                b       loc_3341C
# ---------------------------------------------------------------------------
loc_33414:                              # CODE XREF: efc_fang_mune_change+54↑j
                lda     fang_i_tail_bounce_anim_1, r3
loc_3341C:                              # CODE XREF: efc_fang_mune_change+60↑j
                ldos    0x1AA(g7), r4
                subo    1, r4, r4
                mov     1, r5
                ldis    (r3)[r4*2], r15
                st      r15, 0x40(g7)[r5*4]
loc_33434:                              # CODE XREF: efc_fang_mune_change+14↑j
                ret
# End of function efc_fang_mune_change
# =============== S U B R O U T I N E =======================================
efc_fang_mune_init:                     # CODE XREF: rob_disp+45C↑p
                ldob    0x1B1(g7), r4   # Label from official source
                cmpobne 4, r4, loc_33484
                ldob    0x84C(g7), r14
                cmpobe  3, r14, loc_33484
                mov     0, r4
                ldob    0x1B0(g7), r3
                cmpobe  0x1E, r3, loc_33460
                lda     fang_parts_body, r3
                b       loc_33468
# ---------------------------------------------------------------------------
loc_33460:                              # CODE XREF: efc_fang_mune_init+18↑j
                lda     fang_i_parts_body, r3
loc_33468:                              # CODE XREF: efc_fang_mune_init+24↑j
                ld      0x0(g7), r15
                bbc     0x1D, r15, loc_33474
                mov     1, r4
loc_33474:                              # CODE XREF: efc_fang_mune_init+34↑j
                mov     1, r5
                ldis    (r3)[r4*2], r15
                st      r15, 0x40(g7)[r5*4]
loc_33484:                              # CODE XREF: efc_fang_mune_init+4↑j
                ret
# End of function efc_fang_mune_init
# ---------------------------------------------------------------------------
fang_tail_bounce_anim:.short 2911       # DATA XREF: efc_fang_mune_change+20↑o
                .short 2911
                .short 2911
                .short 2913
                .short 2915
                .short 2916
                .short 2917
                .short 2918
                .short 2919
                .short 2920
                .short 2921
                .short 2922
                .short 2923
                .short 2924
                .short 2924
                .short 2925
                .short 2925
                .short 2926
                .short 2926
                .short 2926
                .short 2926
                .short 2927
                .short 2928
                .short 2929
                .short 2930
                .short 2931
                .short 2932
                .short 2933
                .short 2934
                .short 2935
                .short 2936
                .short 2937
                .short 2938
                .short 2939
                .short 2940
                .short 2941
                .short 2942
                .short 2911
                .short 2912
                .short 2913
                .short 2914
                .short 2915
                .short 2916
                .short 2917
                .short 2918
                .short 2919
                .short 2920
                .short 2921
                .short 2922
                .short 2923
                .short 2924
                .short 2924
                .short 2925
                .short 2925
                .short 2926
                .short 2926
fang_tail_bounce_anim_1:.short 2926     # DATA XREF: efc_fang_mune_change+58↑o
                .short 2926
                .short 2927
                .short 2927
                .short 2928
                .short 2928
                .short 2929
                .short 2929
                .short 2930
                .short 2931
                .short 2932
                .short 2933
                .short 2934
                .short 2935
                .short 2936
                .short 2937
                .short 2938
                .short 2939
                .short 2940
                .short 2941
                .short 2942
                .short 2911
                .short 2912
                .short 2913
                .short 2914
                .short 2915
                .short 2916
                .short 2917
                .short 2918
                .short 2919
                .short 2920
                .short 2921
                .short 2922
                .short 2923
                .short 2924
                .short 2924
                .short 2925
                .short 2925
                .short 2926
                .short 2926
fang_i_tail_bounce_anim:.short 3096     # DATA XREF: efc_fang_mune_change:loc_333DC↑o
                .short 3096
                .short 3096
                .short 3098
                .short 3100
                .short 3101
                .short 3102
                .short 3103
                .short 3104
                .short 3105
                .short 3106
                .short 3107
                .short 3108
                .short 3109
                .short 3109
                .short 3110
                .short 3110
                .short 3111
                .short 3111
                .short 3111
                .short 3111
                .short 3112
                .short 3113
                .short 3114
                .short 3115
                .short 3116
                .short 3117
                .short 3118
                .short 3119
                .short 3120
                .short 3121
                .short 3122
                .short 3123
                .short 3124
                .short 3125
                .short 3126
                .short 3127
                .short 3096
                .short 3097
                .short 3098
                .short 3099
                .short 3100
                .short 3101
                .short 3102
                .short 3103
                .short 3104
                .short 3105
                .short 3106
                .short 3107
                .short 3108
                .short 3109
                .short 3109
                .short 3110
                .short 3110
                .short 3111
                .short 3111
fang_i_tail_bounce_anim_1:.short 3111   # DATA XREF: efc_fang_mune_change:loc_33414↑o
                .short 3111
                .short 3112
                .short 3112
                .short 3113
                .short 3113
                .short 3114
                .short 3114
                .short 3115
                .short 3116
                .short 3117
                .short 3118
                .short 3119
                .short 3120
                .short 3121
                .short 3122
                .short 3123
                .short 3124
                .short 3125
                .short 3126
                .short 3127
                .short 3096
                .short 3097
                .short 3098
                .short 3099
                .short 3100
                .short 3101
                .short 3102
                .short 3103
                .short 3104
                .short 3105
                .short 3106
                .short 3107
                .short 3108
                .short 3109
                .short 3109
                .short 3110
                .short 3110
                .short 3111
                .short 3111
fang_parts_body:.short 427              # DATA XREF: efc_fang_mune_init+1C↑o
                .short 1669             # Fang body squished
fang_i_parts_body:.short 1511           # DATA XREF: efc_fang_mune_init:loc_33460↑o
                .short 2179             # Fang_I body squished
# =============== S U B R O U T I N E =======================================
uk_if_fang:                             # CODE XREF: efc_cont+3C↑p
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                call    uk_fang_thing
                ld      fa_rob0, g8
                ld      fa_rob1, g7
                call    uk_fang_thing
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ret
# End of function uk_if_fang
# =============== S U B R O U T I N E =======================================
uk_fang_thing:                          # CODE XREF: uk_if_fang+10↑p
                ldob    0x1B1(g7), r3   # r3 = P1_PARTS+0x1B1 or P2_PARTS+0x1B1
                cmpobne 4, r3, if_not_fang # If character isn't Fang then branch
                ldob    0x1B0(g7), r6   # r6 = P1_PARTS+0x1B0 or P2_PARTS+0x1B0
                cmpobe  4, r6, if_fang  # Branch if Fang
                lda     word_33738, r4
                b       loc_33670
# ---------------------------------------------------------------------------
if_fang:                                # CODE XREF: uk_fang_thing+C↑j
                lda     word_33718, r4
loc_33670:                              # CODE XREF: uk_fang_thing+18↑j
                ld      0x0(g7), r8
                bbc     6, r8, loc_33680
                mov     0x10, r5
                addo    r5, r4, r4
loc_33680:                              # CODE XREF: uk_fang_thing+28↑j
                lda     (r4), r6
                st      r6, 0x2A8C(g7)  # store r6 to P1_PARTS+0x2A8C or P2_PARTS+0x2A8C
                ldob    0x2A7B(g8), r3
                cmpobe  0xA, r3, loc_336C4
                cmpobe  0xB, r3, loc_336C4
                ldob    0x2A7B(g7), r3
                cmpobe  0xC, r3, loc_336B4
                cmpobe  0xD, r3, loc_336B4
                cmpobe  4, r3, loc_336B4
                cmpobne 3, r3, loc_336CC
loc_336B4:                              # CODE XREF: uk_fang_thing+58↑j
                ldos    0x1A8(g7), r3
                ldos    0x2A7C(g7), r5
                cmpobne r3, r5, loc_336CC
loc_336C4:                              # CODE XREF: uk_fang_thing+48↑j
                ldos    2(r4), r6
                b       loc_336D0
# ---------------------------------------------------------------------------
loc_336CC:                              # CODE XREF: uk_fang_thing+64↑j
                ldos    0x0(r4), r6
loc_336D0:                              # CODE XREF: uk_fang_thing+7C↑j
                stos    r6, 0x2A90(g7)
if_not_fang:                            # CODE XREF: uk_fang_thing+4↑j
                ret                     # return
# End of function uk_fang_thing
# =============== S U B R O U T I N E =======================================
efc_fang_gun_disp:                      # CODE XREF: rob_disp+6C0↑p
                ld      0x2A8C(g7), r4  # Label from official source
                ldt     4(r4), r8
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ldos    0x2A90(g7), r6  # r6 = P1_PARTS+0x2A90 or P2_PARTS+0x2A90
                mov     0, g1
                lda     (r6), g0
                call    set_obj
                ret
# End of function efc_fang_gun_disp
# ---------------------------------------------------------------------------
word_33718:     .short 751              # DATA XREF: uk_fang_thing:if_fang↑o
                .short 752
                .short 0xC28F
                .short 0xBCF5
                .short 0x126F
                .short 0xBC83
                .short 0x8B44
                .short 0xBE6C
                .short 772
                .short 771
                .short 0xC28F
                .short 0xBCF5
                .short 0x126F
                .short 0xBC83
                .short 0x8B44
                .short 0x3E6C
word_33738:     .short 1496             # DATA XREF: uk_fang_thing+10↑o
                .short 1497
                .short 0xC28F
                .short 0xBCF5
                .short 0x126F
                .short 0xBC83
                .short 0x8B44
                .short 0xBE6C
                .short 1499
                .short 1498
                .short 0xC28F
                .short 0xBCF5
                .short 0x126F
                .short 0xBC83
                .short 0x8B44
                .short 0x3E6C
# =============== S U B R O U T I N E =======================================
efc_eggrob_mune_chg:                    # CODE XREF: rob_disp:unit_efc_mune↑p
                ld      0x0(g7), r15    # Label from official source
                bbs     0x1D, r15, loc_337B8
                ldob    0x1B0(g7), r3
                mov     0xB, r4
                addo    0x1F, 6, r5
                cmpobe  r3, r4, loc_33774
                cmpobne r3, r5, loc_337B8
loc_33774:                              # CODE XREF: efc_eggrob_mune_chg+14↑j
                ld      0x1A4(g7), r3
                bbs     14, r3, loc_337A8
                ld      frame_counter, r4
                shro    1, r4, r4
                mov     0xF, r3
                and     r3, r4, r4
                ldos    egg_mech_arms[r4*2], r4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
                b       loc_337B8
# ---------------------------------------------------------------------------
loc_337A8:                              # CODE XREF: efc_eggrob_mune_chg+20↑j
                mov     0, g1
                lda     4130, g0        # Eggman mech arms
                call    set_obj
loc_337B8:                              # CODE XREF: efc_eggrob_mune_chg+4↑j
                ret
# End of function efc_eggrob_mune_chg
# =============== S U B R O U T I N E =======================================
sub_337BC:                              # CODE XREF: play_motion:loc_1CA10↑p
                ld      0x7F0(g7), r3   # p1_parts_flag or p2_parts_flag
                bbs     10, r3, loc_337CC
                bbs     11, r3, loc_337CC
                b       loc_33A00       # return
# ---------------------------------------------------------------------------
loc_337CC:                              # CODE XREF: sub_337BC+4↑j
                ld      0x1A4(g7), r3   # p1_mot_kind or p2_mot_kind
                bbs     17, r3, loc_337DC
                bbs     14, r3, loc_337DC
                b       loc_33814       # Doesn't seem to hit
# ---------------------------------------------------------------------------
loc_337DC:                              # CODE XREF: sub_337BC+14↑j
                ld      0x7F0(g7), r15
                clrbit  0xA, r15, r15
                st      r15, 0x7F0(g7)
                ld      0x7F0(g7), r15
                clrbit  0xB, r15, r15
                st      r15, 0x7F0(g7)
                mov     0, r15
                stis    r15, 0x2A88(g7)
                mov     0, r15
                stis    r15, 0x2A8A(g7)
                call    sub_33A04
                b       loc_33A00       # return
# ---------------------------------------------------------------------------
loc_33814:                              # CODE XREF: sub_337BC+1C↑j
                ld      0x7F0(g7), r3   # Doesn't seem to hit
                bbs     0xA, r3, loc_33824
                bbs     0xB, r3, loc_33910
                b       loc_33A00       # return
# ---------------------------------------------------------------------------
loc_33824:                              # CODE XREF: sub_337BC+5C↑j
                ldob    0x1B0(g7), r4   # P1_CHAR_VALUE or P2_CHAR_VALUE
                ld      opening_cutscene_anim_data[r4*4], r4
                cmpobe  0, r4, loc_33A00 # If character is Sonic, branch
                ldos    0x0(r4), r5
                ldos    0x2A88(g7), r6  # P1_PARTS+0x2A88 or P2_PARTS+0x2A88
                ldob    0x1B1(g7), r8   # P1_SELECTED or P2_SELECTED
                mov     14, r9
                cmpobne r9, r8, loc_338B8 # If player isn't Rocket Metal, branch
                cmpobe  0, r6, loc_338D4
                mov     0, r8           # Rocket Metal stuff
                stos    r8, 0x40(g7)
                stos    r8, 0x44(g7)
                stos    r8, 0x48(g7)
                stos    r8, 0x58(g7)
                stos    r8, 0x50(g7)
                stos    r8, 0x54(g7)
                stos    r8, 0x58(g7)
                stos    r8, 0x5C(g7)
                stos    r8, 0x60(g7)
                stos    r8, 0x64(g7)
                stos    r8, 0x68(g7)
                stos    r8, 0x6C(g7)
                stos    r8, 0x70(g7)
                stos    r8, 0x74(g7)
                stos    r8, 0x78(g7)
                stos    r8, 0x7C(g7)
                mov     0, r8
                stos    r8, 0x2050(g7)
                stos    r8, 0x2054(g7)
                st      r8, 0x2A80(g7)
                st      r8, 0x2A84(g7)
loc_338B8:                              # CODE XREF: sub_337BC+8C↑j
                ldos    0x2A8A(g7), r7  # Doesn't seem to hit
                ldis    2(r4)[r6*2], r15
                st      r15, 0x40(g7)[r7*4]
                cmpobe  r6, r5, egg_robo_condition
loc_338D4:                              # CODE XREF: sub_337BC+90↑j
                ld      debug_flag, r15
                bbs     5, r15, loc_33A00 # return
                mov     1, r4
                addo    r6, r4, r6
                stos    r6, 0x2A88(g7)
                b       loc_33A00       # return
# ---------------------------------------------------------------------------
egg_robo_condition:                     # CODE XREF: sub_337BC+114↑j
                ldob    0x1B0(g7), r3   # P1_CHAR_VALUE or P2_CHAR_VALUE
                mov     13, r4
                cmpobe  r4, r3, if_egg_robo # If player is Egg Robo, branch
                addo    31, 8, r4
                cmpobne r4, r3, loc_3390C # If player is mirror Egg Robo, branch
if_egg_robo:                            # CODE XREF: sub_337BC+140↑j
                call    uk_egg_robo_head_sub
loc_3390C:                              # CODE XREF: sub_337BC+148↑j
                ret                     # return
# ---------------------------------------------------------------------------
loc_33910:                              # CODE XREF: sub_337BC+60↑j
                ldob    0x1B0(g7), r4
                ld      opening_cutscene_anim_data[r4*4], r4
                cmpobe  0, r4, loc_33A00 # return
                ldos    0x2A88(g7), r6
                cmpobe  0, r6, loc_339D8
                ldob    0x1B1(g7), r8
                mov     0xE, r9
                cmpobne r9, r8, loc_339A0
                mov     0, r8
                stos    r8, 0x40(g7)
                stos    r8, 0x44(g7)
                stos    r8, 0x48(g7)
                stos    r8, 0x58(g7)
                stos    r8, 0x50(g7)
                stos    r8, 0x54(g7)
                stos    r8, 0x58(g7)
                stos    r8, 0x5C(g7)
                stos    r8, 0x60(g7)
                stos    r8, 0x64(g7)
                stos    r8, 0x68(g7)
                stos    r8, 0x6C(g7)
                stos    r8, 0x70(g7)
                stos    r8, 0x74(g7)
                stos    r8, 0x78(g7)
                stos    r8, 0x7C(g7)
                mov     0, r8
                stos    r8, 0x2050(g7)
                stos    r8, 0x2054(g7)
                st      r8, 0x2A80(g7)
                st      r8, 0x2A84(g7)
loc_339A0:                              # CODE XREF: sub_337BC+178↑j
                ldos    0x2A8A(g7), r7
                ldis    2(r4)[r6*2], r15
                st      r15, 0x40(g7)[r7*4]
                ld      debug_flag, r15
                bbs     5, r15, loc_33A00 # return
                mov     1, r4
                subo    r4, r6, r6
                stos    r6, 0x2A88(g7)
                b       loc_33A00       # return
# ---------------------------------------------------------------------------
loc_339D8:                              # CODE XREF: sub_337BC+16C↑j
                ld      0x7F0(g7), r15
                clrbit  0xB, r15, r15
                st      r15, 0x7F0(g7)
                mov     0, r15
                stis    r15, 0x2A88(g7)
                mov     0, r15
                stis    r15, 0x2A8A(g7)
                call    sub_33A04
loc_33A00:                              # CODE XREF: sub_337BC+C↑j
                ret                     # return
# End of function sub_337BC
# =============== S U B R O U T I N E =======================================
sub_33A04:                              # CODE XREF: sub_337BC+50↑p
                ldob    0x1B0(g7), r3
                ld      CHAR_PARTS[r3*4], r4
                ld      0x0(r4), r4
                lda     (r4), r14
                lda     0x40(g7), r13
                mov     0x10, r12
loc_33A20:                              # CODE XREF: sub_33A04+30↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_33A20
                ret
# End of function sub_33A04
# =============== S U B R O U T I N E =======================================
uk_egg_robo_head_sub:                   # CODE XREF: sub_337BC:if_egg_robo↑p
                ld      frame_counter, r3
                mov     1, r4
                and     r3, r4, r3
                ldos    uk_egg_robo_head[r3*2], r4
                stos    r4, 0x48(g7)
                ret
# End of function uk_egg_robo_head_sub
# =============== S U B R O U T I N E =======================================
sub_33A5C:                              # CODE XREF: efc_cont+38↑p
                ldob    also_sub_mode, r15
                lda     check_word3+2, r14
                cmpobe  r14, r15, loc_33A7C
                lda     check_word3+3, r14
                cmpobne r14, r15, loc_33A94
loc_33A7C:                              # CODE XREF: sub_33A5C+10↑j
                ld      fa_rob1, g7
                call    sub_33A98
                ld      fa_rob0, g7
                call    sub_33A98
loc_33A94:                              # CODE XREF: sub_33A5C+1C↑j
                ret
# End of function sub_33A5C
# =============== S U B R O U T I N E =======================================
sub_33A98:                              # CODE XREF: sub_33A5C+28↑p
# FUNCTION CHUNK AT 00033D48 SIZE 00000004 BYTES
                ld      0x500498, r15
                bbs     0x1E, r15, loc_33D48
                ld      0x500498, r15
                bbs     0x1D, r15, loc_33AFC
                ldos    0x1A8(g7), r3
                lda     0x1F5, r4
                cmpobe  r3, r4, loc_33ACC
                lda     0x1F6, r4
                cmpobe  r3, r4, loc_33ACC
                lda     0x1E1, r4
                cmpobne r3, r4, loc_33D48
loc_33ACC:                              # CODE XREF: sub_33A98+20↑j
                ldos    0x1AA(g7), r3
                ldos    0x500520, r4
                cmpobne r3, r4, loc_33D48
                ld      0x500498, r15
                setbit  0x1D, r15, r15
                st      r15, 0x500498
                ldt     0x230(g7), r4
                stt     r4, 0x500508
loc_33AFC:                              # CODE XREF: sub_33A98+14↑j
                ldos    0x500506, r3
                addo    0x1F, 0x19, r4
                cmpobe  r4, r3, loc_33D14
                addo    0x1F, 9, r4
                cmpobe  r4, r3, loc_33C28
                addo    0x1F, 1, r4
                cmpobe  r4, r3, loc_33BC4
                cmpobl  r4, r3, loc_33C14
                ldt     0x500508, r4
                stt     r4, 0x500514
                lda     0x3DCCCCCD, r3
                addr    r3, r5, r5
                stt     r4, 0x500508
                lda     flt_33D4C, r7
                mov     8, r11
                lda     0x850(g13), r12
loc_33B54:                              # CODE XREF: sub_33A98+124↓j
                ldt     0x500508, r4
                ldt     (r7), r8
                ldos    0x500506, r3
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                mulr    r3, r8, r8
                mulr    r3, r9, r9
                mulr    r3, r10, r10
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                stt     r4, 0x50A3FC
                stt     r4, (r12)
                mov     7, r3
                stos    r3, draw_particle # Value between 0 - 10
                call    sub_32A5C
                lda     0xC(r7), r7
                lda     0xC(r12), r12
                cmpdeco 1, r11, r11
                bl      loc_33B54
                b       loc_33CEC
# ---------------------------------------------------------------------------
loc_33BC4:                              # CODE XREF: sub_33A98+80↑j
                shlo    7, 5, r15
                stis    r15, 0xC7C(g7)
                ld      0x0(g7), r15
                setbit  0x12, r15, r15
                st      r15, 0x0(g7)
                shlo    7, 1, r4
                stob    r4, BLUE
                stob    r4, GREEN
                mov     8, r11
                ldt     0x500508, r4
                stt     r4, 0x50A3FC
                mov     9, r3
                stos    r3, draw_particle # Value between 0 - 10
                call    sub_32A5C
                lda     0xC(r12), r12
loc_33C14:                              # CODE XREF: sub_33A98+84↑j
                lda     0xAE130B, g0    # sd_ring_5a
                call    check_same_sound
                call    sound_request_u
                b       loc_33CEC
# ---------------------------------------------------------------------------
loc_33C28:                              # CODE XREF: sub_33A98+78↑j
                mov     8, r11
                ld      mod_fa_effect, r4
                lda     0x850(r4), r12
loc_33C38:                              # CODE XREF: sub_33A98+250↓j
                ldt     (r12), r4
                ldt     (r12), r8
                lda     0x3F4CCCCD, r3
                addr    r3, r4, r8
                addr    r3, r6, r10
                stt     r8, 0x50A3FC
                mov     0xA, r3
                stos    r3, draw_particle # Value between 0 - 10
                call    sub_32A5C
                lda     0x3F4CCCCD, r3
                subr    r3, r4, r8
                addr    r3, r6, r10
                stt     r8, 0x50A3FC
                mov     0xA, r3
                stos    r3, draw_particle # Value between 0 - 10
                call    sub_32A5C
                lda     0x3F4CCCCD, r3
                addr    r3, r4, r8
                subr    r3, r6, r10
                stt     r8, 0x50A3FC
                mov     0xA, r3
                stos    r3, draw_particle # Value between 0 - 10
                call    sub_32A5C
                lda     0x3F4CCCCD, r3
                subr    r3, r4, r8
                subr    r3, r6, r10
                stt     r8, 0x50A3FC
                mov     0xA, r3
                stos    r3, draw_particle # Value between 0 - 10
                call    sub_32A5C
                lda     0xC(r12), r12
                cmpdeco 1, r11, r11
                bl      loc_33C38
loc_33CEC:                              # CODE XREF: sub_33A98+128↑j
                ld      debug_flag, r15
                bbs     5, r15, loc_33D48
                ldos    0x500506, r3
                mov     1, r4
                addo    r4, r3, r3
                stos    r3, 0x500506
                b       loc_33D48
# ---------------------------------------------------------------------------
loc_33D14:                              # CODE XREF: sub_33A98+70↑j
                shlo    2, 0x1D, r4
                stob    r4, BLUE
                stob    r4, GREEN
                mov     0, r3
                stos    r3, 0x500506
                ld      0x500498, r15
                setbit  0x1E, r15, r15
                st      r15, 0x500498
# End of function sub_33A98
# START OF FUNCTION CHUNK FOR chaos_emerald_related
#   ADDITIONAL PARENT FUNCTION sub_33A98
loc_33D48:                              # CODE XREF: sub_33A98+8↑j
                ret
# END OF FUNCTION CHUNK FOR chaos_emerald_related
# ---------------------------------------------------------------------------
flt_33D4C:      .float 0.1              # DATA XREF: sub_33A98+AC↑o
                .float -0.029999999
                .long 0
                .long 0
                .float -0.029999999
                .float 0.1
                .float -0.1
                .float -0.029999999
                .long 0
                .long 0
                .float -0.029999999
                .float -0.1
                .float 0.07
                .float -0.029999999
                .float 0.07
                .float -0.07
                .float -0.029999999
                .float 0.07
                .float -0.07
                .float -0.029999999
                .float -0.07
                .float 0.07
                .float -0.029999999
                .float -0.07
# =============== S U B R O U T I N E =======================================
chaos_emerald_related:                  # CODE XREF: efc_disp+188↓p
# FUNCTION CHUNK AT 00033D48 SIZE 00000004 BYTES
                ld      0x500498, r15
                bbs     0x1E, r15, loc_341D4
                ld      0x500498, r15
                bbs     0x1D, r15, chaos_emerald_related_0
                ldos    0x1A8(g7), r3
                lda     0x1E1, r4
                cmpobne r3, r4, loc_341D4
                ldos    0x1AA(g7), r3
                mov     0x1A, r4
                cmpobne r3, r4, loc_33D48
chaos_emerald_related_0:                # CODE XREF: chaos_emerald_related+14↑j
                ldos    0x500506, r3
                addo    0x1F, 9, r4
                cmpoble r4, r3, loc_33D48
                ld      mod_fa_effect, r3
                lda     0x850(r3), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     (r12), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3ECCCCCD, r7
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                shlo    0xB, 1, r7
                mulo    r3, r7, r7
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                mov     0, g1
                lda     3772, g0        # Blue chaos emerald
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0xC(r12), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     (r12), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3ECCCCCD, r10
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    9, 1, r10
                addo    r7, r10, r10
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                mov     0, g1
                lda     3774, g0        # Purple chaos emerald
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0xC(r12), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     (r12), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3ECCCCCD, r10
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    9, 3, r10
                addo    r7, r10, r10
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                mov     0, g1
                lda     3778, g0        # Green chaos emerald
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0xC(r12), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     (r12), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3ECCCCCD, r10
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    9, 1, r10
                addo    r7, r10, r10
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                mov     0, g1
                lda     3780, g0        # Orange chaos emerald
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0xC(r12), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     (r12), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3ECCCCCD, r10
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    8, 3, r10
                addo    r7, r10, r10
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                mov     0, g1
                lda     3782, g0        # Violet chaos emerald
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0xC(r12), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     (r12), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3ECCCCCD, r10
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    8, 3, r10
                addo    r7, r10, r10
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                mov     0, g1
                lda     3784, g0        # Red chaos emerald
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0xC(r12), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     (r12), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3ECCCCCD, r10
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    8, 1, r10
                addo    r7, r10, r10
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                mov     0, g1
                lda     3786, g0        # Purple chaos emerald
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0xC(r12), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     (r12), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3ECCCCCD, r10
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    8, 5, r10
                addo    r7, r10, r10
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                mov     0, g1
                lda     3788, g0        # Yellow chaos emerald
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_341D4:                              # CODE XREF: chaos_emerald_related+8↑j
                ret
# End of function chaos_emerald_related
# ---------------------------------------------------------------------------
                .short 0
                .short 0
                .short 0x8000
                .short 0x4000
                .short 0xC000
                .short 0
# =============== S U B R O U T I N E =======================================
efc_disp:                               # CODE XREF: camera_init+162C↑p
                ld      mod_fa_effect, g6 # Label from official source
                ld      0x0(g6), r4
                bbc     0x1F, r4, loc_345C4
                ld      mod_fa_effect, g6
                lda     0x310(g6), r3
                mov     0x10, r11
loc_34204:                              # CODE XREF: efc_disp+184↓j
                ldos    0x1C(r3), r6
                cmpobe  0, r6, loc_34360
                ldt     0x0(r3), r4
                ldob    0x19(r3), r9
                bbc     0, r9, loc_3426C
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50186C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_34260
                st      r13, 0x0(r15)
                b       loc_3426C
# ---------------------------------------------------------------------------
loc_34260:                              # CODE XREF: efc_disp+70↑j
                setbit  0x1F, r13, r13
                st      r13, BUFF_RAM_START(r14)
loc_3426C:                              # CODE XREF: efc_disp+30↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      0x20(r3), r7
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                bbs     2, r9, loc_34304
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x28(g13), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g13), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x24(g13), r15
                st      r15, (g11)[g12*1]
loc_34304:                              # CODE XREF: efc_disp+E0↑j
                ldos    0x1A(r3), r7
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                bbc     0, r9, loc_34360
                lda     0x50186C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
loc_34360:                              # CODE XREF: efc_disp+24↑j
                lda     0x24(r3), r3
                cmpdeco 1, r11, r11
                bl      loc_34204
                call    chaos_emerald_related
                ld      mod_fa_effect, g6
                lda     0x790(g6), r12
                mov     6, r11
loc_34380:                              # CODE XREF: efc_disp+270↓j
                ldos    0x18(r12), r3
                cmpobe  0, r3, loc_3444C
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     0x0(r12), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x28(g13), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g13), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x24(g13), r15
                st      r15, (g11)[g12*1]
                ld      0xC(r12), r4
                ld      0x10(r12), r5
                ld      0x20(r12), r6
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      0x1C(r12), r10
                ldos    0x1A(r12), r3
                ldos    (r10)[r3*2], r4
                mov     0, g1
                lda     (r4), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_3444C:                              # CODE XREF: efc_disp+1A0↑j
                lda     0x20(r12), r12
                cmpdeco 1, r11, r11
                bl      loc_34380
                lda     0x88(g6), g6
                shlo    3, 9, r12
                mov     1, r10
loc_34464:                              # CODE XREF: efc_disp+3DC↓j
                ldos    0x22(g6), r11
                cmpobe  0, r11, loc_345B8
                ld      0x24(g6), g1
                and     1, g1, g1
                ld      fa_rob0[g1*4], r3
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                ldt     0x0(g6), r4
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x1E(g6), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x1C(g6), r15
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x20(g6), r15
                st      r15, (g11)[g12*1]
                ld      0x24(g6), r15
                bbc     0x13, r15, loc_345A0
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50184C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_34548
                st      r13, 0x0(r15)
                b       loc_34554
# ---------------------------------------------------------------------------
loc_34548:                              # CODE XREF: efc_disp+358↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_34554:                              # CODE XREF: efc_disp+360↑j
                mov     0, g1
                lda     (r11), g0
                call    set_obj
                lda     0x50184C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                b       loc_345AC
# ---------------------------------------------------------------------------
loc_345A0:                              # CODE XREF: efc_disp+318↑j
                mov     0, g1
                lda     (r11), g0
                call    set_obj
loc_345AC:                              # CODE XREF: efc_disp+3B8↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_345B8:                              # CODE XREF: efc_disp+284↑j
                lda     (g6)[r12], g6
                cmpdeco 1, r10, r10
                bl      loc_34464
loc_345C4:                              # CODE XREF: efc_disp+C↑j
                ret
# End of function efc_disp
# ---------------------------------------------------------------------------
adv_robdisp_check:                      # Label from Fighting Vipers source
                ld      fa_rob0, g7
                ldob    0x1F84(g7), r3
                cmpobe  0, r3, loc_345F4
                ld      fa_camera, r3
                ld      0x0(r3), r15
                clrbit  1, r15, r15
                st      r15, 0x0(r3)
                b       loc_34608
# ---------------------------------------------------------------------------
loc_345F4:                              # CODE XREF: ROM:000345D8↑j
                ld      fa_camera, r3
                ld      0x0(r3), r15
                setbit  1, r15, r15
                st      r15, 0x0(r3)
loc_34608:                              # CODE XREF: ROM:000345F0↑j
                ld      fa_rob1, g7
                ldob    0x1F84(g7), r3
                cmpobe  0, r3, loc_34634
                ld      fa_camera, r3
                ld      0x0(r3), r15
                clrbit  2, r15, r15
                st      r15, 0x0(r3)
                b       loc_34648
# ---------------------------------------------------------------------------
loc_34634:                              # CODE XREF: ROM:00034618↑j
                ld      fa_camera, r3
                ld      0x0(r3), r15
                setbit  2, r15, r15
                st      r15, 0x0(r3)
loc_34648:                              # CODE XREF: ROM:00034630↑j
                ret
# =============== S U B R O U T I N E =======================================
sub_3464C:                              # CODE XREF: epc_parts_pos_calc+34↑p
                mov     0, r15
                st      r15, 0x50A368
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldt     0x50A314, r12
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r14, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r6
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                bbs     0x1F, r6, loc_347E0
                ld      focus_dist_x, r13
                mulr    r13, r4, r4
                ld      focus_dist_x, r13
                mulr    r13, r5, r5
                divr    r6, r4, r4
                divr    r6, r5, r5
                ld      0x50A364, r7
                ld      focus_dist_x, r13
                mulr    r13, r7, r7
                divr    r6, r7, r7
                lda     0x43780000, r12
                cmpr    r12, r4
                ble     loc_3475C
                notbit  0x1F, r12, r12
                cmpr    r12, r4
                bge     loc_3475C
                subr    r7, r5, r8
                lda     0x43400000, r12
                cmpr    r12, r8
                ble     loc_34728
                notbit  0x1F, r12, r12
                cmpr    r12, r8
                bge     loc_34728
                ld      0x50A368, r15
                setbit  0, r15, r15
                st      r15, 0x50A368
loc_34728:                              # CODE XREF: sub_3464C+B8↑j
                addr    r7, r5, r8
                lda     0x43400000, r12
                cmpr    r12, r8
                ble     loc_3475C
                notbit  0x1F, r12, r12
                cmpr    r12, r8
                bge     loc_3475C
                ld      0x50A368, r15
                setbit  1, r15, r15
                st      r15, 0x50A368
loc_3475C:                              # CODE XREF: sub_3464C+98↑j
                lda     0x43400000, r12
                cmpr    r12, r5
                ble     loc_347E0
                notbit  0x1F, r12, r12
                cmpr    r12, r5
                bge     loc_347E0
                subr    r7, r4, r8
                lda     0x43780000, r12
                cmpr    r12, r8
                ble     loc_347AC
                notbit  0x1F, r12, r12
                cmpr    r12, r8
                bge     loc_347AC
                ld      0x50A368, r15
                setbit  2, r15, r15
                st      r15, 0x50A368
loc_347AC:                              # CODE XREF: sub_3464C+13C↑j
                addr    r7, r4, r8
                lda     0x43780000, r12
                cmpr    r12, r8
                ble     loc_347E0
                notbit  0x1F, r12, r12
                cmpr    r12, r8
                bge     loc_347E0
                ld      0x50A368, r15
                setbit  3, r15, r15
                st      r15, 0x50A368
loc_347E0:                              # CODE XREF: sub_3464C+50↑j
                ret
# End of function sub_3464C
# ---------------------------------------------------------------------------
dword_347E4:    .long 0                 # DATA XREF: ROM:000318BC↑r
                .long 0x28
                .long 0x50
                .long 0x78
                .long 0xA0
                .long 0xC8
                .long 0xF0
                .long 0x118
                .long 0x140
                .long 0x168
                .long 0x190
                .long 0x1B8
                .long 0x1E0
                .long 0x200
                .long 0x200
                .long 0x200
word_34824:     .short 0xFE00           # DATA XREF: ROM:00031964↑r
                .short 0xFFFF
                .short 0xFE00
                .short 0xFFFF
                .short 0xFE00
                .short 0xFFFF
                .short 0xFE20
                .short 0xFFFF
                .short 0xFE48
                .short 0xFFFF
                .short 0xFE70
                .short 0xFFFF
                .short 0xFE98
                .short 0xFFFF
                .short 0xFEC0
                .short 0xFFFF
                .short 0xFEE8
                .short 0xFFFF
                .short 0xFF10
                .short 0xFFFF
                .short 0xFF38
                .short 0xFFFF
                .short 0xFF60
                .short 0xFFFF
                .short 0xFF88
                .short 0xFFFF
                .short 0xFFB0
                .short 0xFFFF
                .short 0xFFD8
                .short 0xFFFF
                .short 0
                .short 0
dword_34864:    .long 512               # DATA XREF: ROM:000318D4↑r
                .long 512
                .long 512
                .long 480
                .long 440
                .long 400
                .long 360
                .long 320
                .long 280
                .long 240
                .long 200
                .long 160
                .long 120
                .long 80
                .long 40
                .long 0
knock_down_floor_anim:.float 1.0        # DATA XREF: ROM:00032A34↑o
                .short 18               # number of frames
                .short 1
                .short 2633
                .short 2634
                .short 2635
                .short 2636
                .short 2637
                .short 2638
                .short 2639
                .short 2640
                .short 2641
                .short 2830
                .short 2831
                .short 2832
                .short 2905
                .short 2906
                .short 2907
                .short 2908
                .short 2909
                .short 2910
knock_down_floor_anim_1:.float 1.0      # DATA XREF: ROM:00032A48↑o
                .short 16
                .short 1
                .short 2958
                .short 2959
                .short 2960
                .short 2961
                .short 2962
                .short 2963
                .short 2964
                .short 2965
                .short 2966
                .short 2967
                .short 2968
                .short 2969
                .short 2970
                .short 2971
                .short 2972
                .short 2973
three_frame_explosion:.float 4.0        # DATA XREF: ROM:00032A38↑o
                .short 8                # number of frames
                .short 2
                .short 807
                .short 808
                .short 809
                .short 810
                .short 807
                .short 808
                .short 809
                .short 810
_uk_particle_effect:.float 1.0          # DATA XREF: ROM:00032A44↑o
                .short 16               # number of frames
                .short 2                # loop count
                .short 2311
                .short 2312
                .short 2313
                .short 2314
                .short 2315
                .short 2316
                .short 2317
                .short 2318
two_frame_sparkles:.float 0.40000001    # DATA XREF: ROM:00032A4C↑o
                .short 4
                .short 2
                .short 3501
                .short 3502
two_frame_sparkles_fad:.float 0.40000001 # DATA XREF: ROM:00032A50↑o
                .short 4
                .short 2
                .short 3503
                .short 3504
star_smack:     .float 3.0              # DATA XREF: ROM:00032A54↑o
                .short 8
                .short 4
                .short 2633
                .short 2634
blue_sparkles:  .float 1.0              # DATA XREF: ROM:00032A58↑o
                .short 16
                .short 1
                .short 0
                .short 3485
                .short 0
                .short 3485
                .short 0
                .short 3486
                .short 0
                .short 3486
                .short 0
                .short 3487
                .short 0
                .short 3487
                .short 0
                .short 3488
                .short 0
                .short 3488
un_small_two_frame_sparkles:.float 0.25
                .short 4
                .short 2
                .short 3501
                .short 3502
un_small_two_frame_sparkles_fade:.float 0.25
                .short 4
                .short 2
                .short 3501
                .short 3502
floats_1_to_4_5:.float 1.0              # DATA XREF: sub_32B10+44↑r
                .float 1.5
                .float 2.0
                .float 2.5
                .float 3.0
                .float 3.5
                .float 0.40000001
                .float 4.5
spark_ka_pow:   .long 15                # DATA XREF: sub_327E8+40↑o
                .float 1.0
                .short 2633
                .short 2634
                .short 2635
                .short 2636
                .short 2637
                .short 2638
                .short 2639
                .short 2640
                .short 2641
                .short 2830
                .short 2831
                .short 2832
                .short 2905
                .short 2906
                .short 2907
                .short 0
no_effect_float_7:.long 15              # DATA XREF: sub_327E8+78↑o
                .float 0.69999999
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
no_effect_float_1:.long 15              # DATA XREF: sub_327E8+B0↑o
                .float 1.0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
no_effect_float_7_0:.long 0xF           # DATA XREF: sub_327E8+F0↑o
                .float 0.69999999
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
flt_34A4C:      .float 0.059999999      # DATA XREF: efc_crushpts_speed_cont+40↑r
                .float 0.15000001
                .float 0.090000004
                .float 0.090000004
                .float 0.25999999
                .float 0.1
flt_34A64:      .float 0.039999999      # DATA XREF: efc_crushpts_speed_cont+70↑r
                .float 0.029999999
                .float 0.079999998
                .float 0.059999999
                .float 0.029999999
                .float 0.0
word_34A7C:     .short 0xE940           # DATA XREF: efc_crushpts_speed_cont+E4↑r
                .short 0xF1C8
                .short 0xFA50
                .short 0xEC18
                .short 0xF778
                .short 0xEEF0
                .short 0xF4A0
                .short 0xFD28
                .short 0x5B0
                .short 0x888
                .short 0x2D8
                .short 0x13E8
                .short 0xE38
                .short 0x16C0
                .short 0xB60
                .short 0x1110
word_34A9C:     .short 0x4396           # DATA XREF: efc_crushpts_speed_cont+F4↑r
                .short 0x3D0B
                .short 0xF3B6
                .short 0x3CFD
                .short 0x9BA6
                .short 0xBB44
                .short 0x74BC
                .short 0x3C13
                .short 0x5C29
                .short 0x3D0F
                .short 0x126F
                .short 0xBB03
                .short 0x9168
                .short 0x3CED
                .short 0x9BA6
                .short 0x3B44
                .short 0x4396
                .short 0x3C8B
                .short 0x2F1B
                .short 0x3D5D
                .short 0x126F
                .short 0xBC83
                .short 0x831
                .short 0x3CAC
                .short 0x20C5
                .short 0x3D30
                .short 0xC28F
                .short 0x3C75
                .short 0x9BA6
                .short 0xBBC4
                .short 0x4396
                .short 0x3D8B
opening_cutscene_anim_data:.long 0      # DATA XREF: sub_337BC+6C↑r
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long egg_robo_head_rising_cutscene_anim
                .long _uk_rocket_metal_trans
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long egg_robo_head_rising_cutscene_anim
                .long _uk_rocket_metal_trans
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
_uk_rocket_metal_trans:.short 31        # DATA XREF: ROM:00034B14↑o
                .short 3366
                .short 3375
                .short 3386
                .short 3397
                .short 3400
                .short 3401
                .short 3402
                .short 3403
                .short 3404
                .short 3405
                .short 3376
                .short 3377
                .short 3378
                .short 3379
                .short 3380
                .short 3381
                .short 3382
                .short 3383
                .short 3384
                .short 3385
                .short 3387
                .short 3388
                .short 3389
                .short 3390
                .short 3391
                .short 3392
                .short 3393
                .short 3394
                .short 3395
                .short 3396
                .short 3398
                .short 3399
                .short 0
egg_robo_head_rising_cutscene_anim:.short 11 # DATA XREF: ROM:00034B10↑o
                .short 2895
                .short 2981
                .short 2982
                .short 2983
                .short 2984
                .short 2985
                .short 2986
                .short 2987
                .short 2988
                .short 2989
                .short 2990
                .short 2991
uk_egg_robo_head:.short 2980            # DATA XREF: uk_egg_robo_head_sub+10↑r
                .short 2991
eyelid_data:    .long sonic_eyelids     # DATA XREF: efc_mabuta_cont+84↑r
                .long tails_eyelids
                .long amy_eyelids
                .long 0
                .long fang_eyelids
                .long bark_eyelids
                .long knuckles_eyelids
                .long espio_eyelids
                .long 0
                .long 0
                .long bean_eyelids
                .long 0
                .long 0
                .long 0
                .long 0
                .long honey_eyelids
                .long 0
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_i_eyelids
                .long tails_i_eyelids
                .long amy_i_eyelids
                .long 0
                .long fang_i_eyelids
                .long bark_i_eyelids
                .long knuckles_i_eyelids
                .long espio_i_eyelids
                .long 0
                .long 0
                .long bean_i_eyelids
                .long 0
                .long 0
                .long 0
                .long 0
                .long honey_i_eyelids
                .long 0
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
                .long sonic_eyelids
sonic_eyelids:  .short 3871             # DATA XREF: ROM:eyelid_data↑o
                .short 3874
                .short 3867
                .short 3867
                .short 3867
                .short 3867
                .short 3867
                .short 3867
                .short 3867
                .short 3871
sonic_i_eyelids:.short 3975             # DATA XREF: ROM:00034C76↑o
                .short 3978
                .short 3971
                .short 3971
                .short 3971
                .short 3971
                .short 3971
                .short 3971
                .short 3971
                .short 3975
tails_eyelids:  .short 3881             # DATA XREF: ROM:00034C12↑o
                .short 3884
                .short 3877
                .short 3877
                .short 3877
                .short 3877
                .short 3877
                .short 3877
                .short 3877
                .short 3881
tails_i_eyelids:.short 3990             # DATA XREF: ROM:00034C7A↑o
                .short 3993
                .short 3986
                .short 3986
                .short 3986
                .short 3986
                .short 3986
                .short 3986
                .short 3986
                .short 3990
knuckles_eyelids:.short 3861            # DATA XREF: ROM:00034C26↑o
                .short 3864
                .short 3857
                .short 3857
                .short 3857
                .short 3857
                .short 3857
                .short 3857
                .short 3857
                .short 3861
knuckles_i_eyelids:.short 3960          # DATA XREF: ROM:00034C8E↑o
                .short 3963
                .short 3956
                .short 3956
                .short 3956
                .short 3956
                .short 3956
                .short 3956
                .short 3956
                .short 3960
fang_eyelids:   .short 3454             # DATA XREF: ROM:00034C1E↑o
                .short 3854
                .short 3450
                .short 3450
                .short 3450
                .short 3450
                .short 3450
                .short 3450
                .short 3450
                .short 3454
fang_i_eyelids: .short 3945             # DATA XREF: ROM:00034C86↑o
                .short 3948
                .short 3941
                .short 3941
                .short 3941
                .short 3941
                .short 3941
                .short 3941
                .short 3941
                .short 3945
espio_eyelids:  .short 3444             # DATA XREF: ROM:00034C2A↑o
                .short 3447
                .short 3440
                .short 3440
                .short 3440
                .short 3440
                .short 3440
                .short 3440
                .short 3440
                .short 3444
espio_i_eyelids:.short 3933             # DATA XREF: ROM:00034C92↑o
                .short 3936
                .short 3929
                .short 3929
                .short 3929
                .short 3929
                .short 3929
                .short 3929
                .short 3929
                .short 3933
amy_eyelids:    .short 2823             # DATA XREF: ROM:00034C16↑o
                .short 2826
                .short 2819
                .short 2819
                .short 2819
                .short 2819
                .short 2819
                .short 2819
                .short 2819
                .short 2823
amy_i_eyelids:  .short 3901             # DATA XREF: ROM:00034C7E↑o
                .short 3904
                .short 3897
                .short 3897
                .short 3897
                .short 3897
                .short 3897
                .short 3897
                .short 3897
                .short 3901
bark_eyelids:   .short 3434             # DATA XREF: ROM:00034C22↑o
                .short 3437
                .short 3430
                .short 3430
                .short 3430
                .short 3430
                .short 3430
                .short 3430
                .short 3430
                .short 3434
bark_i_eyelids: .short 3923             # DATA XREF: ROM:00034C8A↑o
                .short 3926
                .short 3919
                .short 3919
                .short 3919
                .short 3919
                .short 3919
                .short 3919
                .short 3919
                .short 3923
bean_eyelids:   .short 3225             # DATA XREF: ROM:00034C36↑o
                .short 3427
                .short 2829
                .short 2829
                .short 2829
                .short 2829
                .short 2829
                .short 2829
                .short 2829
                .short 3225
bean_i_eyelids: .short 3913             # DATA XREF: ROM:00034C9E↑o
                .short 3916
                .short 3909
                .short 3909
                .short 3909
                .short 3909
                .short 3909
                .short 3909
                .short 3909
                .short 3913
honey_eyelids:  .short 3587             # DATA XREF: ROM:00034C4A↑o
                .short 3590
                .short 3583
                .short 3583
                .short 3583
                .short 3583
                .short 3583
                .short 3583
                .short 3583
                .short 3587
honey_i_eyelids:.short 3510             # DATA XREF: ROM:00034CB2↑o
                .short 3563
                .short 3506
                .short 3506
                .short 3506
                .short 3506
                .short 3506
                .short 3506
                .short 3506
                .short 3510
sweat_animation_obj_list:.short 3474    # DATA XREF: efc_asease_cont+84↑r
                .short 3475
                .short 3476
                .short 3477
                .short 3478
                .short 3479
                .short 3480
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 3474
                .short 3475
                .short 3476
                .short 3477
                .short 3478
                .short 3479
                .short 3480
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 3474
                .short 3475
                .short 3476
                .short 3477
                .short 3478
                .short 3479
                .short 3480
                .short 0
amy_heads:      .short 4106             # DATA XREF: efc_mabuta_cont:uk_amy_heads↑o
                .short 4107             # Amy head mouth right
                .short 3338             # Amy head mouth left with eyelash
                .short 3339             # Amy head mouth right with eyelash
amy_i_heads:    .short 3743             # DATA XREF: efc_mabuta_cont:uk_amy_i_heads↑o
                .short 3744             # Amy head mouth right (Grey)
                .short 3762             # Amy head mouth left with eyelash (Grey)
                .short 3763             # Amy head mouth right with eyelash (Grey)
egg_mech_arms:  .short 4126             # DATA XREF: efc_eggrob_mune_chg+38↑r
                .short 4127
                .short 4128
                .short 4129
                .short 4130
                .short 4131
                .short 4132
                .short 4133
                .short 4134
                .short 4133
                .short 4132
                .short 4131
                .short 4130
                .short 4129
                .short 4128
                .short 4127
                .short 0
# =============== S U B R O U T I N E =======================================
sel_disp_init:                          # DATA XREF: CONTINUE_DSP-4EDC↑o
                ldob    char_select_array_length, r4 # Label from official source
                ldob    0x5C(g13), r3   # g13 = mod_fa_sel_disp_add
                cmpoble r3, r4, loc_34ED0 # Seems to branch if p1 or p2
                mov     0, r15          # Initialize char_sel_cursor_pos
                stib    r15, 0x5C(g13)
loc_34ED0:                              # CODE XREF: sel_disp_init+C↑j
                ldob    0x78(g13), r3
                cmpoble r3, r4, loc_34EDC
                st      r4, 0x78(g13)
loc_34EDC:                              # CODE XREF: sel_disp_init+1C↑j
                ld      mod_fa_enemy0, g4
                mov     0, r3
                setbit  0, r3, r3
                st      r3, 0x40(g4)
                ld      mod_fa_enemy1, g4
                mov     0, r3
                setbit  0, r3, r3
                st      r3, 0x40(g4)
                call    shifts_graphics_somehow
                mov     0x10, r15
                stis    r15, 0x46(g13)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                stib    r15, 0x49(g13)
                mov     0, r15
                st      r15, 0x40(g13)
                mov     0, r15
                st      r15, 0x50(g13)
                mov     0, r15
                st      r15, 0x54(g13)
                mov     0, r15
                st      r15, 0x6C(g13)
                mov     0, r15
                st      r15, 0x70(g13)
                mov     0xF, r15
                stis    r15, 0x58(g13)
                mov     0xF, r15
                stis    r15, 0x74(g13)
                mov     0, r15
                stib    r15, 0x5F(g13)
                mov     0, r15
                stib    r15, 0x7B(g13)
                lda     select_init, r15
                st      r15, 0x4C(g13)
                lda     select_init_P2, r15
                st      r15, 0x68(g13)
                mov     0xC, r15
                stis    r15, 0x44(g13)
                ld      select0_flag, r15
                clrbit  4, r15, r15
                st      r15, select0_flag
                ld      select1_flag, r15
                clrbit  4, r15, r15
                st      r15, select1_flag
                mov     0, r15
                stis    r15, 0x5001C4
                ld      select0_flag, r15
                bbs     2, r15, loc_35004
                ld      fa_rob0, r4
                ldob    RANDOM_MODE, r5
                cmpo    1, r5
                bne     sdi_p1_skip_go
                ldob    randomize_story_order, r5
                ldib    STORY_FIGHTER_ORDER[r5*2], r15
                stib    r15, 0x1B0(r4)
                b       loc_35004
# ---------------------------------------------------------------------------
sdi_p1_skip_go:                         # CODE XREF: sel_disp_init+124↑j
                ldib    STORY_FIGHTER_ORDER, r15 # Label from official source
                stib    r15, 0x1B0(r4)  # P1_PARTS+0x1B0 = STORY_FIGHTER_ORDER
loc_35004:                              # CODE XREF: sel_disp_init+10C↑j
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_35034
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_35034:                              # CODE XREF: sel_disp_init+168↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7)
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     0xBF800000, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 3, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      select1_flag, r15
                bbs     2, r15, loc_35190
                ld      fa_rob1, r4
                ldob    RANDOM_MODE, r5
                cmpo    1, r5
                bne     sdi_p2_skip_go
                ldob    randomize_story_order, r5 # Always 0
                ldib    STORY_FIGHTER_ORDER[r5*2], r15 # if randomize_story_order = 0 the opponent will always be Knuckles
                stib    r15, 0x1B0(r4)
                b       loc_35190
# ---------------------------------------------------------------------------
sdi_p2_skip_go:                         # CODE XREF: sel_disp_init+2B0↑j
                ldib    STORY_FIGHTER_ORDER, r15 # Label from official source
                stib    r15, 0x1B0(r4)
loc_35190:                              # CODE XREF: sel_disp_init+298↑j
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_351C0
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_351C0:                              # CODE XREF: sel_disp_init+2F4↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     0x3F800000, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 1, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                lda     sel_disp, r15
                st      r15, 0xC(g13)
                ld      fa_camera, r3
                mov     0, r15
                stis    r15, 0x26(r3)
                mov     14, g0
                call    _Scroll_Initialize
                lda     0x1004000, g9
                mov     0, r15
                stis    r15, scrB_V_page
                mov     0, r15
                stis    r15, scrB_H_page
                mov     0, r15
                stis    r15, 0x100A00E
                mov     0, r15
                stis    r15, 0x100A006
                mov     0, r8
                lda     scrB_H_page, r3
                mov     0, r4
                setbit  0xF, r4, r4
                stos    r4, (r3)
                stos    r4, 2(r3)
                mov     0, r4
                setbit  0xE, r4, r4
                stos    r4, 8(r3)
                stos    r4, 0xA(r3)
                lda     0x1008800, r5
                shlo    7, 3, r4
fisb_loop:                              # CODE XREF: sel_disp_init+4BC↓j
                stis    r8, (r5)        # Label from official source
                addo    2, r5, r5
                cmpdeco 1, r4, r4
                bl      fisb_loop
                lda     0x1006000, g9
                lda     CG_DATA_START, g8
                mov     1, g0
                ld      texture_palette_offsets[g0*4], r3
                ldos    0xC(r3), r3
                lda     scrB_H_page, r3
                mov     0, r4
                stos    r4, 8(r3)
                stos    r4, 0xA(r3)
                setbit  0xF, r4, r4
                stos    r4, (r3)
                stos    r4, 2(r3)
                lda     1, r3
                ld      texture_palette_offsets[r3*4], r3
                ldos    0x1A(r3), r4
                lda     CG_DATA_START, r8
                shlo    0xA, 3, r10
draw_char_select_bg:                    # CODE XREF: sel_disp_init+528↓j
                stis    r4, (r8)
                addo    2, r8, r8
                cmpdeco 1, r10, r10
                bl      draw_char_select_bg
                lda     0x1004000, g9
                lda     115, g0         # Draw Character Select Background
                call    dsp_pattern_new
                lda     0x1005300, g9
                lda     116, g0         # Draw Character Select Squares
                call    dsp_pattern_new
                ldob    char_select_array_length, r10
                addo    1, r10, r10
                mov     0, r8
small_dface_loop:                       # CODE XREF: sel_disp_init+598↓j
                ldob    char_select_list(r8), r3 # Label from official source
                ld      CHAR_SELECT_PORTRAITS[r3*4], g0
                ldos    (g0), g0
                mov     3, r3
                mulo    7, r8, r4
                addo    r3, r4, r4
                lda     0x1005380, g9
                shlo    1, r4, r15
                addo    r15, g9, g9
                call    dsp_pattern_new
                addo    1, r8, r8
                cmpdeco 1, r10, r10
                bl      small_dface_loop
                lda     NAME_CELL_AND_CG_JPN, r11
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3352(r3), r3
                cmpobe  0, r3, draw_p1_name
                lda     NAME_CELL_AND_CG_USA, r11
draw_p1_name:                           # CODE XREF: sel_disp_init+5B4↑j
                ld      select0_flag, r15
                bbc     2, r15, draw_p2_name
                ld      fa_rob0, r7
                ldob    0x1B1(r7), r6
                shlo    2, 0x15, g1
                ldos    (r11)[r6*8], g0
                call    _Scroll_Initialize2
                lda     0x1000386, g9
                ldos    2(r11)[r6*8], g0
                call    draw_name_texures
draw_p2_name:                           # CODE XREF: sel_disp_init+5C8↑j
                ld      select1_flag, r15
                bbc     2, r15, sel_disp
                ld      fa_rob1, r7
                ldob    0x1B1(r7), r6
                lda     0x56, g1
                ldos    (r11)[r6*8], g0
                call    _Scroll_Initialize2
                lda     0x1001040, g9
                ldos    2(r11)[r6*8], g0
                call    draw_name_texures
sel_disp:                               # CODE XREF: sel_disp_init+600↑j
                ld      select0_flag, r15 # Label from official source
                bbc     2, r15, draw_random_mode_p1
                ld      select1_flag, r15
                bbc     2, r15, chk_rnd_mode_p1
                ldob    RANDOM_MODE, r14
                cmpobe  0, r14, not_random_mode
                lda     0x1000C90, g9
                lda     aRandomMode_blank, g0 # "           "
                call    s_print_mes
                lda     0x1000CD2, g9
                lda     aRandomMode_blank, g0 # "           "
                call    s_print_mes
                b       not_random_mode
# ---------------------------------------------------------------------------
chk_rnd_mode_p1:                        # CODE XREF: sel_disp_init+644↑j
                ldob    RANDOM_MODE, r14 # Label from official source
                cmpobe  0, r14, not_random_mode
                lda     0x1000C90, g9
                lda     aRandomMode, g0 # "RANDOM MODE"
                call    s_print_mes
                b       not_random_mode
# ---------------------------------------------------------------------------
draw_random_mode_p1:                    # CODE XREF: sel_disp_init+638↑j
                ldob    RANDOM_MODE, r14
                cmpobe  0, r14, not_random_mode
                lda     0x1000CD2, g9
                lda     aRandomMode, g0 # "RANDOM MODE"
                call    s_print_mes
not_random_mode:                        # CODE XREF: sel_disp_init+650↑j
                lda     0x1020000, r3   # Label from official source
                shlo    8, 1, r4
                st      r4, (r3)
                ld      debug_flag, r15
                bbs     5, r15, loc_35AEC # return
                lda     150, r13
                ld      0x50(g13), r14  # g13 = mod_fa_sel_disp_add
                cmpobg  r13, r14, sel_pl_p1_command
                shlo    8, 23, r13      # r13 = 00001700
                ld      INTERUPT_FLAGS_HELD, r14
                cmpobne r13, r14, sel_pl_p1_command # if r13=r14 it just falls through, which is the same as the offset
sel_pl_p1_command:                      # CODE XREF: sel_disp_init+6E8↑j
                lda     150, r13        # Label from official source
                ld      0x6C(g13), r14
                cmpobg  r13, r14, sel_pl_p2_command
                shlo    16, 23, r13     # r13 = 00170000
                ld      INTERUPT_FLAGS_HELD, r14
                cmpobne r13, r14, sel_pl_p2_command
sel_pl_p2_command:                      # CODE XREF: sel_disp_init+704↑j
                lda     displacement, r4 # Label from official source
                mov     r4, r5
                mov     r4, r6
                ld      fa_rob0, g7
                shlo    0xE, 3, r15     # r15 = 0xC000
                stis    r15, 0x26(g7)   # Store 0xC000 to P1_PARTS+0x26 aka p1_yang_0
                stt     r4, 0x18(g7)    # Store 0x00 to P1_PARTS+0x18 aka p1_xpos
                ld      fa_rob1, g7
                shlo    0xE, 1, r15     # r15 = 0x4000
                stis    r15, 0x26(g7)   # Store 0x4000 to P2_PARTS+0x26 aka p2_yang_0
                stt     r4, 0x18(g7)    # Store 0x00 to P2_PARTS+0x18 aka p2_xpos
                ld      0x4C(g13), r3   # r3 = mod_fa_sel_disp_add+0x4C
                callx   (r3)            # Call select_init
                ld      0x68(g13), r3   # r3 = mod_fa_sel_disp_add+0x68
                callx   (r3)            # Call select_init_P2
                ldos    CTRL_TIMER, r3
                bbs     15, r3, s_t_dsp_exit
                shro    6, r3, r3
                ld      CHAR_SEL_TIMER[r3*4], g0
                lda     0x100033A, g9
                call    dsp_mes_2x3
s_t_dsp_exit:                           # CODE XREF: sel_disp_init+768↑j
                ldob    0x5D(g13), r5   # Label from official source
                ldob    char_select_list(r5), r5
                ldob    0x5C(g13), r6   # r6 = char_sel_cursor_pos (mod_fa_sel_disp_add+0x5C)
                ldob    char_select_list(r6), r6
                lda     NAME_CELL_AND_CG_JPN, r11
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3352(r3), r3  # r3 = BACKUP_RAM_TO_RAM+0x3352
                cmpobe  0, r3, nam_not_usa # If region NOT Japan
                lda     NAME_CELL_AND_CG_USA, r11
nam_not_usa:                            # CODE XREF: sel_disp_init+7B4↑j
                ld      fa_rob0, r7     # Label from Fighting Vipers source
                ldob    0x1B1(r7), r7   # r7 = P1_SELECTED (P1_PARTS+0x1B1)
                ld      select0_flag, r15
                bbc     2, r15, loc_356BC
                ldob    0x5D(g13), r13  # r13 = mod_fa_sel_disp_add+0x5D
                ldob    0x5C(g13), r14  # r14 = mod_fa_sel_disp_add+0x5C
                cmpobe  r13, r14, loc_356BC
                shlo    2, 0x15, g1
                ldos    (r11)[r7*8], g0 # g0 = (P1_SELECTED * 8) + NAME_CELL_AND_CG_USA
                call    _Scroll_Initialize2
                lda     0x1000386, g9
                ldos    2(r11)[r7*8], g0
                call    draw_name_texures
loc_356BC:                              # CODE XREF: sel_disp_init+7D4↑j
                ldob    0x79(g13), r5
                ldob    char_select_list(r5), r5
                ldob    0x78(g13), r6
                ldob    char_select_list(r6), r6
                ld      fa_rob1, r7
                ldob    0x1B1(r7), r7
                ld      select1_flag, r15
                bbc     2, r15, loc_35718
                ldob    0x79(g13), r13
                ldob    0x78(g13), r14
                cmpobe  r13, r14, loc_35718
                lda     0x56, g1
                ldos    (r11)[r7*8], g0
                call    _Scroll_Initialize2
                lda     0x1001040, g9
                ldos    2(r11)[r7*8], g0
                call    draw_name_texures
loc_35718:                              # CODE XREF: sel_disp_init+830↑j
                ld      select0_flag, r15
                bbc     2, r15, loc_35760
                ldob    char_select_array_length, r13
                ldob    0x5C(g13), r14
                cmpobl  r13, r14, loc_35760
                ldob    char_select_array_length, r13
                ldob    0x5D(g13), r14
                cmpobl  r13, r14, loc_35760
                ldob    0x5D(g13), g0
                ldob    0x5C(g13), g1
                ldob    0x5F(g13), g2
                ld      select0_flag, g3
                call    sel_mini_face_disp
                stob    g2, 0x5F(g13)
loc_35760:                              # CODE XREF: sel_disp_init+868↑j
                ld      select1_flag, r15
                bbc     2, r15, loc_357A8
                ldob    char_select_array_length, r13
                ldob    0x78(g13), r14
                cmpobl  r13, r14, loc_357A8
                ldob    char_select_array_length, r13
                ldob    0x79(g13), r14
                cmpobl  r13, r14, loc_357A8
                ldob    0x79(g13), g0
                ldob    0x78(g13), g1
                ldob    0x7B(g13), g2
                ld      select1_flag, g3
                call    sel_mini_face_disp
                stob    g2, 0x7B(g13)
loc_357A8:                              # CODE XREF: sel_disp_init+8B0↑j
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_357E4
                ld      select0_flag, r15
                bbc     2, r15, loc_357E4
                ld      select1_flag, r15
                bbc     2, r15, loc_357E4
                ld      select0_flag, r15
                bbs     1, r15, loc_357E4
                ld      select1_flag, r15
                bbs     1, r15, loc_357E4
loc_357E4:                              # CODE XREF: sel_disp_init+8F8↑j
                ld      select0_flag, r15
                bbs     2, r15, loc_357FC
                ld      select0_flag, r15
                bbc     0, r15, loc_35878
loc_357FC:                              # CODE XREF: sel_disp_init+934↑j
                ldob    0x5D(g13), r14
                mulo    7, r14, r3
                ldob    0x5C(g13), r14
                mulo    7, r14, r4
                addo    2, r3, r3
                addo    2, r4, r4
                ldob    0x5C(g13), r13
                ldob    0x5D(g13), r14
                cmpobne r13, r14, loc_3582C
                ld      select0_flag, r15
                bbc     1, r15, loc_35878
loc_3582C:                              # CODE XREF: sel_disp_init+964↑j
                lda     0x1001380, g9
                shlo    1, r3, r15
                addo    r15, g9, g9
                lda     113, g0         # 1P cursor texture
                call    clr_pattern
                ldob    char_select_array_length, r13
                ldob    0x5C(g13), r14
                cmpobl  r13, r14, loc_35878
                ld      frame_counter, r15
                bbs     3, r15, loc_35878
                lda     0x1001380, g9
                shlo    1, r4, r15
                addo    r15, g9, g9
                lda     113, g0         # 1P cursor texture
                call    dsp_pattern_new
loc_35878:                              # CODE XREF: sel_disp_init+940↑j
                ld      select1_flag, r15
                bbs     2, r15, loc_35890
                ld      select1_flag, r15
                bbc     0, r15, loc_3590C
loc_35890:                              # CODE XREF: sel_disp_init+9C8↑j
                ldob    0x79(g13), r14
                mulo    7, r14, r3
                ldob    0x78(g13), r14
                mulo    7, r14, r4
                addo    2, r3, r3
                addo    2, r4, r4
                ldob    0x78(g13), r13
                ldob    0x79(g13), r14
                cmpobne r13, r14, loc_358C0
                ld      select1_flag, r15
                bbc     1, r15, loc_3590C
loc_358C0:                              # CODE XREF: sel_disp_init+9F8↑j
                lda     0x1001580, g9
                shlo    1, r3, r15
                addo    r15, g9, g9
                lda     114, g0         # 2P cursor texture
                call    clr_pattern
                ldob    char_select_array_length, r13
                ldob    0x78(g13), r14
                cmpobl  r13, r14, loc_3590C
                ld      frame_counter, r15
                bbc     3, r15, loc_3590C
                lda     0x1001580, g9
                shlo    1, r4, r15
                addo    r15, g9, g9
                lda     114, g0         # 2P cursor texture
                call    dsp_pattern_new
loc_3590C:                              # CODE XREF: sel_disp_init+9D4↑j
                ld      select0_flag, r15
                bbc     2, r15, loc_359FC
                ld      0x50(g13), r10
                addo    1, r10, r10
                st      r10, 0x50(g13)
                ld      fa_rob0, g7
                ldob    0x5C(g13), r3   # mod_fa_sel_disp_add+0x5C
                ldob    char_select_list(r3), r3
                ld      off_DACBC[r3*4], r7
                ld      0x54(g13), r11
                shlo    3, r11, r9
                lda     (r7)[r9], r9
                ld      (r9), r3
                cmpobg  r3, r10, loc_359F4
                addo    1, r11, r11
                st      r11, 0x54(g13)
                subo    1, r11, r11
                and     3, r11, r11
                ld      mod_fa_enemy0, g4
                ldob    0x5C(g13), r3   # mod_fa_sel_disp_add+0x5C
                ldob    char_select_list(r3), r3
                stob    r3, 0xC9(g4)    # mod_fa_enemy0_add+0xC9
                ld      0x40(g4), r3    # r3 = mod_fa_enemy0_add+0x40
                bbc     0, r3, loc_359F4 # If bit 0 of mod_fa_enemy0_enemy_status is clear, branch
                clrbit  0, r3, r3       # Else, clear bit 0 of mod_fa_enemy0_enemy_status
                st      r3, 0x40(g4)    # Store the value back to mod_fa_enemy0_enemy_status
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     5, r4
                mulo    r4, r3, r3
                addo    r11, r3, r3
                ldob    mod_fa_enemy_waza_num_list(r3), r3 # Always 0x11
                stob    r3, 0xBA(g4)    # mod_fa_enemy0_add+0xBA
                lda     0x7F, r15
                stib    r15, 0xBB(g4)   # mod_fa_enemy0_add+0xBB
                lda     0x7F, r15
                stib    r15, 0xBC(g4)   # mod_fa_enemy0_add+0xBC
                lda     0x7F, r15
                stib    r15, 0xBD(g4)   # mod_fa_enemy0_add+0xBD
                mov     0, r15
                stib    r15, 0xC5(g4)   # mod_fa_enemy0_add+0xC5
                mov     0, r15
                stib    r15, 0xC6(g4)   # mod_fa_enemy0_add+0xC6
                mov     0, r15
                stis    r15, 0xA0(g4)   # mod_fa_enemy0_add+0xA0
                mov     0, r15
                stis    r15, 0xB6(g4)   # mod_fa_enemy0_add+0xB6
                mov     0, r15
                stis    r15, 0xAC(g4)   # mod_fa_enemy0_add+0xAC
                mov     0, r15
                stib    r15, 0xBE(g4)   # mod_fa_enemy0_add+0xBE
loc_359F4:                              # CODE XREF: sel_disp_init+A98↑j
                ld      mod_fa_enemy0, g4
loc_359FC:                              # CODE XREF: sel_disp_init+A5C↑j
                ld      select1_flag, r15
                bbc     2, r15, loc_35AEC # return
                ld      0x6C(g13), r10  # mod_fa_sel_disp_add+0x6C
                addo    1, r10, r10
                st      r10, 0x6C(g13)
                ld      fa_rob1, g7
                ldob    0x78(g13), r3   # mod_fa_sel_disp_add+0x78
                ldob    char_select_list(r3), r3
                ld      off_DACBC[r3*4], r7
                ld      0x70(g13), r11  # mod_fa_sel_disp_add+0x70
                shlo    3, r11, r9
                lda     (r7)[r9], r9
                ld      (r9), r3
                cmpobg  r3, r10, loc_35AE4
                addo    1, r11, r11
                st      r11, 0x70(g13)
                subo    1, r11, r11
                and     3, r11, r11
                ld      mod_fa_enemy1, g4
                ldob    0x78(g13), r3   # mod_fa_sel_disp_add+0x78
                ldob    char_select_list(r3), r3
                stob    r3, 0xC9(g4)
                ld      0x40(g4), r3
                bbc     0, r3, loc_35AE4
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     5, r4
                mulo    r4, r3, r3
                addo    r11, r3, r3
                ldob    mod_fa_enemy_waza_num_list(r3), r3 # Always 0x11
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
loc_35AE4:                              # CODE XREF: sel_disp_init+B88↑j
                ld      mod_fa_enemy1, g4
loc_35AEC:                              # CODE XREF: sel_disp_init+6DC↑j
                ret                     # return
# End of function sel_disp_init
# =============== S U B R O U T I N E =======================================
sel_mini_face_disp:                     # CODE XREF: sel_disp_init+8A0↑p
                ldob    char_select_list(g0), r9 # Label from official source
                ld      CHAR_SELECT_PORTRAITS[r9*4], r3
                ldos    (r3), g0
                mulo    7, g0, r4
                addo    3, r4, r4
                lda     0x1005380, g9
                shlo    1, r4, r15
                addo    r15, g9, g9
                call    dsp_pattern_new
                divo    3, g2, r4
                ldob    byte_DB014(r4), r5
                bbc     1, g3, loc_35B38
                mov     0, r5
                b       loc_35B4C
# ---------------------------------------------------------------------------
loc_35B38:                              # CODE XREF: sel_mini_face_disp+3C↑j
                ldob    char_port_anim_frame_count, r12
                addi    1, g2, r3
                cmpibg  r3, r12, loc_35B4C
                mov     r3, g2
loc_35B4C:                              # CODE XREF: sel_mini_face_disp+44↑j
                ldob    char_select_list(g1), r9
                ld      CHAR_SELECT_PORTRAITS[r9*4], r3
                ldos    (r3)[r5*2], g0
                mulo    7, g1, r4
                addo    3, r4, r4
                lda     0x1005380, g9
                shlo    1, r4, r15
                addo    r15, g9, g9
                call    dsp_pattern_new
                ret
# End of function sel_mini_face_disp
# =============== S U B R O U T I N E =======================================
select_init:                            # DATA XREF: sel_disp_init+B0↑o
                ld      select0_flag, r15 # Label from official source
                bbs     0, r15, loc_35BD8
                ld      select0_flag, r15
                clrbit  1, r15, r15
                st      r15, select0_flag
                lda     select_init_wait, r15
                st      r15, 0x4C(g13)
                ret
# ---------------------------------------------------------------------------
select_init_wait:                       # DATA XREF: select_init+20↑o
                ld      select0_flag, r15 # Label from official source
                bbs     0, r15, loc_35BD8
                ld      select0_flag, r15
                bbs     2, r15, loc_35BD4
                lda     0x1004988, g9
                call    wait_tenmetsu   # tenmetsu = blinking/flashing on and off
loc_35BD4:                              # CODE XREF: select_init+44↑j
                ret
# ---------------------------------------------------------------------------
loc_35BD8:                              # CODE XREF: select_init+8↑j
                mov     1, r15
                stib    r15, 0x61(g13)
                ld      select0_flag, r15
                setbit  1, r15, r15
                st      r15, select0_flag
                ld      select0_flag, r15
                clrbit  6, r15, r15
                st      r15, select0_flag
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ldib    0x5C(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select1_flag, r15
                bbc     2, r15, loc_35C68
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_35C68
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_35C68
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_35C68:                              # CODE XREF: select_init+B0↑j
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_35C98
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_35C98:                              # CODE XREF: select_init+104↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7) # P1_PARTS+0x1D00
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 3, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)    # Store action_init to P1_PARTS+0x0C
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x50(g13)
                mov     0, r15
                st      r15, 0x54(g13)
                ld      select0_flag, r15
                clrbit  4, r15, r15
                st      r15, select0_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
                ld      not_scr_bg_move, r13
                clrbit  0x12, r13, r13
                st      r13, not_scr_bg_move
select_pl_int:                          # Label from official source
                mov     0, r15
                stib    r15, 0x5E(g13)
                ld      select0_flag, r15
                clrbit  3, r15, r15
                st      r15, select0_flag
                lda     0x53F, r15
                st      r15, CTRL_TIMER
                shlo    2, 0x19, r15
                stib    r15, 0x5D(g13)
                ld      select0_flag, r15
                bbs     0, r15, loc_35E40
                ret
# ---------------------------------------------------------------------------
loc_35E40:                              # CODE XREF: select_init+2B8↑j
                ldob    0x500056, r14
                cmpobe  0, r14, loc_35E5C
                mov     0, r15
                stib    r15, 0x500056
                b       loc_35E68
# ---------------------------------------------------------------------------
loc_35E5C:                              # CODE XREF: select_init+2C8↑j
                mov     1, r15
                stib    r15, 0x500056
loc_35E68:                              # CODE XREF: select_init+2D8↑j
                ld      select0_flag, r15
                setbit  1, r15, r15
                st      r15, select0_flag
                ld      select0_flag, r15
                setbit  2, r15, r15
                st      r15, select0_flag
                lda     0x1004988, g9
                shlo    5, 0xB, g0
                call    dsp_pattern_low
                lda     select_pl, r15
                st      r15, 0x4C(g13)
                ret
# End of function select_init
# =============== S U B R O U T I N E =======================================
select_pl:                              # DATA XREF: select_init+320↑o
                ldob    0x5C(g13), r13  # Label from official source
                ldob    0x5D(g13), r14  # mod_fa_sel_disp_add+0x5D
                cmpobe  r13, r14, old_set_skip # Branch if char_sel_cursor_pos is equal to char_sel_cursor_pos_prev_frame
                ldib    0x5C(g13), r15  # Set r15 to char_sel_cursor_pos
                stib    r15, 0x5D(g13)  # Store r15 in char_sel_cursor_pos_prev_frame
old_set_skip:                           # CODE XREF: select_pl+8↑j
                ldob    char_select_array_length, r9 # Label from Fighting Vipers source
                ld      INTERUPT_FLAGS_HELD, r3
                bbc     4, r3, loc_35EDC # P1 Start
                bbc     13, r3, loc_35EDC # P1 Up
loc_35EDC:                              # CODE XREF: select_pl+24↑j
                bbc     5, r3, char_add2_pass_p1 # P2 Start
char_add2_pass_p1:                      # CODE XREF: select_pl:loc_35EDC↑j
                ld      select0_flag, r15 # Label from official source
                chkbit  1, r15
                bno     sel_pl_exit
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                bbc     14, r8, sel_pl_p1r
                ldob    0x5C(g13), r13
                cmpobl  r13, r9, sel_pl_p1_sge
                mov     0, r15
                stib    r15, 0x5C(g13)
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ldib    0x5C(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select1_flag, r15
                bbc     2, r15, loc_35F6C
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_35F6C
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_35F6C
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_35F6C:                              # CODE XREF: select_pl+84↑j
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_35F9C
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_35F9C:                              # CODE XREF: select_pl+D8↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7)
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 3, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x50(g13)
                mov     0, r15
                st      r15, 0x54(g13)
                ld      select0_flag, r15
                clrbit  4, r15, r15
                st      r15, select0_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
                b       sel_pl_exit
# ---------------------------------------------------------------------------
sel_pl_p1_sge:                          # CODE XREF: select_pl+50↑j
                lda     displacement, g0 # Label from Fighting Vipers source
                call    check_same_sound
                call    sound_request_u
                ldib    0x5C(g13), r15
                lda     1(r15), r15
                stib    r15, 0x5C(g13)
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ldib    0x5C(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select1_flag, r15
                bbc     2, r15, loc_36170
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_36170
                ldob    0x1B0(g8), r14  # r14 = P2_PARTS+0x1B0
                cmpoble 26, r14, loc_36170 # If P2_CHAR_VALUE less than or equal to 26, branch
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_36170:                              # CODE XREF: select_pl+288↑j
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)       # P1_PARTS+0x04 = 0
                ldib    0x1B0(g7), r15  # r15 = P1_PARTS+0x1B0
                stib    r15, 0x1B1(g7)  # P1_PARTS+0x1B1 = P1_CHAR_VALUE
                ldob    0x1B1(g7), r14  # P1_PARTS+0x1B1 = r14
                cmpobg  26, r14, loc_361A0 # If P1_SELECTED greater than 26, branch
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_361A0:                              # CODE XREF: select_pl+2DC↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7)
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 3, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x50(g13)
                mov     0, r15
                st      r15, 0x54(g13)
                ld      select0_flag, r15
                clrbit  4, r15, r15
                st      r15, select0_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
sel_pl_p1r:                             # CODE XREF: select_pl+48↑j
                bbc     0xF, r8, sel_pl_p1l # Label from Fighting Vipers source
                ldob    0x5C(g13), r14
                cmpobne 0, r14, sel_pl_p1_sage
                stob    r9, 0x5C(g13)
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ldib    0x5C(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select1_flag, r15
                bbc     2, r15, loc_36364
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_36364
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_36364
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_36364:                              # CODE XREF: select_pl+47C↑j
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_36394
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_36394:                              # CODE XREF: select_pl+4D0↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7)
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 3, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x50(g13)
                mov     0, r15
                st      r15, 0x54(g13)
                ld      select0_flag, r15
                clrbit  4, r15, r15
                st      r15, select0_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
                b       sel_pl_exit
# ---------------------------------------------------------------------------
sel_pl_p1_sage:                         # CODE XREF: select_pl+44C↑j
                lda     displacement, g0 # Label from Fighting Vipers source
                call    check_same_sound
                call    sound_request_u
                ldib    0x5C(g13), r15
                lda     -1(r15), r15
                stib    r15, 0x5C(g13)
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ldib    0x5C(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select1_flag, r15
                bbc     2, r15, loc_3656C
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_3656C
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_3656C
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_3656C:                              # CODE XREF: select_pl+684↑j
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_3659C
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_3659C:                              # CODE XREF: select_pl+6D8↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7)
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 3, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x50(g13)
                mov     0, r15
                st      r15, 0x54(g13)
                ld      select0_flag, r15
                clrbit  4, r15, r15
                st      r15, select0_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
sel_pl_p1l:                             # CODE XREF: select_pl:sel_pl_p1r↑j
                ld      select0_flag, r15 # Label from Fighting Vipers source
                bbs     3, r15, loc_36700
                b       sel_pl_p1_go
# ---------------------------------------------------------------------------
loc_36700:                              # CODE XREF: select_pl+848↑j
                ld      select0_flag, r15
                setbit  3, r15, r15
                st      r15, select0_flag
                ldob    0x5E(g13), r14
                cmpobne 0, r14, sel_pl_p1_go
                mov     8, r15
                stib    r15, 0x5E(g13)
sel_pl_p1_nise_go:                      # Label from Fighting Vipers source
                ld      select0_flag, r15
                clrbit  3, r15, r15
                st      r15, select0_flag
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ldib    0x5C(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select1_flag, r15
                bbc     2, r15, loc_36798
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_36798
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_36798
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_36798:                              # CODE XREF: select_pl+8B0↑j
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_367C8
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_367C8:                              # CODE XREF: select_pl+904↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7)
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 3, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x50(g13)
                mov     0, r15
                st      r15, 0x54(g13)
                ld      select0_flag, r15
                clrbit  4, r15, r15
                st      r15, select0_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
sel_pl_p1_go:                           # CODE XREF: select_pl+84C↑j
                ldob    0x5E(g13), r14  # Label from Fighting Vipers source
                cmpobe  0, r14, sel_pl_p1_nise_add_skip
                ldib    0x5E(g13), r15
                lda     -1(r15), r15
                stib    r15, 0x5E(g13)
sel_pl_p1_nise_add_skip:                # CODE XREF: select_pl+A70↑j
                shlo    8, 7, r4        # Label from Fighting Vipers source
                and     r4, r8, r3
                cmpobe  0, r3, sel_pl_exit
                ld      select0_flag, r15
                clrbit  1, r15, r15
                st      r15, select0_flag
                ldob    0x5C(g13), r3
                ldob    char_select_list(r3), g0
                call    sound_select_char
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3353(r3), r3  # r3 = BACKUP_RAM_TO_RAM+0x3353
                bbc     4, r3, loc_36988
                lda     select_auto_pl_wait, r15
                st      r15, 0x4C(g13)
                b       loc_369A8
# ---------------------------------------------------------------------------
loc_36988:                              # CODE XREF: select_pl+AC4↑j
                lda     sel_pl_exit, r15
                st      r15, 0x4C(g13)
                ld      select0_flag, r15
                setbit  6, r15, r15
                st      r15, select0_flag
loc_369A8:                              # CODE XREF: select_pl+AD4↑j
                ldob    0x5D(g13), r14
                mulo    7, r14, r3
                addo    2, r3, r3
                lda     0x1001380, g9
                shlo    1, r3, r15
                addo    r15, g9, g9
                lda     0x71, g0
                call    clr_pattern
                mov     1, r15
                stib    r15, 0x61(g13)
                mov     0x1E, r15
                stis    r15, 0x64(g13)
sel_pl_exit:                            # CODE XREF: select_pl+3C↑j
                ret                     # Label from Fighting Vipers source
# End of function select_pl
# =============== S U B R O U T I N E =======================================
select_auto_pl_wait:                    # DATA XREF: select_pl+AC8↑o
                ldos    0x64(g13), r3   # Label from official source
                subo    1, r3, r3
                stos    r3, 0x64(g13)
                cmpobne 0, r3, loc_36A04
                lda     select_auto_pl_init, r15
                st      r15, 0x4C(g13)
                mov     0, r15
                stis    r15, 0x64(g13)
loc_36A04:                              # CODE XREF: select_auto_pl_wait+C↑j
                ret
# End of function select_auto_pl_wait
# =============== S U B R O U T I N E =======================================
select_auto_pl_init:                    # DATA XREF: select_auto_pl_wait+10↑o
                lda     0x1000E10, g9   # Label from official source
                ldos    0x64(g13), r3
                ldos    green_bar_animation_count, r4
                cmpobe  r4, r3, draw_control_method
                ldos    green_bar_animation[r3*2], g0
                call    dsp_pattern_new
                addo    1, r3, r3
                stos    r3, 0x64(g13)
                b       loc_36AA0
# ---------------------------------------------------------------------------
draw_control_method:                    # CODE XREF: select_auto_pl_init+14↑j
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3352(r4), r4  # r4 = BACKUP_RAM_TO_RAM+0x3352
                cmpobne 0, r4, loc_36A54
                lda     317, g0         # JP CONTROL METHOD texture
                b       loc_36A58
# ---------------------------------------------------------------------------
loc_36A54:                              # CODE XREF: select_auto_pl_init+40↑j
                lda     318, g0         # EN CONTROL METHOD texture
loc_36A58:                              # CODE XREF: select_auto_pl_init+48↑j
                call    dsp_pattern_new
                lda     select_auto_pl, r15
                st      r15, 0x4C(g13)
                ld      not_scr_bg_move, r15
                setbit  0x1A, r15, r15
                st      r15, not_scr_bg_move
                ld      select0_flag, r15
                setbit  5, r15, r15
                st      r15, select0_flag
                mov     0, r15
                stib    r15, 0x5E(g13)
                mov     7, r15
                stib    r15, 0x63(g13)
loc_36AA0:                              # CODE XREF: select_auto_pl_init+2C↑j
                ret
# End of function select_auto_pl_init
# =============== S U B R O U T I N E =======================================
select_auto_pl:                         # DATA XREF: select_auto_pl_init+54↑o
                ld      INTERUPT_FLAGS_MOMENTARY, r3 # Label from official source
                lda     0x4C(g13), g3
                shri    8, r3, r3
                stob    r3, 0x14(g3)
                ld      select0_flag, g1
                call    select_auto_common
                st      g1, select0_flag
                cmpobe  0, g0, loc_36AE4
                lda     select_auto_decided, r15
                st      r15, 0x4C(g13)
                mov     0x1E, r15
                stis    r15, 0x64(g13)
loc_36AE4:                              # CODE XREF: select_auto_pl+28↑j
                ret
# End of function select_auto_pl
# =============== S U B R O U T I N E =======================================
select_auto_decided:                    # DATA XREF: select_auto_pl+2C↑o
                ldos    0x64(g13), r3   # Label from official source
                cmpobe  0, r3, loc_36AFC
                subo    1, r3, r3
                stos    r3, 0x64(g13)
                b       loc_36B14
# ---------------------------------------------------------------------------
loc_36AFC:                              # CODE XREF: select_auto_decided+4↑j
                lda     select_auto_close, r15
                st      r15, 0x4C(g13)
                ldis    green_bar_animation_count, r15
                stis    r15, 0x64(g13)
loc_36B14:                              # CODE XREF: select_auto_decided+10↑j
                ret
# End of function select_auto_decided
# =============== S U B R O U T I N E =======================================
select_auto_close:                      # DATA XREF: select_auto_decided:loc_36AFC↑o
                lda     0x1000E10, g9 # Label from official source
                ldos    0x64(g13), r3
                cmpobe  0, r3, loc_36B6C
                subo    1, r3, r3
                mov     g9, r11
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3352(r4), r4  # r4 = country_val
                cmpobne 0, r4, loc_36B4C
                lda     317, g0         # JP CONTROL METHOD texture
                b       loc_36B50
# ---------------------------------------------------------------------------
loc_36B4C:                              # CODE XREF: select_auto_close+28↑j
                lda     318, g0         # EN CONTROL METHOD texture
loc_36B50:                              # CODE XREF: select_auto_close+30↑j
                call    clr_pattern
                ldos    green_bar_animation[r3*2], g0
                mov     r11, g9
                call    dsp_pattern_new
                stos    r3, 0x64(g13)
                b       loc_36B9C
# ---------------------------------------------------------------------------
loc_36B6C:                              # CODE XREF: select_auto_close+C↑j
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3352(r4), r4  # r4 = country_val
                cmpobne 0, r4, loc_36B88
                lda     317, g0         # JP CONTROL METHOD texture
                b       loc_36B8C
# ---------------------------------------------------------------------------
loc_36B88:                              # CODE XREF: select_auto_close+64↑j
                lda     318, g0         # EN CONTROL METHOD texture
loc_36B8C:                              # CODE XREF: select_auto_close+6C↑j
                call    clr_pattern
                lda     loc_36B9C, r15
                st      r15, 0x4C(g13)
loc_36B9C:                              # CODE XREF: select_auto_close+50↑j
                ret
# End of function select_auto_close
# =============== S U B R O U T I N E =======================================
select_init_P2:                         # DATA XREF: sel_disp_init+BC↑o
                ld      select1_flag, r15 # Label from official source
                bbs     0, r15, loc_36BF8
                ld      select1_flag, r15
                clrbit  1, r15, r15
                st      r15, select1_flag
                lda     select_init_wait_P2, r15
                st      r15, 0x68(g13)
                ret
# ---------------------------------------------------------------------------
select_init_wait_P2:                    # DATA XREF: select_init_P2+20↑o
                ld      select1_flag, r15 # Label from official source
                bbs     0, r15, loc_36BF8
                ld      select1_flag, r15
                bbs     2, r15, loc_36BF4
                lda     0x10046C2, g9
                call    wait_tenmetsu   # tenmetsu = blinking/flashing on and off
loc_36BF4:                              # CODE XREF: select_init_P2+44↑j
                ret
# ---------------------------------------------------------------------------
loc_36BF8:                              # CODE XREF: select_init_P2+8↑j
                mov     1, r15
                stib    r15, 0x7D(g13)
                ld      select1_flag, r15
                setbit  1, r15, r15
                st      r15, select1_flag
                ld      select1_flag, r15
                clrbit  6, r15, r15
                st      r15, select1_flag
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                ldib    0x78(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select0_flag, r15
                bbc     2, r15, loc_36C88
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_36C88
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_36C88
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_36C88:                              # CODE XREF: select_init_P2+B0↑j
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_36CB8
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_36CB8:                              # CODE XREF: select_init_P2+104↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 1, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x6C(g13)
                mov     0, r15
                st      r15, 0x70(g13)
                ld      select1_flag, r15
                clrbit  4, r15, r15
                st      r15, select1_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
                ld      not_scr_bg_move, r13
                clrbit  0x13, r13, r13
                st      r13, not_scr_bg_move
select_pl_int_P2:                       # Label from official source
                mov     0, r15
                stib    r15, 0x7A(g13)
                ld      select1_flag, r15
                clrbit  3, r15, r15
                st      r15, select1_flag
                lda     0x53F, r15
                st      r15, CTRL_TIMER
                shlo    2, 0x19, r15
                stib    r15, 0x79(g13)
                ld      select1_flag, r15
                bbs     0, r15, loc_36E6C
                ld      select1_flag, r15
                bbc     2, r15, loc_36E68
loc_36E68:                              # CODE XREF: select_init_P2+2C4↑j
                ret
# ---------------------------------------------------------------------------
loc_36E6C:                              # CODE XREF: select_init_P2+2B8↑j
                ldob    0x500056, r14
                cmpobe  0, r14, loc_36E88
                mov     0, r15
                stib    r15, 0x500056
                b       loc_36E94
# ---------------------------------------------------------------------------
loc_36E88:                              # CODE XREF: select_init_P2+2D4↑j
                mov     1, r15
                stib    r15, 0x500056
loc_36E94:                              # CODE XREF: select_init_P2+2E4↑j
                ld      select1_flag, r15
                setbit  1, r15, r15
                st      r15, select1_flag
                ld      select1_flag, r15
                setbit  2, r15, r15
                st      r15, select1_flag
                lda     0x10046C2, g9
                shlo    5, 0xB, g0      # 160
                call    dsp_pattern_low
                lda     select_pl_P2, r15
                st      r15, 0x68(g13)
                ret
# End of function select_init_P2
# =============== S U B R O U T I N E =======================================
select_pl_P2:                           # DATA XREF: select_init_P2+32C↑o
                ldob    0x78(g13), r13  # Label from official source
                ldob    0x79(g13), r14
                cmpobe  r13, r14, old_set_skip_P2
                ldib    0x78(g13), r15
                stib    r15, 0x79(g13)
old_set_skip_P2:                        # CODE XREF: select_pl_P2+8↑j
                ldob    char_select_array_length, r9 # Label from Fighting Vipers source
                ld      INTERUPT_FLAGS_HELD, r3
                bbc     5, r3, loc_36F08
                bbc     21, r3, loc_36F08
loc_36F08:                              # CODE XREF: select_pl_P2+24↑j
                bbc     5, r3, char_add2_pass_p2
char_add2_pass_p2:                      # CODE XREF: select_pl_P2:loc_36F08↑j
                ld      select1_flag, r15 # Label from official source
                chkbit  1, r15
                bno     sel_pl_exit_P2
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                bbc     0x16, r8, sel_pl_p2r_P2
                ldob    0x78(g13), r13
                cmpobl  r13, r9, sel_pl_p2_sge_P2
                mov     0, r15
                stib    r15, 0x78(g13)
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                ldib    0x78(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select0_flag, r15
                bbc     2, r15, loc_36F98
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_36F98
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_36F98
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_36F98:                              # CODE XREF: select_pl_P2+84↑j
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_36FC8
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_36FC8:                              # CODE XREF: select_pl_P2+D8↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 1, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x6C(g13)
                mov     0, r15
                st      r15, 0x70(g13)
                ld      select1_flag, r15
                clrbit  4, r15, r15
                st      r15, select1_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
                b       sel_pl_exit_P2
# ---------------------------------------------------------------------------
sel_pl_p2_sge_P2:                       # CODE XREF: select_pl_P2+50↑j
                lda     displacement, g0 # Label from Fighting Vipers source
                call    check_same_sound
                call    sound_request_u
                ldib    0x78(g13), r15
                lda     1(r15), r15
                stib    r15, 0x78(g13)
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                ldib    0x78(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select0_flag, r15
                bbc     2, r15, loc_3719C
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_3719C
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_3719C
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_3719C:                              # CODE XREF: select_pl_P2+288↑j
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_371CC
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_371CC:                              # CODE XREF: select_pl_P2+2DC↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 1, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x6C(g13)
                mov     0, r15
                st      r15, 0x70(g13)
                ld      select1_flag, r15
                clrbit  4, r15, r15
                st      r15, select1_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
sel_pl_p2r_P2:                          # CODE XREF: select_pl_P2+48↑j
                bbc     0x17, r8, sel_pl_p2l_P2 # Label from Fighting Vipers source
                ldob    0x78(g13), r14
                cmpobne 0, r14, sel_pl_p2_sage_P2
                stob    r9, 0x78(g13)
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                ldib    0x78(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select0_flag, r15
                bbc     2, r15, loc_37390
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_37390
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_37390
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_37390:                              # CODE XREF: select_pl_P2+47C↑j
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_373C0
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_373C0:                              # CODE XREF: select_pl_P2+4D0↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 1, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x6C(g13)
                mov     0, r15
                st      r15, 0x70(g13)
                ld      select1_flag, r15
                clrbit  4, r15, r15
                st      r15, select1_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
                b       sel_pl_exit_P2
# ---------------------------------------------------------------------------
sel_pl_p2_sage_P2:                      # CODE XREF: select_pl_P2+44C↑j
                lda     displacement, g0 # Label from Fighting Vipers source
                call    check_same_sound
                call    sound_request_u
                ldib    0x78(g13), r15
                lda     -1(r15), r15
                stib    r15, 0x78(g13)
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                ldib    0x78(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select0_flag, r15
                bbc     2, r15, loc_37598
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_37598
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_37598
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_37598:                              # CODE XREF: select_pl_P2+684↑j
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_375C8
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_375C8:                              # CODE XREF: select_pl_P2+6D8↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 1, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x6C(g13)
                mov     0, r15
                st      r15, 0x70(g13)
                ld      select1_flag, r15
                clrbit  4, r15, r15
                st      r15, select1_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
sel_pl_p2l_P2:                          # CODE XREF: select_pl_P2:sel_pl_p2r_P2↑j
                ld      select1_flag, r15 # Label from Fighting Vipers source
                bbs     3, r15, loc_3772C
                b       sel_pl_p2_go_P2
# ---------------------------------------------------------------------------
loc_3772C:                              # CODE XREF: select_pl_P2+848↑j
                ld      select1_flag, r15
                setbit  3, r15, r15
                st      r15, select1_flag
                ldob    0x7A(g13), r14
                cmpobne 0, r14, sel_pl_p2_go_P2
                mov     8, r15
                stib    r15, 0x7A(g13)
                ld      select1_flag, r15
                clrbit  3, r15, r15
                st      r15, select1_flag
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                ldib    0x78(g13), r4
                ldib    char_select_list(r4), r15
                stib    r15, 0x1B0(g7)
                ld      select0_flag, r15
                bbc     2, r15, loc_377C4
                ld      not_scr_bg_move, r15
                setbit  0xF, r15, r15
                st      r15, not_scr_bg_move
                ldob    0x5C(g13), r13
                ldob    0x78(g13), r14
                cmpobne r13, r14, loc_377C4
                ldob    0x1B0(g8), r14
                cmpoble 0x1A, r14, loc_377C4
                ldib    0x1B0(g7), r15
                lda     0x1A(r15), r15
                stib    r15, 0x1B0(g7)
loc_377C4:                              # CODE XREF: select_pl_P2+8B0↑j
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_377F4
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_377F4:                              # CODE XREF: select_pl_P2+904↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 1, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     0, r15
                st      r15, 0x6C(g13)
                mov     0, r15
                st      r15, 0x70(g13)
                ld      select1_flag, r15
                clrbit  4, r15, r15
                st      r15, select1_flag
                ld      0x1A4(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x1A4(g7)
                mov     1, r15
                stib    r15, 0x48(g13)
                mov     0, r15
                st      r15, 0x40(g13)
sel_pl_p2_go_P2:                        # CODE XREF: select_pl_P2+84C↑j
                ldob    0x7A(g13), r14  # Label from Fighting Vipers source
                cmpobe  0, r14, sel_pl_p2_nise_add_skip_P2
                ldib    0x7A(g13), r15
                lda     -1(r15), r15
                stib    r15, 0x7A(g13)
sel_pl_p2_nise_add_skip_P2:             # CODE XREF: select_pl_P2+A70↑j
                shlo    0x10, 7, r4     # Label from Fighting Vipers source
                and     r4, r8, r3
                cmpobe  0, r3, sel_pl_exit_P2
                ld      select1_flag, r15
                clrbit  1, r15, r15
                st      r15, select1_flag
                ldob    0x78(g13), r3
                ldob    char_select_list(r3), g0
                call    sound_select_char
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3353(r3), r3  # r3 = BACKUP_RAM_TO_RAM+0x3353
                bbc     4, r3, loc_379B4
                lda     select_auto_pl_wait_P2, r15
                st      r15, 0x68(g13)
                b       loc_379D4
# ---------------------------------------------------------------------------
loc_379B4:                              # CODE XREF: select_pl_P2+AC4↑j
                lda     sel_pl_exit_P2, r15
                st      r15, 0x68(g13)
                ld      select1_flag, r15
                setbit  6, r15, r15
                st      r15, select1_flag
loc_379D4:                              # CODE XREF: select_pl_P2+AD4↑j
                ldob    0x79(g13), r14
                mulo    7, r14, r3
                addo    2, r3, r3
                lda     0x1001580, g9
                shlo    1, r3, r15
                addo    r15, g9, g9
                lda     0x72, g0
                call    clr_pattern
                mov     1, r15
                stib    r15, 0x7D(g13)
                mov     0x1E, r15
                stis    r15, 0x80(g13)
sel_pl_exit_P2:                         # CODE XREF: select_pl_P2+3C↑j
                ret                     # Label from Fighting Vipers source
# End of function select_pl_P2
# =============== S U B R O U T I N E =======================================
select_auto_pl_wait_P2:                 # DATA XREF: select_pl_P2+AC8↑o
                ldos    0x80(g13), r3   # Label from official source
                subo    1, r3, r3
                stos    r3, 0x80(g13)
                cmpobne 0, r3, loc_37A30
                lda     select_auto_pl_init_P2, r15
                st      r15, 0x68(g13)
                mov     0, r15
                stis    r15, 0x80(g13)
loc_37A30:                              # CODE XREF: select_auto_pl_wait_P2+C↑j
                ret
# End of function select_auto_pl_wait_P2
# =============== S U B R O U T I N E =======================================
select_auto_pl_init_P2:                 # DATA XREF: select_auto_pl_wait_P2+10↑o
                lda     0x1000B4A, g9 # Label from official source
                ldos    0x80(g13), r3
                ldos    green_bar_animation_count, r4
                cmpobe  r4, r3, loc_37A64
                ldos    green_bar_animation[r3*2], g0
                call    dsp_pattern_new
                addo    1, r3, r3
                stos    r3, 0x80(g13)
                b       loc_37ACC
# ---------------------------------------------------------------------------
loc_37A64:                              # CODE XREF: select_auto_pl_init_P2+14↑j
                ld      add_BACKUP_RAM_TO_RAM, r5
                ldob    0x3352(r5), r5  # r5 = BACKUP_RAM_TO_RAM+0x3352
                cmpobne 0, r5, loc_37A80
                lda     331, g0         # JP CONTROL METHOD texture
                b       loc_37A84
# ---------------------------------------------------------------------------
loc_37A80:                              # CODE XREF: select_auto_pl_init_P2+40↑j
                lda     332, g0         # EN CONTROL METHOD texture
loc_37A84:                              # CODE XREF: select_auto_pl_init_P2+48↑j
                call    dsp_pattern_new
                lda     select_auto_pl_P2, r15
                st      r15, 0x68(g13)
                ld      not_scr_bg_move, r15
                setbit  0x1A, r15, r15
                st      r15, not_scr_bg_move
                ld      select1_flag, r15
                setbit  5, r15, r15
                st      r15, select1_flag
                mov     0, r15
                stib    r15, 0x7A(g13)
                addo    0x1F, 9, r15
                stib    r15, 0x7F(g13)
loc_37ACC:                              # CODE XREF: select_auto_pl_init_P2+2C↑j
                ret
# End of function select_auto_pl_init_P2
# =============== S U B R O U T I N E =======================================
select_auto_pl_P2:                      # DATA XREF: select_auto_pl_init_P2+54↑o
                ld      INTERUPT_FLAGS_MOMENTARY, r3 # Label from official source
                lda     0x68(g13), g3
                shri    0x10, r3, r3
                stob    r3, 0x14(g3)
                ld      select1_flag, g1
                call    select_auto_common
                st      g1, select1_flag
                cmpobe  0, g0, loc_37B10
                lda     select_auto_decided_P2, r15
                st      r15, 0x68(g13)
                mov     0x1E, r15
                stis    r15, 0x80(g13)
loc_37B10:                              # CODE XREF: select_auto_pl_P2+28↑j
                ret
# End of function select_auto_pl_P2
# =============== S U B R O U T I N E =======================================
select_auto_decided_P2:                 # DATA XREF: select_auto_pl_P2+2C↑o
                ldos    0x80(g13), r3   # Label from official source
                cmpobe  0, r3, loc_37B28
                subo    1, r3, r3
                stos    r3, 0x80(g13)
                b       loc_37B40
# ---------------------------------------------------------------------------
loc_37B28:                              # CODE XREF: select_auto_decided_P2+4↑j
                lda     select_auto_close_P2, r15
                st      r15, 0x68(g13)
                ldis    green_bar_animation_count, r15
                stis    r15, 0x80(g13)
loc_37B40:                              # CODE XREF: select_auto_decided_P2+10↑j
                ret
# End of function select_auto_decided_P2
# =============== S U B R O U T I N E =======================================
select_auto_close_P2:                   # DATA XREF: select_auto_decided_P2:loc_37B28↑o
                lda     0x1000B4A, g9 # Label from official source
                ldos    0x80(g13), r3
                cmpobe  0, r3, loc_37B98
                subo    1, r3, r3
                mov     g9, r11
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3352(r4), r4  # r4 = BACKUP_RAM_TO_RAM+0x3352
                cmpobne 0, r4, loc_37B78
                lda     317, g0         # JP CONTROL METHOD texture
                b       loc_37B7C
# ---------------------------------------------------------------------------
loc_37B78:                              # CODE XREF: select_auto_close_P2+28↑j
                lda     318, g0         # EN CONTROL METHOD texture
loc_37B7C:                              # CODE XREF: select_auto_close_P2+30↑j
                call    clr_pattern
                ldos    green_bar_animation[r3*2], g0
                mov     r11, g9
                call    dsp_pattern_new
                stos    r3, 0x80(g13)
                b       loc_37BC8
# ---------------------------------------------------------------------------
loc_37B98:                              # CODE XREF: select_auto_close_P2+C↑j
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3352(r4), r4  # r4 = BACKUP_RAM_TO_RAM+0x3352
                cmpobne 0, r4, loc_37BB4
                lda     317, g0         # JP CONTROL METHOD texture
                b       loc_37BB8
# ---------------------------------------------------------------------------
loc_37BB4:                              # CODE XREF: select_auto_close_P2+64↑j
                lda     318, g0         # JP CONTROL METHOD texture
loc_37BB8:                              # CODE XREF: select_auto_close_P2+6C↑j
                call    clr_pattern
                lda     loc_37BC8, r15
                st      r15, 0x68(g13)
loc_37BC8:                              # CODE XREF: select_auto_close_P2+50↑j
                ret
# End of function select_auto_close_P2
# =============== S U B R O U T I N E =======================================
select_auto_common:                     # CODE XREF: select_auto_pl+1C↑p
                ldob    0x12(g3), r3    # Label from official source
                cmpobne 0, r3, sel_auto_end
                bbc     2, g1, sel_auto_end
                ldob    0x15(g3), r3
                mov     r3, r4
                ldob    0x14(g3), r10
                bbc     5, r10, loc_37BF8
                mov     0, r3
                ldib    0x15(g3), r15
                stib    r15, 0x16(g3)
                b       loc_37C08
# ---------------------------------------------------------------------------
loc_37BF8:                              # CODE XREF: select_auto_common+18↑j
                bbc     4, r10, loc_37C08
                mov     1, r3
                ldib    0x15(g3), r15
                stib    r15, 0x16(g3)
loc_37C08:                              # CODE XREF: select_auto_common+28↑j
                stob    r3, 0x15(g3)
                cmpobe  r3, r4, asel_decide
                lda     displacement, g0
                call    check_same_sound
                call    sound_request_u
asel_decide:                            # CODE XREF: select_auto_common+40↑j
                mov     7, r12          # Label from official source
                and     r12, r10, r12
                cmpobne 0, r12, sel_auto_end
sel_auto_ex:                            # Label from official source
                mov     0, g0
                ret
# ---------------------------------------------------------------------------
sel_auto_end:                           # CODE XREF: select_auto_common+4↑j
                lda     0xAE1101, g0    # Label from official source
                call    check_same_sound
                call    sound_request_u
                clrbit  5, g1, g1
                setbit  6, g1, g1
                mov     1, r15
                stib    r15, 0x12(g3)
                mov     1, g0
                ret
# End of function select_auto_common
# =============== S U B R O U T I N E =======================================
# tenmetsu = blinking/flashing on and off
wait_tenmetsu:                          # CODE XREF: select_init+50↑p
                ld      frame_counter, r3 # Label from official source
                subo    1, r3, r4
                xor     r3, r4, r5
                bbc     3, r5, loc_37C80
                lda     350, g0         # WAITING FOR CHALLENGER texture
                bbc     3, r3, loc_37C7C
                shlo    5, 0xB, g0      # 160
loc_37C7C:                              # CODE XREF: wait_tenmetsu+18↑j
                call    dsp_pattern_low
loc_37C80:                              # CODE XREF: wait_tenmetsu+10↑j
                ret
# End of function wait_tenmetsu
# ---------------------------------------------------------------------------
print_sel_mes:                          # Label from official source
                mov     g9, r3
                call    s_print_mes
                mov     r3, g9
                addo    1, g0, g0
                shlo    7, 1, r15
                addo    r15, g9, g9
                shlo    7, 1, r15
                addo    r15, g9, g9
                shlo    7, 1, r15
                addo    r15, g9, g9
                ret
# =============== S U B R O U T I N E =======================================
key_rec_init:                           # DATA XREF: ROUND_DSP+860↑o
                mov     0, r15          # Label from official source
                st      r15, 0x4C(g13)
                mov     0, r15
                stis    r15, 0x50(g13)
                ld      replay_bank_adr, r5
                lda     0x14(r5), r15
                st      r15, 0x54(g13)
                lda     key_rec_disp, r15
                st      r15, 0xC(g13)
                call    save_key_replay
key_rec_disp:                           # DATA XREF: key_rec_init+20↑o
                ld      debug_flag, r15 # Label from official source
                bbs     5, r15, loc_37E90
                ld      0x54(g13), r4
                ld      fa_rob0, r7
                ld      fa_rob1, r8
                ldob    0x1200(r7), r9
                mov     r9, r15
                ld      0x0(r7), r14
                bbc     1, r14, loc_37D24
                chkbit  6, r15
                alterbit 7, r9, r9
                chkbit  7, r15
                alterbit 6, r9, r9
loc_37D24:                              # CODE XREF: key_rec_init+60↑j
                stob    r9, (r4)
                ldob    0x1200(r8), r9
                mov     r9, r15
                ld      0x0(r8), r14
                bbc     1, r14, loc_37D4C
                chkbit  6, r15
                alterbit 7, r9, r9
                chkbit  7, r15
                alterbit 6, r9, r9
loc_37D4C:                              # CODE XREF: key_rec_init+88↑j
                stob    r9, 1(r4)
                addo    2, r4, r4
                st      r4, 0x54(g13)
                ld      0x54(g13), r4
                ld      replay_bank_adr, r5
                lda     0x14(r5), r6
                subo    r6, r4, r4
                shlo    0xC, 1, r5
                cmpobl  r4, r5, loc_37D7C
                mov     0, r15
                st      r15, 0x0(g13)
loc_37D7C:                              # CODE XREF: key_rec_init+C0↑j
                ret
# ---------------------------------------------------------------------------
key_play_init:                          # DATA XREF: ADV_REPLAY_WAIT1A+E0↑o
                subo    1, 0, r15       # Label from official source
                stis    r15, 0x40(g13)
                ld      replay_bank_adr, r5
                lda     0x14(r5), r15
                st      r15, 0x54(g13)
                mov     0, r15
                st      r15, 0x4C(g13)
                mov     0, r15
                stis    r15, 0x50(g13)
                call    control_init    # Executes once at start of char sel, once at the start of the vs screen, then once every frame of gameplay once the map is loaded.
                mov     0x15, r15
                stis    r15, 0x40(g13)
                lda     key_play_disp, r15
                st      r15, 0xC(g13)
                call    load_key_replay
key_play_disp:                          # DATA XREF: key_rec_init+104↑o
                ld      debug_flag, r15 # Label from official source
                bbs     5, r15, loc_37E90
                ld      0x54(g13), r5
                addo    2, r5, r4
                st      r4, 0x54(g13)
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      select0_flag, r15
                bbs     2, r15, loc_37E20
                ldob    (r5), r3
                mov     r3, r15
                ld      0x0(g7), r14
                bbc     1, r14, loc_37E18
                chkbit  6, r15
                alterbit 7, r3, r3
                chkbit  7, r15
                alterbit 6, r3, r3
loc_37E18:                              # CODE XREF: key_rec_init+154↑j
                stob    r3, 0x1200(g7)
loc_37E20:                              # CODE XREF: key_rec_init+144↑j
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ld      select1_flag, r15
                bbs     2, r15, loc_37E60
                ldob    1(r5), r3
                mov     r3, r15
                ld      0x0(g7), r14
                bbc     1, r14, loc_37E58
                chkbit  6, r15
                alterbit 7, r3, r3
                chkbit  7, r15
                alterbit 6, r3, r3
loc_37E58:                              # CODE XREF: key_rec_init+194↑j
                stob    r3, 0x1200(g7)
loc_37E60:                              # CODE XREF: key_rec_init+184↑j
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ld      0x54(g13), r4
                ld      replay_bank_adr, r5
                lda     0x14(r5), r6
                subo    r6, r4, r4
                shlo    0xC, 1, r5
                cmpobl  r4, r5, loc_37E90
                mov     0, r15
                st      r15, 0x0(g13)
loc_37E90:                              # CODE XREF: key_rec_init+38↑j
                ret
# End of function key_rec_init
# =============== S U B R O U T I N E =======================================
save_key_replay:                        # CODE XREF: key_rec_init+2C↑p
                ld      fa_rob0, r3     # Label from official source
                ldis    0x1F60(r3), r15
                stis    r15, 0x572000
                ldis    0x1F62(r3), r15
                stis    r15, 0x572002
                ldis    0x1F64(r3), r15
                stis    r15, 0x572004
                ldis    0x1F66(r3), r15
                stis    r15, 0x572008
                ldis    0x7E8(r3), r15
                stis    r15, 0x57200A
                ldis    0x1F48(r3), r15
                stis    r15, 0x5720AC
                ld      0x7D8(r3), r15
                st      r15, 0x5720A4
                ld      0x5D8(r3), r15
                st      r15, p1_rob_weight_ram
                lda     0x40(r3), r4
                lda     (r4), r14
                lda     0x57200C, r13
                mov     0x10, r12
loc_37F24:                              # CODE XREF: save_key_replay+A4↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_37F24
                lda     0x1F20(r3), r14
                lda     0x57204C, r13
                mov     8, r12
loc_37F50:                              # CODE XREF: save_key_replay+D0↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_37F50
                ld      0x1F74(r3), r15
                st      r15, 0x57208C
                ld      0x1F78(r3), r15
                st      r15, 0x572090
                lda     0x1F00(r3), r14
                lda     0x57206C, r13
                mov     8, r12
loc_37F9C:                              # CODE XREF: save_key_replay+11C↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_37F9C
                lda     0x1F4C(r3), r14
                lda     0x572094, r13
                mov     4, r12
loc_37FC8:                              # CODE XREF: save_key_replay+148↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_37FC8
                ld      fa_rob1, r3
                ldis    0x1F60(r3), r15
                stis    r15, 0x5720AE
                ldis    0x1F62(r3), r15
                stis    r15, 0x5720B0
                ldis    0x1F64(r3), r15
                stis    r15, 0x5720B2
                ldis    0x1F66(r3), r15
                stis    r15, 0x5720B4
                ldis    0x7E8(r3), r15
                stis    r15, 0x5720B6
                ldis    0x1F48(r3), r15
                stis    r15, 0x572158
                ld      0x7D8(r3), r15
                st      r15, 0x572150
                ld      0x5D8(r3), r15
                st      r15, 0x572154
                lda     0x40(r3), r4
                lda     (r4), r14
                lda     0x5720B8, r13
                mov     0x10, r12
loc_38070:                              # CODE XREF: save_key_replay+1F0↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_38070
                lda     0x1F20(r3), r14
                lda     0x5720F8, r13
                mov     8, r12
loc_3809C:                              # CODE XREF: save_key_replay+21C↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_3809C
                ld      0x1F74(r3), r15
                st      r15, 0x572138
                ld      0x1F78(r3), r15
                st      r15, 0x57213C
                lda     0x1F00(r3), r14
                lda     0x572118, r13
                mov     8, r12
loc_380E8:                              # CODE XREF: save_key_replay+268↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_380E8
                lda     0x1F4C(r3), r14
                lda     0x572140, r13
                mov     4, r12
loc_38114:                              # CODE XREF: save_key_replay+294↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_38114
                call    sub_3A310
                ret
# End of function save_key_replay
# =============== S U B R O U T I N E =======================================
load_key_replay:                        # CODE XREF: key_rec_init+110↑p
                ld      fa_rob0, r3     # Label from official source
                lda     0x57200C, r4
                ld      8(r4), r5
                ld      0xC(r4), r6
                addo    r5, r6, r6
                cmpobe  0, r6, loc_38460
                lda     (r4), r14
                lda     0x40(r3), r13
                mov     0x10, r12
loc_38160:                              # CODE XREF: load_key_replay+40↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_38160
                lda     0x57204C, r14
                lda     0x1F20(r3), r13
                mov     8, r12
loc_3818C:                              # CODE XREF: load_key_replay+6C↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_3818C
                ld      0x57208C, r15
                st      r15, 0x1F74(r3)
                ld      0x572090, r15
                st      r15, 0x1F78(r3)
                lda     0x57206C, r14
                lda     0x1F00(r3), r13
                mov     8, r12
loc_381D8:                              # CODE XREF: load_key_replay+B8↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_381D8
                lda     0x572094, r14
                lda     0x1F4C(r3), r13
                mov     4, r12
loc_38204:                              # CODE XREF: load_key_replay+E4↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_38204
                ldis    0x572000, r15
                stis    r15, 0x1F60(r3) # P1_PARTS+0x1F60 = r15
                ldis    0x572002, r15
                stis    r15, 0x1F62(r3)
                ldis    0x572004, r15
                stis    r15, 0x1F64(r3)
                ldis    0x572008, r15
                stis    r15, 0x1F66(r3)
                ldis    0x572000, r15
                stis    r15, 0x1F68(r3)
                ldis    0x572002, r15
                stis    r15, 0x1F6A(r3)
                ldis    0x572004, r15
                stis    r15, 0x1F6C(r3)
                ldis    0x572008, r15
                stis    r15, 0x1F6E(r3)
                ldis    0x5720AC, r15
                stis    r15, 0x1F48(r3) # P1_PARTS+0x1F48 = r15
                ldis    0x57200A, r15
                stis    r15, 0x7E8(r3)  # P1_PARTS+0x7E8 = r15
                ld      0x5720A4, r15
                st      r15, 0x7D8(r3)  # P1_PARTS+0x7D8 = r15
                ld      p1_rob_weight_ram, r15
                st      r15, 0x5D8(r3)  # p1_rob_weight = r15
                ld      fa_rob1, r3
                lda     0x5720B8, r4
                lda     (r4), r14
                lda     0x40(r3), r13
                mov     0x10, r12
loc_382EC:                              # CODE XREF: load_key_replay+1CC↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_382EC
                lda     0x5720F8, r14
                lda     0x1F20(r3), r13
                mov     8, r12
loc_38318:                              # CODE XREF: load_key_replay+1F8↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_38318
                ld      0x572138, r15
                st      r15, 0x1F74(r3)
                ld      0x57213C, r15
                st      r15, 0x1F78(r3)
                lda     0x572118, r14
                lda     0x1F00(r3), r13
                mov     8, r12
loc_38364:                              # CODE XREF: load_key_replay+244↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_38364
                lda     0x572140, r14
                lda     0x1F4C(r3), r13
                mov     4, r12
loc_38390:                              # CODE XREF: load_key_replay+270↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_38390
                ldis    0x5720AE, r15
                stis    r15, 0x1F60(r3)
                ldis    0x5720B0, r15
                stis    r15, 0x1F62(r3)
                ldis    0x5720B2, r15
                stis    r15, 0x1F64(r3)
                ldis    0x5720B4, r15
                stis    r15, 0x1F66(r3)
                ldis    0x5720AE, r15
                stis    r15, 0x1F68(r3)
                ldis    0x5720B0, r15
                stis    r15, 0x1F6A(r3)
                ldis    0x5720B2, r15
                stis    r15, 0x1F6C(r3)
                ldis    0x5720B4, r15
                stis    r15, 0x1F6E(r3)
                ldis    0x572158, r15
                stis    r15, 0x1F48(r3)
                ldis    0x5720B6, r15
                stis    r15, 0x7E8(r3)
                ld      0x572150, r15
                st      r15, 0x7D8(r3)
                ld      0x572154, r15
                st      r15, 0x5D8(r3)
                call    sub_3A530
loc_38460:                              # CODE XREF: load_key_replay+1C↑j
                ret
# End of function load_key_replay
# =============== S U B R O U T I N E =======================================
save_ending_rep_data:                   # CODE XREF: ROUND_DSP+16EC↑p
                ld      fa_rob0, g7     # Label from official source
                ld      fa_rob1, g8
                ldob    STAGE_ID, g5
                lda     0x8060, r14
                subo    1, g5, r15
                mulo    r14, r15, r15
                lda     0x5A0010(r15), g5
                lda     0x0(g5), r5
                ld      stage_x, r15
                st      r15, 0x0(r5)
                ld      0x500434, r15
                st      r15, 4(r5)
                ldib    0x1B0(g7), r15
                stib    r15, 0xC(r5)
                ldib    p1_wins, r15
                stib    r15, 0xD(r5)
                ldib    0x1B0(g8), r15
                stib    r15, 0xE(r5)
                ldib    p2_wins, r15
                stib    r15, 0xF(r5)
                ld      mod_fa_obj0, r3
                ldos    6(r3), r4
                lda     0xEF, r13
                subi    r13, r4, r4
                stos    r4, 8(r5)
                ldob    0x50004D, r14
                cmpobne 0, r14, loc_38508
                mov     0, r15
                stib    r15, 0xA(r5)
                b       ser_50
# ---------------------------------------------------------------------------
loc_38508:                              # CODE XREF: save_ending_rep_data+94↑j
                mov     1, r15
                stib    r15, 0xA(r5)
ser_50:                                 # CODE XREF: save_ending_rep_data+A0↑j
                ld      mod_fa_record, g6 # Label from official source
                lda     0x40(g6), r6
                lda     0x84(g6), r7
                lda     0x10(g5), r5
ser_lop1:                               # CODE XREF: save_ending_rep_data+D0↓j
                ld      (r6), r15       # Label from official source
                st      r15, (r5)
                addo    4, r5, r5
                addo    4, r6, r6
                cmpobl  r6, r7, ser_lop1
                lda     rep_ram, r4
                lda     0x60(g5), r5
                shlo    0xB, 1, r6
ser_lop2:                               # CODE XREF: save_ending_rep_data+F8↓j
                ldq     (r4), g0        # Label from official source
                addo    0x10, r4, r4
                stq     g0, (r5)
                addo    0x10, r5, r5
                cmpdeco 1, r6, r6
                bl      ser_lop2
                ret
# End of function save_ending_rep_data
# =============== S U B R O U T I N E =======================================
ending_send_next_tex:                   # CODE XREF: ENDSUB_INT+8↑p
                lda     loc_805C+4, r14 # Label from official source
                subo    1, g0, r15
                mulo    r14, r15, r15
                lda     0x5A0010(r15), r5
                lda     0x0(r5), r5
                ldob    0xA(r5), r6
                ldob    0xC(r5), g2
                ldob    0xE(r5), g3
                ldob    winner, r3
                cmpobne r3, r6, loc_385B0
                mov     0, g1
                cmpobe  1, r6, loc_385A8
                mov     g3, g2
                mov     1, g1
loc_385A8:                              # CODE XREF: ending_send_next_tex+38↑j
                ld      CHAR_PARTS[g2*4], g0
loc_385B0:                              # CODE XREF: ending_send_next_tex+30↑j
                ret
# End of function ending_send_next_tex
# =============== S U B R O U T I N E =======================================
load_ending_rep_data:                   # CODE XREF: ENDSUB_INT+114↑p
                ld      fa_rob0, g7     # Label from official source
                ld      fa_rob1, g8
                ldob    STAGE_ID, g5
                lda     0x8060, r14
                subo    1, g5, r15
                mulo    r14, r15, r15
                lda     0x5A0010(r15), g5
                lda     0x0(g5), r5
                ld      0x0(r5), r15
                st      r15, stage_x
                ld      4(r5), r15
                st      r15, 0x500434
                ldib    0xA(r5), r15
                stib    r15, winner
                ldib    0xC(r5), r15
                stib    r15, 0x1B0(g7)
                ldib    0xD(r5), r15
                stib    r15, p1_wins
                ldib    0xE(r5), r15
                stib    r15, 0x1B0(g8)
                ldib    0xF(r5), r15
                stib    r15, p2_wins
                ld      mod_fa_obj0, r3
                ldis    8(r5), r15
                stis    r15, 6(r3)
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_386EC
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_386EC:                              # CODE XREF: load_ending_rep_data+124↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7)
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     0xBF800000, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 3, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_38830
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_38830:                              # CODE XREF: load_ending_rep_data+268↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     0x3F800000, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                shlo    0xE, 1, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      fa_rob0, g13
                ld      0xC(g13), r3
                callx   (r3)
                ld      fa_rob1, g13
                ld      0xC(g13), r3
                callx   (r3)
                mov     1, r4
                ld      fa_rob0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      fa_rob1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ld      mod_fa_record, g6
                lda     0x40(g6), r6
                lda     0x84(g6), r7
                lda     0x10(g5), r5
loc_38A20:                              # CODE XREF: load_ending_rep_data+47C↓j
                ld      (r5), r15
                st      r15, (r6)
                addo    4, r5, r5
                addo    4, r6, r6
                cmpobl  r6, r7, loc_38A20
                ld      mod_fa_record, r3
                ld      mod_fa_play, r5
                ld      0x6C(r3), r4
                st      r4, 0x7C(r5)
                lda     rep_ram, r4
                lda     0x60(g5), r5
                shlo    0xB, 1, r6
loc_38A5C:                              # CODE XREF: load_ending_rep_data+4BC↓j
                ldq     (r5), g0
                addo    0x10, r5, r5
                stq     g0, (r4)
                addo    0x10, r4, r4
                cmpdeco 1, r6, r6
                bl      loc_38A5C
                ret
# End of function load_ending_rep_data
# =============== S U B R O U T I N E =======================================
make_ending_cam_mat:                    # CODE XREF: play_init:loc_39464↓p
                lda     0x800101, r15 # Label from official source
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                ld      fa_rob0, r3
                ldt     0x18(r3), r4
                ld      fa_rob1, r3
                ldt     0x18(r3), r8
                stt     r4, 0x5092C8
                stt     r8, 0x5092D4
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], g3
                lda     0x4000(g3), g3
                lda     0x4479F99A, r4
                lda     0x4479F99A, r5
                lda     0x4479F99A, r6
                lda     0xC479F99A, r8
                lda     0xC479F99A, r9
                lda     0xC479F99A, r10
                lda     0x1DE, g5
                lda     rep_ram, g6
loc_38B1C:                              # CODE XREF: make_ending_cam_mat+118↓j
                ldt     4(g6), g0
                lda     0x44(g6), g6
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                st      g3, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g2, (g11)[g12*1]
                ld      (g11)[g12*1], g0
                ld      (g11)[g12*1], g2
                cmpr    g0, r4
                bge     loc_38B50
                mov     g0, r4
loc_38B50:                              # CODE XREF: make_ending_cam_mat+D0↑j
                cmpr    g1, r5
                bge     loc_38B5C
                mov     g1, r5
loc_38B5C:                              # CODE XREF: make_ending_cam_mat+DC↑j
                cmpr    g2, r6
                bge     loc_38B68
                mov     g2, r6
loc_38B68:                              # CODE XREF: make_ending_cam_mat+E8↑j
                cmpr    g0, r8
                ble     loc_38B74
                mov     g0, r8
loc_38B74:                              # CODE XREF: make_ending_cam_mat+F4↑j
                cmpr    g1, r9
                ble     loc_38B80
                mov     g1, r9
loc_38B80:                              # CODE XREF: make_ending_cam_mat+100↑j
                cmpr    g2, r10
                ble     loc_38B8C
                mov     g2, r10
loc_38B8C:                              # CODE XREF: make_ending_cam_mat+10C↑j
                cmpdeco 1, g5, g5
                bl      loc_38B1C
                subo    g3, 0, r3
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r6
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                ld      (g11)[g12*1], r10
                lda     0x3F333333, r3
                cmpible r3, r5, loc_38BE8
                mov     r3, r5
loc_38BE8:                              # CODE XREF: make_ending_cam_mat+168↑j
                cmpible r3, r9, loc_38BF0
                mov     r3, r9
loc_38BF0:                              # CODE XREF: make_ending_cam_mat:loc_38BE8↑j
                lda     0x2E005C5C, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], g0
                ld      (g11)[g12*1], g1
                ld      (g11)[g12*1], g2
                lda     0x3F000000, r3
                lda     0x2F005E5E, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g2, (g11)[g12*1]
                ld      (g11)[g12*1], g0
                ld      (g11)[g12*1], g1
                ld      (g11)[g12*1], g2
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], g4
                clrbit  0x1F, g4, g4
                subr    r5, r9, r3
                clrbit  0x1F, r3, r3
                cmpible r3, g4, loc_38C84
                mov     r3, g4
loc_38C84:                              # CODE XREF: make_ending_cam_mat+204↑j
                mov     0, r4
                ldob    list_motions_ram+3, r3
                remo    0xA, r3, r3
                addo    1, r3, r3
                ldt     0x38DA8[r3*16], r8
                ldob    winner, r14
                cmpobe  0, r14, loc_38CB0
                subo    r9, 0, r9
loc_38CB0:                              # CODE XREF: make_ending_cam_mat+230↑j
                addr    r8, g4, g4
                addo    r9, g3, g3
                addo    r10, r4, r4
                lda     0x3F800000, r3
                addr    r3, g4, g4
                lda     displacement, r3
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      g4, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r4, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    g3, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, g0, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, g1, r15
                st      r15, (g11)[g12*1]
                notbit  0x1F, g2, r15
                st      r15, (g11)[g12*1]
                lda     0x2800505, r15
                st      r15, (g11)[g12*1]
                lda     0x5001F8, r15
                ld      (g11)[g12*1], r14
                st      r14, 0x0(r15)
                ld      (g11)[g12*1], r14
                st      r14, 4(r15)
                ld      (g11)[g12*1], r14
                st      r14, 8(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0xC(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x10(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x14(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x18(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x1C(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x20(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x24(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x28(r15)
                ld      (g11)[g12*1], r14
                st      r14, 0x2C(r15)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# End of function make_ending_cam_mat
# ---------------------------------------------------------------------------
                .long 0                 # unreachable code
                .long 0x4BF2
                .long 0xDF0
                .long 0
                .long 0x3F800000
                .long 0x35F9
                .long 0
                .long 0
                .long 0x40000000
                .long 0x69F4
                .long 0x11C7
                .long 0
                .long 0x3F800000
                .long 0xABF2
                .long 0xE5F9
                .long 0
                .long 0x3F800000
                .long 0xEBF2
                .long 0xE5F9
                .long 0
                .long 0x3F800000
                .long 0x2BF2
                .long 0xE5F9
                .long 0
                .long 0x3F800000
                .long 0x6BF2
                .long 0xE5F9
                .long 0
                .long 0
                .long 0x340D
                .long 0xDF0
                .long 0
                .long 0x40000000
                .long 0x69F4
                .long 0x11C7
                .long 0
                .long 0x3F800000
                .long 0x35F9
                .long 0
                .long 0
# =============== S U B R O U T I N E =======================================
rec_init:                               # DATA XREF: ROUND_DSP+8E0↑o
                ld      stage_xpos, r15 # Label from Virtua Fighter 2 source
                st      r15, record_stage_xpos
                ld      stage_ypos, r15
                st      r15, record_stage_ypos
                ld      stage_zpos, r15
                st      r15, record_stage_zpos
                mov     0, r15
                st      r15, 0x6C(g13)
                lda     rec_disp, r15
                st      r15, 0xC(g13)
rec_disp:                               # DATA XREF: rec_init+38↑o
                ld      debug_flag, r15 # Label from Virtua Fighter 2 source
                bbs     5, r15, loc_38EEC
                ld      0x6C(g13), r5
                shlo    3, 0x11, r13
                mulo    r13, r5, r6
                lda     rep_ram(r6), r4
                ld      fa_rob0, r3
                bal     sub_38EF0
                lda     0x44(r4), r4
                ld      fa_rob1, r3
                bal     sub_38EF0
                addo    1, r5, r5
                lda     0xEF, r15
                cmpoble r5, r15, loc_38EE8
                mov     0, r5
loc_38EE8:                              # CODE XREF: rec_init+88↑j
                st      r5, 0x6C(g13)
loc_38EEC:                              # CODE XREF: rec_init+4C↑j
                ret
# End of function rec_init
# =============== S U B R O U T I N E =======================================
sub_38EF0:                              # CODE XREF: rec_init+6C↑p
                ld      0x0(r3), r15    # r15 = P1_PARTS
                st      r15, 0x0(r4)
                ldt     0x18(r3), r12
                stt     r12, 4(r4)
                ld      0x1A4(r3), r15
                st      r15, 0x10(r4)
                ld      0x70C(r3), r15
                st      r15, 0x3C(r4)
                ldis    0x26(r3), r15
                stis    r15, 0x20(r4)
                ldis    0x1A8(r3), r15
                stis    r15, 0x22(r4)
                ldis    0x1AA(r3), r15
                stis    r15, 0x24(r4)
                ld      0x678(r3), r15
                st      r15, 0x28(r4)
                ldis    0x75C(r3), r15
                stis    r15, 0x2E(r4)
                ldis    0x75E(r3), r15
                stis    r15, 0x30(r4)
                ldis    0x1F48(r3), r15
                stis    r15, 0x3A(r4)
                ldis    0x1F60(r3), r15
                stis    r15, 0x32(r4)
                ldis    0x1F62(r3), r15
                stis    r15, 0x34(r4)
                ldis    0x1F64(r3), r15
                stis    r15, 0x36(r4)
                ldis    0x1F66(r3), r15
                stis    r15, 0x38(r4)
                ldis    0x1AC(r3), r15
                stis    r15, 0x40(r4)
                ldis    0xC54(r3), r15
                stis    r15, 0x42(r4)
                ldis    0x50A022, r15
                stis    r15, 0x2C(r4)
                ld      finish_wall_flag, r15
                clrbit  0x1D, r15, r15
                st      r15, finish_wall_flag
                ld      0x50A1F8, r15
                stob    r15, 0x1E(r4)
                ld      mod_fa_effect, r14
                ld      0x914(r14), r13
                stob    r13, 0x1C(r4)
                ld      0x50A37C, r13
                stob    r13, 0x1D(r4)
                ld      mod_fa_obj0, r11
                ldis    6(r11), r15
                stis    r15, 0x50045C
                ldob    4(r3), r7
                mov     0, r14
                mov     0, r15
                ldl     0x504078[r7*4], r12
                stl     r12, 0x14(r4)
                stl     r14, 0x504078[r7*4]
                bx      (g14)
# End of function sub_38EF0
# =============== S U B R O U T I N E =======================================
sub_3900C:                              # DATA XREF: ROUND_DSP+C5C↑o
                lda     0x40808181, r15
                st      r15, (g11)[g12*1]
                ld      0x80(g13), r3
                setbit  0, r3, r3
                setbit  1, r3, r3
                st      r3, 0x80(g13)
                call    sub_3A200
                call    sub_31AD0
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      mod_fa_record, r3
                ld      0x6C(r3), r4
                st      r4, 0x6C(g13)
                subo    1, r4, r4
                mov     0, r15
                cmpibge r4, r15, loc_39060
                lda     0xEF, r4
loc_39060:                              # CODE XREF: sub_3900C+4C↑j
                st      r4, 0x70(g13)
                ld      0x50039C, r3
                ldob    0x5003A0, r12
                bbc     2, r12, loc_39080
                ld      0x50044C, r3
loc_39080:                              # CODE XREF: sub_3900C+68↑j
                st      r3, 0x6C(g13)
                lda     replay_waza_disp, r15
                st      r15, 0xC(g13)
                ld      0x6C(g13), r5
                addo    1, r5, r6
                lda     0xEF, r15
                cmpoble r6, r15, loc_390A4
                mov     0, r6
loc_390A4:                              # CODE XREF: sub_3900C+90↑j
                st      r6, 0x6C(g13)
                shlo    3, 0x11, r13
                mulo    r13, r5, r6
                lda     rep_ram(r6), r4
                ld      0x10(r4), r15
                st      r15, 0x5C(g13)
                mov     g7, r7
                bal     load
                lda     0x44(r4), r4
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ld      0x10(r4), r15
                st      r15, 0x60(g13)
                mov     g7, r7
                bal     load
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ldis    0x1F60(g7), r15
                stis    r15, 0x1F68(g7)
                ldis    0x1F62(g7), r15
                stis    r15, 0x1F6A(g7)
                ldis    0x1F64(g7), r15
                stis    r15, 0x1F6C(g7)
                ldis    0x1F66(g7), r15
                stis    r15, 0x1F6E(g7)
                ldis    0x1F60(g8), r15
                stis    r15, 0x1F68(g8)
                ldis    0x1F62(g8), r15
                stis    r15, 0x1F6A(g8)
                ldis    0x1F64(g8), r15
                stis    r15, 0x1F6C(g8)
                ldis    0x1F66(g8), r15
                stis    r15, 0x1F6E(g8)
                ret
# End of function sub_3900C
# =============== S U B R O U T I N E =======================================
replay_waza_disp:                       # DATA XREF: sub_3900C+78↑o
                ld      debug_flag, r15 # Label from Fighting Vipers source (code differs slightly)
                bbs     5, r15, loc_39204
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      0x6C(g13), r5
                shlo    3, 0x11, r13
                mulo    r13, r5, r6
                lda     rep_ram(r6), r4
                mov     g7, r7
                bal     load
                lda     0x44(r4), r4
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                mov     g7, r7
                bal     load
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ld      INTERUPT_FLAGS_MOMENTARY, r3
                bbs     4, r3, loc_39208
                bbs     5, r3, loc_39208
                ld      0x6C(g13), r5
                ld      0x70(g13), r6
                addo    1, r5, r5
                lda     0xEF, r15
                cmpoble r5, r15, loc_391FC
                mov     0, r5
loc_391FC:                              # CODE XREF: replay_waza_disp+7C↑j
                cmpobe  r5, r6, loc_39214
                st      r5, 0x6C(g13)
loc_39204:                              # CODE XREF: replay_waza_disp+8↑j
                ret
# ---------------------------------------------------------------------------
loc_39208:                              # CODE XREF: replay_waza_disp+64↑j
                mov     1, r15
                stib    r15, 0x5003A1
loc_39214:                              # CODE XREF: replay_waza_disp:loc_391FC↑j
                mov     0, g0
                mov     g13, g1
                call    put_last_replay
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                shlo    2, 0x11, g0
                mov     g13, g1
                call    put_last_replay
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                call    sub_3A420
                mov     0, r15
                st      r15, 0x0(g13)
                ret
# End of function replay_waza_disp
# =============== S U B R O U T I N E =======================================
play_init:                              # DATA XREF: ROUND_DSP+1810↑o
                lda     0x40808181, r15 # Label from official source
                st      r15, (g11)[g12*1]
                ldob    0x50004D, r14
                cmpobe  2, r14, loc_3946C
                ld      0x80(g13), r3
                setbit  0, r3, r3
                setbit  1, r3, r3
                st      r3, 0x80(g13)
                ld      record_stage_xpos, r15
                st      r15, stage_xpos
                ld      record_stage_ypos, r15
                st      r15, stage_ypos
                ld      record_stage_zpos, r15
                st      r15, stage_zpos
                ld      fa_rob0, r7
                ld      fa_rob1, r8
                mov     0, r15
                stis    r15, 0xC60(r7)  # r15 = P1_PARTS+0xC60
                mov     0, r15
                stis    r15, 0xC60(r8)  # r15 = P2_PARTS+0xC60
                lda     displacement, r15
                st      r15, 0x18(g13)
                lda     0xBF800000, r15
                st      r15, 0x1C(g13)
                lda     0x40400000, r15
                st      r15, 0x20(g13)
                call    sub_3A200
                call    sub_31AD0
                call    replay_tobi_initial # "Projectile" (tobi)
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      mod_fa_record, r3
                ld      0x6C(r3), r4    # r4 = mod_fa_record_add+0x6C
                st      r4, 0x6C(g13)
                subo    1, r4, r4
                mov     0, r15
                cmpibge r4, r15, loc_3932C
                lda     0xEF, r4
loc_3932C:                              # CODE XREF: play_init+D0↑j
                st      r4, 0x70(g13)
                ldob    also_mode, r15
                lda     start_ip_add, r14
                cmpobe  r14, r15, loc_39354
                lda     start_ip_add+1, r14
                cmpobe  r14, r15, loc_39354
                b       loc_39354
# ---------------------------------------------------------------------------
loc_39354:                              # CODE XREF: play_init+EC↑j
                lda     play_disp, r15
                st      r15, 0xC(g13)
                ld      0x6C(g13), r5
                addo    1, r5, r6
                lda     0xEF, r15
                cmpoble r6, r15, loc_39374
                mov     0, r6
loc_39374:                              # CODE XREF: play_init+118↑j
                st      r6, 0x6C(g13)
                shlo    3, 0x11, r13
                mulo    r13, r5, r6
                lda     rep_ram(r6), r4
                ld      0x10(r4), r15
                st      r15, 0x5C(g13)
                mov     g7, r7
                bal     load
                lda     0x44(r4), r4
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ld      0x10(r4), r15
                st      r15, 0x60(g13)
                mov     g7, r7
                bal     load
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ldis    0x1F60(g7), r15
                stis    r15, 0x1F68(g7)
                ldis    0x1F62(g7), r15
                stis    r15, 0x1F6A(g7)
                ldis    0x1F64(g7), r15
                stis    r15, 0x1F6C(g7)
                ldis    0x1F66(g7), r15
                stis    r15, 0x1F6E(g7)
                ldis    0x1F60(g8), r15
                stis    r15, 0x1F68(g8)
                ldis    0x1F62(g8), r15
                stis    r15, 0x1F6A(g8)
                ldis    0x1F64(g8), r15
                stis    r15, 0x1F6C(g8)
                ldis    0x1F66(g8), r15
                stis    r15, 0x1F6E(g8)
                ldob    also_mode, r15
                lda     start_ip_add, r14
                cmpobe  r14, r15, loc_39464
                lda     start_ip_add+1, r14
                cmpobne r14, r15, loc_39468
loc_39464:                              # CODE XREF: play_init+200↑j
                call    make_ending_cam_mat
loc_39468:                              # CODE XREF: play_init+20C↑j
                b       loc_39478
# ---------------------------------------------------------------------------
loc_3946C:                              # CODE XREF: play_init+14↑j
                ld      0x0(g13), r15
                clrbit  0x1F, r15, r15
                st      r15, 0x0(g13)
loc_39478:                              # CODE XREF: play_init:loc_39468↑j
                ret
# End of function play_init
# ---------------------------------------------------------------------------
rep_start_chk:                          # Label from official source
                mov     0, r8           # Unused
                shlo    2, 0x11, r9
                ldob    0x50004D, r14
                cmpobe  0, r14, loc_3949C
                mov     r9, r15
                mov     r8, r9
                mov     r15, r8
loc_3949C:                              # CODE XREF: ROM:0003948C↑j
                ld      0x6C(g13), r11
                ld      0x70(g13), r10
                st      r10, 0x40(g13)
loc_394A8:                              # CODE XREF: ROM:000394D8↓j
                subo    1, r10, r10
                mov     0, r15
                cmpibge r10, r15, loc_394B8
                lda     0xEF, r10
loc_394B8:                              # CODE XREF: ROM:000394B0↑j
                cmpobe  r10, r11, loc_394F4
                shlo    3, 0x11, r13
                mulo    r13, r10, r6
                ld      0x535010(r6)[r9*1], r4
                cmpobe  0, r4, loc_394E0
                shlo    0xE, 1, r5
                and     r4, r5, r5
                cmpobe  0, r5, loc_394A8
                b       loc_394F0
# ---------------------------------------------------------------------------
loc_394E0:                              # CODE XREF: ROM:000394CC↑j
                addo    1, r10, r10
                lda     0xEF, r15
                cmpoble r10, r15, loc_394F0
                mov     0, r10
loc_394F0:                              # CODE XREF: ROM:000394DC↑j
                st      r10, 0x40(g13)
loc_394F4:                              # CODE XREF: ROM:loc_394B8↑j
                ld      0x7C(g13), r10
loc_394F8:                              # CODE XREF: ROM:00039524↓j
                mov     r4, r12
                subo    1, r10, r10
                mov     0, r15
                cmpibge r10, r15, loc_3950C
                lda     0xEF, r10
loc_3950C:                              # CODE XREF: ROM:00039504↑j
                shlo    3, 0x11, r13
                mulo    r13, r10, r6
                cmpobe  r10, r11, loc_39598
                ldos    0x535022(r6)[r8*1], r4
                cmpobe  0, r4, loc_39598
                cmpobe  r12, r4, loc_394F8
                ld      mot_list[r4*4], r13
                ld      0x0(r13), r5
                cmpobe  0, r5, loc_39598
                lda     loc_41110, r15
                and     r5, r15, r5
                cmpobe  0, r5, loc_394F8
loc_39548:                              # CODE XREF: ROM:00039574↓j
                mov     r4, r12
                subo    1, r10, r10
                mov     0, r15
                cmpibge r10, r15, loc_3955C
                lda     0xEF, r10
loc_3955C:                              # CODE XREF: ROM:00039554↑j
                shlo    3, 0x11, r13
                mulo    r13, r10, r6
                cmpobe  r10, r11, loc_39598
                ldos    0x535022(r6)[r8*1], r4
                cmpobe  0, r4, loc_39598
                cmpobe  r12, r4, loc_39548
                ld      mot_list[r4*4], r13
                ld      0x0(r13), r5
                cmpobe  0, r5, loc_39598
                lda     loc_41110, r15
                and     r5, r15, r5
                cmpobne 0, r5, loc_39548
loc_39598:                              # CODE XREF: ROM:00039514↑j
                addo    1, r10, r10
                lda     0xEF, r15
                cmpoble r10, r15, loc_395A8
                mov     0, r10
loc_395A8:                              # CODE XREF: ROM:000395A0↑j
                st      r10, 0x6C(g13)
                ret
# =============== S U B R O U T I N E =======================================
play_disp:                              # DATA XREF: play_init:loc_39354↑o
                ld      debug_flag, r15 # Label from official source
                bbs     5, r15, loc_39698
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      0x6C(g13), r5
                shlo    3, 0x11, r13
                mulo    r13, r5, r6
                lda     rep_ram(r6), r4
                ldis    0x2C(r4), r15
                stis    r15, 0x50A022
                mov     g7, r7
                bal     load
                lda     0x44(r4), r4
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                mov     g7, r7
                bal     load
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                ld      0x6C(g13), r5
                ld      0x70(g13), r6
                ld      not_scr_bg_move, r15
                bbc     0x11, r15, loc_39638
                ldos    replay_countdown, r14
                bbs     0, r14, skip_inc_coma
loc_39638:                              # CODE XREF: play_disp+78↑j
                addo    1, r5, r5
                lda     0xEF, r15
                cmpoble r5, r15, skip_inc_coma
                mov     0, r5
skip_inc_coma:                          # CODE XREF: play_disp+84↑j
                cmpobe  r5, r6, loc_396D0 # Label from official source
                st      r5, 0x6C(g13)
                ld      debug_flag, r15
                bbs     2, r15, loc_39698
                ld      not_scr_bg_move, r15
                bbs     0x11, r15, loc_39698
                ld      INTERUPT_FLAGS_MOMENTARY, r3
                ldob    also_mode, r15
                lda     start_ip_add, r14
                cmpobe  r14, r15, loc_39698
                lda     start_ip_add+1, r14
                cmpobe  r14, r15, loc_39698
                bbs     4, r3, play_kill
                bbs     5, r3, play_kill
loc_39698:                              # CODE XREF: play_disp+8↑j
                ret
# ---------------------------------------------------------------------------
play_kill:                              # CODE XREF: play_disp+E0↑j
                mov     0, g0           # Label from official source
                mov     g13, g1
                call    put_last_replay
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                shlo    2, 0x11, g0
                mov     g13, g1
                call    put_last_replay
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                call    sub_3A420
loc_396D0:                              # CODE XREF: play_disp:skip_inc_coma↑j
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                mov     0, r15
                stis    r15, 0x75C(g7)  # r15 = P1_PARTS+0x75C
                mov     0, r15
                stis    r15, 0x75E(g7)
                ldob    0x19F(g7), r14
                cmpobne 0x14, r14, loc_39700
                shlo    0x18, 1, r15
                st      r15, 0x194(g7)
loc_39700:                              # CODE XREF: play_disp+144↑j
                mov     0, r15
                stis    r15, 0x75C(g8)
                mov     0, r15
                stis    r15, 0x75E(g8)
                ldob    0x19F(g8), r14
                cmpobne 0x14, r14, loc_39720
                shlo    0x18, 1, r15
                st      r15, 0x194(g8)
loc_39720:                              # CODE XREF: play_disp+164↑j
                mov     0, r15
                st      r15, 0x0(g13)
                ret
# End of function play_disp
# =============== S U B R O U T I N E =======================================
put_last_replay:                        # CODE XREF: replay_waza_disp+A4↑p
                ldos    0x1A8(g7), r9   # Label from official source
                ld      0x70(g1), r5
                shlo    3, 0x11, r13
                mulo    r13, r5, r6
                lda     rep_ram(r6), r4
                ld      4(r4)[g0*1], r15
                st      r15, 0x18(g7)
                ld      8(r4)[g0*1], r15
                st      r15, 0x1C(g7)
                ld      0xC(r4)[g0*1], r15
                st      r15, 0x20(g7)
                ld      0x0(g7), r15
                st      r15, 0x7EC(g7)
                ld      displacement(r4)[g0*1], r15
                st      r15, 0x0(g7)
                ld      0x0(g7), r15
                clrbit  0x11, r15, r15
                st      r15, 0x0(g7)
                ldis    0x20(r4)[g0*1], r15
                stis    r15, 0x26(g7)
                ldis    0x2E(r4)[g0*1], r15
                stis    r15, 0x75C(g7)
                ldis    0x30(r4)[g0*1], r15
                stis    r15, 0x75E(g7)
                ldis    0x3A(r4)[g0*1], r15
                stis    r15, 0x1F48(g7)
                ld      mod_fa_effect, r14
                ldob    0x1C(r4)[g0], r13
                st      r13, 0x914(r14)
                ldob    0x1D(r4)[g0], r13
                st      r13, 0x50A378
                ldis    0x32(r4)[g0*1], r15
                stis    r15, 0x1F60(g7)
                ldis    0x34(r4)[g0*1], r15
                stis    r15, 0x1F62(g7)
                ldis    0x36(r4)[g0*1], r15
                stis    r15, 0x1F64(g7)
                ldis    0x38(r4)[g0*1], r15
                stis    r15, 0x1F66(g7)
                ldis    0x1F60(g7), r15
                stis    r15, 0x1F68(g7)
                ldis    0x1F62(g7), r15
                stis    r15, 0x1F6A(g7)
                ldis    0x1F64(g7), r15
                stis    r15, 0x1F6C(g7)
                ldis    0x1F66(g7), r15
                stis    r15, 0x1F6E(g7)
                ldob    0x1E(r4)[g0], r15
                st      r15, 0x50A1E4
                st      r15, 0x50A1F8
                ld      0x1A4(g7), r15
                st      r15, 0x1E18(g7)
                ld      0x70C(g7), r15
                st      r15, 0x1E24(g7)
                ld      0x10(r4)[g0*1], r15
                st      r15, 0x1A4(g7)
                ld      0x3C(r4)[g0*1], r15
                st      r15, 0x70C(g7)
                ldos    0x22(r4)[g0*1], r7
                ldos    0x24(r4)[g0*1], r8
                ld      4(r4)[g0*1], r15
                st      r15, 0x18(g13)
                ld      8(r4)[g0*1], r15
                st      r15, 0x1C(g13)
                ld      0x0(g7), r15
                setbit  0x1F, r15, r15
                st      r15, 0x0(g7)
                ldos    0x1A8(g7), g0
                stos    r7, 0x1A8(g7)
                stos    r8, 0x1AA(g7)
                cmpobe  0, r7, loc_39908
                cmpobe  r7, g0, loc_398FC
                mov     r7, g0
                call    set_mot_dat     # Never seems to hit!
                call    calc_rob_angle_int
loc_398FC:                              # CODE XREF: put_last_replay+1C0↑j
                call    smooth_int
                call    calc_rob_angle
                call    calc_unit_mat
loc_39908:                              # CODE XREF: put_last_replay+1BC↑j
                ld      0x1A4(g7), r15
                clrbit  7, r15, r15
                st      r15, 0x1A4(g7)
                mov     0, r15
                st      r15, 0x82C(g7)
                mov     r7, g2
                mov     r8, g3
                ret
# End of function put_last_replay
# =============== S U B R O U T I N E =======================================
load:                                   # CODE XREF: sub_3900C+B8↑p
                ld      not_scr_bg_move, r15 # Label from Fighting Vipers source
                bbc     0x11, r15, usual_play
                ldos    replay_countdown, r14
                bbc     0, r14, usual_play
                lda     0x3F000000, r11
                ldos    0x1A8(r7), g0
                cmpobe  0, g0, loc_39C80
                ldos    0x22(r4), g1
                cmpobe  0, g1, loc_39C80
                cmpobe  g0, g1, loc_399D8
                ld      mot_list[g0*4], r12
                ld      0x0(r12), r12
                ld      mot_list[g1*4], r13
                ld      0x0(r13), r13
                xor     r13, r12, r6
                shlo    5, 5, r15
                and     r15, r6, r14
                cmpobne 0, r14, not_calc_pos
                ld      0x0(r4), r14
                bbs     2, r14, not_calc_pos
                ldt     4(r4), r12
                ldt     0x18(r7), r8
                addr    r8, r12, r12
                mulr    r11, r12, r12
                addr    r9, r13, r13
                mulr    r11, r13, r13
                addr    r10, r14, r14
                mulr    r11, r14, r14
                stt     r12, 0x18(r7)
not_calc_pos:                           # CODE XREF: load+58↑j
                lda     0x100040, r15   # Label from Fighting Vipers source
                and     r15, r6, r14
                cmpobne 0, r14, loc_399D4
                ldis    0x20(r4), r13
                ldis    0x26(r7), r14
                addi    r13, r14, r14
                shri    1, r14, r14
                stis    r14, 0x26(r7)
loc_399D4:                              # CODE XREF: load+94↑j
                b       unusual_common
# ---------------------------------------------------------------------------
loc_399D8:                              # CODE XREF: load+30↑j
                ld      0x1A4(r7), r12
                ld      0x10(r4), r13
                xor     r13, r12, r6
                bbs     4, r6, loc_39A0C
                ldt     4(r4), r12
                ldt     0x18(r7), r8
                addr    r8, r12, r12
                mulr    r11, r12, r12
                addr    r9, r13, r13
                mulr    r11, r13, r13
                addr    r10, r14, r14
                mulr    r11, r14, r14
                stt     r12, 0x18(r7)
loc_39A0C:                              # CODE XREF: load+BC↑j
                bbs     6, r6, unusual_common
                ldis    0x20(r4), r13
                ldis    0x26(r7), r14
                addi    r13, r14, r14
                shri    1, r14, r14
                stis    r14, 0x26(r7)
unusual_common:                         # CODE XREF: load:loc_399D4↑j
                ldos    0x22(r4), r5    # Label from Fighitng Vipers source
                cmpobe  0, r5, loc_39C80
                mov     g7, r10
                mov     r7, g7
                ldos    0x24(r4), r15
                ldos    0x1AA(r7), r14
                cmpobne r14, r15, loc_39A44
                b       loc_39C7C
# ---------------------------------------------------------------------------
loc_39A44:                              # CODE XREF: load+114↑j
                call    calc_rob_angle
                b       loc_39C7C
# ---------------------------------------------------------------------------
usual_play:                             # CODE XREF: load+8↑j
                ld      0x0(r7), r15    # Label from Fighting Vipers source
                st      r15, 0x7EC(r7)
                ld      0x0(r4), r15
                st      r15, 0x0(r7)
                ld      0x0(r7), r15
                clrbit  0x1F, r15, r15
                st      r15, 0x0(r7)
                ld      0x0(r7), r15
                setbit  5, r15, r15
                st      r15, 0x0(r7)
                ld      0x0(r7), r15
                clrbit  0x11, r15, r15
                st      r15, 0x0(r7)
                ld      0x0(r7), r15
                clrbit  0x13, r15, r15
                st      r15, 0x0(r7)
                ld      4(r4), r15
                st      r15, 0x18(r7)
                ld      8(r4), r15
                st      r15, 0x1C(r7)
                ld      0xC(r4), r15
                st      r15, 0x20(r7)
                ldis    0x20(r4), r15
                stis    r15, 0x26(r7)
                ldis    0x24(r4), r15
                stis    r15, 0x1AA(r7)
                ld      0x1A4(r7), r15
                st      r15, 0x1E18(r7)
                ld      0x70C(r7), r15
                st      r15, 0x1E24(r7)
                ld      0x10(r4), r15
                st      r15, 0x1A4(r7)
                ld      0x3C(r4), r15
                st      r15, 0x70C(r7)
                ld      0x28(r4), r15
                st      r15, 0x678(r7)
                ldis    0x2E(r4), r15
                stis    r15, 0x75C(r7)
                ldis    0x30(r4), r15
                stis    r15, 0x75E(r7)
                ldis    0x3A(r4), r15
                stis    r15, 0x1F48(r7)
                ld      mod_fa_effect, r14
                ldob    0x1C(r4), r13
                st      r13, 0x914(r14)
                ldob    0x1D(r4), r13
                st      r13, 0x50A378
                ldos    0x1AC(r7), r5
                ldos    0x40(r4), r6
                stos    r6, 0x1AC(r7)
                subi    r6, r5, r5
                cmpibge 0, r5, loc_39BCC
                ldob    4(r7), r5
                cmpobe  1, r5, loc_39B84
                ldos    0x42(r4), g0
                addo    4, sp, sp
                st      g7, -4(sp)
                addo    4, sp, sp
                st      g8, -4(sp)
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                call    ring_tobitiri_set # Ring Scatter
                ld      -4(sp), g8
                subo    4, sp, sp
                ld      -4(sp), g7
                subo    4, sp, sp
                b       loc_39BCC
# ---------------------------------------------------------------------------
loc_39B84:                              # CODE XREF: load+20C↑j
                ldos    0x42(r4), g0
                addo    4, sp, sp
                st      g7, -4(sp)
                addo    4, sp, sp
                st      g8, -4(sp)
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                call    ring_tobitiri_set # Ring Scatter
                ld      -4(sp), g8
                subo    4, sp, sp
                ld      -4(sp), g7
                subo    4, sp, sp
loc_39BCC:                              # CODE XREF: load+204↑j
                ldis    0x32(r4), r15
                stis    r15, 0x1F60(r7)
                ldis    0x34(r4), r15
                stis    r15, 0x1F62(r7)
                ldis    0x36(r4), r15
                stis    r15, 0x1F64(r7)
                ldis    0x38(r4), r15
                stis    r15, 0x1F66(r7)
                ldob    0x1E(r4), r15
                st      r15, 0x50A1E4
                st      r15, 0x50A1F8
                ld      0x14(r4), g0
                cmpobe  0, g0, not_snd_set1
                call    sound_request_u
not_snd_set1:                           # CODE XREF: load+2EC↑j
                ld      0x18(r4), g0    # Label from Fighting Vipers source
                cmpobe  0, g0, not_snd_set2
                call    sound_request_u
not_snd_set2:                           # CODE XREF: load+2F8↑j
                ldos    0x1A8(r7), r6   # Label from Fighting Vipers source
                ldos    0x22(r4), r5
                stos    r5, 0x1A8(r7)
                mov     g7, r10
                mov     r7, g7
                cmpobe  0, r5, loc_39C80
                cmpobne r5, r6, loc_39C5C
                ldos    0x1AA(r7), r6
                ldos    0x800(r7), r5
                ldos    0x1A8(r7), g0
                cmpobe  1, r6, loc_39C68
                cmpoble r6, r5, loc_39C74
                b       loc_39C74
# ---------------------------------------------------------------------------
loc_39C5C:                              # CODE XREF: load+318↑j
                ldos    0x1A8(r7), g0
                cmpobe  0, g0, loc_39C80
                mov     r5, g0
loc_39C68:                              # CODE XREF: load+328↑j
                call    set_mot_dat     # Never seems to hit!
                call    calc_rob_angle_int
                call    smooth_int
loc_39C74:                              # CODE XREF: load+32C↑j
                call    play_motion
                call    calc_rob_angle
loc_39C7C:                              # CODE XREF: load+118↑j
                call    calc_unit_mat
loc_39C80:                              # CODE XREF: load+24↑j
                mov     r10, g7
                bx      (g14)
# End of function load
# =============== S U B R O U T I N E =======================================
vic_pose_int0:                          # DATA XREF: VIC_INT+1BC↑o
                ld      fa_rob0, g7     # Label from Fighting Vipers source
                ld      fa_rob1, g8
                ld      mod_fa_play, r3
                ld      0x40(r3), r15
                st      r15, 0x40(g13)
                ld      0x6C(r3), r15
                st      r15, 0x6C(g13)
                ld      0x70(r3), r15
                st      r15, 0x70(g13)
                ld      0x7C(r3), r15
                st      r15, 0x7C(g13)
                mov     0, g0
                ld      mod_fa_play, g1
                ld      0x80(g1), r15
                bbc     0, r15, loc_39CD8
                call    put_last_replay
loc_39CD8:                              # CODE XREF: vic_pose_int0+48↑j
                ld      fa_rob0, r3
                ld      0x0(r3), r15
                setbit  0x1F, r15, r15
                st      r15, 0x0(r3)
                lda     loc_39D70, r15
                st      r15, 0xC(g13)
                b       loc_39D70
# ---------------------------------------------------------------------------
vic_pose_int1:                          # DATA XREF: VIC_INT+1E0↑o
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                ld      mod_fa_play, r3
                ld      0x40(r3), r15
                st      r15, 0x40(g13)
                ld      0x6C(r3), r15
                st      r15, 0x6C(g13)
                ld      0x70(r3), r15
                st      r15, 0x70(g13)
                ld      0x7C(r3), r15
                st      r15, 0x7C(g13)
                shlo    2, 0x11, g0
                ld      mod_fa_play, g1
                ld      0x80(g1), r15
                bbc     1, r15, loc_39D4C
                call    put_last_replay
loc_39D4C:                              # CODE XREF: vic_pose_int0+BC↑j
                ld      fa_rob1, r3
                ld      0x0(r3), r15
                setbit  0x1F, r15, r15
                st      r15, 0x0(r3)
                lda     loc_39DDC, r15
                st      r15, 0xC(g13)
                b       loc_39DDC
# ---------------------------------------------------------------------------
loc_39D70:                              # CODE XREF: vic_pose_int0+70↑j
                ld      mod_fa_play, r3
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      0x0(g7), r3
                bbs     0, r3, loc_39DA8
                ld      0x1A4(g7), r3
                bbs     9, r3, loc_39DA8
                lda     0x4C9114, r4
                and     r3, r4, r4
                cmpobne 0, r4, loc_39DD8
loc_39DA8:                              # CODE XREF: vic_pose_int0+104↑j
                ldob    winner, r14
                cmpobe  1, r14, loc_39DC8
                lda     sub_39E48, r15
                st      r15, 0xC(g13)
                call    PLAYER_WIN_ANIM
                b       loc_39DD8
# ---------------------------------------------------------------------------
loc_39DC8:                              # CODE XREF: vic_pose_int0+128↑j
                lda     sub_39E78, r15
                st      r15, 0xC(g13)
                call    PLAYER_LOSE_ANIM
loc_39DD8:                              # CODE XREF: vic_pose_int0+11C↑j
                ret
# ---------------------------------------------------------------------------
loc_39DDC:                              # CODE XREF: vic_pose_int0+E4↑j
                ld      mod_fa_play, r3
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                ld      0x0(g7), r3
                bbs     0, r3, loc_39E14
                ld      0x1A4(g7), r3
                bbs     9, r3, loc_39E14
                lda     0x4C9114, r4
                and     r3, r4, r4
                cmpobne 0, r4, loc_39E44
loc_39E14:                              # CODE XREF: vic_pose_int0+170↑j
                ldob    winner, r14
                cmpobe  0, r14, loc_39E34
                lda     sub_39E60, r15
                st      r15, 0xC(g13)
                call    PLAYER_WIN_ANIM
                b       loc_39E44
# ---------------------------------------------------------------------------
loc_39E34:                              # CODE XREF: vic_pose_int0+194↑j
                lda     sub_39E90, r15
                st      r15, 0xC(g13)
                call    PLAYER_LOSE_ANIM
loc_39E44:                              # CODE XREF: vic_pose_int0+188↑j
                ret
# End of function vic_pose_int0
# =============== S U B R O U T I N E =======================================
sub_39E48:                              # DATA XREF: vic_pose_int0+12C↑o
                ld      fa_rob0, g7
                ld      0x0(g7), r15
                setbit  0x11, r15, r15
                st      r15, 0x0(g7)
                ret
# End of function sub_39E48
# =============== S U B R O U T I N E =======================================
sub_39E60:                              # DATA XREF: vic_pose_int0+198↑o
                ld      fa_rob1, g7
                ld      0x0(g7), r15
                setbit  0x11, r15, r15
                st      r15, 0x0(g7)
                ret
# End of function sub_39E60
# =============== S U B R O U T I N E =======================================
sub_39E78:                              # DATA XREF: vic_pose_int0:loc_39DC8↑o
                ld      fa_rob0, g7
                ld      0x0(g7), r15
                setbit  0x17, r15, r15
                st      r15, 0x0(g7)
                ret
# End of function sub_39E78
# =============== S U B R O U T I N E =======================================
sub_39E90:                              # DATA XREF: vic_pose_int0:loc_39E34↑o
                ld      fa_rob1, g7
                ld      0x0(g7), r15
                setbit  0x17, r15, r15
                st      r15, 0x0(g7)
                ret
# End of function sub_39E90
# =============== S U B R O U T I N E =======================================
PLAYER_WIN_ANIM:                        # CODE XREF: vic_pose_int0+138↑p
                ldob    0x1B1(g7), r3   # P1_SELECTED or P2_SELECTED to r3
                cmpobne 1, r3, loc_39EBC
                ld      0x0(g7), r15
                setbit  0x14, r15, r15
                st      r15, 0x0(g7)
loc_39EBC:                              # CODE XREF: PLAYER_WIN_ANIM+4↑j
                lda     WIN_MOTIONS, r9 # Store the win animation pointers to r9
                ldob    0x500050, r14
                cmpobne 0, r14, loc_39EE8
                ldos    energy_max, r14
                ldos    0x1AC(g7), r15
                ld      0xC(r9), r13
                ldos    (r13)[r3*2], g0
                cmpobe  r14, r15, loc_39F24
loc_39EE8:                              # CODE XREF: PLAYER_WIN_ANIM+24↑j
                ldos    game_timer, r4
                shro    6, r4, r4
                ldob    time, r5
                divo    3, r5, r5
                ld      (r9), r15       # Get the value stored at WIN_MOTIONS
                ldos    (r15)[r3*2], g0
                cmpobl  r4, r5, loc_39F24
                shlo    1, r5, r5
                ld      4(r9), r15
                ldos    (r15)[r3*2], g0
                cmpobl  r4, r5, loc_39F24
                ld      8(r9), r15
                ldos    (r15)[r3*2], g0
loc_39F24:                              # CODE XREF: PLAYER_WIN_ANIM+3C↑j
                ld      not_scr_bg_move, r15
                bbs     1, r15, loc_39F30
loc_39F30:                              # CODE XREF: PLAYER_WIN_ANIM+84↑j
                ld      INTERUPT_FLAGS_HELD, r5
                shri    8, r5, r4
                ldob    4(g7), r14
                cmpobne 1, r14, loc_39F48
                shri    16, r5, r4
loc_39F48:                              # CODE XREF: PLAYER_WIN_ANIM+98↑j
                and     7, r4, r4
                cmpobe  0, r4, loc_39F70
                ld      (r9), r15
                ldos    (r15)[r3*2], g0
                bbs     2, r4, loc_39F70
                ld      4(r9), r15
                ldos    (r15)[r3*2], g0
                bbs     0, r4, loc_39F70
                ld      8(r9), r15
                ldos    (r15)[r3*2], g0
loc_39F70:                              # CODE XREF: PLAYER_WIN_ANIM+A4↑j
                ld      mod_fa_play, r3
                stos    g0, 0x1A8(g7)
                mov     g0, r3
                st      r3, 0x198(g7)
                mov     1, r15
                stis    r15, 0x1AA(g7)
                ret
# End of function PLAYER_WIN_ANIM
# =============== S U B R O U T I N E =======================================
PLAYER_LOSE_ANIM:                       # CODE XREF: vic_pose_int0+14C↑p
                ldos    0x1AC(g7), r3
                ldob    0x1B1(g7), r3
                ld      CHAR_LOSE_POSES[r3*4], g0
                stos    g0, 0x1A8(g7)
                mov     0, r15
                st      r15, 0x802(g7)
                mov     g0, r3
                st      r3, 0x198(g7)
                ld      0x0(g7), r15
                clrbit  0, r15, r15
                st      r15, 0x0(g7)
                mov     1, r15
                stis    r15, 0x1AA(g7)
                ret
# End of function PLAYER_LOSE_ANIM
# ---------------------------------------------------------------------------
                ld      mod_fa_play, r3 # unreachable code
                ld      0x0(r3), r4
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      0x50(r3), r15
                st      r15, (g11)[g12*1]
                ld      0x54(r3), r15
                st      r15, (g11)[g12*1]
                ld      0x58(r3), r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     5, g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      fa_rob0, r3
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      0x18(r3), r15   # P1_PARTS+0x18
                st      r15, (g11)[g12*1]
                ld      0x1C(r3), r15
                st      r15, (g11)[g12*1]
                ld      0x20(r3), r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     5, g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      fa_rob1, r3
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      0x18(r3), r15
                st      r15, (g11)[g12*1]
                ld      0x1C(r3), r15
                st      r15, (g11)[g12*1]
                ld      0x20(r3), r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     5, g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      mod_fa_play, r3
                ld      0x0(r3), r4
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x41A00000, r15
                st      r15, (g11)[g12*1]
                lda     0x41A00000, r15
                st      r15, (g11)[g12*1]
                lda     0x41A00000, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      0x18(r3), r15
                st      r15, (g11)[g12*1]
                ld      0x1C(r3), r15
                st      r15, (g11)[g12*1]
                ld      0x20(r3), r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     5, g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                lda     0x3C23D70A, r15
                st      r15, (g11)[g12*1]
                ld      0x1C(r3), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x1C(r3)
                ret
# =============== S U B R O U T I N E =======================================
sub_3A200:                              # CODE XREF: sub_3900C+1C↑p
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                shlo    7, 0x19, g0
                lda     0, g4
                ld      mod_fa_effect, g1
                lda     0x570000, g2
                bal     move_data       # g1 = data src
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ret
# End of function sub_3A200
# =============== S U B R O U T I N E =======================================
sub_3A310:                              # CODE XREF: save_key_replay+298↑p
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                shlo    7, 0x19, g0
                lda     0, g4
                ld      mod_fa_effect, g1
                lda     0x573000, g2
                bal     move_data       # g1 = data src
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ret
# End of function sub_3A310
# =============== S U B R O U T I N E =======================================
sub_3A420:                              # CODE XREF: replay_waza_disp+CC↑p
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                lda     0xC80, g0
                lda     0, g4
                lda     0x570000, g1
                ld      mod_fa_effect, g2
                bal     move_data       # g1 = data src
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ret
# End of function sub_3A420
# =============== S U B R O U T I N E =======================================
sub_3A530:                              # CODE XREF: load_key_replay+328↑p
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                lda     0xC80, g0
                lda     0, g4
                lda     0x573000, g1
                ld      mod_fa_effect, g2
                bal     move_data       # g1 = data src
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ret
# End of function sub_3A530
# ---------------------------------------------------------------------------
un_replay_info_disp_menu:               # The 8 bytes following this address are flags for the debug window:
                balx    setup_debug_menu_window, r14
# ---------------------------------------------------------------------------
                .byte 0x14, 0x1C, 0x1E, 0xA, 0, 0, 0, 0# debug_window_flags
# ---------------------------------------------------------------------------
                lda     loc_3A8B0, r15
                st      r15, 0x28(g3)
                lda     loc_3A688, r15
                st      r15, 0x24(g3)
                lda     dword_927D0, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_3A688:                              # DATA XREF: ROM:0003A65C↑o
                ld      mod_fa_play, r3
                ld      mod_fa_win0, g4
                ld      mod_fa_win1, g5
                ld      0x7C(r3), r5    # r5 = mod_fa_play_add+0x7C
                ld      0x40(r3), r5    # r5 = mod_fa_play_add+0x40
                shlo    3, 17, r13
                mulo    r13, r5, r6
                lda     rep_ram(r6), g6
                b       loc_4E8F0
# ---------------------------------------------------------------------------
dword_3A6BC:    .long 0x264110F         # DATA XREF: ROM:000927D4↓o
# ---------------------------------------------------------------------------
                ldob    replay_bank_num, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     3, g0
                ret
# ---------------------------------------------------------------------------
aReplayBankNum: .asciz "replay bank num"
dword_3A6EC:    .long 0x80000000        # DATA XREF: ROM:000927D8↓o
# ---------------------------------------------------------------------------
                ld      replay_bank_adr, g0
# ---------------------------------------------------------------------------
                .long 0
aReplayBankAdr: .asciz "replay bank adr"
dword_3A70C:    .long 0x80023000        # DATA XREF: ROM:000927DC↓o
# ---------------------------------------------------------------------------
                ld      0x18(g4), g0    # g0 = mod_fa_win0_add+0x18
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aMoveXpos0:     .asciz "move xpos 0"
dword_3A728:    .long 0x80023000        # DATA XREF: ROM:000927E0↓o
# ---------------------------------------------------------------------------
                ld      0x1C(g4), g0    # g0 = mod_fa_win0_add+0x1C
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aMoveYpos0:     .asciz "move ypos 0"
dword_3A744:    .long 0x80023000        # DATA XREF: ROM:000927E4↓o
# ---------------------------------------------------------------------------
                ld      4(g6), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aLastXpos0:     .asciz "last xpos 0"
dword_3A760:    .long 0x80023000        # DATA XREF: ROM:000927E8↓o
# ---------------------------------------------------------------------------
                ld      8(g6), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aLastYpos0:     .asciz "last ypos 0"
dword_3A77C:    .long 0x80023000        # DATA XREF: ROM:000927EC↓o
# ---------------------------------------------------------------------------
                ld      0x18(g5), g0    # g0 = mod_fa_win1_add+0x18
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aMoveXpos1:     .asciz "move xpos 1"
dword_3A798:    .long 0x80023000        # DATA XREF: ROM:000927F0↓o
# ---------------------------------------------------------------------------
                ld      0x1C(g5), g0    # g0 = mod_fa_win1_add+0x1C
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aMoveYpos1:     .asciz "move ypos 1"
dword_3A7B4:    .long 0x80023000        # DATA XREF: ROM:000927F4↓o
# ---------------------------------------------------------------------------
                ld      0x48(g6), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aLastXpos1:     .asciz "last xpos 1"
dword_3A7D0:    .long 0x80023000        # DATA XREF: ROM:000927F8↓o
# ---------------------------------------------------------------------------
                ld      0x4C(g6), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aLastYpos1:     .asciz "last ypos 1"
dword_3A7EC:    .long 0x80000000        # DATA XREF: ROM:000927FC↓o
# ---------------------------------------------------------------------------
                ld      0x6C(g4), g0    # g0 = mod_fa_win0_add+0x6C
                ret
# ---------------------------------------------------------------------------
                .long 0
aRepRam:        .asciz "rep_ram    "
dword_3A808:    .long 0x80001000        # DATA XREF: ROM:00092800↓o
# ---------------------------------------------------------------------------
                ldob    look_char, g0
# ---------------------------------------------------------------------------
                .long 0
aLookChar:      .asciz "look_char  "
dword_3A824:    .long 0x80001000        # DATA XREF: ROM:00092804↓o
# ---------------------------------------------------------------------------
                ldob    winner, g0
# ---------------------------------------------------------------------------
                .long 0
aWinner:        .asciz "winner     "
dword_3A840:    .long 0x80001000        # DATA XREF: ROM:00092808↓o
# ---------------------------------------------------------------------------
                ldob    gameprogram, g0 # bit 0 clear = Player 1
# ---------------------------------------------------------------------------
                .long 0
aGameprogram:   .asciz "gameprogram"
dword_3A85C:    .long 0x80000000        # DATA XREF: ROM:0009280C↓o
# ---------------------------------------------------------------------------
                ld      CTRL_TIMER, g0
# ---------------------------------------------------------------------------
                .long 0
aCtrlTimer_0:   .asciz "ctrl_timer "
dword_3A878:    .long 0x80001000        # DATA XREF: ROM:00092810↓o
# ---------------------------------------------------------------------------
                ldob    mode, g0
# ---------------------------------------------------------------------------
                .long 0
aMode:          .asciz "mode    "
                .fill 3, 1, 0
dword_3A894:    .long 0x80001000        # DATA XREF: ROM:00092814↓o
# ---------------------------------------------------------------------------
                ldob    _sub_mode, g0
# ---------------------------------------------------------------------------
                .long 0
aSubMode:       .asciz "sub_mode"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_3A8B0:                              # DATA XREF: ROM:0003A650↑o
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      mod_fa_play, r9
                ld      0x7C(r9), r5
                call    debug_window_setup
                lda     0x80000000, r13
                ld      0x0(r9), r14
                cmpobne r13, r14, loc_3A980
                ldos    0x42(r9), r14
                cmpobne 0, r14, loc_3A980
                ld      INTERUPT_FLAGS_HELD, r8
                bbc     8, r8, loc_3A8F8
                bbs     9, r8, loc_3A904
loc_3A8F8:                              # CODE XREF: ROM:0003A8F0↑j
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                bbc     9, r8, loc_3A914
loc_3A904:                              # CODE XREF: ROM:0003A8F4↑j
                addo    1, r5, r5
                lda     0xEF, r15
                cmpoble r5, r15, loc_3A914
                mov     0, r5
loc_3A914:                              # CODE XREF: ROM:0003A900↑j
                ld      INTERUPT_FLAGS_HELD, r8
                bbc     8, r8, loc_3A924
                bbs     0xA, r8, loc_3A930
loc_3A924:                              # CODE XREF: ROM:0003A91C↑j
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                bbc     0xA, r8, loc_3A940
loc_3A930:                              # CODE XREF: ROM:0003A920↑j
                subo    1, r5, r5
                mov     0, r15
                cmpibge r5, r15, loc_3A940
                lda     0xEF, r5
loc_3A940:                              # CODE XREF: ROM:0003A92C↑j
                st      r5, 0x7C(r9)
                shlo    3, 0x11, r13
                mulo    r13, r5, r6
                lda     rep_ram(r6), r4
                mov     g7, r7
                bal     load
                lda     0x44(r4), r4
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
                mov     g7, r7
                bal     load
                mov     g8, r15
                mov     g7, g8
                mov     r15, g7
loc_3A980:                              # CODE XREF: ROM:0003A8DC↑j
                ret
# =============== S U B R O U T I N E =======================================
break_point_display:                    # CODE XREF: sound_request_special+18↓p
                st      r3, 0x50EFF0
                ldob    break_point, r3
                cmpobne 0, r3, loc_3AD8C # if break_point != 0 branch
                ldob    (g0), r3
                ld      bp_switch, g1
                bbc     r3, g1, loc_3AD8C
                stq     r4, 0x50EF80
                stq     r8, 0x50EF90
                stq     r12, 0x50EFA0
                stq     g4, 0x50EFC0
                stq     g8, 0x50EFD0
                st      g12, 0x50EFE0
                st      g13, 0x50EFE4
                addo    1, g0, g0
                lda     0x1000514, g9
                call    print_mes
                lda     0x1000694, g9
                ld      0x50EFF0, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR3:            .asciz "r3 "
# ---------------------------------------------------------------------------
                lda     0x1000714, g9
                ld      0x50EF80, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR4:            .asciz "r4 "
# ---------------------------------------------------------------------------
                lda     0x1000794, g9
                ld      0x50EF84, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR5:            .asciz "r5 "
# ---------------------------------------------------------------------------
                lda     0x1000814, g9
                ld      0x50EF88, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR6:            .asciz "r6 "
# ---------------------------------------------------------------------------
                lda     0x1000894, g9
                ld      0x50EF8C, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR7:            .asciz "r7 "
# ---------------------------------------------------------------------------
                lda     0x1000914, g9
                ld      0x50EF90, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR8:            .asciz "r8 "
# ---------------------------------------------------------------------------
                lda     0x1000994, g9
                ld      0x50EF94, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR9:            .asciz "r9 "
# ---------------------------------------------------------------------------
                lda     0x1000A14, g9
                ld      0x50EF98, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR10:           .asciz "r10"
# ---------------------------------------------------------------------------
                lda     0x1000A94, g9
                ld      0x50EF9C, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR11:           .asciz "r11"
# ---------------------------------------------------------------------------
                lda     0x1000B14, g9
                ld      0x50EFA0, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR12:           .asciz "r12"
# ---------------------------------------------------------------------------
                lda     0x1000B94, g9
                ld      0x50EFA4, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR13:           .asciz "r13"
# ---------------------------------------------------------------------------
                lda     0x1000C14, g9
                ld      0x50EFA8, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR14:           .asciz "r14"
# ---------------------------------------------------------------------------
                lda     0x1000C94, g9
                ld      0x50EFAC, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aR15:           .asciz "r15"
# ---------------------------------------------------------------------------
                lda     0x1000532, g9
                ld      AUDIO_3, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG0:            .asciz "g0 "
# ---------------------------------------------------------------------------
                lda     0x10005B2, g9
                ld      0x50EFB4, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG1:            .asciz "g1 "
# ---------------------------------------------------------------------------
                lda     0x1000632, g9
                ld      0x50EFB8, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG2:            .asciz "g2 "
# ---------------------------------------------------------------------------
                lda     0x10006B2, g9
                ld      0x50EFBC, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG3:            .asciz "g3 "
# ---------------------------------------------------------------------------
                lda     0x1000732, g9
                ld      0x50EFC0, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG4:            .asciz "g4 "
# ---------------------------------------------------------------------------
                lda     0x10007B2, g9
                ld      0x50EFC4, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG5:            .asciz "g5 "
# ---------------------------------------------------------------------------
                lda     0x1000832, g9
                ld      0x50EFC8, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG6:            .asciz "g6 "
# ---------------------------------------------------------------------------
                lda     0x10008B2, g9
                ld      0x50EFCC, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG7:            .asciz "g7 "
# ---------------------------------------------------------------------------
                lda     0x1000932, g9
                ld      0x50EFD0, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG8:            .asciz "g8 "
# ---------------------------------------------------------------------------
                lda     0x10009B2, g9
                ld      0x50EFD4, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG9:            .asciz "g9 "
# ---------------------------------------------------------------------------
                lda     0x1000A32, g9
                ld      0x50EFD8, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG10:           .asciz "g10"
# ---------------------------------------------------------------------------
                lda     0x1000AB2, g9
                ld      0x50EFDC, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG11:           .asciz "g11"
# ---------------------------------------------------------------------------
                lda     0x1000B32, g9
                ld      0x50EFE0, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG12:           .asciz "g12"
# ---------------------------------------------------------------------------
                lda     0x1000BB2, g9
                ld      0x50EFE4, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG13:           .asciz "g13"
# ---------------------------------------------------------------------------
                lda     0x1000C32, g9
                ld      0x50EFE8, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aG14:           .asciz "g14"
# ---------------------------------------------------------------------------
                ldob    bp_switch_step, r3
                ldob    bp_offsets(r3), r3
                ldob    bp_switch_cont, r4
                ldob    bp_offsets(r4), r4
                ldob    bp_switches_on_off, r5
                ldob    bp_offsets(r5), r5
break_point_enabled:                    # CODE XREF: break_point_display+3CC↓j
                call    sub_4D288
                call    read_sw
                ld      INTERUPT_FLAGS_HELD, r9
                bbs     r3, r9, loc_3AD54
                ld      INTERUPT_FLAGS_MOMENTARY, r9
                bbs     r5, r9, set_break_point_to_1
                bbc     r4, r9, break_point_enabled
loc_3AD54:                              # CODE XREF: break_point_display+3BC↑j
                ldq     0x50EF80, r4
                ldq     0x50EF90, r8
                ldq     0x50EFA0, r12
                ldq     0x50EFC0, g4
                ldq     0x50EFD0, g8
                ld      0x50EFE0, g12
                ld      0x50EFE4, g13
loc_3AD8C:                              # CODE XREF: break_point_display+10↑j
                ld      0x50EFF0, r3
                bx      (g14)
# End of function break_point_display
# ---------------------------------------------------------------------------
set_break_point_to_1:                   # CODE XREF: break_point_display+3C8↑j
                mov     1, r15
                stib    r15, break_point
                b       loc_3AD54
# ---------------------------------------------------------------------------
list_En_debug:  .long aEcEnFlag         # DATA XREF: ROM:0004043C↓o
                .long aEcEnFlag0        # "ec_en_flag0"
                .long aEcFlag           # "ec_flag"
                .long aEcFlag0          # "ec_flag0"
                .long aEcMotKind        # "ec_mot_kind"
                .long aEcMotKind0       # "ec_mot_kind0"
                .long aEcEnMotKind      # "ec_en_mot_kind"
                .long aEcEnMotKind0     # "ec_en_mot_kind0"
                .long aEcEnNageFlag     # "ec_en_nage_flag"
                .long aEcEnNageFlag0    # "ec_en_nage_flag0"
                .long aEcSankakuFlag    # "ec_sankaku_flag"
                .long aEcSankakuFlag0   # "ec_sankaku_flag0"
                .long aEcMot2Kind       # "ec_mot2_kind"
                .long aEcMot2Kind0      # "ec_mot2_kind0"
                .long aEcMyStatus       # "ec_my_status"
                .long aEcMyStatus0      # "ec_my_status0"
                .long aEcEnd            # "ec_end"
                .long aEcPush           # "ec_push"
                .long aEcBuGuard        # "ec_bu_guard"
                .long aEcEnStatus       # "ec_en_status"
                .long aEcEnStatus0      # "ec_en_status0"
                .long aEcLeStagenum     # "ec_le_stagenum"
                .long aEcGeStagenum     # "ec_ge_stagenum"
                .long aEcEqStagenum     # "ec_eq_stagenum"
                .long aEcLeRoundnum     # "ec_le_roundnum"
                .long aEcGeRoundnum     # "ec_ge_roundnum"
                .long aEcEqRoundnum     # "ec_eq_roundnum"
                .long aEcGacha          # "ec_gacha"
                .long aEcRun            # "ec_run"
                .long aEcKJump          # "ec_k_jump"
                .long aEcBackWaza       # "ec_back_waza"
                .long aEcFurimuki       # "ec_furimuki"
                .long aEcFDash          # "ec_f_dash"
                .long aEcBDash          # "ec_b_dash"
                .long aEcAttack         # "ec_attack"
                .long aEcReset          # "ec_reset"
                .long aEcIfbEmode       # "ec_ifb_emode"
                .long aEcLeEnergy       # "ec_le_energy"
                .long aEcGeEnergy       # "ec_ge_energy"
                .long aEcEqEnergy       # "ec_eq_energy"
                .long aEcLeEnEnergy     # "ec_le_en_energy"
                .long aEcGeEnEnergy     # "ec_ge_en_energy"
                .long aEcEqEnEnergy     # "ec_eq_en_energy"
                .long aEcLeGameTimer    # "ec_le_game_timer"
                .long aEcGeGameTimer    # "ec_ge_game_timer"
                .long aEcEqGameTimer    # "ec_eq_game_timer"
                .long aEcLeLastcoma     # "ec_le_lastcoma"
                .long aEcGeLastcoma     # "ec_ge_lastcoma"
                .long aEcEqLastcoma     # "ec_eq_lastcoma"
                .long aEcMotdKind       # "ec_motd_kind"
                .long aEcMotdKind0      # "ec_motd_kind0"
                .long aEcModeSet        # "ec_mode_set"
                .long aEcIfbEmodeOld    # "ec_ifb_emode_old"
                .long aEcEqOldenergy    # "ec_eq_oldenergy"
                .long aEcEqEnOldenerg   # "ec_eq_en_oldenergy"
                .long aEcNage           # "ec_nage"
                .long aEcAiteFlag       # "ec_aite_flag"
                .long aEcAiteFlag0      # "ec_aite_flag0"
                .long aEcEnMot2Kind     # "ec_en_mot2_kind"
                .long aEcEnMot2Kind0    # "ec_en_mot2_kind0"
                .long aEcFastAttack     # "ec_fast_attack"
                .long aEcFarAttack      # "ec_far_attack"
                .long aEcDownAttack     # "ec_down_attack"
                .long aEcLeBarrier      # "ec_le_barrier"
                .long aEcGeBarrier      # "ec_ge_barrier"
                .long aEcEqBarrier      # "ec_eq_barrier"
                .long aEcLeEnBarrier    # "ec_le_en_barrier"
                .long aEcGeEnBarrier    # "ec_ge_en_barrier"
                .long aEcEqEnBarrier    # "ec_eq_en_barrier"
                .long aEcEqEnRob        # "ec_eq_en_rob"
                .long aEcNeEnRob        # "ec_ne_en_rob"
                .long aEcNageSake       # "ec_nage_sake"
                .long aEcK0Jump         # "ec_k0_jump"
                .long aEcKJumpm         # "ec_k_jumpm"
                .long aEcK0Jumpm        # "ec_k0_jumpm"
                .long aEcLeEnDist       # "ec_le_en_dist"
                .long aEcGeEnDist       # "ec_ge_en_dist"
                .long aEcTobiYoke       # "ec_tobi_yoke"
                .long aEcLeMemOb        # "ec_le_mem_ob"
                .long aEcGeMemOb        # "ec_ge_mem_ob"
                .long aEcEqMemOb        # "ec_eq_mem_ob"
                .long aEcNeMemOb        # "ec_ne_mem_ob"
                .long aEcLeMemOs        # "ec_le_mem_os"
                .long aEcGeMemOs        # "ec_ge_mem_os"
                .long aEcEqMemOs        # "ec_eq_mem_os"
                .long aEcNeMemOs        # "ec_ne_mem_os"
                .long aEcRunStop        # "ec_run_stop"
                .long aEcRunWaza        # "ec_run_waza"
                .long aEcEnMode         # "ec_en_mode"
                .long aEcEnMode0        # "ec_en_mode0"
                .long aEcJump           # "ec_jump"
                .long aEcResEnmodekee   # "ec_res_enmodekeep"
                .long aEcBackWaza2      # "ec_back_waza2"
                .long aEcTmrandJump     # "ec_tmrand_jump"
                .long aEcHowToModeSen   # "ec_how_to_mode_send"
                .long aEcYoke           # "ec_yoke"
                .long aEcRunEnd         # "ec_run_end"
                .long aEcAiteEnFlag     # "ec_aite_en_flag"
                .long aEcAiteEnFlag0    # "ec_aite_en_flag0"
                .long aEcResetNext      # "ec_reset_next"
                .long aEcSetWaza        # "ec_set_waza"
                .long aEcSetLevel       # "ec_set_level"
                .long aEcResetStickNe   # "ec_reset_stick_next"
                .long aEcMemSetOb       # "ec_mem_set_ob"
                .long aEcMemSetOs       # "ec_mem_set_os"
                .long aEcMemMemOb       # "ec_mem_mem_ob"
                .long aEcMemMemOs       # "ec_mem_mem_os"
                .long aEcHowToD         # "ec_how_to_d"
                .long aEcHowToD0        # "ec_how_to_d0"
                .long aEcEnHowToD       # "ec_en_how_to_d"
                .long aEcEnHowToD0      # "ec_en_how_to_d0"
                .long aEcHowToGuardSe   # "ec_how_to_guard_send"
                .long aEcAirComboChk    # "ec_air_combo_chk"
                .long aEcLeTedc         # "ec_le_tedc"
                .long aEcGeTedc         # "ec_ge_tedc"
                .long aEcLeLandTime     # "ec_le_land_time"
                .long aEcGeLandTime     # "ec_ge_land_time"
                .long aEcLeEnLandTime   # "ec_le_en_land_time"
                .long aEcGeEnLandTime   # "ec_ge_en_land_time"
                .long aEcTaikuuWaza     # "ec_taikuu_waza"
                .long aEcRandSet        # "ec_rand_set"
                .long aEcFrontWalk      # "ec_front_walk"
                .long aEcLeEnLastmain   # "ec_le_en_lastmain"
                .long aEcGeEnLastmain   # "ec_ge_en_lastmain"
                .long aEcEnMotdKind     # "ec_en_motd_kind"
                .long aEcEnMotdKind0    # "ec_en_motd_kind0"
                .long aEcUra            # "ec_ura"
                .long aEcLeEachang      # "ec_le_eachang"
                .long aEcGeEachang      # "ec_ge_eachang"
                .long aEcLeCombo        # "ec_le_combo"
                .long aEcGeCombo        # "ec_ge_combo"
                .long aEcEqCombo        # "ec_eq_combo"
                .long aEcBackWalk       # "ec_back_walk"
                .long aEcUkemi          # "ec_ukemi"
                .long aEcLeTekagen      # "ec_le_tekagen"
                .long aEcGeTekagen      # "ec_ge_tekagen"
                .long aEcLeMaincoma     # "ec_le_maincoma"
                .long aEcGeMaincoma     # "ec_ge_maincoma"
                .long aEcDirAdjust      # "ec_dir_adjust"
                .long aEcLeGypos        # "ec_le_gypos"
                .long aEcGeGypos        # "ec_ge_gypos"
                .long aEcEqMyRob        # "ec_eq_my_rob"
                .long aEcNeMyRob        # "ec_ne_my_rob"
                .long aEcVmax           # "ec_Vmax"
                .long aEcEnAp           # "ec_en_ap"
                .long aEcTobiWaza       # "ec_tobi_waza"
                .long aEcEnAp0          # "ec_en_ap0"
                .long aEcMax            # "ec_max"
# =============== S U B R O U T I N E =======================================
fa_enemy0:                              # DATA XREF: ADV_CPU_BATTLE_WAIT1+120↑o
                mov     0, r3
                stob    r3, 0x108(g13)
                stob    r3, 0x109(g13)
                stos    r3, 0x10A(g13)
                stos    r3, 0x10C(g13)
                ld      fa_rob0, r3
                mov     0, r15
                stib    r15, 0xCE(g13)
                mov     0, r15
                stib    r15, 0x1200(r3)
                lda     sub_3B434, r15
                st      r15, 0xC(g13)
                mov     1, r15
                stib    r15, 0xD0(g13)
                addo    4, sp, sp
                st      g7, -4(sp)
                addo    4, sp, sp
                st      g8, -4(sp)
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      mod_fa_enemy0, g4
                call    fa_enemy        # g4 = mod_fa_enemy0 or mod_fa_enemy1
                ld      -4(sp), g7
                subo    4, sp, sp
                ld      -4(sp), g8
                subo    4, sp, sp
                ret
# End of function fa_enemy0
# =============== S U B R O U T I N E =======================================
fa_enemy1:                              # DATA XREF: ADV_CPU_BATTLE_WAIT1+144↑o
                mov     0, r3
                stob    r3, 0x108(g13)
                stob    r3, 0x109(g13)
                stos    r3, 0x10A(g13)
                stos    r3, 0x10C(g13)
                ld      fa_rob1, r3
                mov     1, r15
                stib    r15, 0xCE(g13)
                mov     0, r15
                stib    r15, 0x1200(r3)
                lda     sub_3B544, r15
                st      r15, 0xC(g13)
                mov     2, r15
                stib    r15, 0xD0(g13)
                addo    4, sp, sp
                st      g7, -4(sp)
                addo    4, sp, sp
                st      g8, -4(sp)
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                ld      mod_fa_enemy1, g4
                call    fa_enemy        # g4 = mod_fa_enemy0 or mod_fa_enemy1
                ld      -4(sp), g7
                subo    4, sp, sp
                ld      -4(sp), g8
                subo    4, sp, sp
                ret
# End of function fa_enemy1
# =============== S U B R O U T I N E =======================================
# g4 = mod_fa_enemy0 or mod_fa_enemy1
fa_enemy:                               # CODE XREF: fa_enemy0+74↑p
                lda     0xDE(g4), r14   # r14 = mod_fa_enemy0+0xDE or mod_fa_enemy1+0xDE
                mov     0, r15
                mov     8, r13          # init counter to 8
loc_3B12C:                              # CODE XREF: fa_enemy+18↓j
                stis    r15, (r14)
                addo    2, r14, r14
                cmpdeco 1, r13, r13
                bl      loc_3B12C
                lda     0xF2(g4), r14
                mov     0, r15
                mov     8, r13
loc_3B148:                              # CODE XREF: fa_enemy+34↓j
                stis    r15, (r14)
                addo    2, r14, r14
                cmpdeco 1, r13, r13
                bl      loc_3B148
                mov     0, r3
                stos    r3, 0xAC(g4)
                stos    r3, 0xB6(g4)
                stos    r3, 0xAE(g4)
                stos    r3, 0xB0(g4)
                stos    r3, 0xB2(g4)
                stos    r3, 0xB4(g4)
                stos    r3, 0x94(g4)
                stos    r3, 0x9E(g4)
                stos    r3, 0xA0(g4)
                stos    r3, 0xA2(g4)
                stos    r3, 0xA4(g4)
                stos    r3, 0xA6(g4)
                stos    r3, 0xA8(g4)
                stos    r3, 0xDA(g4)
                stos    r3, 0x106(g4)
                stob    r3, 0xBE(g4)
                stob    r3, 0xBA(g4)
                stob    r3, 0xBB(g4)
                stob    r3, 0xBC(g4)
                stob    r3, 0xBD(g4)
                stob    r3, 0xC5(g4)
                stob    r3, 0xC6(g4)
                stob    r3, 0xC1(g4)
                stob    r3, 0xC2(g4)
                stob    r3, 0xC8(g4)
                stob    r3, 0xEE(g4)
                stob    r3, 0x102(g4)
                st      r3, 0x6C(g4)
                st      r3, 0x70(g4)
                stos    r3, 0x118(g4)
                stos    r3, 0x11E(g4)
                ldob    curr_round_num, r14
                cmpobne 1, r14, loc_3B204
                lda     0x74(g4), r14
                mov     0, r15
                mov     0x10, r13
loc_3B1F0:                              # CODE XREF: fa_enemy+DC↓j
                stis    r15, (r14)
                addo    2, r14, r14
                cmpdeco 1, r13, r13
                bl      loc_3B1F0
                stob    r3, 0xC4(g4)
loc_3B204:                              # CODE XREF: fa_enemy+C0↑j
                setbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0x1B1(g7), r3
                and     0xF, r3, r3
                stob    r3, 0xC9(g4)
                ldob    0x1B1(g8), r3
                and     0xF, r3, r3
                stob    r3, 0xCA(g4)
                call    sub_3B22C
                ret
# End of function fa_enemy
# =============== S U B R O U T I N E =======================================
sub_3B22C:                              # CODE XREF: fa_enemy+104↑p
                ldob    0xD0(g4), r4
                bbc     0, r4, loc_3B244
                ldob    ROB0_DEBUG_PARAM, r3 # Is CPU player 1
                bbs     1, r3, loc_3B430
                b       loc_3B250
# ---------------------------------------------------------------------------
loc_3B244:                              # CODE XREF: sub_3B22C+4↑j
                ldob    ROB1_DEBUG_PARAM, r3 # Is CPU player 2
                bbs     1, r3, loc_3B430
loc_3B250:                              # CODE XREF: sub_3B22C+14↑j
                ldob    stage_num, r3   # Load level AI
                and     15, r3, r3
                shlo    5, r3, r3
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3342(r15), r15 # match_enemy_rank
                and     3, r15, r15     # Make sure number is between 0 and 3
                ld      match_enemy_rank_data[r15*4], r5
                lda     (r5)[r3], r4
                ld      0x0(r4), r15
                st      r15, 0x44(g4)
                ld      4(r4), r15
                st      r15, 0x48(g4)
                ldis    8(r4), r15
                stis    r15, 0x4C(g4)
                ldis    0xA(r4), r15
                stis    r15, 0x4E(g4)
                ldib    0xC(r4), r15
                stib    r15, 0x54(g4)
                ldib    0xD(r4), r15
                stib    r15, 0x55(g4)
                ldib    0xE(r4), r15
                stib    r15, 0x56(g4)
                ldib    0xF(r4), r15
                stib    r15, 0x57(g4)
                ldib    0x10(r4), r15
                stib    r15, 0x58(g4)
                ldib    0x11(r4), r15
                stib    r15, 0x59(g4)
                ldib    0x12(r4), r15
                stib    r15, 0x5A(g4)
                ldib    0x13(r4), r15
                stib    r15, 0x5B(g4)
                ldib    0x14(r4), r15
                stib    r15, 0x5C(g4)
                ldib    0x15(r4), r15
                stib    r15, 0x5D(g4)
                ldib    0x16(r4), r15
                stib    r15, 0x5E(g4)
                lda     0xFF, r10
                addo    0x1F, 9, r9
                ld      continue_count, r3
                shli    4, r3, r3
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3342(r15), r15 # match_enemy_rank
                and     3, r15, r15
                cmpobne 0, r15, loc_3B328
                shli    1, r3, r3
loc_3B328:                              # CODE XREF: sub_3B22C+F4↑j
                ldob    0x54(g4), r4
                cmpobge r9, r4, loc_3B34C
                subi    r3, r4, r4
                cmpible r9, r4, loc_3B340
                mov     r9, r4
                b       loc_3B348
# ---------------------------------------------------------------------------
loc_3B340:                              # CODE XREF: sub_3B22C+108↑j
                cmpibge r10, r4, loc_3B348
                mov     r10, r4
loc_3B348:                              # CODE XREF: sub_3B22C+110↑j
                stob    r4, 0x54(g4)
loc_3B34C:                              # CODE XREF: sub_3B22C+100↑j
                ldob    0x57(g4), r4
                cmpobge r9, r4, loc_3B370
                subi    r3, r4, r4
                cmpible r9, r4, loc_3B364
                mov     r9, r4
                b       loc_3B36C
# ---------------------------------------------------------------------------
loc_3B364:                              # CODE XREF: sub_3B22C+12C↑j
                cmpibge r10, r4, loc_3B36C
                mov     r10, r4
loc_3B36C:                              # CODE XREF: sub_3B22C+134↑j
                stob    r4, 0x57(g4)
loc_3B370:                              # CODE XREF: sub_3B22C+124↑j
                ldob    0x58(g4), r4
                cmpobge r9, r4, loc_3B394
                subi    r3, r4, r4
                cmpible r9, r4, loc_3B388
                mov     r9, r4
                b       loc_3B390
# ---------------------------------------------------------------------------
loc_3B388:                              # CODE XREF: sub_3B22C+150↑j
                cmpibge r10, r4, loc_3B390
                mov     r10, r4
loc_3B390:                              # CODE XREF: sub_3B22C+158↑j
                stob    r4, 0x58(g4)
loc_3B394:                              # CODE XREF: sub_3B22C+148↑j
                ldob    0x5E(g4), r4
                cmpobge r9, r4, loc_3B3B8
                subi    r3, r4, r4
                cmpible r9, r4, loc_3B3AC
                mov     r9, r4
                b       loc_3B3B4
# ---------------------------------------------------------------------------
loc_3B3AC:                              # CODE XREF: sub_3B22C+174↑j
                cmpibge r10, r4, loc_3B3B4
                mov     r10, r4
loc_3B3B4:                              # CODE XREF: sub_3B22C+17C↑j
                stob    r4, 0x5E(g4)
loc_3B3B8:                              # CODE XREF: sub_3B22C+16C↑j
                ldos    0x9E(g4), r4
                shli    2, r3, r3
                addo    r3, r4, r4
                stos    r4, 0x9E(g4)
                ldib    0x54(g4), r15
                stib    r15, 0x60(g4)
                ldib    0x55(g4), r15
                stib    r15, 0x61(g4)
                ldib    0x56(g4), r15
                stib    r15, 0x62(g4)
                ldib    0x57(g4), r15
                stib    r15, 0x63(g4)
                ldib    0x58(g4), r15
                stib    r15, 0x64(g4)
                ldib    0x59(g4), r15
                stib    r15, 0x65(g4)
                ldib    0x5A(g4), r15
                stib    r15, 0x66(g4)
                ldib    0x5B(g4), r15
                stib    r15, 0x67(g4)
                ldib    0x5C(g4), r15
                stib    r15, 0x68(g4)
                ldib    0x5D(g4), r15
                stib    r15, 0x69(g4)
                ldib    0x5E(g4), r15
                stib    r15, 0x6A(g4)
                ldob    0xC9(g4), r3
                ldib    byte_3ED86(r3), r3 # Always 0
                stib    r3, 0xBF(g4)    # store r3 to mod_fa_enemy0+0xBF or mod_fa_enemy1+0xBF
loc_3B430:                              # CODE XREF: sub_3B22C+10↑j
                ret
# End of function sub_3B22C
# =============== S U B R O U T I N E =======================================
sub_3B434:                              # DATA XREF: fa_enemy0+30↑o
                addo    4, sp, sp
                st      g7, -4(sp)
                addo    4, sp, sp
                st      g8, -4(sp)
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      mod_fa_enemy0, g4 # This gets used a lot
                ldis    0x10C(g4), r15
                stis    r15, 0x110(g4)
                ldis    0x10A(g4), r15
                stis    r15, 0x10E(g4)
                ldob    0x109(g4), r14
                cmpobe  0, r14, loc_3B4BC
                ldos    0x10C(g4), r14
                addi    1, r14, r15
                stos    r15, 0x10C(g4)
                mov     0, r15
                stib    r15, 0x109(g4)
                mov     0, r15
                stib    r15, 0x108(g4)
                ldob    0xEE(g4), r3    # r4 = mod_fa_enemy0_add+0xEE
                lda     0xDE(g4)[r3*2], r4
                ldis    game_timer, r5
                stis    r5, (r4)
                addo    1, r3, r3
                and     7, r3, r3
                stob    r3, 0xEE(g4)
loc_3B4BC:                              # CODE XREF: sub_3B434+44↑j
                ldob    0x108(g4), r14
                cmpobe  0, r14, loc_3B504
                ldos    0x10A(g4), r14
                addi    1, r14, r15
                stos    r15, 0x10A(g4)
                ld      mod_fa_enemy1, r7
                ldob    0x102(r7), r3
                lda     0xF2(r7)[r3*2], r4
                ldis    game_timer, r5
                stis    r5, (r4)
                addo    1, r3, r3
                and     7, r3, r3
                stob    r3, 0x102(r7)
                mov     0, r15
                stib    r15, 0x108(g4)
loc_3B504:                              # CODE XREF: sub_3B434+8C↑j
                ldob    ROB0_DEBUG_PARAM, r4
                bbc     0, r4, loc_3B518
                bbs     2, r4, loc_3B528
                b       loc_3B524
# ---------------------------------------------------------------------------
loc_3B518:                              # CODE XREF: sub_3B434+D8↑j
                ld      select0_flag, r15
                bbs     2, r15, loc_3B528
loc_3B524:                              # CODE XREF: sub_3B434+E0↑j
                call    enemy_control
loc_3B528:                              # CODE XREF: sub_3B434+DC↑j
                ld      -4(sp), g7
                subo    4, sp, sp
                ld      -4(sp), g8
                subo    4, sp, sp
                ret
# End of function sub_3B434
# =============== S U B R O U T I N E =======================================
sub_3B544:                              # DATA XREF: fa_enemy1+30↑o
                addo    4, sp, sp
                st      g7, -4(sp)
                addo    4, sp, sp
                st      g8, -4(sp)
                ld      fa_rob1, g7
                ld      fa_rob0, g8
                ld      mod_fa_enemy1, g4
                ldis    0x10C(g4), r15
                stis    r15, 0x110(g4)
                ldis    0x10A(g4), r15
                stis    r15, 0x10E(g4)
                ldob    0x109(g4), r14
                cmpobe  0, r14, loc_3B5CC
                ldos    0x10C(g4), r14
                addi    1, r14, r15
                stos    r15, 0x10C(g4)
                mov     0, r15
                stib    r15, 0x109(g4)
                mov     0, r15
                stib    r15, 0x108(g4)
                ldob    0xEE(g4), r3
                lda     0xDE(g4)[r3*2], r4
                ldis    game_timer, r5
                stis    r5, (r4)
                addo    1, r3, r3
                and     7, r3, r3
                stob    r3, 0xEE(g4)
loc_3B5CC:                              # CODE XREF: sub_3B544+44↑j
                ldob    0x108(g4), r14
                cmpobe  0, r14, loc_3B614
                ldos    0x10A(g4), r14
                addi    1, r14, r15
                stos    r15, 0x10A(g4)
                ld      mod_fa_enemy0, r7
                ldob    0x102(r7), r3
                lda     0xF2(r7)[r3*2], r4
                ldis    game_timer, r5
                stis    r5, (r4)
                addo    1, r3, r3
                and     7, r3, r3
                stob    r3, 0x102(r7)
                mov     0, r15
                stib    r15, 0x108(g4)
loc_3B614:                              # CODE XREF: sub_3B544+8C↑j
                ldob    ROB1_DEBUG_PARAM, r4
                bbc     0, r4, loc_3B628
                bbs     2, r4, called_after_CPU_MOVE_USE
                b       loc_3B634
# ---------------------------------------------------------------------------
loc_3B628:                              # CODE XREF: sub_3B544+D8↑j
                ld      select1_flag, r15
                bbs     2, r15, called_after_CPU_MOVE_USE
loc_3B634:                              # CODE XREF: sub_3B544+E0↑j
                call    enemy_control
called_after_CPU_MOVE_USE:              # CODE XREF: sub_3B544+DC↑j
                ld      -4(sp), g7
                subo    4, sp, sp
                ld      -4(sp), g8
                subo    4, sp, sp
                ret
# End of function sub_3B544
# =============== S U B R O U T I N E =======================================
enemy_control:                          # CODE XREF: sub_3B434:loc_3B524↑p
# FUNCTION CHUNK AT 0003C054 SIZE 000000C8 BYTES
# FUNCTION CHUNK AT 0003C130 SIZE 00000028 BYTES
# FUNCTION CHUNK AT 0003C16C SIZE 00000038 BYTES
# FUNCTION CHUNK AT 0003C1B8 SIZE 00000014 BYTES
# FUNCTION CHUNK AT 0003C1DC SIZE 00000038 BYTES
                ld      debug_flag, r15 # Label from official source
                bbs     5, r15, loc_3B724 # return
                ldis    0x106(g4), r3
                cmpibge 0, r3, loc_3B670
                subi    1, r3, r3
                stis    r3, 0x106(g4)
loc_3B670:                              # CODE XREF: enemy_control+10↑j
                ldos    0x118(g4), r3
                cmpobge 0, r3, loc_3B680
                subo    1, r3, r3
                stos    r3, 0x118(g4)
loc_3B680:                              # CODE XREF: enemy_control+20↑j
                ldos    0x9C(g4), r3
                addo    1, r3, r3
                stos    r3, 0x9C(g4)
                ldos    0xA0(g4), r3
                addo    1, r3, r3
                stos    r3, 0xA0(g4)
                mov     0, r15
                stib    r15, 0x1200(g7)
                ldob    also_mode, r15
                lda     displacement2, r14
                cmpobe  r14, r15, ec_adv
                lda     displacement3, r14
                cmpobe  r14, r15, ec_adv
                ldob    also_mode, r15
                lda     mode8, r14
                cmpobe  r14, r15, loc_3B6E4
                lda     mode9, r14
                cmpobne r14, r15, loc_3B724 # return
loc_3B6E4:                              # CODE XREF: enemy_control+80↑j
                ldob    also_sub_mode, r15
                lda     mode8, r14
                cmpobe  r14, r15, loc_3B704
                lda     mode9, r14
                cmpobne r14, r15, loc_3B724 # return
loc_3B704:                              # CODE XREF: enemy_control+A0↑j
                call    enemy_param_mngr
                ldob    0xD1(g4), r14
                cmpobne 0, r14, loc_3C054
                ldob    0xC9(g4), r3    # r3 = mod_fa_enemy1_add+0xC9 or mod_fa_enemy0_add+0xC9
                ld      ptr_enemy_command_execution[r3*4], g6 # Always 0x947C8
                call    select_enemy_command
                call    stick_ctrl
loc_3B724:                              # CODE XREF: enemy_control+8↑j
                ret                     # return
# ---------------------------------------------------------------------------
ec_adv:                                 # CODE XREF: enemy_control+60↑j
                ldob    also_sub_mode, r15 # Label from official source
                lda     start_ip_add+1, r14
                cmpobe  r14, r15, loc_3B748
                lda     start_ip_add+3, r14
                cmpobne r14, r15, loc_3B790
loc_3B748:                              # CODE XREF: enemy_control+E4↑j
                call    enemy_param_mngr
                ldob    0xD1(g4), r14
                cmpobne 0, r14, loc_3C054
                mov     3, r15
                stib    r15, 0xCC(g4)
                lda     0xFE, r15
                stib    r15, 0x60(g4)
                lda     0xDC, r15
                stib    r15, 0x61(g4)
                lda     0xB4, r15
                stib    r15, 0x62(g4)
                lda     0xB4, r15
                stib    r15, 0x65(g4)
                ldob    0xC9(g4), r3
                ld      ptr_enemy_command_execution[r3*4], g6 # Always 0x947C8
                call    select_enemy_command
                call    stick_ctrl
loc_3B790:                              # CODE XREF: enemy_control+F0↑j
                ret
# End of function enemy_control
# =============== S U B R O U T I N E =======================================
enemy_param_mngr:                       # CODE XREF: enemy_control:loc_3B704↑p
                ldos    0x1AC(g7), r3   # Label from official source
                ldos    0x1AC(g8), r4
                subi    r4, r3, r5
                stis    r5, 0x96(g4)
                ldib    0x54(g4), r15
                stib    r15, 0x60(g4)
                ldib    0x55(g4), r15
                stib    r15, 0x61(g4)
                ldib    0x56(g4), r15
                stib    r15, 0x62(g4)
                ldib    0x57(g4), r15
                stib    r15, 0x63(g4)
                ldib    0x58(g4), r15
                stib    r15, 0x64(g4)
                ldib    0x59(g4), r15
                stib    r15, 0x65(g4)
                ldib    0x5A(g4), r15
                stib    r15, 0x66(g4)
                ldib    0x5B(g4), r15
                stib    r15, 0x67(g4)
                ldib    0x5C(g4), r15
                stib    r15, 0x68(g4)
                ldib    0x5D(g4), r15
                stib    r15, 0x69(g4)
                ldib    0x5E(g4), r15
                stib    r15, 0x6A(g4)
                ldob    0x102(g4), r3
                subi    3, r3, r3
                and     7, r3, r3
                ldos    0xF2(g4)[r3*2], r8
                cmpobe  0, r8, loc_3B830
                ldos    game_timer, r7
                subo    r7, r8, r9
                shlo    6, 3, r10
                cmpobl  r10, r9, loc_3B830
                addo    0x1F, 9, r15
                stis    r15, 0x106(g4)
loc_3B830:                              # CODE XREF: enemy_param_mngr+7C↑j
                ldis    0xAA(g4), r3
                cmpibe  0, r3, loc_3B840
                subi    1, r3, r3
                stis    r3, 0xAA(g4)
loc_3B840:                              # CODE XREF: enemy_param_mngr+A0↑j
                ld      0x1A4(g7), r15
                bbc     0x12, r15, loc_3B85C
                ldob    0x822(g7), r14
                cmpobe  0, r14, loc_3B85C
                ldis    0x4C(g4), r15
                stis    r15, 0x9E(g4)
                b       loc_3B86C
# ---------------------------------------------------------------------------
loc_3B85C:                              # CODE XREF: enemy_param_mngr+B0↑j
                ldis    0x9E(g4), r3
                cmpibe  0, r3, loc_3B86C
                subi    1, r3, r3
                stis    r3, 0x9E(g4)
loc_3B86C:                              # CODE XREF: enemy_param_mngr+C4↑j
                ldob    0x821(g7), r14
                cmpobne 4, r14, loc_3B880
                lda     0xB4, r15
                stib    r15, 0xC8(g4)
                b       loc_3B890
# ---------------------------------------------------------------------------
loc_3B880:                              # CODE XREF: enemy_param_mngr+DC↑j
                ldob    0xC8(g4), r3
                cmpobe  0, r3, loc_3B890
                subo    1, r3, r3
                stob    r3, 0xC8(g4)
loc_3B890:                              # CODE XREF: enemy_param_mngr+E8↑j
                ld      0x1A4(g7), r15
                bbs     0x11, r15, loc_3B8AC
                ld      0x0(g7), r15
                bbs     4, r15, loc_3B8B8
                ldob    0x6C(g4), r3
                cmpobe  7, r3, loc_3B8C8
                b       loc_3B8D8
# ---------------------------------------------------------------------------
loc_3B8AC:                              # CODE XREF: enemy_param_mngr+100↑j
                mov     0, r15
                stis    r15, 0xA2(g4)
                b       loc_3B8E8
# ---------------------------------------------------------------------------
loc_3B8B8:                              # CODE XREF: enemy_param_mngr+108↑j
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_3B8D8
                ld      0x1A4(g7), r15
                bbs     0x10, r15, loc_3B8D8
loc_3B8C8:                              # CODE XREF: enemy_param_mngr+110↑j
                ldos    0xA2(g4), r5
                addo    4, r5, r5
                stos    r5, 0xA2(g4)
                b       loc_3B8E8
# ---------------------------------------------------------------------------
loc_3B8D8:                              # CODE XREF: enemy_param_mngr+114↑j
                ldos    0xA2(g4), r5
                cmpobe  0, r5, loc_3B8E8
                subo    1, r5, r5
                stos    r5, 0xA2(g4)
loc_3B8E8:                              # CODE XREF: enemy_param_mngr+120↑j
                ld      0x1A4(g7), r15
                bbc     0x11, r15, loc_3B8FC
                mov     0, r15
                stis    r15, 0xDA(g4)
                b       loc_3B90C
# ---------------------------------------------------------------------------
loc_3B8FC:                              # CODE XREF: enemy_param_mngr+158↑j
                ldos    0xDA(g4), r5
                cmpobe  0, r5, loc_3B90C
                subo    1, r5, r5
                stos    r5, 0xDA(g4)
loc_3B90C:                              # CODE XREF: enemy_param_mngr+164↑j
                ldob    0xD0(g4), r4
                bbc     0, r4, loc_3B924
                ldob    ROB0_DEBUG_PARAM, r3
                bbs     1, r3, loc_3B95C
                b       loc_3B930
# ---------------------------------------------------------------------------
loc_3B924:                              # CODE XREF: enemy_param_mngr+17C↑j
                ldob    ROB1_DEBUG_PARAM, r3
                bbs     1, r3, loc_3B95C
loc_3B930:                              # CODE XREF: enemy_param_mngr+18C↑j
                ld      0x1A4(g7), r15
                bbs     0xE, r15, loc_3B944
                ld      0x1A4(g7), r15
                bbs     0x10, r15, loc_3B944
                b       loc_3B954
# ---------------------------------------------------------------------------
loc_3B944:                              # CODE XREF: enemy_param_mngr+1A0↑j
                ldos    0xA4(g4), r3
                addo    1, r3, r3
                stos    r3, 0xA4(g4)
                b       loc_3B95C
# ---------------------------------------------------------------------------
loc_3B954:                              # CODE XREF: enemy_param_mngr+1AC↑j
                mov     0, r15
                stis    r15, 0xA4(g4)
loc_3B95C:                              # CODE XREF: enemy_param_mngr+188↑j
                ldob    0xD0(g4), r4
                bbc     0, r4, loc_3B974
                ldob    ROB0_DEBUG_PARAM, r3
                bbs     1, r3, loc_3B9B0
                b       loc_3B980
# ---------------------------------------------------------------------------
loc_3B974:                              # CODE XREF: enemy_param_mngr+1CC↑j
                ldob    ROB1_DEBUG_PARAM, r3
                bbs     1, r3, loc_3B9B0
loc_3B980:                              # CODE XREF: enemy_param_mngr+1DC↑j
                ld      0x1A4(g8), r15
                bbs     0xE, r15, loc_3B998
                ld      0x1A4(g8), r15
                bbs     0xF, r15, loc_3B998
                ld      0x1A4(g8), r15
                bbc     0x10, r15, loc_3B9A8
loc_3B998:                              # CODE XREF: enemy_param_mngr+1F0↑j
                ldos    0xA6(g4), r3
                addo    1, r3, r3
                stos    r3, 0xA6(g4)
                b       loc_3B9B0
# ---------------------------------------------------------------------------
loc_3B9A8:                              # CODE XREF: enemy_param_mngr+200↑j
                mov     0, r15
                stis    r15, 0xA6(g4)
loc_3B9B0:                              # CODE XREF: enemy_param_mngr+1D8↑j
                ldob    0xD0(g4), r4
                bbc     0, r4, loc_3B9C8
                ldob    ROB0_DEBUG_PARAM, r3
                bbs     1, r3, loc_3B9FC
                b       loc_3B9D4
# ---------------------------------------------------------------------------
loc_3B9C8:                              # CODE XREF: enemy_param_mngr+220↑j
                ldob    ROB1_DEBUG_PARAM, r3
                bbs     1, r3, loc_3B9FC
loc_3B9D4:                              # CODE XREF: enemy_param_mngr+230↑j
                ld      0x804(g8), r15
                bbc     0xC, r15, loc_3B9EC
                ldos    0xA8(g4), r3
                addo    1, r3, r3
                stos    r3, 0xA8(g4)
                b       loc_3B9FC
# ---------------------------------------------------------------------------
loc_3B9EC:                              # CODE XREF: enemy_param_mngr+244↑j
                ldos    0xA8(g4), r3
                cmpobe  0, r3, loc_3B9FC
                subo    1, r3, r3
                stos    r3, 0xA8(g4)
loc_3B9FC:                              # CODE XREF: enemy_param_mngr+22C↑j
                ld      0x1A4(g8), r15
                bbs     0xE, r15, loc_3BA1C
                ld      0x1A4(g8), r15
                bbs     0x10, r15, loc_3BA1C
                ld      0x1A4(g8), r15
                bbs     0xF, r15, loc_3BA1C
                mov     0, r15
                stib    r15, 0xC3(g4)
loc_3BA1C:                              # CODE XREF: enemy_param_mngr+26C↑j
                ld      0x0(g7), r15
                bbs     4, r15, loc_3BA38
                ld      0x1A4(g7), r15
                bbs     0, r15, loc_3BA38
                mov     0, r15
                stis    r15, 0x50(g4)
                b       loc_3BAC8
# ---------------------------------------------------------------------------
loc_3BA38:                              # CODE XREF: enemy_param_mngr+28C↑j
                ld      0x804(g7), r15
                bbs     8, r15, loc_3BA64
                ld      0x804(g7), r15
                bbs     0x12, r15, loc_3BA64
                ld      0x804(g7), r15
                bbs     0x13, r15, loc_3BA64
                ld      0x804(g7), r15
                bbs     0xF, r15, loc_3BA64
                ldos    0x5DE(g7), r3
                stos    r3, 0x50(g4)
                b       loc_3BAC8
# ---------------------------------------------------------------------------
loc_3BA64:                              # CODE XREF: enemy_param_mngr+2A8↑j
                lda     loc_FFF8+7, r13
                ldos    0x80C(g7), r14
                cmpobe  r13, r14, loc_3BA88
                ldos    0x1AA(g7), r13
                ldos    0x80C(g7), r14
                subi    r13, r14, r3
                stos    r3, 0x50(g4)
                b       loc_3BA9C
# ---------------------------------------------------------------------------
loc_3BA88:                              # CODE XREF: enemy_param_mngr+2DC↑j
                ldos    0x1AA(g7), r13
                ldos    0x800(g7), r14
                subi    r13, r14, r3
                stos    r3, 0x50(g4)
                b       loc_3BA9C
# ---------------------------------------------------------------------------
loc_3BA9C:                              # CODE XREF: enemy_param_mngr+2F0↑j
                ld      0x804(g7), r15
                bbs     0xF, r15, loc_3BAB8
                ld      0x804(g7), r15
                bbs     0x12, r15, loc_3BAB8
                ld      0x804(g7), r15
                bbs     0x13, r15, loc_3BAB8
                b       loc_3BAC8
# ---------------------------------------------------------------------------
loc_3BAB8:                              # CODE XREF: enemy_param_mngr+30C↑j
                ldos    0x50(g4), r14
                cmpobl  2, r14, loc_3BAC8
                mov     2, r15
                stis    r15, 0x50(g4)
loc_3BAC8:                              # CODE XREF: enemy_param_mngr+2A0↑j
                ldob    0x6C(g4), r7
                ldob    0x70(g4), r8
                cmpobe  r7, r8, loc_3BB54
                cmpobne 4, r7, loc_3BB40
                mov     0, r15
                stib    r15, 0xBA(g4)
                mov     0, r15
                stib    r15, 0xBB(g4)
                mov     0, r15
                stib    r15, 0xBC(g4)
                mov     0, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                ld      0x40(g4), r15
                setbit  0, r15, r15
                st      r15, 0x40(g4)
                ld      0x6C(g4), r15
                clrbit  8, r15, r15
                st      r15, 0x6C(g4)
loc_3BB40:                              # CODE XREF: enemy_param_mngr+340↑j
                ldis    0x4E(g4), r15
                stis    r15, 0xAA(g4)
                stob    r7, 0x70(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3BB54:                              # CODE XREF: enemy_param_mngr+33C↑j
                ld      mod_fa_enemy0, r3
                ldob    4(g7), r14
                cmpobe  1, r14, loc_3BB6C
                ld      mod_fa_enemy1, r3
loc_3BB6C:                              # CODE XREF: enemy_param_mngr+3CC↑j
                ldos    0x10A(r3), r13
                ldos    0x10E(r3), r14
                cmpobe  r13, r14, loc_3BC08
                ld      0xA08(g7), r15
                bbc     0x1F, r15, loc_3BB8C
                ldos    0x11E(g4), r14
                addi    1, r14, r15
                stos    r15, 0x11E(g4)
loc_3BB8C:                              # CODE XREF: enemy_param_mngr+3E8↑j
                ldob    0x6C(g4), r14
                cmpobe  0x17, r14, loc_3BC08
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
                mov     0, r15
                stib    r15, 0xBA(g4)
                mov     0, r15
                stib    r15, 0xBB(g4)
                mov     0, r15
                stib    r15, 0xBC(g4)
                mov     0, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                ld      0x40(g4), r15
                setbit  0, r15, r15
                st      r15, 0x40(g4)
loc_3BC08:                              # CODE XREF: enemy_param_mngr+3E0↑j
                ld      0x40(g4), r5
                clrbit  0xB, r5, r5
                clrbit  0xC, r5, r5
                clrbit  9, r5, r5
                clrbit  0xA, r5, r5
                clrbit  2, r5, r5
                clrbit  3, r5, r5
                clrbit  4, r5, r5
                clrbit  5, r5, r5
                clrbit  6, r5, r5
                clrbit  7, r5, r5
                clrbit  0x10, r5, r5
                ldob    0x1B1(g7), r14
                cmpobe  5, r14, loc_3BC5C
                ldob    0x1B1(g7), r14
                cmpobe  8, r14, loc_3BC5C
                ldob    0x1B1(g7), r14
                cmpobe  9, r14, loc_3BC5C
                ldob    0x1B1(g7), r14
                cmpobe  0xB, r14, loc_3BC5C
                b       loc_3BC60
# ---------------------------------------------------------------------------
loc_3BC5C:                              # CODE XREF: enemy_param_mngr+4A8↑j
                setbit  0x10, r5, r5
loc_3BC60:                              # CODE XREF: enemy_param_mngr+4C4↑j
                ld      0x5F4(g7), r7
                ld      0x44(g4), r8
                ld      0x48(g4), r9
                cmpr    r7, r9
                bg      loc_3BCAC
                cmpr    r7, r8
                bl      loc_3BCA4
                setbit  9, r5, r5
                subr    r8, r9, r10
                lda     0x3F000000, r13
                mulr    r13, r10, r10
                addr    r8, r10, r10
                cmpr    r7, r10
                ble     loc_3BCB4
                setbit  0xA, r5, r5
                b       loc_3BCB4
# ---------------------------------------------------------------------------
loc_3BCA4:                              # CODE XREF: enemy_param_mngr+4E4↑j
                setbit  0xB, r5, r5
                b       loc_3BCB4
# ---------------------------------------------------------------------------
loc_3BCAC:                              # CODE XREF: enemy_param_mngr+4DC↑j
                setbit  0xC, r5, r5
                b       loc_3BCB4
# ---------------------------------------------------------------------------
loc_3BCB4:                              # CODE XREF: enemy_param_mngr+504↑j
                lda     0x40200000, r6  # Float 2.5
                lda     0x3F800000, r7  # Float 1.0
                ld      0x5F8(g7), r4
                cmpr    r4, r6
                bg      loc_3BCD4
                setbit  4, r5, r5
loc_3BCD4:                              # CODE XREF: enemy_param_mngr+538↑j
                cmpr    r4, r7
                bg      loc_3BCE0
                setbit  5, r5, r5
loc_3BCE0:                              # CODE XREF: enemy_param_mngr+544↑j
                ld      0x5FC(g7), r4
                cmpr    r4, r6
                bg      loc_3BCF0
                setbit  2, r5, r5
loc_3BCF0:                              # CODE XREF: enemy_param_mngr+554↑j
                cmpr    r4, r7
                bg      loc_3BCFC
                setbit  3, r5, r5
loc_3BCFC:                              # CODE XREF: enemy_param_mngr+560↑j
                ld      0x6A8(g7), r4
                cmpr    r4, r6
                bg      loc_3BD0C
                setbit  6, r5, r5
loc_3BD0C:                              # CODE XREF: enemy_param_mngr+570↑j
                ld      0x6A8(g8), r4
                cmpr    r4, r6
                bg      loc_3BD1C
                setbit  7, r5, r5
loc_3BD1C:                              # CODE XREF: enemy_param_mngr+580↑j
                st      r5, 0x40(g4)
                ldob    0xC9(g4), r3
                lda     word_3EC64[r3*8], r3
                ldis    0x0(r3), r4
                ldis    2(r3), r5
                ldis    4(r3), r6
                ldis    6(r3), r7
                ldos    0x1AC(g7), r8
                cmpibg  r8, r4, loc_3BD50
                mov     3, r15
                stib    r15, 0xCC(g4)
                b       loc_3BD78
# ---------------------------------------------------------------------------
loc_3BD50:                              # CODE XREF: enemy_param_mngr+5AC↑j
                cmpibg  r8, r5, loc_3BD60
                mov     2, r15
                stib    r15, 0xCC(g4)
                b       loc_3BD78
# ---------------------------------------------------------------------------
loc_3BD60:                              # CODE XREF: enemy_param_mngr:loc_3BD50↑j
                cmpibg  r8, r6, loc_3BD70
                mov     1, r15
                stib    r15, 0xCC(g4)
                b       loc_3BD78
# ---------------------------------------------------------------------------
loc_3BD70:                              # CODE XREF: enemy_param_mngr:loc_3BD60↑j
                mov     0, r15
                stib    r15, 0xCC(g4)
loc_3BD78:                              # CODE XREF: enemy_param_mngr+5B8↑j
                ldib    0xBF(g4), r9
                ldis    0x96(g4), r5
                shri    5, r5, r5
                addi    r5, r9, r9
                mov     r5, r10
                ldob    stage_num, r3
                and     15, r3, r3      # If LEVEL_ID higher than 15, wrap around
                cmpibge 1, r5, loc_3BDB0
                ldos    0x1AC(g7), r3
                shlo    4, 5, r15
                cmpibg  r3, r15, loc_3BDB0
                subi    2, r9, r9
                subi    2, r10, r10
loc_3BDB0:                              # CODE XREF: enemy_param_mngr+604↑j
                ldob    0xC9(g4), r3
                lda     word_3ED4C[r3*2], r3
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3342(r15), r15 # r15 = BACKUP_RAM_TO_RAM+0x3342
                and     3, r15, r15     # If match_enemy_rank higher than 3, wrap around
                cmpobe  0, r15, loc_3BDD8 # if match_enemy_rank = 0 branch
                b       loc_3BDE4
# ---------------------------------------------------------------------------
loc_3BDD8:                              # CODE XREF: enemy_param_mngr+63C↑j
                mov     0, r4
                mov     16, r5
                b       loc_3BDEC
# ---------------------------------------------------------------------------
loc_3BDE4:                              # CODE XREF: enemy_param_mngr+640↑j
                ldib    0x0(r3), r4
                ldib    1(r3), r5
loc_3BDEC:                              # CODE XREF: enemy_param_mngr+64C↑j
                cmpible r4, r9, loc_3BDF8
                mov     r4, r9
                b       loc_3BE00
# ---------------------------------------------------------------------------
loc_3BDF8:                              # CODE XREF: enemy_param_mngr:loc_3BDEC↑j
                cmpibge r5, r9, loc_3BE00
                mov     r5, r9
loc_3BE00:                              # CODE XREF: enemy_param_mngr+660↑j
                cmpible r4, r10, loc_3BE0C
                mov     r4, r10
                b       loc_3BE14
# ---------------------------------------------------------------------------
loc_3BE0C:                              # CODE XREF: enemy_param_mngr:loc_3BE00↑j
                cmpibge r5, r10, loc_3BE14
                mov     r5, r10
loc_3BE14:                              # CODE XREF: enemy_param_mngr+674↑j
                stib    r9, 0x5F(g4)
                stib    r10, 0xCD(g4)
                ldob    0xD0(g4), r4
                bbc     0, r4, loc_3BE34
                ldob    ROB0_DEBUG_PARAM, r3
                bbs     1, r3, loc_3BFBC
                b       loc_3BE40
# ---------------------------------------------------------------------------
loc_3BE34:                              # CODE XREF: enemy_param_mngr+68C↑j
                ldob    ROB1_DEBUG_PARAM, r3
                bbs     1, r3, loc_3BFBC
loc_3BE40:                              # CODE XREF: enemy_param_mngr+69C↑j
                ldob    stage_num, r3
                cmpoble 3, r5, loc_3BFBC
                shli    4, r10, r9
                ldob    0x56(g4), r3
                subi    r9, r3, r3
                mov     0, r15
                cmpible r15, r3, loc_3BE68
                mov     r15, r3
                b       loc_3BE74
# ---------------------------------------------------------------------------
loc_3BE68:                              # CODE XREF: enemy_param_mngr+6C8↑j
                lda     0xFE, r15
                cmpibge r15, r3, loc_3BE74
                mov     r15, r3
loc_3BE74:                              # CODE XREF: enemy_param_mngr+6D0↑j
                stob    r3, 0x62(g4)
                ldob    0x57(g4), r3
                subi    r9, r3, r3
                mov     0, r15
                cmpible r15, r3, loc_3BE90
                mov     r15, r3
                b       loc_3BE9C
# ---------------------------------------------------------------------------
loc_3BE90:                              # CODE XREF: enemy_param_mngr+6F0↑j
                shlo    3, 0x19, r15
                cmpibge r15, r3, loc_3BE9C
                mov     r15, r3
loc_3BE9C:                              # CODE XREF: enemy_param_mngr+6F8↑j
                stob    r3, 0x63(g4)
                ldob    0x58(g4), r3
                subi    r9, r3, r3
                mov     0, r15
                cmpible r15, r3, loc_3BEB8
                mov     r15, r3
                b       loc_3BEC4
# ---------------------------------------------------------------------------
loc_3BEB8:                              # CODE XREF: enemy_param_mngr+718↑j
                lda     0xFE, r15
                cmpibge r15, r3, loc_3BEC4
                mov     r15, r3
loc_3BEC4:                              # CODE XREF: enemy_param_mngr+720↑j
                stob    r3, 0x64(g4)
                addi    r9, r9, r9
                ldob    0x5C(g4), r3
                subi    r9, r3, r3
                mov     0, r15
                cmpible r15, r3, loc_3BEE4
                mov     r15, r3
                b       loc_3BEF0
# ---------------------------------------------------------------------------
loc_3BEE4:                              # CODE XREF: enemy_param_mngr+744↑j
                lda     0xFE, r15
                cmpibge r15, r3, loc_3BEF0
                mov     r15, r3
loc_3BEF0:                              # CODE XREF: enemy_param_mngr+74C↑j
                stob    r3, 0x68(g4)
                ldob    0x59(g4), r3
                subi    r9, r3, r3
                mov     0, r15
                cmpible r15, r3, loc_3BF0C
                mov     r15, r3
                b       loc_3BF18
# ---------------------------------------------------------------------------
loc_3BF0C:                              # CODE XREF: enemy_param_mngr+76C↑j
                lda     0xFE, r15
                cmpibge r15, r3, loc_3BF18
                mov     r15, r3
loc_3BF18:                              # CODE XREF: enemy_param_mngr+774↑j
                stob    r3, 0x65(g4)
                addi    r9, r9, r9
                ldob    0x5B(g4), r3
                subi    r9, r3, r3
                mov     0, r15
                cmpible r15, r3, loc_3BF38
                mov     r15, r3
                b       loc_3BF44
# ---------------------------------------------------------------------------
loc_3BF38:                              # CODE XREF: enemy_param_mngr+798↑j
                lda     0xFE, r15
                cmpibge r15, r3, loc_3BF44
                mov     r15, r3
loc_3BF44:                              # CODE XREF: enemy_param_mngr+7A0↑j
                stob    r3, 0x67(g4)
                ldob    0xEE(g4), r3
                subi    3, r3, r3
                and     7, r3, r3
                ldos    0xDE(g4)[r3*2], r8
                cmpobe  0, r8, loc_3BF94
                ldos    game_timer, r7
                subo    r7, r8, r9
                shlo    6, 3, r10
                cmpobl  r10, r9, loc_3BF94
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3342(r15), r15
                and     3, r15, r15
                cmpobe  0, r15, loc_3BF94
                lda     0xFE, r15
                stib    r15, 0x6A(g4)
loc_3BF94:                              # CODE XREF: enemy_param_mngr+7C8↑j
                ldib    0xC2(g4), r3
                cmpibg  0xD, r3, loc_3BFBC
                lda     0xFE, r15
                stib    r15, 0x60(g4)
                lda     0xFE, r15
                stib    r15, 0x61(g4)
                lda     0xFE, r15
                stib    r15, 0x67(g4)
                mov     3, r15
                stib    r15, 0xCC(g4)
loc_3BFBC:                              # CODE XREF: enemy_param_mngr+698↑j
                ld      mod_fa_enemy0, r3
                ldob    4(g7), r14
                cmpobe  1, r14, loc_3BFD4
                ld      mod_fa_enemy1, r3
loc_3BFD4:                              # CODE XREF: enemy_param_mngr+834↑j
                ldos    0x10A(r3), r13
                ldos    0x10E(r3), r14
                cmpobe  r13, r14, loc_3C008
                ldob    0xC4(g4), r3
                addo    1, r3, r4
                and     0xF, r4, r4
                stob    r4, 0xC4(g4)
                lda     0x74(g4)[r3*2], r5
                ldos    0x1E1C(g8), r4
                stos    r4, (r5)
                b       loc_3C008
# ---------------------------------------------------------------------------
loc_3C008:                              # CODE XREF: enemy_param_mngr+848↑j
                ld      0x40(g4), r10
                clrbit  8, r10, r10
                mov     0, r11
                mov     0, r9
                ldos    0x1A8(g8), r5
                lda     0x74(g4), r6
                mov     0x10, r7
loc_3C024:                              # CODE XREF: enemy_param_mngr+8A4↓j
                ldos    (r6), r14
                cmpobne r5, r14, loc_3C030
                addo    1, r9, r9
loc_3C030:                              # CODE XREF: enemy_param_mngr+894↑j
                addo    2, r6, r6
                cmpdeco 1, r7, r7
                bl      loc_3C024
                cmpobg  3, r9, loc_3C048
                mov     r5, r11
                setbit  8, r10, r10
loc_3C048:                              # CODE XREF: enemy_param_mngr+8A8↑j
                st      r10, 0x40(g4)
                stos    r11, 0x94(g4)
                ret
# End of function enemy_param_mngr
# ---------------------------------------------------------------------------
# START OF FUNCTION CHUNK FOR enemy_control
loc_3C054:                              # CODE XREF: enemy_control+B8↑j
                ldis    energy_max, r15
                stis    r15, 0x1AC(g7)
                ldis    energy_max, r15
                stis    r15, 0x1AC(g8)
                shlo    7, 0xF, r15
                stis    r15, game_timer
                ldob    0xD1(g4), r14
                cmpobne 1, r14, loc_3C210
                ld      0x1A4(g7), r15
                bbs     0, r15, damage_wrong_check
                ld      0x40(g4), r3
                bbc     0, r3, damage_wrong_check
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xD2(g4), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                mov     0, r15
                stib    r15, 0xD6(g4)
                ret
# ---------------------------------------------------------------------------
damage_wrong_check:                     # CODE XREF: enemy_control+A30↑j
                ld      0x1A4(g7), r15
                bbc     2, r15, main_wrong_check
                ldob    0x822(g7), r13
                ldob    0xD5(g4), r14
                cmpobe  r13, r14, follow_wrong_check
                lda     0x1000C08, g9
                ldib    0x822(g7), g0
                balx    debug_disp_int, r14
# END OF FUNCTION CHUNK FOR enemy_control
# ---------------------------------------------------------------------------
aDamageWrong:   .asciz "DAMAGE WRONG !!"
# ---------------------------------------------------------------------------
                b       follow_wrong_check
# ---------------------------------------------------------------------------
# START OF FUNCTION CHUNK FOR enemy_control
follow_wrong_check:                     # CODE XREF: enemy_control+AB0↑j
                ldos    0x80A(g7), r13
                ldos    0x80C(g7), r14
                subi    r13, r14, r5
                ldob    0xD4(g4), r14
                cmpobe  r5, r14, main_wrong_check
                lda     0x1000D08, g9
                mov     r5, g0
                balx    debug_disp_int, r14
# END OF FUNCTION CHUNK FOR enemy_control
# ---------------------------------------------------------------------------
aFollowWrong:   .asciz "FOLLOW WRONG !!"
# ---------------------------------------------------------------------------
                b       main_wrong_check
# ---------------------------------------------------------------------------
# START OF FUNCTION CHUNK FOR enemy_control
main_wrong_check:                       # CODE XREF: enemy_control+AA4↑j
                ld      0x1A4(g7), r15
                bbc     1, r15, loc_3C1DC
                ldob    0xD6(g4), r14
                cmpobne 0, r14, loc_3C1DC
                mov     1, r15
                stib    r15, 0xD6(g4)
                ldos    0x808(g7), r13
                ldob    0xD3(g4), r14
                cmpobe  r13, r14, main_ok
                lda     0x1000C88, g9
                ldis    0x808(g7), g0
                balx    debug_disp_int, r14
# END OF FUNCTION CHUNK FOR enemy_control
# ---------------------------------------------------------------------------
aMainWrong:     .asciz "MAIN WRONG !!"
                .short 0
# ---------------------------------------------------------------------------
                b       loc_3C1DC
# ---------------------------------------------------------------------------
# START OF FUNCTION CHUNK FOR enemy_control
main_ok_check:                          # CODE XREF: enemy_control+B38↑j
main_ok:
                lda     0x1000C88, g9
                ldis    0x808(g7), g0
                balx    debug_disp_int, r14
# END OF FUNCTION CHUNK FOR enemy_control
# ---------------------------------------------------------------------------
aMainOk:        .asciz "MAIN OK    !!"
                .short 0
# ---------------------------------------------------------------------------
# START OF FUNCTION CHUNK FOR enemy_control
loc_3C1DC:                              # CODE XREF: enemy_control+B1C↑j
                ld      0x1A4(g7), r15
                bbc     0, r15, loc_3C1F8
                ldos    0x1AA(g7), r13
                ldos    0x80C(g7), r14
                subi    r13, r14, r5
                cmpobe  1, r5, loc_3C1F8
                ret
# ---------------------------------------------------------------------------
loc_3C1F8:                              # CODE XREF: enemy_control+B8C↑j
                ld      0x40(g4), r15
                bbs     0, r15, loc_3C204
                ret
# ---------------------------------------------------------------------------
loc_3C204:                              # CODE XREF: enemy_control+BA8↑j
                mov     2, r15
                stib    r15, 0xD1(g4)
                ret
# ---------------------------------------------------------------------------
loc_3C210:                              # CODE XREF: enemy_control+A28↑j
                ret
# END OF FUNCTION CHUNK FOR enemy_control
# ---------------------------------------------------------------------------
select_enemy_command:                   # CODE XREF: enemy_control+C8↑p
                subo    1, 0, r15       # Label from official source
                st      r15, 0x50F600
                mov     0, r15
                st      r15, 0x50F604
                mov     0, r15
                st      r15, enemy_command_offset
                lda     ec_en_flag, r14
                mov     0, r15
                addo    0x1F, 1, r13
loc_3C248:                              # CODE XREF: ROM:0003C254↓j
                st      r15, (r14)
                lda     4(r14), r14
                cmpdeco 1, r13, r13
                bl      loc_3C248
                mov     0, r15
                st      r15, ec_mot_kind
                mov     0, r15
                st      r15, ec_en_nage_flag
                mov     0, r15
                st      r15, ec_mot2_kind
                mov     0, r15
                st      r15, 0x114(g4)  # mod_fa_enemy0+0x114
sec_cc_next:                            # CODE XREF: ROM:0003C2E0↓j
                st      g6, enemy_command_offset # Label from official source
                ldob    (g6), r3
                lda     147, r13        # Number of enemy commands
                cmpo    r13, r3
                ble     over_enemy_command
                ld      0x50F604, r5
                stob    r3, ec_en_flag[r5]
                addo    1, r5, r5
                lda     127, r13
                and     r13, r5, r5
                st      r5, 0x50F604
                ld      enemy_command_list[r3*4], r4 # This list seems to match 0x3ADA8 (list_En_debug), but there are only 147, not 148, items in this list
                bx      (r4)
# ---------------------------------------------------------------------------
cc_en_flag:                             # DATA XREF: ROM:enemy_command_list↓o
                ldob    1(g6), r3
                ld      0x5B8(g7), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_en_flag0:                            # DATA XREF: ROM:0003E234↓o
                ldob    1(g6), r3
                ld      0x5B8(g7), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_flag:                                # DATA XREF: ROM:0003E238↓o
                ldob    1(g6), r3
                ld      0x0(g7), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_flag0:                               # DATA XREF: ROM:0003E23C↓o
                ldob    1(g6), r3
                ld      0x0(g7), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_mot_kind:                            # DATA XREF: ROM:0003E240↓o
                ldob    1(g6), r3
                ld      0x1A4(g7), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_mot_kind0:                           # DATA XREF: ROM:0003E244↓o
                ldob    1(g6), r3
                ld      0x1A4(g7), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_en_mot_kind:                         # DATA XREF: ROM:0003E248↓o
                ldob    1(g6), r3
                ld      0x1A4(g8), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_en_mot_kind0:                        # DATA XREF: ROM:0003E24C↓o
                ldob    1(g6), r3
                ld      0x1A4(g8), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_en_nage_flag:                        # DATA XREF: ROM:0003E250↓o
                ldob    1(g6), r3
                ld      0x720(g7), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_en_nage_flag0:                       # DATA XREF: ROM:0003E254↓o
                ldob    1(g6), r3
                ld      0x720(g7), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_sankaku_flag:                        # DATA XREF: ROM:0003E258↓o
                ldob    1(g6), r3
                ld      0xA08(g7), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_sankaku_flag0:                       # DATA XREF: ROM:0003E25C↓o
                ldob    1(g6), r3
                ld      0xA08(g7), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_mot2_kind:                           # DATA XREF: ROM:0003E260↓o
                ldob    1(g6), r3
                ld      0x70C(g7), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_mot2_kind0:                          # DATA XREF: ROM:0003E264↓o
                ldob    1(g6), r3
                ld      0x70C(g7), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_my_status:                           # DATA XREF: ROM:0003E268↓o
                ldob    1(g6), r3
                ld      0x1250(g7), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_my_status0:                          # DATA XREF: ROM:0003E26C↓o
                ldob    1(g6), r3
                ld      0x1250(g7), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_end:                                 # CODE XREF: ROM:0003E1D4↓j
                ret                     # Label from official source
# ---------------------------------------------------------------------------
cc_push:                                # DATA XREF: ROM:0003E274↓o
                ldob    1(g6), r3       # Label from official source
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                st      r3, 0x114(g4)
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_bu_guard:                            # DATA XREF: ROM:0003E278↓o
                mov     4, r15          # Label from official source
                stib    r15, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
cc_en_status:                           # DATA XREF: ROM:0003E27C↓o
                ldob    1(g6), r3       # Label from official source
                ld      0x40(g4), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_en_status0:                          # DATA XREF: ROM:0003E280↓o
                ldob    1(g6), r3       # Label from official source
                ld      0x40(g4), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_le_stagenum:                         # DATA XREF: ROM:0003E284↓o
                ldob    1(g6), r3       # Label from official source
                ldob    stage_num, r14
                cmpo    r3, r14
                ble     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_ge_stagenum:                         # DATA XREF: ROM:0003E288↓o
                ldob    1(g6), r3       # Label from official source
                ldob    stage_num, r14
                cmpo    r3, r14
                bge     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_eq_stagenum:                         # DATA XREF: ROM:0003E28C↓o
                ldob    1(g6), r3       # Label from official source
                ldob    stage_num, r14
                cmpo    r3, r14
                be      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_le_roundnum:                         # DATA XREF: ROM:0003E290↓o
                ldob    1(g6), r3       # Label from official source
                ldob    curr_round_num, r14
                cmpo    r3, r14
                ble     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_ge_roundnum:                         # DATA XREF: ROM:0003E294↓o
                ldob    1(g6), r3       # Label from official source
                ldob    curr_round_num, r14
                cmpo    r3, r14
                bge     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_eq_roundnum:                         # DATA XREF: ROM:0003E298↓o
                ldob    1(g6), r3       # Label from official source
                ldob    curr_round_num, r14
                cmpo    r3, r14
                be      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_gacha:                               # DATA XREF: ROM:0003E29C↓o
                ldos    0x9C(g4), r3    # Label from official source
                bbc     0, r3, loc_3C58C
                mov     0x10, r15
                stib    r15, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
loc_3C58C:                              # CODE XREF: ROM:0003C578↑j
                mov     4, r15
                stib    r15, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
cc_run:                                 # DATA XREF: ROM:0003E2A0↓o
                mov     0, r5           # Label from official source
                ld      0x40(g4), r3
                bbc     0, r3, loc_3C620
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     4, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93B18(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3C620:                              # CODE XREF: ROM:0003C5A4↑j
                mov     1, r15
                stib    r15, 0xCF(g4)
                ret
# ---------------------------------------------------------------------------
cc_k_jump:                              # DATA XREF: ROM:0003E2A4↓o
                ldob    1(g6), r3       # Label from official source
                ldob    0xCB(g4), r4
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                cmpoble r3, r4, loc_3C670
                ldob    2(g6), r3
                ldob    3(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    5(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3C670:                              # CODE XREF: ROM:0003C63C↑j
                addo    6, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3C678:                              # DATA XREF: ROM:0003E2A8↓o
                ldos    0x9C(g4), r5
                and     3, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3C700
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     4, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93AA0(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3C700:                              # CODE XREF: ROM:0003C684↑j
                ret
# ---------------------------------------------------------------------------
loc_3C704:                              # DATA XREF: ROM:0003E2AC↓o
                mov     3, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3C788
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     4, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93B18(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3C788:                              # CODE XREF: ROM:0003C70C↑j
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
                ret
# ---------------------------------------------------------------------------
loc_3C7A4:                              # DATA XREF: ROM:0003E2B0↓o
                mov     1, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3C828
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     4, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93B18(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3C828:                              # CODE XREF: ROM:0003C7AC↑j
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
                ret
# ---------------------------------------------------------------------------
loc_3C844:                              # DATA XREF: ROM:0003E2B4↓o
                mov     2, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3C8C8
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     4, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93B18(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3C8C8:                              # CODE XREF: ROM:0003C84C↑j
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
                ret
# ---------------------------------------------------------------------------
loc_3C8E4:                              # DATA XREF: ROM:0003E2B8↓o
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                ldob    0xC9(g4), r3
                lda     word_3EF90[r3*8], r5
                ldos    (r5), r3
                ldos    2(r5), r4
                subo    r3, r4, r4
                ldob    0xCB(g4), r5
                remo    r4, r5, r5
                addo    r3, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3C96C
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                stob    r5, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
loc_3C96C:                              # CODE XREF: ROM:0003C914↑j
                ret
# ---------------------------------------------------------------------------
loc_3C970:                              # DATA XREF: ROM:0003E2BC↓o
                mov     0, r15
                stib    r15, 0xBA(g4)
                mov     0, r15
                stib    r15, 0xBB(g4)
                mov     0, r15
                stib    r15, 0xBC(g4)
                mov     0, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                ld      0x40(g4), r15
                setbit  0, r15, r15
                st      r15, 0x40(g4)
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
                ret
# ---------------------------------------------------------------------------
loc_3C9E8:                              # DATA XREF: ROM:0003E2C0↓o
                ldob    1(g6), r3
loc_3C9EC:                              # CODE XREF: ROM:loc_3C9EC↓j
                cmpoble 0x19, r3, loc_3C9EC
                ldob    0x6C(g4), r14
                cmpobne r3, r14, loc_3CA28
                ldob    2(g6), r3
                ldob    3(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    5(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CA28:                              # CODE XREF: ROM:0003C9F4↑j
                addo    6, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CA30:                              # DATA XREF: ROM:0003E2C4↓o
                ldob    1(g6), r3
                ldos    0x1AC(g7), r14
                cmpo    r3, r14
                ble     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CA48:                              # DATA XREF: ROM:0003E2C8↓o
                ldob    1(g6), r3
                ldos    0x1AC(g7), r14
                cmpo    r3, r14
                bge     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CA60:                              # DATA XREF: ROM:0003E2CC↓o
                ldob    1(g6), r3
                ldos    0x1AC(g7), r14
                cmpo    r3, r14
                be      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CA78:                              # DATA XREF: ROM:0003E2D0↓o
                ldob    1(g6), r3
                ldos    0x1AC(g8), r14
                cmpo    r3, r14
                ble     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CA90:                              # DATA XREF: ROM:0003E2D4↓o
                ldob    1(g6), r3
                ldos    0x1AC(g8), r14
                cmpo    r3, r14
                bge     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CAA8:                              # DATA XREF: ROM:0003E2D8↓o
                ldob    1(g6), r3
                ldos    0x1AC(g8), r14
                cmpo    r3, r14
                be      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CAC0:                              # DATA XREF: ROM:0003E2DC↓o
                ldob    1(g6), r3
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldos    game_timer, r14
                cmpo    r3, r14
                ble     sec_cc_fault
                addo    3, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CAE8:                              # DATA XREF: ROM:0003E2E0↓o
                ldob    1(g6), r3
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldos    game_timer, r14
                cmpo    r3, r14
                bge     sec_cc_fault
                addo    3, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CB10:                              # DATA XREF: ROM:0003E2E4↓o
                ldob    1(g6), r3
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldos    game_timer, r14
                cmpo    r3, r14
                be      sec_cc_fault
                addo    3, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CB38:                              # DATA XREF: ROM:0003E2E8↓o
                ldob    1(g6), r3
                ldos    0x1AA(g8), r4
                ldos    0x800(g8), r5
                subo    r4, r5, r4
                cmpo    r3, r4
                ble     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CB58:                              # DATA XREF: ROM:0003E2EC↓o
                ldob    1(g6), r3
                ldos    0x1AA(g8), r4
                ldos    0x800(g8), r5
                subo    r4, r5, r4
                cmpo    r3, r4
                bge     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CB78:                              # DATA XREF: ROM:0003E2F0↓o
                ldob    1(g6), r3
                ldos    0x1AA(g8), r4
                ldos    0x800(g8), r5
                subo    r4, r5, r4
                cmpo    r3, r4
                be      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CB98:                              # DATA XREF: ROM:0003E2F4↓o
                ldob    1(g6), r3
                ld      0x804(g7), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CBB0:                              # DATA XREF: ROM:0003E2F8↓o
                ldob    1(g6), r3
                ld      0x804(g7), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CBC8:                              # DATA XREF: ROM:0003E2FC↓o
                mov     0, r15
                stis    r15, 0x118(g4)
                ldob    1(g6), r3
                setbit  8, r3, r3
                st      r3, 0x6C(g4)
                mov     0, r15
                stib    r15, 0xCF(g4)
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CBEC:                              # DATA XREF: ROM:0003E300↓o
                ldob    1(g6), r3
loc_3CBF0:                              # CODE XREF: ROM:loc_3CBF0↓j
                cmpoble 0x19, r3, loc_3CBF0
                ldob    0x6C(g4), r14
                cmpobne r3, r14, loc_3CC2C
                ldob    2(g6), r3
                ldob    3(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    5(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CC2C:                              # CODE XREF: ROM:0003CBF8↑j
                addo    6, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CC34:                              # DATA XREF: ROM:0003E304↓o
                ldos    0x1AC(g7), r13
                ldos    0x6D2(g7), r14
                cmpo    r13, r14
                be      sec_cc_fault
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CC4C:                              # DATA XREF: ROM:0003E308↓o
                ldos    0x1AC(g8), r13
                ldos    0x6D2(g8), r14
                cmpo    r13, r14
                be      sec_cc_fault
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CC64:                              # DATA XREF: ROM:0003E30C↓o
                ldob    0xCF(g4), r14
                addi    1, r14, r15
                stob    r15, 0xCF(g4)
                call    rand            # Random value stored to g0
                mov     g0, r5
                and     3, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3CCFC
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     4, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93BE0(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3CCFC:                              # CODE XREF: ROM:0003CC80↑j
                ret
# ---------------------------------------------------------------------------
loc_3CD00:                              # DATA XREF: ROM:0003E310↓o
                ldob    1(g6), r3
                ld      0x0(g8), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CD18:                              # DATA XREF: ROM:0003E314↓o
                ldob    1(g6), r3
                ld      0x0(g8), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CD30:                              # DATA XREF: ROM:0003E318↓o
                ldob    1(g6), r3
                ld      0x70C(g8), r15
                chkbit  r3, r15
                bno     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CD48:                              # DATA XREF: ROM:0003E31C↓o
                ldob    1(g6), r3
                ld      0x70C(g8), r15
                chkbit  r3, r15
                bo      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CD60:                              # DATA XREF: ROM:0003E320↓o
                ret
# ---------------------------------------------------------------------------
loc_3CD64:                              # DATA XREF: ROM:0003E324↓o
                ret
# ---------------------------------------------------------------------------
loc_3CD68:                              # DATA XREF: ROM:0003E328↓o
                ldos    0x9C(g4), r5
                and     1, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3CDF0
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     2, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93CFE(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3CDF0:                              # CODE XREF: ROM:0003CD74↑j
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
                ret
# ---------------------------------------------------------------------------
loc_3CE0C:                              # DATA XREF: ROM:0003E32C↓o
                ldob    1(g6), r3
                ld      0xC70(g7), r14
                cmpo    r3, r14
                ble     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CE24:                              # DATA XREF: ROM:0003E330↓o
                ldob    1(g6), r3
                ld      0xC70(g7), r14
                cmpo    r3, r14
                bge     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CE3C:                              # DATA XREF: ROM:0003E334↓o
                ldob    1(g6), r3
                ld      0xC70(g7), r14
                cmpo    r3, r14
                be      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CE54:                              # DATA XREF: ROM:0003E338↓o
                ldob    1(g6), r3
                ld      0xC70(g8), r14
                cmpo    r3, r14
                ble     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CE6C:                              # DATA XREF: ROM:0003E33C↓o
                ldob    1(g6), r3
                ld      0xC70(g8), r14
                cmpo    r3, r14
                bge     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CE84:                              # DATA XREF: ROM:0003E340↓o
                ldob    1(g6), r3
                ld      0xC70(g8), r14
                cmpo    r3, r14
                be      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CE9C:                              # DATA XREF: ROM:0003E344↓o
                ldob    1(g6), r3
                ldob    0x1B1(g8), r14
                cmpo    r3, r14
                be      sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CEB4:                              # DATA XREF: ROM:0003E348↓o
                ldob    1(g6), r3
                ldob    0x1B1(g8), r14
                cmpo    r3, r14
                bne     sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CECC:                              # DATA XREF: ROM:0003E34C↓o
                mov     0x10, r15
                stib    r15, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
loc_3CEDC:                              # DATA XREF: ROM:0003E350↓o
                ldob    1(g6), r3
                ldob    0xCB(g4), r4    # r4 = mod_fa_enemy1_add+0xC9
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)    # g0 to mod_fa_enemy1_add+0xC9
                cmpobge r3, r4, loc_3CF20
                ldob    2(g6), r3
                ldob    3(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    5(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CF20:                              # CODE XREF: ROM:0003CEEC↑j
                addo    6, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CF28:                              # DATA XREF: ROM:0003E354↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldob    (g4)[r5], r3
                ldob    0xCB(g4), r4
                cmpoble r3, r4, loc_3CF74
                ldob    3(g6), r3
                ldob    4(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    5(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    6(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CF74:                              # CODE XREF: ROM:0003CF40↑j
                addo    7, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CF7C:                              # DATA XREF: ROM:0003E358↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldob    (g4)[r5], r3
                ldob    0xCB(g4), r4
                cmpobge r3, r4, loc_3CFC8
                ldob    3(g6), r3
                ldob    4(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    5(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    6(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CFC8:                              # CODE XREF: ROM:0003CF94↑j
                addo    7, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3CFD0:                              # DATA XREF: ROM:0003E35C↓o
                ldob    1(g6), r3
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                ld      0x5F4(g7), r4
                cmpr    r3, r4
                ble     sec_cc_fault
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D00C:                              # DATA XREF: ROM:0003E360↓o
                ldob    1(g6), r3
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                ld      0x5F4(g7), r4
                cmpr    r3, r4
                bge     sec_cc_fault
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D048:                              # DATA XREF: ROM:0003E364↓o
                ld      0x1A4(g7), r15
                bbs     0, r15, loc_3D0F0
                ldos    0x9C(g4), r5
                and     3, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3D0D8
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     4, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93D38(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3D0D8:                              # CODE XREF: ROM:0003D05C↑j
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
loc_3D0F0:                              # CODE XREF: ROM:0003D04C↑j
                ret
# ---------------------------------------------------------------------------
loc_3D0F4:                              # DATA XREF: ROM:0003E368↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldob    (g4)[r5], r4
                ldob    3(g6), r3
                cmpo    r3, r4
                ble     sec_cc_fault
                addo    4, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D11C:                              # DATA XREF: ROM:0003E36C↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldob    (g4)[r5], r4
                ldob    3(g6), r3
                cmpo    r3, r4
                bge     sec_cc_fault
                addo    4, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D144:                              # DATA XREF: ROM:0003E370↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldob    (g4)[r5], r4
                ldob    3(g6), r3
                cmpo    r3, r4
                be      sec_cc_fault
                addo    4, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D16C:                              # DATA XREF: ROM:0003E374↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldob    (g4)[r5], r4
                ldob    3(g6), r3
                cmpo    r3, r4
                bne     sec_cc_fault
                addo    4, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D194:                              # DATA XREF: ROM:0003E378↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldos    (g4)[r5*1], r4
                ldob    3(g6), r3
                ldob    4(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                cmpo    r3, r4
                ble     sec_cc_fault
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D1C8:                              # DATA XREF: ROM:0003E37C↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldos    (g4)[r5*1], r4
                ldob    3(g6), r3
                ldob    4(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                cmpobge r3, r4, sec_cc_fault
                addo    4, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D1F8:                              # DATA XREF: ROM:0003E380↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldos    (g4)[r5*1], r4
                ldob    3(g6), r3
                ldob    4(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                cmpobe  r3, r4, sec_cc_fault
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D228:                              # DATA XREF: ROM:0003E384↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldos    (g4)[r5*1], r4
                ldob    3(g6), r3
                ldob    4(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                cmpobne r3, r4, sec_cc_fault
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D258:                              # DATA XREF: ROM:0003E388↓o
                mov     0, r15
                stib    r15, 0xBA(g4)
                mov     0, r15
                stib    r15, 0xBB(g4)
                mov     0, r15
                stib    r15, 0xBC(g4)
                mov     0, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                ld      0x40(g4), r15
                setbit  0, r15, r15
                st      r15, 0x40(g4)
                ldos    0x9C(g4), r3
                bbc     1, r3, loc_3D2CC
                mov     4, r15
                stib    r15, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
loc_3D2CC:                              # CODE XREF: ROM:0003D2B8↑j
                mov     0, r15
                stib    r15, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
loc_3D2DC:                              # DATA XREF: ROM:0003E38C↓o
                mov     0, r15
                stib    r15, 0xCF(g4)
                mov     0, r15
                stib    r15, 0xBA(g4)
                mov     0, r15
                stib    r15, 0xBB(g4)
                mov     0, r15
                stib    r15, 0xBC(g4)
                mov     0, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                ld      0x40(g4), r15
                setbit  0, r15, r15
                st      r15, 0x40(g4)
                ldos    0x9C(g4), r5
                and     7, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3D3C8
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     8, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93EFD(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3D3C8:                              # CODE XREF: ROM:0003D34C↑j
                ret
# ---------------------------------------------------------------------------
loc_3D3CC:                              # DATA XREF: ROM:0003E390↓o
                ldob    1(g6), r3
                ld      0x6C(g4), r15
                bbc     r3, r15, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D3E0:                              # DATA XREF: ROM:0003E394↓o
                ldob    1(g6), r3
                ld      0x6C(g4), r15
                bbs     r3, r15, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D3F4:                              # DATA XREF: ROM:0003E398↓o
                ldob    1(g6), r3
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D424:                              # DATA XREF: ROM:0003E39C↓o
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
                ret
# ---------------------------------------------------------------------------
loc_3D440:                              # DATA XREF: ROM:0003E3A0↓o
                ldos    0x9C(g4), r5
                and     3, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3D4C8
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     4, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93A28(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3D4C8:                              # CODE XREF: ROM:0003D44C↑j
                ret
# ---------------------------------------------------------------------------
loc_3D4CC:                              # DATA XREF: ROM:0003E3A4↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldos    0x9C(g4), r3
                and     r3, r5, r3
                cmpobe  0, r3, loc_3D518
                ldob    3(g6), r3
                ldob    4(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    5(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    6(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                mov     r3, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D518:                              # CODE XREF: ROM:0003D4E4↑j
                addo    7, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D520:                              # DATA XREF: ROM:0003E3A8↓o
                ldib    0xDD(g4), r15
                stib    r15, 0x1200(g7)
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D534:                              # DATA XREF: ROM:0003E3AC↓o
                ld      0x1A4(g7), r15
                bbs     0, r15, loc_3D5C4
                ldos    0x9C(g4), r5
                and     3, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3D5C4
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     4, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93E40(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3D5C4:                              # CODE XREF: ROM:0003D538↑j
                ret
# ---------------------------------------------------------------------------
loc_3D5C8:                              # DATA XREF: ROM:0003E3B0↓o
                mov     0, r15
                stib    r15, 0xBA(g4)
                mov     0, r15
                stib    r15, 0xBB(g4)
                mov     0, r15
                stib    r15, 0xBC(g4)
                mov     0, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                ld      0x40(g4), r15
                setbit  0, r15, r15
                st      r15, 0x40(g4)
                mov     0, r15
                stib    r15, 0xCF(g4)
                ret
# ---------------------------------------------------------------------------
loc_3D630:                              # DATA XREF: ROM:0003E3B4↓o
                ldob    1(g6), r3
                ld      0x5B8(g8), r15
                bbc     r3, r15, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D644:                              # DATA XREF: ROM:0003E3B8↓o
                ldob    1(g6), r3
                ld      0x5B8(g8), r15
                bbs     r3, r15, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_reset_next:                          # DATA XREF: ROM:0003E3BC↓o
                mov     0, r15          # Label inferred from 0x9451E
                stib    r15, 0xBA(g4)
                mov     0, r15
                stib    r15, 0xBB(g4)
                mov     0, r15
                stib    r15, 0xBC(g4)
                mov     0, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                ld      0x40(g4), r15
                setbit  0, r15, r15
                st      r15, 0x40(g4)
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_set_waza:                            # DATA XREF: ROM:0003E3C0↓o
                call    rand            # Label from official source
                stob    g0, 0xCB(g4)
                ldob    0xCF(g4), r14
                addi    1, r14, r15
                stob    r15, 0xCF(g4)
                ldob    0xC9(g4), r3
                lda     word_3EF90[r3*8], r5
                ldos    (r5), r3
                ldos    2(r5), r4
                ldob    stage_num, r14
                cmpible 2, r14, loc_3D70C
                ldos    6(r5), r4
loc_3D70C:                              # CODE XREF: ROM:0003D704↑j
                subo    r3, r4, r4
                ldob    0xCB(g4), r5
                remo    r4, r5, r5
                addo    r3, r5, r5
                ld      0x40(g4), r15
                bbs     0xA, r15, loc_3D804
                ld      0x1A4(g8), r15
                bbc     2, r15, loc_3D78C
                ld      0x804(g8), r15
                bbc     8, r15, loc_3D78C
                ldob    stage_num, r14
                cmpibge 1, r14, loc_3D78C
                mov     0x14, r11
                ldob    0xC9(g4), r3
                ld      debug_cpu_movesets[r3*4], r4
                addo    0x1F, 0xD, r6
                mulo    r6, r5, r10
loc_3D758:                              # CODE XREF: ROM:0003D784↓j
                lda     (r4)[r10], r7
                ldob    7(r7), r14
                cmpibge 0xB, r14, loc_3D788
                addo    1, r5, r5
                lda     word_3EF90[r3*8], r12
                ldos    2(r12), r13
                cmpobge r13, r5, loc_3D77C
                ldos    (r12), r5
loc_3D77C:                              # CODE XREF: ROM:0003D774↑j
                mulo    r6, r5, r10
                cmpdeco 1, r11, r11
                bl      loc_3D758
loc_3D788:                              # CODE XREF: ROM:0003D760↑j
                ldob    7(r7), r8
loc_3D78C:                              # CODE XREF: ROM:0003D728↑j
                ld      0x40(g4), r3
                bbc     0, r3, loc_3D7E8
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                stob    r5, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
loc_3D7E8:                              # CODE XREF: ROM:0003D790↑j
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
                ret
# ---------------------------------------------------------------------------
loc_3D804:                              # CODE XREF: ROM:0003D720↑j
                ldos    0x9C(g4), r5
                ldob    0xCB(g4), r12
                addo    r12, r5, r5
                and     0xF, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3D894
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     0x10, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93E40(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3D894:                              # CODE XREF: ROM:0003D818↑j
                mov     0, r15
                st      r15, 0x6C(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                mov     0, r15
                stis    r15, 0x118(g4)
                ret
# ---------------------------------------------------------------------------
cc_set_level:                           # DATA XREF: ROM:0003E3C4↓o
                ldib    1(g6), r15      # Label from official source
                stib    r15, 0x1200(g7)
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D8C4:                              # DATA XREF: ROM:0003E3C8↓o
                mov     0, r15
                stib    r15, 0xBA(g4)
                mov     0, r15
                stib    r15, 0xBB(g4)
                mov     0, r15
                stib    r15, 0xBC(g4)
                mov     0, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                ld      0x40(g4), r15
                setbit  0, r15, r15
                st      r15, 0x40(g4)
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D928:                              # DATA XREF: ROM:0003E3CC↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldob    3(g6), r3
                stob    r3, (g4)[r5]
                addo    4, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D948:                              # DATA XREF: ROM:0003E3D0↓o
                ldob    1(g6), r5
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldob    3(g6), r3
                ldob    4(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                stos    r3, (g4)[r5*1]
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D974:                              # DATA XREF: ROM:0003E3D4↓o
                ldob    1(g6), r4
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                ldob    3(g6), r5
                ldob    4(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldib    (g4)[r4], r15
                stib    r15, (g4)[r5]
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D9A4:                              # DATA XREF: ROM:0003E3D8↓o
                ldob    1(g6), r4
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r4, r4
                ldob    3(g6), r5
                ldob    4(g6), r15
                shlo    8, r15, r15
                addo    r15, r5, r5
                ldis    (g4)[r4*1], r15
# ---------------------------------------------------------------------------
                .long 0xCA7D1C05        # stis    r15, (g4)[r5*1]
# ---------------------------------------------------------------------------
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D9D4:                              # DATA XREF: ROM:0003E3DC↓o
                ldob    1(g6), r3
                ld      0x6D4(g7), r15
                bbc     r3, r15, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D9E8:                              # DATA XREF: ROM:0003E3E0↓o
                ldob    1(g6), r3
                ld      0x6D4(g7), r15
                bbs     r3, r15, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3D9FC:                              # DATA XREF: ROM:0003E3E4↓o
                ldob    1(g6), r3
                ld      0x6D4(g8), r15
                bbc     r3, r15, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DA10:                              # DATA XREF: ROM:0003E3E8↓o
                ldob    1(g6), r3
                ld      0x6D4(g8), r15
                bbs     r3, r15, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DA24:                              # DATA XREF: ROM:0003E3EC↓o
                ldib    0xDC(g4), r15
                stib    r15, 0x1200(g7)
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_air_cc:                              # DATA XREF: ROM:0003E3F0↓o
                lda     0x3FCCCCCD, g0  # Label from official source
                lda     0x3F99999A, g1
                lda     0x3FD9999A, g2
                lda     0x3E4CCCCD, g3
                call    sub_3E7B8
                cmpobe  0, g0, loc_3DB40
                subi    2, g0, g0
                addo    2, g0, g1
                ldob    0xC9(g4), r3
                lda     word_3EF90[r3*8], r5
                ldos    (r5), r3
                ldos    4(r5), r4
                subo    r3, r4, r4
                ldob    0xCB(g4), r5
                remo    r4, r5, r5
                addo    r3, r5, r5
                mov     0x14, r11
                ldob    0xC9(g4), r3
                ld      debug_cpu_movesets[r3*4], r4
                addo    0x1F, 0xD, r6
                mulo    r6, r5, r10
loc_3DAA4:                              # CODE XREF: ROM:0003DADC↓j
                lda     (r4)[r10], r7
                ldob    7(r7), r14
                cmpibge g0, r14, loc_3DABC
                ldob    7(r7), r14
                cmpible g1, r14, loc_3DABC
                b       loc_3DAE0
# ---------------------------------------------------------------------------
loc_3DABC:                              # CODE XREF: ROM:0003DAAC↑j
                addo    1, r5, r5
                lda     word_3EF90[r3*8], r12
                ldos    4(r12), r13
                cmpobge r13, r5, loc_3DAD4
                ldos    (r12), r5
loc_3DAD4:                              # CODE XREF: ROM:0003DACC↑j
                mulo    r6, r5, r10
                cmpdeco 1, r11, r11
                bl      loc_3DAA4
loc_3DAE0:                              # CODE XREF: ROM:0003DAB8↑j
                ld      0x40(g4), r3
                bbc     0, r3, loc_3DB3C
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                stob    r5, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
loc_3DB3C:                              # CODE XREF: ROM:0003DAE4↑j
                ret
# ---------------------------------------------------------------------------
loc_3DB40:                              # CODE XREF: ROM:0003DA5C↑j
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
cc_le_tedc:                             # DATA XREF: ROM:0003E3F4↓o
                ldob    1(g6), g0       # Label from official source
                call    sub_3E6C0
                ldob    2(g6), r3
                ldob    3(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    5(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                cmpr    r3, g0
                ble     sec_cc_fault
                addo    6, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DB88:                              # DATA XREF: ROM:0003E3F8↓o
                ldob    1(g6), g0
                call    sub_3E6C0
                ldob    2(g6), r3
                ldob    3(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    5(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                cmpr    r3, g0
                bge     sec_cc_fault
                addo    6, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DBC8:                              # DATA XREF: ROM:0003E3FC↓o
                ldob    1(g6), r3
                ldos    0x5BC(g7), r14
                cmpoble r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DBDC:                              # DATA XREF: ROM:0003E400↓o
                ldob    1(g6), r3
                ldos    0x5BC(g7), r14
                cmpobge r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DBF0:                              # DATA XREF: ROM:0003E404↓o
                ldob    1(g6), r3
                ldos    0x5BC(g8), r14
                cmpoble r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DC04:                              # DATA XREF: ROM:0003E408↓o
                ldob    1(g6), r3
                ldos    0x5BC(g8), r14
                cmpobge r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DC18:                              # DATA XREF: ROM:0003E40C↓o
                ldos    0x9C(g4), r5
                and     1, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3DCA0
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     4, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93C8E(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3DCA0:                              # CODE XREF: ROM:0003DC24↑j
                ret
# ---------------------------------------------------------------------------
loc_3DCA4:                              # DATA XREF: ROM:0003E410↓o
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DCB4:                              # DATA XREF: ROM:0003E414↓o
                shlo    6, 1, r3
                shlo    7, 1, r4
                ld      0x0(g7), r15
                bbc     1, r15, loc_3DCD0
                mov     r3, r15
                mov     r4, r3
                mov     r15, r4
loc_3DCD0:                              # CODE XREF: ROM:0003DCC0↑j
                stob    r3, 0x1200(g7)
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DCE0:                              # DATA XREF: ROM:0003E418↓o
                ldis    1(g6), r3
                ldos    0x1AA(g8), r4
                ldos    0x808(g8), r5
                subi    r4, r5, r4
                cmpible r3, r4, sec_cc_fault
                addo    3, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DCFC:                              # DATA XREF: ROM:0003E41C↓o
                ldis    1(g6), r3
                ldos    0x1AA(g8), r4
                ldos    0x808(g8), r5
                subi    r4, r5, r4
                cmpibge r3, r4, sec_cc_fault
                addo    3, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DD18:                              # DATA XREF: ROM:0003E420↓o
                ldob    1(g6), r3
                ld      0x804(g8), r15
                bbc     r3, r15, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DD2C:                              # DATA XREF: ROM:0003E424↓o
                ldob    1(g6), r3
                ld      0x804(g8), r15
                bbs     r3, r15, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DD40:                              # DATA XREF: ROM:0003E428↓o
                mov     1, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3DDC4
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     1, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    byte_93BC6(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3DDC4:                              # CODE XREF: ROM:0003DD48↑j
                ret
# ---------------------------------------------------------------------------
loc_3DDC8:                              # DATA XREF: ROM:0003E42C↓o
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                ld      0x1FC(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x1FC(g8), r15
                st      r15, (g11)[g12*1]
                ld      0x1F4(g8), r15
                st      r15, (g11)[g12*1]
                ld      0x1F4(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                ldob    1(g6), r3
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                addo    r3, r3, r5
                ldis    0x26(g7), r13
                subi    r13, r11, r4
                addo    r3, r4, r4
                lda     0xFFFF, r13
                and     r13, r4, r4
                cmpobl  r5, r4, sec_cc_fault
                addo    3, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DE30:                              # DATA XREF: ROM:0003E430↓o
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                ld      0x1FC(g7), r15
                st      r15, (g11)[g12*1]
                ld      0x1FC(g8), r15
                st      r15, (g11)[g12*1]
                ld      0x1F4(g8), r15
                st      r15, (g11)[g12*1]
                ld      0x1F4(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                ldob    1(g6), r3
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                addo    r3, r3, r5
                ldis    0x26(g7), r13
                subi    r13, r11, r4
                addo    r3, r4, r4
                lda     0xFFFF, r13
                and     r13, r4, r4
                cmpobg  r5, r4, sec_cc_fault
                addo    3, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DE98:                              # DATA XREF: ROM:0003E434↓o
                ldob    1(g6), r3
                ldob    0x6F4(g7), r14
                cmpoble r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DEAC:                              # DATA XREF: ROM:0003E438↓o
                ldob    1(g6), r3
                ldob    0x6F4(g7), r14
                cmpobge r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DEC0:                              # DATA XREF: ROM:0003E43C↓o
                ldob    1(g6), r3
                ldob    0x6F4(g7), r14
                cmpobe  r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DED4:                              # DATA XREF: ROM:0003E440↓o
                shlo    6, 1, r3
                shlo    7, 1, r4
                ld      0x0(g7), r15
                bbs     1, r15, loc_3DEF0
                mov     r3, r15
                mov     r4, r3
                mov     r15, r4
loc_3DEF0:                              # CODE XREF: ROM:0003DEE0↑j
                stob    r3, 0x1200(g7)
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DF00:                              # DATA XREF: ROM:0003E444↓o
                ldos    0x9C(g4), r3
                bbc     0, r3, loc_3DF28
                bbc     3, r3, loc_3DF38
                bbc     4, r3, loc_3DF4C
                bbc     5, r3, loc_3DF60
                mov     7, g5
                call    dir_adjust
                stob    g5, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
loc_3DF28:                              # CODE XREF: ROM:0003DF04↑j
                mov     0, r15
                stib    r15, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
loc_3DF38:                              # CODE XREF: ROM:0003DF08↑j
                lda     0xA7, g5
                call    dir_adjust
                stob    g5, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
loc_3DF4C:                              # CODE XREF: ROM:0003DF0C↑j
                addo    0x1F, 8, g5
                call    dir_adjust
                stob    g5, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
loc_3DF60:                              # CODE XREF: ROM:0003DF10↑j
                lda     0x47, g5
                call    dir_adjust
                stob    g5, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
loc_3DF74:                              # DATA XREF: ROM:0003E448↓o
                ldib    1(g6), r3
                ldib    0x5F(g4), r14
                cmpible r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DF88:                              # DATA XREF: ROM:0003E44C↓o
                ldib    1(g6), r3
                ldib    0x5F(g4), r14
                cmpibge r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DF9C:                              # DATA XREF: ROM:0003E450↓o
                ldib    1(g6), r3
                ldis    0x808(g8), r13
                ldis    0x80A(g8), r14
                subi    r13, r14, r4
                cmpible r3, r4, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DFB8:                              # DATA XREF: ROM:0003E454↓o
                ldib    1(g6), r3
                ldis    0x808(g8), r13
                ldis    0x80A(g8), r14
                subi    r13, r14, r4
                cmpibge r3, r4, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3DFD4:                              # DATA XREF: ROM:0003E458↓o
                ld      0x0(g7), r15
                bbc     1, r15, loc_3E00C
                ldob    0x1200(g7), r3
                bbs     6, r3, loc_3DFF0
                bbs     7, r3, loc_3DFFC
                b       loc_3E00C
# ---------------------------------------------------------------------------
loc_3DFF0:                              # CODE XREF: ROM:0003DFE4↑j
                clrbit  6, r3, r3
                setbit  7, r3, r3
                b       loc_3E004
# ---------------------------------------------------------------------------
loc_3DFFC:                              # CODE XREF: ROM:0003DFE8↑j
                clrbit  7, r3, r3
                setbit  6, r3, r3
loc_3E004:                              # CODE XREF: ROM:0003DFF8↑j
                stob    r3, 0x1200(g7)
loc_3E00C:                              # CODE XREF: ROM:0003DFD8↑j
                addo    1, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3E014:                              # DATA XREF: ROM:0003E45C↓o
                ldob    1(g6), r3
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                ld      0x1F8(g7), r4
                cmpr    r3, r4
                ble     sec_cc_fault
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3E050:                              # DATA XREF: ROM:0003E460↓o
                ldob    1(g6), r3
                ldob    2(g6), r15
                shlo    8, r15, r15
                addo    r15, r3, r3
                ldob    3(g6), r15
                shlo    0x10, r15, r15
                addo    r15, r3, r3
                ldob    4(g6), r15
                shlo    0x18, r15, r15
                addo    r15, r3, r3
                ld      0x1F8(g7), r4
                cmpr    r3, r4
                ble     sec_cc_fault
                addo    5, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3E08C:                              # DATA XREF: ROM:0003E464↓o
                ldob    1(g6), r3
                ldob    0x1B1(g7), r14
                cmpobe  r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3E0A0:                              # DATA XREF: ROM:0003E468↓o
                ldob    1(g6), r3
                ldob    0x1B1(g7), r14
                cmpobne r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3E0B4:                              # DATA XREF: ROM:0003E46C↓o
                mov     0, r9
                ld      frame_counter, r15
                bbc     0, r15, loc_3E108
                ldos    0x9C(g4), r8
                lda     0xFF, r13
                and     r13, r8, r8
                ldob    0x1B1(g7), r6
                ld      off_3E8FC[r6*4], r6
                ldob    (r6)[r8], r9
                ld      0x0(g7), r15
                bbc     1, r15, loc_3E108
                bbs     6, r9, loc_3E0F4
                bbs     7, r9, loc_3E100
                b       loc_3E108
# ---------------------------------------------------------------------------
loc_3E0F4:                              # CODE XREF: ROM:0003E0E8↑j
                clrbit  6, r9, r9
                setbit  7, r9, r9
                b       loc_3E108
# ---------------------------------------------------------------------------
loc_3E100:                              # CODE XREF: ROM:0003E0EC↑j
                clrbit  7, r9, r9
                setbit  6, r9, r9
loc_3E108:                              # CODE XREF: ROM:0003E0C0↑j
                stob    r9, 0x1200(g7)
                ret
# ---------------------------------------------------------------------------
loc_3E114:                              # DATA XREF: ROM:0003E470↓o
                ldob    1(g6), r3
                ldob    0x821(g8), r14
                cmpobe  r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
loc_3E128:                              # DATA XREF: ROM:0003E474↓o
                call    rand            # Random value stored to g0
                mov     g0, r5
                and     7, r5, r5
                ld      0x40(g4), r3
                bbc     0, r3, loc_3E1B4
                clrbit  0, r3, r3
                st      r3, 0x40(g4)
                ldob    0xC9(g4), r3
                and     0xF, r3, r3
                mov     8, r4
                mulo    r4, r3, r3
                addo    r5, r3, r3
                ldob    0x93DB0(r3), r3
                stob    r3, 0xBA(g4)
                lda     0x7F, r15
                stib    r15, 0xBB(g4)
                lda     0x7F, r15
                stib    r15, 0xBC(g4)
                lda     0x7F, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                call    rand            # Random value stored to g0
                stob    g0, 0xCB(g4)
loc_3E1B4:                              # CODE XREF: ROM:0003E138↑j
                ret
# ---------------------------------------------------------------------------
loc_3E1B8:                              # DATA XREF: ROM:0003E478↓o
                ldob    1(g6), r3
                ldob    0x821(g8), r14
                cmpobne r3, r14, sec_cc_fault
                addo    2, g6, g6
                b       sec_cc_next
# ---------------------------------------------------------------------------
sec_cc_fault:                           # CODE XREF: ROM:0003C2D8↑j
                ld      0x114(g4), r3   # Label from official source
                cmpo    0, r3
                be      cc_end          # return
                mov     r3, g6
                mov     0, r15
                st      r15, 0x114(g4)
                b       sec_cc_next
# ---------------------------------------------------------------------------
over_enemy_command:                     # CODE XREF: ROM:0003C298↑j
                addo    4, sp, sp       # Label from official source
                st      g0, -4(sp)
                lda     0x1000A28, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aErrorOverEnemy:.asciz "ERROR !! OVER ENEMY_COMMAND"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
over_enemy_comm_error_hang:             # CODE XREF: ROM:over_enemy_comm_error_hang↓j
                b       over_enemy_comm_error_hang
# ---------------------------------------------------------------------------
enemy_command_list:.long cc_en_flag     # DATA XREF: ROM:0003C2C0↑r
                .long cc_en_flag0
                .long cc_flag
                .long cc_flag0
                .long cc_mot_kind
                .long cc_mot_kind0
                .long cc_en_mot_kind
                .long cc_en_mot_kind0
                .long cc_en_nage_flag
                .long cc_en_nage_flag0
                .long cc_sankaku_flag
                .long cc_sankaku_flag0
                .long cc_mot2_kind
                .long cc_mot2_kind0
                .long cc_my_status
                .long cc_my_status0
                .long cc_end            # return
                .long cc_push
                .long cc_bu_guard
                .long cc_en_status
                .long cc_en_status0
                .long cc_le_stagenum
                .long cc_ge_stagenum
                .long cc_eq_stagenum
                .long cc_le_roundnum
                .long cc_ge_roundnum
                .long cc_eq_roundnum
                .long cc_gacha
                .long cc_run
                .long cc_k_jump
                .long loc_3C678
                .long loc_3C704
                .long loc_3C7A4
                .long loc_3C844
                .long loc_3C8E4
                .long loc_3C970
                .long loc_3C9E8
                .long loc_3CA30
                .long loc_3CA48
                .long loc_3CA60
                .long loc_3CA78
                .long loc_3CA90
                .long loc_3CAA8
                .long loc_3CAC0
                .long loc_3CAE8
                .long loc_3CB10
                .long loc_3CB38
                .long loc_3CB58
                .long loc_3CB78
                .long loc_3CB98
                .long loc_3CBB0
                .long loc_3CBC8
                .long loc_3CBEC
                .long loc_3CC34
                .long loc_3CC4C
                .long loc_3CC64
                .long loc_3CD00
                .long loc_3CD18
                .long loc_3CD30
                .long loc_3CD48
                .long loc_3CD60
                .long loc_3CD64
                .long loc_3CD68
                .long loc_3CE0C
                .long loc_3CE24
                .long loc_3CE3C
                .long loc_3CE54
                .long loc_3CE6C
                .long loc_3CE84
                .long loc_3CE9C
                .long loc_3CEB4
                .long loc_3CECC
                .long loc_3CEDC
                .long loc_3CF28
                .long loc_3CF7C
                .long loc_3CFD0
                .long loc_3D00C
                .long loc_3D048
                .long loc_3D0F4
                .long loc_3D11C
                .long loc_3D144
                .long loc_3D16C
                .long loc_3D194
                .long loc_3D1C8
                .long loc_3D1F8
                .long loc_3D228
                .long loc_3D258
                .long loc_3D2DC
                .long loc_3D3CC
                .long loc_3D3E0
                .long loc_3D3F4
                .long loc_3D424
                .long loc_3D440
                .long loc_3D4CC
                .long loc_3D520
                .long loc_3D534
                .long loc_3D5C8
                .long loc_3D630
                .long loc_3D644
                .long cc_reset_next
                .long cc_set_waza
                .long cc_set_level
                .long loc_3D8C4
                .long loc_3D928
                .long loc_3D948
                .long loc_3D974
                .long loc_3D9A4
                .long loc_3D9D4
                .long loc_3D9E8
                .long loc_3D9FC
                .long loc_3DA10
                .long loc_3DA24
                .long cc_air_cc
                .long cc_le_tedc
                .long loc_3DB88
                .long loc_3DBC8
                .long loc_3DBDC
                .long loc_3DBF0
                .long loc_3DC04
                .long loc_3DC18
                .long loc_3DCA4
                .long loc_3DCB4
                .long loc_3DCE0
                .long loc_3DCFC
                .long loc_3DD18
                .long loc_3DD2C
                .long loc_3DD40
                .long loc_3DDC8
                .long loc_3DE30
                .long loc_3DE98
                .long loc_3DEAC
                .long loc_3DEC0
                .long loc_3DED4
                .long loc_3DF00
                .long loc_3DF74
                .long loc_3DF88
                .long loc_3DF9C
                .long loc_3DFB8
                .long loc_3DFD4
                .long loc_3E014
                .long loc_3E050
                .long loc_3E08C
                .long loc_3E0A0
                .long loc_3E0B4
                .long loc_3E114
                .long loc_3E128
                .long loc_3E1B8
ptr_enemy_command_execution:.long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
                .long enemy_command_execution
# =============== S U B R O U T I N E =======================================
stick_ctrl:                             # CODE XREF: enemy_control+CC↑p
                ld      0x40(g4), r15   # Label from official source
                bbs     0, r15, stc_exi
                shlo    3, 0x19, r13
                ldos    0xB6(g4), r14
                cmpobg  r13, r14, loc_3E504
loc_3E504:                              # CODE XREF: stick_ctrl+10↑j
                ldos    0xAC(g4), r13
                ldos    0xB6(g4), r14
                cmpoble r13, r14, stick_ctrl_exe
                ldos    0xB6(g4), r14
                addi    1, r14, r15
                stos    r15, 0xB6(g4)
                ret
# ---------------------------------------------------------------------------
stick_ctrl_exe:                         # CODE XREF: stick_ctrl+1C↑j
                ldos    0xB6(g4), r14   # Label from official source
                addi    1, r14, r15
                stos    r15, 0xB6(g4)
                ldob    0xC6(g4), r14
                cmpobe  0, r14, stick_ctrl_new_csw
                ldib    0xC7(g4), r15   # mod_fa_enemy0_add+0xC7
                stib    r15, 0x1200(g7)
                ldob    0xC6(g4), r14
                subi    1, r14, r15
                stob    r15, 0xC6(g4)
                ldob    0xC6(g4), r14
                cmpobne 0, r14, loc_3E560
                ldob    0xC5(g4), r14
                addi    1, r14, r15
                stob    r15, 0xC5(g4)
loc_3E560:                              # CODE XREF: stick_ctrl+60↑j
                ret
# ---------------------------------------------------------------------------
stick_ctrl_new_csw:                     # CODE XREF: stick_ctrl+40↑j
                ldob    0xC9(g4), r3    # Label from official source
                ld      debug_cpu_movesets[r3*4], r4 # Sets proper character moveset
                ldob    0xBA(g4), r3
                addo    0x1F, 0xD, r5
                mulo    r5, r3, r3
                lda     (r4)[r3], r5
                mov     r5, g0          # sets move ascii to g0, then returns
                call    sub_3E8F8       # return
stick_control_normal:                   # Label from official source
                lda     0xC(r5), r6
                lda     0x1C(r5), r7
                ldob    0xC5(g4), r8
                cmpibl  0x10, r8, stick_control_next_combo_chk
                ldob    (r6)[r8], g5
                lda     0x7F, r5
                cmpobe  r5, g5, stick_control_next_combo_chk
                call    dir_adjust
                stob    g5, 0x1200(g7)
                stob    g5, 0xC7(g4)
                ldob    (r7)[r8], r3
                stob    r3, 0xC6(g4)
                cmpobne 0, r3, loc_3E5CC
                ldob    0xC5(g4), r14
                addi    1, r14, r15
                stob    r15, 0xC5(g4)
loc_3E5CC:                              # CODE XREF: stick_ctrl+CC↑j
                ret
# ---------------------------------------------------------------------------
stick_control_next_combo_chk:           # CODE XREF: stick_ctrl+A4↑j
                ldob    0xBE(g4), r14   # Label from official source
                cmpobe  3, r14, stc_exi
                lda     0xAE(g4), r7
                ldob    0xBE(g4), r3
                addo    r3, r3, r3
                addo    r3, r7, r4
                ldos    (r4), r4
                stos    r4, 0xAC(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
loc_3E5F8:                              # CODE XREF: stick_ctrl+114↓j
                lda     0x1000DB2, g9
                lda     0x12C, r13
                cmpobl  r13, r4, loc_3E5F8
                ldob    0xBE(g4), r14
                addi    1, r14, r15
                stob    r15, 0xBE(g4)
                lda     0xBA(g4), r7
                ldob    0xBE(g4), r3
                addo    r3, r7, r7
                lda     0x7F, r4
                ldob    (r7), r5
                cmpobe  r4, r5, stc_exi
                stob    r5, 0xBA(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                ret
# ---------------------------------------------------------------------------
stc_exi:                                # CODE XREF: stick_ctrl+4↑j
                mov     0, r15          # Label from official source
                stib    r15, 0xBA(g4)
                mov     0, r15
                stib    r15, 0xBB(g4)
                mov     0, r15
                stib    r15, 0xBC(g4)
                mov     0, r15
                stib    r15, 0xBD(g4)
                mov     0, r15
                stis    r15, 0xA0(g4)
                mov     0, r15
                stib    r15, 0xC5(g4)
                mov     0, r15
                stib    r15, 0xC6(g4)
                mov     0, r15
                stis    r15, 0xB6(g4)
                mov     0, r15
                stis    r15, 0xAC(g4)
                mov     0, r15
                stib    r15, 0xBE(g4)
                ld      0x40(g4), r15
                setbit  0, r15, r15
                st      r15, 0x40(g4)
                ret
# End of function stick_ctrl
# =============== S U B R O U T I N E =======================================
dir_adjust:                             # CODE XREF: ROM:0003DF18↑p
                ld      0x0(g7), r15    # Label from official source
                bbc     1, r15, loc_3E6BC
                bbs     6, g5, loc_3E6B4
                bbc     7, g5, loc_3E6BC
loc_3E6B4:                              # CODE XREF: dir_adjust+8↑j
                shlo    6, 3, r13
                xor     r13, g5, g5
loc_3E6BC:                              # CODE XREF: dir_adjust+4↑j
                ret
# End of function dir_adjust
# =============== S U B R O U T I N E =======================================
sub_3E6C0:                              # CODE XREF: ROM:0003DB4C↑p
                ldos    0x5BC(g8), r6
                cmpibge g0, r6, loc_3E718
                ld      0x1F4(g7), r6
                ld      0x1FC(g7), r7
                ld      0x1F4(g8), r8
                ld      0x1FC(g8), r9
                ld      0x2C(g8), r3
                ld      0x34(g8), r4
                cvtir   g0, r5
                mulr    r5, r3, r3
                mulr    r5, r4, r4
                addr    r3, r8, r3
                addr    r4, r9, r4
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], g0
                ret
# ---------------------------------------------------------------------------
loc_3E718:                              # CODE XREF: sub_3E6C0+4↑j
                mov     0, g0
                ret
# End of function sub_3E6C0
# ---------------------------------------------------------------------------
                ldos    0x5BC(g8), r6
                cmpibge g0, r6, loc_3E7B0
                ld      0x1C(g8), r7
                ld      0x30(g8), r8
                ld      0x5CC(g8), r9
                mov     g0, r10
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r6
loc_3E74C:                              # CODE XREF: ROM:0003E7A4↓j
                ld      0x1A4(g8), r15
                bbc     0xE, r15, loc_3E768
                ld      flt_1D290, r13
                ld      0x50A000, r14
                mulr    r13, r14, r11
loc_3E768:                              # CODE XREF: ROM:0003E750↑j
                subr    r9, r11, r3
                lda     0x3F800000, r13
                addr    r13, r6, r4
                mulr    r3, r4, r3
                lda     0x3F000000, r13
                mulr    r13, r3, r3
                ld      0x81C(g8), r14
                subr    r7, r14, r4
                divr    r6, r4, r4
                addr    r3, r4, r4
                addr    r4, r7, r7
                mov     r4, r8
                cmpdeco 1, r10, r10
                bl      loc_3E74C
                mov     r7, g0
                ret
# ---------------------------------------------------------------------------
loc_3E7B0:                              # CODE XREF: ROM:0003E724↑j
                mov     0, g0
                ret
# =============== S U B R O U T I N E =======================================
sub_3E7B8:                              # CODE XREF: ROM:0003DA58↑p
                ldos    0x5BC(g8), r14
                cmpibge 8, r14, loc_3E864
                mov     0, r3
                ldt     0x1F4(g8), r4
                ld      0x30(g8), r7
                ldt     0x1F4(g7), r8
                ldos    0x5BC(g8), r11
loc_3E7D4:                              # CODE XREF: sub_3E7B8+A8↓j
                ld      0x1A4(g8), r15
                bbc     0xE, r15, loc_3E7F0
                ld      flt_1D290, r13
                ld      0x50A000, r14
                mulr    r13, r14, r12
loc_3E7F0:                              # CODE XREF: sub_3E7B8+20↑j
                subr    r12, r7, r7
                ld      0x5CC(g8), r13
                addr    r13, r7, r7
                addr    r7, r5, r5
                ld      0x2C(g8), r13
                addr    r13, r4, r4
                ld      0x34(g8), r13
                addr    r13, r6, r6
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r13
                cmpr    g0, r5
                bl      loc_3E858
                cmpr    g1, r5
                bg      loc_3E858
                cmpr    g2, r13
                bl      loc_3E858
                cmpr    g3, r13
                bg      loc_3E858
                mov     r3, g0
                ret
# ---------------------------------------------------------------------------
loc_3E858:                              # CODE XREF: sub_3E7B8+7C↑j
                addo    1, r3, r3
                cmpdeco 1, r11, r11
                bl      loc_3E7D4
loc_3E864:                              # CODE XREF: sub_3E7B8+4↑j
                mov     0, g0
                ret
# End of function sub_3E7B8
# ---------------------------------------------------------------------------
                ldos    0x5BC(g8), g2
                subi    8, g2, g2
                ldos    0x5BC(g8), r14
                cmpibge 8, r14, loc_3E8F0
                mov     8, r3
                ld      0x2C(g8), r4
                ld      0x34(g8), r5
                ld      0x1F4(g7), r6
                ld      0x1FC(g7), r7
                ld      0x1F4(g8), r8
                ld      0x1FC(g8), r9
loc_3E898:                              # CODE XREF: ROM:0003E8EC↓j
                cvtir   r3, r5
                mulr    r5, r4, r10
                mulr    r5, r4, r11
                addr    r10, r8, r10
                addr    r11, r9, r11
                lda     0x15802B2B, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                cmpr    g0, r11
                bl      loc_3E8E4
                cmpr    g1, r11
                bg      loc_3E8E4
                mov     r3, g0
                ret
# ---------------------------------------------------------------------------
loc_3E8E4:                              # CODE XREF: ROM:0003E8D0↑j
                addo    1, r3, r3
                cmpdeco 1, g2, g2
                bl      loc_3E898
loc_3E8F0:                              # CODE XREF: ROM:0003E878↑j
                mov     0, g0
                ret
# =============== S U B R O U T I N E =======================================
# return
sub_3E8F8:                              # CODE XREF: stick_ctrl+94↑p
                ret                     # This routine probably displayed the move
# End of function sub_3E8F8
# ---------------------------------------------------------------------------
off_3E8FC:      .long dword_3E964       # DATA XREF: ROM:0003E0D4↑r
                .long dword_3E964
                .long dword_3E964
                .long dword_3EA64
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3EB64
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
                .long dword_3E964
dword_3E964:    .long 0x5074107         # DATA XREF: ROM:off_3E8FC↑o
                .long 0x7470707
                .long 0x47050707
                .long 0x11078707
                .long 0x7072107
                .long 0x7070506
                .long 0x7010101
                .long 0x7070705
                .long 0x11070307
                .long 0x41470722
                .long 0x47070707
                .long 0x41070707
                .long 0x2078707
                .long 0x87070202
                .long 0x47014040
                .long 0x7210707
                .long 0x7074707
                .long 0x7074707
                .long 0x7078707
                .long 0x41474707
                .long 0x47070507
                .long 0x7870707
                .long 0x7470721
                .long 0x7470707
                .long 0x7070707
                .long 0x3070711
                .long 0x5070711
                .long 0x7070705
                .long 0x7072107
                .long 0x40070720
                .long 0x2020140
                .long 0x7078702
                .long 0x7050707
                .long 0x47072207
                .long 0x87074747
                .long 0x7878787
                .long 0x87478747
                .long 0x41070707, 0x1010103, 0x7070741, 0x7070707, 0x7070747
                .long 0x7212107, 0x7070705, 0x7030747, 0x87070747, 0x87878703
                .long 0x7470307, 0x5070747, 0x7070787, 0x7210703, 0x12071207
                .long 0x1010107, 0x7070741, 0x11071112, 0x7072007, 0x3220707
                .long 0x41070705, 0x40210707, 0x7410140, 0x41010101, 0x7410707
                .long 0x22074107, 0x20220707
dword_3EA64:    .long 0x5034103, 0x3470303, 0x47050303, 0x11038703, 0x3032103
                .long 0x3030506, 0x3010101, 0x3030305, 0x11030303, 0x41470322
                .long 0x47030303, 0x41030303, 0x2078707, 0x87070202, 0x47014040
                .long 0x7210307, 0x7074703, 0x7074707, 0x3038703, 0x41474703
                .long 0x47030503, 0x3870303, 0x3470321, 0x7470303, 0x3070707
                .long 0x7030711, 0x5030311, 0x7030305, 0x3032103, 0x40030320
                .long 0x2020140, 0x7038702, 0x3050303, 0x47032207, 0x87074747
                .long 0x7878787, 0x87478747, 0x41030707, 0x1010103, 0x3030341
                .long 0x7070707, 0x3030347, 0x7212103, 0x7070705, 0x7870747
                .long 0x87030347, 0x87878703, 0x3470303, 0x5030347, 0x3030387
                .long 0x7210387, 0x12071207, 0x1010107, 0x7070741, 0x11071112
                .long 0x3032007, 0x3220303, 0x41030305, 0x40210307, 0x3410140
                .long 0x41010101, 0x7410703, 0x22034103, 0x20220707
dword_3EB64:    .long 0x5074141, 0x7474141, 0x47054141, 0x41074107, 0x7072141
                .long 0x7410506, 0x41010101, 0x7074141, 0x11410707, 0x41474122
                .long 0x47070707, 0x41070741, 0x41078741, 0x41414102, 0x41414141
                .long 0x7210741, 0x41414707, 0x41074707, 0x7074141, 0x41474707
                .long 0x47410507, 0x7870741, 0x41470741, 0x7474107, 0x41410707
                .long 0x41414111, 0x41070711, 0x7070741, 0x7072141, 0x40074120
                .long 0x41410140, 0x7078741, 0x7054107, 0x47072207, 0x87074747
                .long 0x7878787, 0x41474147, 0x41414107, 0x41010107, 0x41410741
                .long 0x41414141, 0x41414147, 0x41412141, 0x41414141, 0x41414147
                .long 0x87414141, 0x41414107, 0x7474141, 0x41414147, 0x41074187
                .long 0x7210787, 0x12071207, 0x1410107, 0x7074141, 0x11071112
                .long 0x7414141, 0x7410741, 0x41074105, 0x41210707, 0x7414141
                .long 0x41414141, 0x41414107, 0x22074107, 0x41414107
word_3EC64:     .short 100              # DATA XREF: enemy_param_mngr+590↑o
                .short 130
                .short 160
                .short 999
                .short 90
                .short 120
                .short 140
                .short 999
                .short 40
                .short 0x46
                .short 0x64
                .short 0x3E7
                .short 0x3C
                .short 0x64
                .short 0x87
                .short 0x3E7
                .short 0x14
                .short 0x32
                .short 0x6E
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0x8C
                .short 0x3E7
                .short 0x1E
                .short 0x3C
                .short 0xA0
                .short 0x3E7
                .short 0x46
                .short 0x78
                .short 0x8C
                .short 0x3E7
                .short 0x1E
                .short 0x46
                .short 0xAA
                .short 0x3E7
                .short 0x64
                .short 0x78
                .short 0x96
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0x32
                .short 0x5A
                .short 0xA0
                .short 0x3E7
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
                .short 0
word_3ED4C:     .short 0x1E0            # DATA XREF: enemy_param_mngr+620↑o
                .short 0x2E0
                .short 0x10E0
                .short 0x2E0
                .short 0x6E0
                .short 0x8E0
                .short 0x10E0
                .short 0x10E0
                .short 0x2E0
                .short 0x1E0
                .short 0x5E0
                .short 0x1E0
                .short 0x5E0
                .short 0x5E0
                .short 0x5E0
                .short 0x5E0
                .short 0x5E0
                .short 0x5E0
                .short 0x5E0
                .short 0x5E0
                .short 0x5E0
                .short 0x5E0
                .short 0x5E0
                .short 0x5E0
                .short 0x2E0
                .short 0x2E0
                .short 0x2E0
                .short 0x2E0
                .short 0x2E0
byte_3ED86:     .byte 0                 # DATA XREF: sub_3B22C+1F8↑r
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
                .byte 0
un_old_player_test:.long aPlayer1_0     # "PLAYER 1"
                .long aPlayer2_0        # "PLAYER 2"
aPlayer1_0:     .asciz "PLAYER 1"    # DATA XREF: ROM:un_old_player_test↑o
                .fill 3, 1, 0
aPlayer2_0:     .asciz "PLAYER 2"    # DATA XREF: ROM:0003EDA8↑o
                .fill 3, 1, 0
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
                .long aTestChara        # "TEST CHARA"
aTestChara:     .asciz "TEST CHARA"  # DATA XREF: ROM:0003EDC4↑o
                .byte 0
                .long aMachi            # "machi    "
                .long aMove             # "move     "
                .long aCompel_0         # "compel   "
                .long aAttack_2         # "attack   "
                .long aNage_4           # "nage     "
                .long aRise             # "rise     "
                .long aGacha            # "gacha    "
                .long aGuard            # "guard    "
                .long aKaeshi           # "kaeshi   "
                .long aBakuchi          # "bakuchi  "
                .long aCounter_0        # "counter  "
                .long aUkemi_0          # "ukemi    "
                .long aToreru           # "toreru   "
                .long aNageSake         # "nage_sake"
                .long aTobiesake        # "tobiesake"
                .long aTobimaybe        # "tobimaybe"
                .long aYos              # "yos      "
                .long aUra              # "ura      "
                .long aDaSake           # "da_sake  "
                .long aEachAng          # "each_ang "
                .long aEnYoke           # "en_yoke  "
                .long aSpSake           # "sp_sake  "
                .long aFlySake          # "fly_sake "
                .long aVmax             # "Vmax     "
aMachi:         .asciz "machi    "   # DATA XREF: ROM:0003EE10↑o
aMove:          .asciz "move     "   # DATA XREF: ROM:0003EE14↑o
aCompel_0:      .asciz "compel   "   # DATA XREF: ROM:0003EE18↑o
aAttack_2:      .asciz "attack   "   # DATA XREF: ROM:0003EE1C↑o
aNage_4:        .asciz "nage     "   # DATA XREF: ROM:0003EE20↑o
aRise:          .asciz "rise     "   # DATA XREF: ROM:0003EE24↑o
aGacha:         .asciz "gacha    "   # DATA XREF: ROM:0003EE28↑o
aGuard:         .asciz "guard    "   # DATA XREF: ROM:0003EE2C↑o
aKaeshi:        .asciz "kaeshi   "   # DATA XREF: ROM:0003EE30↑o
aBakuchi:       .asciz "bakuchi  "   # DATA XREF: ROM:0003EE34↑o
aCounter_0:     .asciz "counter  "   # DATA XREF: ROM:0003EE38↑o
aUkemi_0:       .asciz "ukemi    "   # DATA XREF: ROM:0003EE3C↑o
aToreru:        .asciz "toreru   "   # DATA XREF: ROM:0003EE40↑o
aNageSake:      .asciz "nage_sake"   # DATA XREF: ROM:0003EE44↑o
aTobiesake:     .asciz "tobiesake"   # DATA XREF: ROM:0003EE48↑o
aTobimaybe:     .asciz "tobimaybe"   # DATA XREF: ROM:0003EE4C↑o
aYos:           .asciz "yos      "   # DATA XREF: ROM:0003EE50↑o
aUra:           .asciz "ura      "   # DATA XREF: ROM:0003EE54↑o
aDaSake:        .asciz "da_sake  "   # DATA XREF: ROM:0003EE58↑o
aEachAng:       .asciz "each_ang "   # DATA XREF: ROM:0003EE5C↑o
aEnYoke:        .asciz "en_yoke  "   # DATA XREF: ROM:0003EE60↑o
aSpSake:        .asciz "sp_sake  "   # DATA XREF: ROM:0003EE64↑o
aFlySake:       .asciz "fly_sake "   # DATA XREF: ROM:0003EE68↑o
aVmax:          .asciz "Vmax     "   # DATA XREF: ROM:0003EE6C↑o
match_enemy_rank_data:.long match_enemy_rank_data_easy
                .long match_enemy_rank_data_normal
                .long match_enemy_rank_data_hard
                .long match_enemy_rank_data_hardest
                .short 0xFE80
                .short 0xFF00
                .short 0xFF40
                .short 0xFF80
                .short 0xFFC0
                .short 0xFFC0
                .short 0
                .short 0
                .short 0
                .short 0xC
                .short 0x18
                .short 0x30
                .short 0x40
                .short 0x56
                .short 0x66
                .short 0x80
word_3EF90:     .short 0xC              # DATA XREF: ROM:0003C8F0↑o
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x1E
                .short 0x1E
                .short 0x30
                .short 0xC
                .short 0x22
                .short 0x22
                .short 0x34
                .short 0xC
                .short 0x1C
                .short 0x1C
                .short 0x26
                .short 0xC
                .short 0x24
                .short 0x24
                .short 0x36
                .short 0xC
                .short 0x1C
                .short 0x1C
                .short 0x2A
                .short 0xC
                .short 0x24
                .short 0x24
                .short 0x36
                .short 0xC
                .short 0x23
                .short 0x23
                .short 0x35
                .short 0xC
                .short 0x20
                .short 0x20
                .short 0x2A
                .short 0xC
                .short 0x20
                .short 0x20
                .short 0x2A
                .short 0xC
                .short 0x20
                .short 0x20
                .short 0x2E
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
                .short 0xC
                .short 0x21
                .short 0x21
                .short 0x33
# =============== S U B R O U T I N E =======================================
init_sound:                             # CODE XREF: ROM:00006968↑p
                lda     0x9C0004, r4    # Label from official source
                mov     0, r3
                stos    r3, (r4)
                call    time_eater      # Loop 5000 times
                mov     0, r3
                stos    r3, (r4)
                call    time_eater      # Loop 5000 times
                mov     0, r3
                stos    r3, (r4)
                call    time_eater      # Loop 5000 times
                shlo    6, 1, r3
                stos    r3, (r4)
                call    time_eater      # Loop 5000 times
                lda     0x4E, r3
                stos    r3, (r4)
                call    time_eater      # Loop 5000 times
                addo    0x1F, 0x18, r3
                stos    r3, (r4)
                call    time_eater      # Loop 5000 times
                mov     0, r3
                subo    1, 0, r4
                st      r3, AUDIO_1
                stob    r3, 0x504001
                stob    r3, 0x504002
                stob    r3, 0x504003
                stib    r4, 0x504014
                lda     0xA00001, g0
                call    sound_request_special
                ret
# End of function init_sound
# =============== S U B R O U T I N E =======================================
# Loop 5000 times
time_eater:                             # CODE XREF: init_sound+10↑p
                lda     5000, r3        # Label from official source
time_eater_loop:                        # CODE XREF: time_eater+C↓j
                cmpdeco 1, r3, r3
                bl      time_eater_loop
                ret
# End of function time_eater
# =============== S U B R O U T I N E =======================================
send_sound_code:                        # CODE XREF: Timer:loc_E04↑p
                lda     IRQ_ENABLE_START, r6 # Label from official source
                addo    31, 2, r3       # r3 = 33
                st      r3, (r6)
                st      r3, (r6)
                lda     IRQ_REQUEST_START, r3
                lda     0xFFFFFBFF, r4
loc_3F148:                              # CODE XREF: send_sound_code+2C↓j
                st      r4, (r3)
                ld      (r3), r5
                bbs     0xA, r5, loc_3F148
                ldib    0x504014, r5
                cmpible 0, r5, loc_3F1A8
                ldob    0x504001, r3
                cmpobe  0, r3, loc_3F1DC
                subo    1, r3, r3
                stob    r3, 0x504001
                ldob    0x504002, r3
                ld      AUDIO_2[r3*4], r4
                st      r4, AUDIO_1
                mov     0x1F, r4
                addo    1, r3, r3
                and     r4, r3, r3
                stob    r3, 0x504002
                mov     2, r5
loc_3F1A8:                              # CODE XREF: send_sound_code+38↑j
                lda     AUDIO_1, r3
                ldob    (r3)[r5], r4
                lda     MIDI_START, r3
                st      r4, (r3)
                subi    1, r5, r5
                stib    r5, 0x504014
                lda     0x421, r3
                st      r3, (r6)
                st      r3, (r6)
                b       loc_3F204
# ---------------------------------------------------------------------------
loc_3F1DC:                              # CODE XREF: send_sound_code+44↑j
                mov     0, r3
                subo    1, 0, r4
                stob    r3, 0x504001
                stob    r3, 0x504002
                stob    r3, 0x504003
                stib    r4, 0x504014
loc_3F204:                              # CODE XREF: send_sound_code+B4↑j
                ret
# End of function send_sound_code
# =============== S U B R O U T I N E =======================================
sound_request_u:                        # CODE XREF: ROM:000084A8↑p
                lda     0xA00001, r13   # Label from official source
                cmpobe  r13, g0, sound_request_special
                lda     prcb, r3
                lda     displacement8(r3), r3
                ld      mode_flag, r13
                and     r13, r3, r3
                cmpobe  0, r3, loc_3F248
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3353(r15), r15 # r15 = BACKUP_RAM_TO_RAM+0x3353
                bbs     0, r15, loc_3F2F4
loc_3F248:                              # CODE XREF: sound_request_u+28↑j
                lda     0xFF0000, r13
                and     r13, g0, r3
                lda     0x9E0000, r13
                cmpobne r13, r3, sound_request_special
                shlo    0x11, 1, r3
                subo    r3, g0, g0
# End of function sound_request_u
# =============== S U B R O U T I N E =======================================
sound_request_special:                  # CODE XREF: sub_201C+1A4↑p
                stq     g0, AUDIO_3     # Label from official source
                st      g14, 0x50EFE8
                lda     byte_950FC, g0
                bal     break_point_display
                ldq     AUDIO_3, g0
                ld      0x50EFE8, g14
                lda     IRQ_ENABLE_START, r6
                addo    0x1F, 2, r3
                st      r3, (r6)
                st      r3, (r6)
                addo    0x1F, 1, r3
                ldob    0x504001, r5
                cmpobge r5, r3, loc_3F2E8
                addo    1, r5, r5
                stob    r5, 0x504001
                ldob    0x504003, r3
                st      g0, AUDIO_2[r3*4]
                mov     0x1F, r4
                addo    1, r3, r3
                and     r4, r3, r3
                stob    r3, 0x504003
loc_3F2E8:                              # CODE XREF: sound_request_special+4C↑j
                lda     0x421, r3
                st      r3, (r6)
                st      r3, (r6)
loc_3F2F4:                              # CODE XREF: sound_request_u+3C↑j
                ret
# End of function sound_request_special
# =============== S U B R O U T I N E =======================================
stage_contact_sound:                    # CODE XREF: ROM:0001487C↑p
                ld      stage_contact_sound_list[g0*4], r3 # Label from official source
                ldob    stage_num, r12
                shlo    8, r12, r4
                ldob    level_music_1_or_0(r4), r4
                ldos    0x624(g7), r14
                cmpobe  0, r14, loc_3F320
                mov     0, r4
loc_3F320:                              # CODE XREF: stage_contact_sound+20↑j
                ldob    stage_num, r5
                ld      (r3)[r5*4], r4
                mov     r4, g0
                call    check_same_sound
                call    sound_request_u
                ret
# End of function stage_contact_sound
# =============== S U B R O U T I N E =======================================
check_same_sound:                       # CODE XREF: ROM:00008730↑p
                ldob    0x50406A, r3 # Label from official source
                cmpoble 4, r3, loc_3F388
                mov     g0, r4
                addi    1, r3, r3
loc_3F350:                              # CODE XREF: check_same_sound+24↓j
                ld      sd_flag[r3*4], r5
                cmpobe  r4, r5, loc_3F388
                cmpdeco 1, r3, r3
                bl      loc_3F350
                ldob    0x50406A, r3
                st      r4, 0x504078[r3*4]
                ldib    0x50406A, r15
                lda     1(r15), r15
                stib    r15, 0x50406A
loc_3F388:                              # CODE XREF: check_same_sound+8↑j
                ret
# End of function check_same_sound
# =============== S U B R O U T I N E =======================================
sound_queue_init:                       # DATA XREF: ROM:0000B83C↑o
                lda     sound_queue_output, r15 # Label from official source
                st      r15, 0xC(g13)
                lda     0x40(g13), r15
                st      r15, 0x78(g13)
                lda     0x40(g13), r15
                st      r15, 0x7C(g13)
                mov     0, r4
                mov     r4, r5
                movl    r4, r6
                stq     r4, 0x40(g13)
                stq     r4, 0x50(g13)
                stq     r4, 0x60(g13)
                stl     r4, 0x68(g13)
                stl     r4, sd_wait_timer
                ret
# End of function sound_queue_init
# =============== S U B R O U T I N E =======================================
sound_queue_input:                      # CODE XREF: ROUND_DSP+630↑p
                ld      mod_fa_sound, r3 # Label from official source
                ld      0x78(r3), r4
                lda     0x40(r3), r5
                lda     0x74(r3), r6
                ld      0x78(r3), r14
                cmpobe  r6, r14, loc_3F3FC
                ld      0x78(r3), r14
                addi    4, r14, r15
                st      r15, 0x78(r3)
                b       loc_3F410
# ---------------------------------------------------------------------------
loc_3F3FC:                              # CODE XREF: sound_queue_input+18↑j
                st      r5, 0x78(r3)
                ld      0x78(r3), r13
                ld      0x7C(r3), r14
                cmpobne r13, r14, loc_3F428
                st      r6, 0x78(r3)
loc_3F410:                              # CODE XREF: sound_queue_input+28↑j
                ld      0x78(r3), r13
                ld      0x7C(r3), r14
                cmpobne r13, r14, loc_3F428
                ld      0x78(r3), r14
                subi    4, r14, r15
                st      r15, 0x78(r3)
loc_3F428:                              # CODE XREF: sound_queue_input+38↑j
                stob    g1, sd_nowait_timer
                ld      sound_queue_input_list(g0), r15
                st      r15, (r4)
                ld      (r4), r15
                st      r15, sd_flag
                ret
# End of function sound_queue_input
# =============== S U B R O U T I N E =======================================
sound_queue_output:                     # DATA XREF: sound_queue_init↑o
                ld      debug_flag, r15 # Label from official source
                bbc     15, r15, sqo_skip
                ld      0x0(g13), g3
                ldob    stage_num, r4
                ldos    6(g13), r5
                addo    1, r5, r5
                bbc     0x1E, g3, sqo_no_start
                lda     0xA00002, g0
                call    check_same_sound
                call    sound_request_u
                lda     0xAE1007, g0    # sd_game_bgm_07
                call    check_same_sound
                call    sound_request_u
                ld      dword_DC024[r4*16], g0
                cmpobe  0, g0, loc_3F4A0
                call    sound_request_u
loc_3F4A0:                              # CODE XREF: sound_queue_output+4C↑j
                clrbit  0x1E, g3, g3
                st      g3, 0x0(g13)
sqo_no_start:                           # CODE XREF: sound_queue_output+20↑j
                bbc     0x1C, g3, sqo_no_stop # Label from Fighting Vipers source
                ld      dword_DC028[r4*16], g0
                cmpobe  0, g0, loc_3F4BC
                call    sound_request_u
loc_3F4BC:                              # CODE XREF: sound_queue_output+68↑j
                clrbit  28, g3, g3
                st      g3, 0x0(g13)
sqo_no_stop:                            # CODE XREF: sound_queue_output:sqo_no_start↑j
                bbc     26, g3, sqo_no_stop2 # Label from Fighting Vipers source
                ld      dword_DC02C[r4*16], g0
                cmpobe  0, g0, loc_3F4D8
                call    sound_request_u
loc_3F4D8:                              # CODE XREF: sound_queue_output+84↑j
                clrbit  26, g3, g3
                st      g3, 0x0(g13)
sqo_no_stop2:                           # CODE XREF: sound_queue_output:sqo_no_stop↑j
                bbc     29, g3, sqo_ex  # Label from Fighting Vipers source
                call    rand            # Random value stored to g0
                ld      sound_queue_output_list[r4*4], r6
                bx      (r6)
# ---------------------------------------------------------------------------
loc_3F4F4:                              # DATA XREF: ROM:000DB050↓o
                b       sqo_ex
# ---------------------------------------------------------------------------
loc_3F4F8:                              # DATA XREF: ROM:000DB054↓o
                b       sqo_ex
# ---------------------------------------------------------------------------
loc_3F4FC:                              # DATA XREF: ROM:sound_queue_output_list↓o
                b       sqo_ex
# ---------------------------------------------------------------------------
loc_3F500:                              # DATA XREF: ROM:000DB058↓o
                b       sqo_skip
# ---------------------------------------------------------------------------
                b       sqo_skip
# ---------------------------------------------------------------------------
                call    sound_request_u
sqo_ex:                                 # CODE XREF: sound_queue_output:sqo_no_stop2↑j
                st      g3, 0x0(g13)    # Label from Fighting Vipers source
                stos    r5, 6(g13)
sqo_skip:                               # CODE XREF: sound_queue_output+8↑j
                ld      sd_nowait_timer, r15 # Label from Fighting Vipers source
                bbs     0, r15, sqo_nochk_timer
                ldos    sd_wait_timer, r14
                cmpobl  0, r14, sqo_chk_timer
sqo_nochk_timer:                        # CODE XREF: sound_queue_output+D0↑j
                ld      0x7C(g13), r3   # Label from Fighting Vipers source
                lda     0x40(g13), r4
                lda     0x74(g13), r5
                mov     0, r15
                stis    r15, sd_wait_timer
                ld      (r3), r6
                st      r6, sd_flag
                mov     0, r15
                st      r15, (r3)
                mov     0, r15
                stib    r15, sd_nowait_timer
sqo_next_set:                           # Label from Fighting Vipers source
                ld      0x78(g13), r14
                cmpobe  r3, r14, sqo_output_end
                cmpobe  r3, r5, sqo_next0
                addo    4, r3, r3
                st      r3, 0x7C(g13)
                b       sqo_chk_timer
# ---------------------------------------------------------------------------
sqo_next0:                              # CODE XREF: sound_queue_output+120↑j
                st      r4, 0x7C(g13)   # Label from Fighting Vipers source
sqo_chk_timer:                          # CODE XREF: sound_queue_output+DC↑j
                ld      sd_flag, r6     # Label from Fighting Vipers source
                ldos    sd_wait_timer, r7
                cmpo    0, r6
                be      sqo_output_end
                cmpobge 0, r7, sqo_prog_com
                subo    1, r7, r7
                stos    r7, sd_wait_timer
                cmpobl  0, r7, sqo_output_end
sqo_prog_com:                           # CODE XREF: sound_queue_output+14C↑j
                ldob    (r6), r7        # Label from Fighting Vipers source
                addo    1, r6, r6
                ld      sqo_end_or_play[r7*4], r8
                bx      (r8)
# ---------------------------------------------------------------------------
sqo_output_end:                         # CODE XREF: sound_queue_output+11C↑j
                ret                     # Label from Fighting Vipers source
# End of function sound_queue_output
# =============== S U B R O U T I N E =======================================
sqo_end:                                # DATA XREF: ROM:sqo_end_or_play↓o
                mov     0, r15          # Label from official source
                st      r15, sd_flag
                mov     0, r15
                stib    r15, sd_nowait_timer
                ret
# End of function sqo_end
# =============== S U B R O U T I N E =======================================
sqo_play:                               # DATA XREF: ROM:0003F60C↓o
                ld      (r6), g0        # Label from official source
                call    sound_request_u
                addo    4, r6, r6
                ldis    (r6), r15
                stis    r15, sd_wait_timer
                addo    2, r6, r6
                st      r6, sd_flag
                ret
# End of function sqo_play
# ---------------------------------------------------------------------------
sqo_end_or_play:.long sqo_end           # DATA XREF: sound_queue_output+168↑r
                .long sqo_play
# =============== S U B R O U T I N E =======================================
stage_bgm_select:                       # CODE XREF: ROUND_DSP+97C↑p
                ldob    stage_num, r3   # Label from official source
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ldob    gameprogram, r14 # bit 0 clear = Player 1
                cmpobne 2, r14, LEVEL_MUSIC
                ldob    0x1B1(g7), r14
                cmpobne 0, r14, chk_p2_sonic # If P1 not Sonic, branch
                ldob    0x1B1(g8), r14
                cmpobe  6, r14, load_NORTH_WIND # If P2 is Knuckles, branch to play North Wind music
chk_p2_sonic:                           # CODE XREF: stage_bgm_select+28↑j
                ldob    0x1B1(g7), r14  # Should be g8, not g7
                cmpobne 0, r14, load_SOUTH_ISLAND_0 # If P1 not Sonic, branch
                ldob    0x1B1(g8), r14  # Should be g7, not g8
                cmpobne 6, r14, load_SOUTH_ISLAND_0 # If P2 not Knuckles, branch
load_NORTH_WIND:                        # CODE XREF: stage_bgm_select+30↑j
                lda     0xAE100C, g0    # sd_game_bgm_0c
                b       call_audio_sub
# ---------------------------------------------------------------------------
load_SOUTH_ISLAND_0:                    # CODE XREF: stage_bgm_select+38↑j
                lda     prcb+1, r12
                cmpo    r3, r12
                bne     load_SOUTH_ISLAND_1
                lda     0xAE1004, g0    # sd_game_bgm_04
                b       call_audio_sub
# ---------------------------------------------------------------------------
load_SOUTH_ISLAND_1:                    # CODE XREF: stage_bgm_select+5C↑j
                lda     prcb, r12
                cmpo    r3, r12
                bne     LOAD_LEVEL_MUSIC
                lda     0xAE1004, g0    # sd_game_bgm_04
                b       call_audio_sub
# ---------------------------------------------------------------------------
LOAD_LEVEL_MUSIC:                       # CODE XREF: stage_bgm_select+78↑j
                b       LEVEL_MUSIC
# ---------------------------------------------------------------------------
LEVEL_MUSIC:                            # CODE XREF: stage_bgm_select+20↑j
                ldob    stage_num, r3
                and     0xF, r3, r3
                ld      STAGE_MUSIC_IN_ORDER[r3*4], g0
call_audio_sub:                         # CODE XREF: stage_bgm_select+4C↑j
                call    sound_request_u
                ret
# End of function stage_bgm_select
# ---------------------------------------------------------------------------
rvb_init:                               # Label from official source
                lda     rvb_flag, g6
                mov     0, r15
                st      r15, 0x0(g6)
                addo    31, 17, r15     # r15 = 48 or 0x30
                stib    r15, 4(g6)
                mov     1, r11
loc_3F6D4:                              # CODE XREF: ROM:0003F724↓j
                lda     0x1000A28, g9
                mov     r11, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aRvbInitTry:    .asciz "rvb_init_try"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                lda     dword_3F73C, g0
                mov     1, g1
                call    rvb_send
                cmpibg  0, g1, loc_3F720
                call    rvb_receive
                cmpibg  0, g1, loc_3F720
                lda     0x4E, r13
                ldob    (g0), r14
                cmpobe  r13, r14, loc_3F72C # compare 0x4E to 0x43
loc_3F720:                              # CODE XREF: ROM:0003F708↑j
                cmpinco 4, r11, r11
                bg      loc_3F6D4
                ret
# ---------------------------------------------------------------------------
loc_3F72C:                              # CODE XREF: ROM:0003F71C↑j
                ld      0x0(g6), r15
                setbit  0, r15, r15
                st      r15, 0x0(g6)
                ret
# ---------------------------------------------------------------------------
dword_3F73C:    .long 0x43              # DATA XREF: ROM:0003F6F8↑o
# =============== S U B R O U T I N E =======================================
rvb_send:                               # CODE XREF: ROM:0003F704↑p
                mov     g0, r10         # Label from official source
                mov     g1, r9
                lda     rvb_flag, g6
                mov     3, r11
                mov     r10, r7
                mov     r9, r6
                mov     2, g0
                bal     rvb_send1
                mov     0, r8
                ldob    4(g6), g0
                bal     rvb_send1
                addo    1, r6, g0
                bal     rvb_send1
                mov     0, g0
                bal     rvb_send1
loc_3F780:                              # CODE XREF: rvb_send+50↓j
                ldob    (r7), g0
                bal     rvb_send1
                addo    1, r7, r7
                cmpdeco 1, r6, r6
                bl      loc_3F780
                mov     r8, g0
                bal     rvb_send1
                ret
# End of function rvb_send
# =============== S U B R O U T I N E =======================================
rvb_send1:                              # CODE XREF: rvb_send+20↑p
                lda     loc_2710, r12   # Label from official source
loc_3F7A8:                              # CODE XREF: rvb_send1+18↓j
                cmpdeco 1, r12, r12
                ldob    0x1400000, r13
                bbs     0, r13, loc_3F7CC
                bbs     1, r13, loc_3F7A8
                stob    g0, 0x1A00000
                xor     g0, r8, r8
                bx      (g14)
# ---------------------------------------------------------------------------
loc_3F7CC:                              # CODE XREF: rvb_send1+14↑j
                bal     rvb_read_skip
                subo    1, 0, g1
                ret
# End of function rvb_send1
# =============== S U B R O U T I N E =======================================
rvb_receive:                            # CODE XREF: ROM:0003F70C↑p
                lda     rvb_flag, g6    # Label from official source
                lda     0x10(g6), r10
                mov     3, r11
                bal     rvb_receive1
                cmpobne 2, g0, loc_3F850
                mov     0, r8
                bal     rvb_receive1
                mov     g0, r7
                bal     rvb_receive1
                mov     g0, r9
                bal     rvb_receive1
                shlo    8, g0, g0
                lda     -1(g0)[r9], g1
                mov     g1, r9
loc_3F818:                              # CODE XREF: rvb_receive+50↓j
                bal     rvb_receive1
                stob    g0, (r10)
                addo    1, r10, r10
                cmpdeco 1, r9, r9
                bl      loc_3F818
                mov     r8, r5
                bal     rvb_receive1
                cmpobne g0, r5, loc_3F850
                lda     0x10(g6), g0
                ldob    4(g6), r3
                xor     1, r7, r4
                stob    r4, 4(g6)
                cmpobne r7, r3, loc_3F850
                ret
# ---------------------------------------------------------------------------
loc_3F850:                              # CODE XREF: rvb_receive+14↑j
                bal     rvb_read_skip
loc_3F854:                              # CODE XREF: rvb_receive1+14↓j
                subo    1, 0, g1
                ret
# End of function rvb_receive
# =============== S U B R O U T I N E =======================================
rvb_receive1:                           # CODE XREF: rvb_receive+10↑p
                lda     loc_2710, r12   # Label from official source
loc_3F864:                              # CODE XREF: rvb_receive1+18↓j
                cmpdeco 1, r12, r12
                ldob    0x1400000, g0
                be      loc_3F854
                bbc     0, g0, loc_3F864
                ldob    0x1A00000, g0
                xor     g0, r8, r8
                bx      (g14)
# End of function rvb_receive1
# =============== S U B R O U T I N E =======================================
rvb_read_skip:                          # CODE XREF: rvb_send1:loc_3F7CC↑p
                bbc     0, g0, loc_3F8A8 # Label from official source
                lda     loc_2710, r12
loc_3F894:                              # CODE XREF: rvb_read_skip+1C↓j
                cmpdeco 1, r12, r12
                ldob    0x1400000, g0
                be      loc_3F8C8
                bbs     0, g0, loc_3F894
loc_3F8A8:                              # CODE XREF: rvb_read_skip↑j
                lda     loc_2710, r12
loc_3F8B0:                              # CODE XREF: rvb_read_skip+38↓j
                cmpdeco 1, r12, r12
                ldob    0x1400000, g0
                be      loc_3F8C8
                bbc     0, g0, loc_3F8B0
                b       rvb_read_skip
# ---------------------------------------------------------------------------
loc_3F8C8:                              # CODE XREF: rvb_read_skip+18↑j
                bx      (g14)
# End of function rvb_read_skip
# =============== S U B R O U T I N E =======================================
# return
voice_init:                             # CODE XREF: ROM:000082BC↑p
                ret                     # Label from official source
# End of function voice_init
# =============== S U B R O U T I N E =======================================
play_sd_punch_o:                        # CODE XREF: ROM:loc_8C9F8↓p
                lda     0xAE111B, g0    # sd_punch_o
                call    sound_request_u
                ret
# End of function play_sd_punch_o
# =============== S U B R O U T I N E =======================================
play_sd_fall_9:                         # CODE XREF: ROM:loc_8D32C↓p
                lda     0xAE110A, g0    # sd_fall_9
                call    sound_request_u
                ret
# End of function play_sd_fall_9
# =============== S U B R O U T I N E =======================================
play_sd_punch_e:                        # CODE XREF: ROM:0008D550↓p
                lda     0xAE1113, g0    # sd_punch_e
                call    sound_request_u
                ret
# End of function play_sd_punch_e
# =============== S U B R O U T I N E =======================================
play_sd_up_2:                           # CODE XREF: ROM:0008DCA0↓p
                lda     0xAE1128, g0    # sd_up_2
                call    sound_request_u
                ret
# End of function play_sd_up_2
# ---------------------------------------------------------------------------
un_play_sd_punch_p:                     # unreachable code
                lda     0xAE111C, g0    # sd_punch_p
                call    sound_request_u
                ret
# =============== S U B R O U T I N E =======================================
play_sd_rope_3:                         # CODE XREF: ROM:loc_8D460↓p
                lda     0xAE1126, g0    # sd_rope_3
                call    sound_request_u
                ret
# End of function play_sd_rope_3
# =============== S U B R O U T I N E =======================================
play_sd_double_punch:                   # CODE XREF: ROM:0008DDB0↓p
                lda     0xAE1136, g0    # sd_g_punch_1
                call    sound_request_u
                lda     0xAE1118, g0    # sd_punch_k
                call    sound_request_u
                ret
# End of function play_sd_double_punch
# =============== S U B R O U T I N E =======================================
play_sd_cork_1b:                        # CODE XREF: ROM:0008CCF0↓p
                lda     0xAE112F, g0    # sd_cork_1b
                call    sound_request_u
                ret
# End of function play_sd_cork_1b
# ---------------------------------------------------------------------------
                ldob    0x26(g6), r3    # unreachable code
                ld      sfx_sd_punch_e[r3*4], g0
                mov     g0, g0
                call    check_same_sound
                call    sound_request_u
                ret
# ---------------------------------------------------------------------------
sfx_sd_punch_e: .long   0xAE1113        # DATA XREF: ROM:0003F960↑r
                .long   0xAE1113
                .long   0xAE1113
                .long   0xAE1113
                .long   0xAE1113
                .long   0xAE1113
                .long   0xAE1113
                .long   0xAE1113
                .long   0xAE1113
                .long   0xAE1113
                .long   0xAE1113
# =============== S U B R O U T I N E =======================================
play_sd_cane_2d_knock_3:                # CODE XREF: ROM:0002AA94↑p
                lda     0xAE112C, g0    # sd_cane_2d
                call    check_same_sound
                call    sound_request_u
                lda     0xAE117A, g0    # sd_knock_3
                call    check_same_sound
                call    sound_request_u
                ret
# End of function play_sd_cane_2d_knock_3
# =============== S U B R O U T I N E =======================================
play_sd_cane_2d_knock_9:                # CODE XREF: ROM:loc_2AA9C↑p
                lda     0xAE112C, g0    # sd_cane_2d
                call    check_same_sound
                call    sound_request_u
                lda     0xAE117B, g0    # sd_knock_9
                call    check_same_sound
                call    sound_request_u
                ret
# End of function play_sd_cane_2d_knock_9
# =============== S U B R O U T I N E =======================================
play_sd_cane_2d:                        # CODE XREF: ROM:0002ACD8↑p
                lda     0xAE112C, g0    # sd_cane_2d
                call    check_same_sound
                call    sound_request_u
                ret
# End of function play_sd_cane_2d
# =============== S U B R O U T I N E =======================================
sound_chainlink_hit:                    # CODE XREF: play_motion+4DC↑p
                ldob    stage_num, r12  # Label from Fighting Vipers source
                ld      stage_cage_sfx_list[r12*4], g0
                ld      0xACC(g7), r3
                cmpobne 0, r3, loc_3FA20
                ld      0xACC(g8), r3
                cmpobe  0, r3, loc_3FA24
loc_3FA20:                              # CODE XREF: sound_chainlink_hit+14↑j
                mov     r3, g0
loc_3FA24:                              # CODE XREF: sound_chainlink_hit+1C↑j
                mov     g0, g0
                call    check_same_sound
                call    sound_request_u
                ret
# End of function sound_chainlink_hit
# ---------------------------------------------------------------------------
stage_cage_sfx_list:.long 0xAE115B      # DATA XREF: sound_chainlink_hit+8↑r
                .long 0xAE1126          # sd_rope_3
                .long 0xAE123B          # sd_WB04_81_01
                .long 0xAE115B          # sd_pinball_j
                .long 0xAE116C          # sd_wall_hit_5
                .long 0xAE1154          # sd_pinball_b
                .long 0xAE1133          # sd_fence_1
                .long 0xAE1221          # sd_WB01_26_02
                .long 0xAE1134          # sd_fence_2
                .long 0xAE1231          # sd_WB02_67_01
                .long 0xAE1231          # sd_WB02_67_01
                .long 0
# =============== S U B R O U T I N E =======================================
sound_select_char:                      # CODE XREF: select_pl+AB0↑p
                lda     0xAE1101, g0    # Label from Fighting Vipers source
                call    check_same_sound
                call    sound_request_u
                ret
# End of function sound_select_char
# =============== S U B R O U T I N E =======================================
sub_3FA78:                              # CODE XREF: epc_parts_pos_calc+A0↑p
                lda     0xF0000000, r13
                ld      0x24(g2), r14
                and     r13, r14, r3
                shro    0x1C, r3, r3
                cmpobe  0, r3, loc_3FAA0
                scanbit r3, r4
                ld      no_sfx_or_sd_punch_k[r4*4], g0
                call    sound_request_u
loc_3FAA0:                              # CODE XREF: sub_3FA78+14↑j
                ret
# End of function sub_3FA78
# =============== S U B R O U T I N E =======================================
win_voice:                              # CODE XREF: VIC_INT+104↑p
                shlo    3, 0xB, r10     # Label from Fighting Vipers source
                lda     0xAE100B, r9    # sd_game_bgm_0b (YOU ARE WINNER)
                ldob    STAGE_ID, r14
                cmpobg  10, r14, loc_3FAC4
                lda     0xAE1018, r9    # MISSION COMPLETE - Egg Fanfare
loc_3FAC4:                              # CODE XREF: win_voice+14↑j
                cmpobe  g0, g1, loc_3FAD4 # if look_char = g0, branch
                shlo    2, 0x17, r10
                lda     0xAE1008, r9    # sd_game_bgm_08 (CONTINUE)
loc_3FAD4:                              # CODE XREF: win_voice:loc_3FAC4↑j
                cmpobe  1, g1, loc_3FAE4 # if look_char = 1 branch
                ld      fa_rob0, r11
                b       loc_3FAEC
# ---------------------------------------------------------------------------
loc_3FAE4:                              # CODE XREF: win_voice:loc_3FAD4↑j
                ld      fa_rob1, r11
loc_3FAEC:                              # CODE XREF: win_voice+3C↑j
                ldob    0x1B1(r11), r3
                cmpoble 8, r3, loc_3FB28
                ld      add_BACKUP_RAM_TO_RAM, r13
                ldob    0x3352(r13), r4
                cmpobne 0, r4, loc_3FB14
                ldos    word_DB678[r3*2], g0
                b       loc_3FB1C
# ---------------------------------------------------------------------------
loc_3FB14:                              # CODE XREF: win_voice+60↑j
                ldos    word_DB68A[r3*2], g0
loc_3FB1C:                              # CODE XREF: win_voice+6C↑j
                mov     1, g1
                mov     r10, g0
                mov     0, g1
loc_3FB28:                              # CODE XREF: win_voice+4C↑j
                mov     r9, g0
                call    check_same_sound
                call    sound_request_u
                ret
# End of function win_voice
# =============== S U B R O U T I N E =======================================
game_engine_setup:                      # CODE XREF: ROM:00006AB8↑p
                call    sub_2E2B0
                mov     2, r15
                stib    r15, attack_base
                mov     4, r15
                stib    r15, rise_base
                mov     8, r15
                stib    r15, precede_inp_time
                mov     1, r15
                stib    r15, 0x50009D
                mov     6, r15
                stib    r15, rise_base
                mov     30, r15
                stib    r15, guard_limit
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3358(r4), r3
                st      r3, barrier_default_num
                mov     0, r3
                ld      fa_rob0, r4
                st      r3, 0x0(r4)
                ld      fa_rob1, r5
                st      r3, 0x0(r5)
                lda     0x3F333333, r15
                st      r15, gyang_yvec
                lda     0x3ECCCCCD, r15
                st      r15, gyang_asi_d
                lda     0x3ECCCCCD, r15
                st      r15, gyang_ha_d
                lda     0x3ECCCCCD, r15
                st      r15, gyang_asi_h
                shlo    0xC, 1, r15
                stis    r15, 0x50A0C8
                lda     0x3F800000, r15
                st      r15, BRIGHT
                lda     0x3ECCCCCD, r15
                st      r15, ROB_LENG
                lda     0x3E4CCCCD, r15
                st      r15, ROB_LIMIT
                lda     0x3E19999A, r15
                st      r15, ROB_LIMIT2
                shlo    0xD, 1, r15
                stis    r15, 0x5010EC
                lda     0x3F19999A, r15
                st      r15, en_ang_dist
                lda     0x3F800000, r15
                st      r15, 0x50A1B8
                lda     0x81, r15
                stib    r15, 0x5010DC
                mov     0, r15
                stis    r15, 0x5010DE
                lda     0x3F666666, r15
                st      r15, 0x50A1C0
                lda     0xFF, r15
                stib    r15, 0x5010DD
                lda     0x3F800000, r15
                st      r15, no_coli_low
                lda     0x3FB33333, r15
                st      r15, no_coli_height
                mov     9, r15
                stib    r15, vd_measure # vairable diff measure
                lda     loc_30600, r15
                st      r15, copro_adr
                lda     0x1F4, r15
                st      r15, loop
                mov     0, r15
                st      r15, test_int
                call    set_default_rob_light
                lda     0xBE99999A, r15
                st      r15, stage_low_judge
                ld      fa_camera, r4
                lda     0x3FB33333, r15
                st      r15, 0x20C(r4)
                lda     0x3EB33333, r15
                st      r15, 0x290(r4)
                lda     0x3F800000, r15
                st      r15, 0x4C(r4)
                lda     0x40000000, r15 # float 2.0
                st      r15, float_2
                ld      fa_camera, g0
                lda     displacement, r4
                lda     0x3F4F5C29, r5
                lda     0xC0A0A3D7, r6
                stt     r4, 0x18(g0)
                lda     0x3F000000, r15
                st      r15, 0x30C(g0)  # assign 0.5 to cam_dist_ratio
                lda     0x3EEB851F, r5
                lda     displacement, r6
                stt     r4, 0x120(g0)
                lda     0xF600, r15
                stis    r15, 0xF8(g0)
                lda     0x3FA66666, r15
                st      r15, 0x2DC(g0)
                lda     0x40400000, r15
                st      r15, 0x2E0(g0)
                ret
# End of function game_engine_setup
# =============== S U B R O U T I N E =======================================
sub_3FDB4:                              # CODE XREF: VsyncScr:loc_CB8↑p
                ld      debug_flag, r9
                bbs     4, r9, loc_3FDE0
                bbc     2, r9, loc_3FDE4
                bbc     7, r9, loc_3FDDC
                ld      0x59E014, r14
                cmpobe  0, r14, loc_3FDDC
                call    sub_4DC6C
                b       loc_3FDDC
# ---------------------------------------------------------------------------
loc_3FDDC:                              # CODE XREF: sub_3FDB4+10↑j
                ret
# ---------------------------------------------------------------------------
loc_3FDE0:                              # CODE XREF: sub_3FDB4+8↑j
                call    sub_4DBA4
loc_3FDE4:                              # CODE XREF: sub_3FDB4+C↑j
                ret
# End of function sub_3FDB4
# ---------------------------------------------------------------------------
debug_Exit:     .short 0x600            # DATA XREF: ROM:00095120↓o
                .short 0
# ---------------------------------------------------------------------------
                lda     DEBUG_EXIT, g0
# ---------------------------------------------------------------------------
                .long 0
aExit:          .asciz "EXIT"
                .fill 3, 1, 0
debug_Rob0Info: .long 0x600             # DATA XREF: ROM:00095124↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_ROB0_INFO, g0
# ---------------------------------------------------------------------------
                .long 0
aRob0Info:      .asciz "ROB0_INFO"
                .short 0
debug_Rob1Info: .long 0x600             # DATA XREF: ROM:00095128↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_ROB1_INFO, g0
# ---------------------------------------------------------------------------
                .long 0
aRob1Info:      .asciz "ROB1_INFO"
                .short 0
debug_CpuTime:  .long 0x600             # DATA XREF: ROM:0009512C↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_CPU_TIME, g0
# ---------------------------------------------------------------------------
                .long 0
aCpuTime:       .asciz "CPU_TIME"
                .fill 3, 1, 0
debug_EnCommand:.long 0x600             # DATA XREF: ROM:00095130↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_EN_COMMAND, g0
# ---------------------------------------------------------------------------
                .long 0
aEnCommand:     .asciz "EN COMMAND"
                .byte 0
debug_GameParam:.long 0x600             # DATA XREF: ROM:00095134↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_GAME_PARAM, g0
# ---------------------------------------------------------------------------
                .long 0
aGamePara:      .asciz "GAME_PARA"
                .short 0
debug_DownEfcSpd:.long 0x600            # DATA XREF: ROM:00095138↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_DOWN_EFC_SPD, g0
# ---------------------------------------------------------------------------
                .long 0
aDownEfcSpd:    .asciz "DOWN_EFC_SPD"
                .fill 3, 1, 0
debug_ParameterSet:.long 0x600          # DATA XREF: ROM:0009513C↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_PARAMETER_SET, g0
# ---------------------------------------------------------------------------
                .long 0
aParameterSet:  .asciz "PARAMETER_SET"
                .short 0
debug_Rob0Param:.long 0x600             # DATA XREF: ROM:00095140↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_ROB0_PARAM, g0
# ---------------------------------------------------------------------------
                .long 0
aRob0Parameter: .asciz "ROB0_PARAMETER"
                .byte 0
debug_Rob1Param:.long 0x600             # DATA XREF: ROM:00095144↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_ROB1_PARAM, g0
# ---------------------------------------------------------------------------
                .long 0
aRob1Parameter: .asciz "ROB1_PARAMETER"
                .byte 0
debug_Unit0_0:  .long 0x600             # DATA XREF: ROM:00095148↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_UNIT0, g0
# ---------------------------------------------------------------------------
                .long 0
aDebugUnit0:    .asciz "DEBUG_UNIT0"
debug_Unit1_0:  .long 0x600             # DATA XREF: ROM:0009514C↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_UNIT1, g0
# ---------------------------------------------------------------------------
                .long 0
aDebugUnit1:    .asciz "DEBUG_UNIT1"
debug_ColiBall0R:.long 0x600            # DATA XREF: ROM:00095150↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_COLI_BALL0_R, g0
# ---------------------------------------------------------------------------
                .long 0
aColiBall0R:    .asciz "COLI BALL0 R"
                .fill 3, 1, 0
debug_ColiBall1R:.long 0x600            # DATA XREF: ROM:00095154↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_COLI_BALL1_R, g0
# ---------------------------------------------------------------------------
                .long 0
aColiBall1R:    .asciz "COLI BALL1 R"
                .fill 3, 1, 0
debug_ColiPos0: .long 0x600             # DATA XREF: ROM:00095158↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_COLI_POS0, g0
# ---------------------------------------------------------------------------
                .long 0
aColiPos0:      .asciz "COLI POS0"
                .short 0
debug_ColiPos1: .long 0x600             # DATA XREF: ROM:0009515C↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_COLI_POS1, g0
# ---------------------------------------------------------------------------
                .long 0
aColiPos1:      .asciz "COLI POS1"
                .short 0
debug_CoproRamHex:.long 0x600           # DATA XREF: ROM:00095160↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_COPRO_RAM_HEX, g0
# ---------------------------------------------------------------------------
                .long 0
aCoproRamHex:   .asciz "COPRO RAM HEX"
                .short 0
debug_CoproRamFlo:.long 0x600           # DATA XREF: ROM:00095164↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_COPRO_RAM_FLO, g0
# ---------------------------------------------------------------------------
                .long 0
aCoproRamFlo:   .asciz "COPRO RAM FLO"
                .short 0
debug_CellDisp: .long 0x600             # DATA XREF: ROM:00095168↓o
# ---------------------------------------------------------------------------
loc_40000:                              # DATA XREF: variable_diff_init+188↑o
                lda     DEBUG_CELL_DISP, g0
# ---------------------------------------------------------------------------
                .long 0
aCellDisp:      .asciz "CELL DISP"
                .short 0
debug_Parts0Info:.long 0x600            # DATA XREF: ROM:0009516C↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_PARTS0_INFO, g0
# ---------------------------------------------------------------------------
                .long 0
aParts0Info:    .asciz "PARTS0_INFO"
debug_Parts1Info:.long 0x600            # DATA XREF: ROM:00095170↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_PARTS1_INFO, g0
# ---------------------------------------------------------------------------
                .long 0
aParts1Info:    .asciz "PARTS1_INFO" # DATA XREF: MAIN_DATA:028A0E9C↓o
debug_Camera:   .long 0x600             # DATA XREF: ROM:00095174↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_CAMERA, g0
# ---------------------------------------------------------------------------
                .long 0
aCamera:        .asciz "CAMERA"
                .byte 0
debug_CameraInfo:.long 0x600            # DATA XREF: ROM:00095178↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_CAMERA_INFO, g0
# ---------------------------------------------------------------------------
                .long 0
aCameraInfo:    .asciz "CAMERA_INFO"
debug_PolygonTest:.long 0x600           # DATA XREF: ROM:0009517C↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_POLYGON_TEST, g0
# ---------------------------------------------------------------------------
                .long 0
aPolygonTest:   .asciz "POLYGON TEST"
                .fill 3, 1, 0
debug_PartsTest:.long 0x600             # DATA XREF: ROM:00095180↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_PARTS_TEST, g0
# ---------------------------------------------------------------------------
                .long 0
aPartsTest:     .asciz "PARTS TEST"
                .byte 0
debug_ColorTest:.long 0x600             # DATA XREF: ROM:00095184↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_COLOR_TEST, g0
# ---------------------------------------------------------------------------
                .long 0
aColorTest:     .asciz "COLOR TEST"
                .byte 0
debug_ObjectTest:.long 0x600            # DATA XREF: ROM:00095188↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_OBJECT_TEST, g0
# ---------------------------------------------------------------------------
                .long 0
aObjectTest:    .asciz "OBJECT TEST"
debug_ScrollTest2:.long 0x600           # DATA XREF: ROM:0009518C↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_SCROLL_TEST2, g0
# ---------------------------------------------------------------------------
                .long 0
aScrollTest2:   .asciz "SCROLL TEST 2"
                .short 0
debug_BGMTest:  .long 0x600             # DATA XREF: ROM:00095190↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_BGM_TEST, g0
# ---------------------------------------------------------------------------
                .long 0
aBgmTest:       .asciz "BGM TEST"
                .fill 3, 1, 0
debug_BreakPoint:.long 0x600            # DATA XREF: ROM:00095194↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_BREAK_POINT, g0
# ---------------------------------------------------------------------------
                .long 0
aBreakPoint:    .asciz "BREAK POINT"
debug_CoinSetting:.long 0x600           # DATA XREF: ROM:00095198↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_COIN_SETTING, g0
# ---------------------------------------------------------------------------
                .long 0
aCoinSetting:   .asciz "COIN SETTING"
                .fill 3, 1, 0
debug_Osage:    .long 0x600             # DATA XREF: ROM:0009519C↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_OSAGE, g0
# ---------------------------------------------------------------------------
                .long 0
aOsage:         .asciz "OSAGE\t"
                .byte 0
debug_SkyEye:   .long 0x600             # DATA XREF: ROM:000951A0↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_SKY_EYE, g0
# ---------------------------------------------------------------------------
                .long 0
aSkyEye:        .asciz "SKY EYE"
debug_Material: .long 0x600             # DATA XREF: ROM:000951A4↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_MATERIAL, g0
# ---------------------------------------------------------------------------
                .long 0
aMaterial:      .asciz "MATERIAL"
                .fill 3, 1, 0
debug_Punch:    .long 0x600             # DATA XREF: ROM:000951A8↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_PUNCH, g0
# ---------------------------------------------------------------------------
                .long 0
aPunch:         .asciz "PUNCH"
                .short 0
debug_Debug:    .long 0x600             # DATA XREF: ROM:000951AC↓o
# ---------------------------------------------------------------------------
                lda     DEBUG_DEBUG, g0
# ---------------------------------------------------------------------------
                .long 0
aDebug:         .asciz "DEBUG\t"
                .byte 0
# ---------------------------------------------------------------------------
DEBUG_EXIT:                             # DATA XREF: ROM:0003FDEC↑o
                ld      0x59E008, r15
                bbs     3, r15, loc_4020C
                ld      debug_flag, r15
                setbit  8, r15, r15
                st      r15, debug_flag
loc_4020C:                              # CODE XREF: ROM:000401F4↑j
                ret
# ---------------------------------------------------------------------------
DEBUG_CPU_TIME:                         # DATA XREF: ROM:0003FE3C↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x1E270809
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_402D8, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                mov     0, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                balx    sub_4DF8C, r14
# ---------------------------------------------------------------------------
aEventNowAveMax:.asciz "  event       now    ave    max  limit"
                .byte 0
# ---------------------------------------------------------------------------
                mov     0, r15
                stib    r15, 0xC(g3)
                mov     1, r15
                stib    r15, 0xD(g3)
                ld      event_count, r8
                mov     0, r11
loc_40290:                              # CODE XREF: ROM:000402D0↓j
                shlo    6, r11, r3
                lda     TEXTURE_BUFFER, g1
                lda     (event_names+3)(r3), r15 # 0 = fa_nameentry
                st      r15, 0x0(sp)
                mov     1, r15
                balx    sub_4ED24, r14
# ---------------------------------------------------------------------------
a11s:           .asciz "%11s"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                call    sub_4D8B0
                addo    1, r11, r11
                ldob    0xD(g3), r14
                addi    1, r14, r15
                stob    r15, 0xD(g3)
                cmpobl  r11, r8, loc_40290
                b       loc_402E8
# ---------------------------------------------------------------------------
loc_402D8:                              # DATA XREF: ROM:00040220↑o
                ld      debug_flag, r3
                bbs     7, r3, loc_402E8
                bbs     5, r3, loc_403D8
loc_402E8:                              # CODE XREF: ROM:000402D4↑j
                mov     0xD, r15
                stib    r15, 0xC(g3)
                mov     1, r15
                stib    r15, 0xD(g3)
                ld      event_count, r8
                lda     0x50C000, r10
                mov     0, r11
loc_4030C:                              # CODE XREF: ROM:000403D4↓j
                shlo    6, r11, r3
                ld      0x8EC20(r3), r3
                ld      (r3), r3
                ldq     (r10), r4
                cmpobe  0, r6, loc_40328
                ediv    r6, r4, r4
loc_40328:                              # CODE XREF: ROM:00040320↑j
                lda     TEXTURE_BUFFER, g1
                ld      0x10(r10), r4
                ld      0x38(r3), r6
                subo    6, r4, r4
                mov     0, r15
                cmpibge r4, r15, loc_40348
                mov     r15, r4
loc_40348:                              # CODE XREF: ROM:00040340↑j
                divo    0x19, r4, r4
                subo    6, r5, r5
                mov     0, r15
                cmpibge r5, r15, loc_4035C
                mov     r15, r5
loc_4035C:                              # CODE XREF: ROM:00040354↑j
                divo    0x19, r5, r5
                subo    6, r7, r7
                mov     0, r15
                cmpibge r7, r15, loc_40370
                mov     r15, r7
loc_40370:                              # CODE XREF: ROM:00040368↑j
                divo    0x19, r7, r7
                subo    6, r6, r6
                mov     0, r15
                cmpibge r6, r15, loc_40384
                mov     r15, r6
loc_40384:                              # CODE XREF: ROM:0004037C↑j
                divo    0x19, r6, r6
                st      r4, 0x0(sp)
                st      r5, 4(sp)
                st      r7, 8(sp)
                st      r6, 0xC(sp)
                mov     4, r15
                balx    sub_4ED24, r14
# ---------------------------------------------------------------------------
a5d5d5d5d:      .asciz "%5d  %5d  %5d  %5d"
                .byte 0
# ---------------------------------------------------------------------------
                call    sub_4D8B0
                addo    1, r11, r11
                ldob    0xD(g3), r14
                addi    1, r14, r15
                stob    r15, 0xD(g3)
                addo    0x1F, 1, r13
                addi    r13, r10, r10
                cmpobl  r11, r8, loc_4030C
loc_403D8:                              # CODE XREF: ROM:000402E4↑j
                ret
# ---------------------------------------------------------------------------
DEBUG_EN_COMMAND:                       # DATA XREF: ROM:0003FE58↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x14120A26
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     DEBUG_EN_COMMAND_list, r15
                st      r15, 0x40(g3)
                mov     1, r15
                stib    r15, 0x44(g3)
                mov     2, r15
                stib    r15, 0xF(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
dword_4042C:    .long 0xA4031010        # DATA XREF: ROM:000951B4↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_flag, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40444:    .long 0xA4031010        # DATA XREF: ROM:000951B8↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_flag0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4045C:    .long 0xA4031010        # DATA XREF: ROM:000951BC↓o
# ---------------------------------------------------------------------------
                ldob    ec_flag, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40474:    .long 0xA4031010        # DATA XREF: ROM:000951C0↓o
# ---------------------------------------------------------------------------
                ldob    ec_flag0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4048C:    .long 0xA4031010        # DATA XREF: ROM:000951C4↓o
# ---------------------------------------------------------------------------
                ldob    ec_mot_kind, g0
# ---------------------------------------------------------------------------
                .long 0
                .long 0x3ADA8, 0
dword_404A4:    .long 0xA4031010        # DATA XREF: ROM:000951C8↓o
# ---------------------------------------------------------------------------
                ldob    ec_mot_kind0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_404BC:    .long 0xA4031010        # DATA XREF: ROM:000951CC↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_mot_kind, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_404D4:    .long 0xA4031010        # DATA XREF: ROM:000951D0↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_mot_kind0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_404EC:    .long 0xA4031010        # DATA XREF: ROM:000951D4↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_nage_flag, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40504:    .long 0xA4031010        # DATA XREF: ROM:000951D8↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_nage_flag0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4051C:    .long 0xA4031010        # DATA XREF: ROM:000951DC↓o
# ---------------------------------------------------------------------------
                ldob    ec_sankaku_flag, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40534:    .long 0xA4031010        # DATA XREF: ROM:000951E0↓o
# ---------------------------------------------------------------------------
                ldob    ec_sankaku_flag0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4054C:    .long 0xA4031010        # DATA XREF: ROM:000951E4↓o
# ---------------------------------------------------------------------------
                ldob    ec_mot2_kind, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40564:    .long 0xA4031010        # DATA XREF: ROM:000951E8↓o
# ---------------------------------------------------------------------------
                ldob    ec_mot2_kind0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4057C:    .long 0xA4031010        # DATA XREF: ROM:000951EC↓o
# ---------------------------------------------------------------------------
                ldob    ec_my_status, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40594:    .long 0xA4031010        # DATA XREF: ROM:000951F0↓o
# ---------------------------------------------------------------------------
                ldob    ec_my_status0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_405AC:    .long 0xA4031010        # DATA XREF: ROM:000951F4↓o
# ---------------------------------------------------------------------------
                ldob    ec_end, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_405C4:    .long 0xA4031010        # DATA XREF: ROM:000951F8↓o
# ---------------------------------------------------------------------------
                ldob    ec_push, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_405DC:    .long 0xA4031010        # DATA XREF: ROM:000951FC↓o
# ---------------------------------------------------------------------------
                ldob    ec_bu_guard, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_405F4:    .long 0xA4031010        # DATA XREF: ROM:00095200↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_status, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4060C:    .long 0xA4031010        # DATA XREF: ROM:00095204↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_status0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40624:    .long 0xA4031010        # DATA XREF: ROM:00095208↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_stagenum, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4063C:    .long 0xA4031010        # DATA XREF: ROM:0009520C↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_stagenum, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40654:    .long 0xA4031010        # DATA XREF: ROM:00095210↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_stagenum, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4066C:    .long 0xA4031010        # DATA XREF: ROM:00095214↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_roundnum, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40684:    .long 0xA4031010        # DATA XREF: ROM:00095218↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_roundnum, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4069C:    .long 0xA4031010        # DATA XREF: ROM:0009521C↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_roundnum, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_406B4:    .long 0xA4031010        # DATA XREF: ROM:00095220↓o
# ---------------------------------------------------------------------------
                ldob    ec_gacha, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_406CC:    .long 0xA4031010        # DATA XREF: ROM:00095224↓o
# ---------------------------------------------------------------------------
                ldob    ec_run, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_406E4:    .long 0xA4031010        # DATA XREF: ROM:00095228↓o
# ---------------------------------------------------------------------------
                ldob    ec_k_jump, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_406FC:    .long 0xA4031010        # DATA XREF: ROM:0009522C↓o
# ---------------------------------------------------------------------------
                ldob    ec_back_waza, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40714:    .long 0xA4031010        # DATA XREF: ROM:00095230↓o
# ---------------------------------------------------------------------------
                ldob    ec_furimuki, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4072C:    .long 0xA4031010        # DATA XREF: ROM:00095234↓o
# ---------------------------------------------------------------------------
                ldob    ec_f_dash, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40744:    .long 0xA4031010        # DATA XREF: ROM:00095238↓o
# ---------------------------------------------------------------------------
                ldob    ec_b_dash, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4075C:    .long 0xA4031010        # DATA XREF: ROM:0009523C↓o
# ---------------------------------------------------------------------------
                ldob    ec_attack, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40774:    .long 0xA4031010        # DATA XREF: ROM:00095240↓o
# ---------------------------------------------------------------------------
                ldob    ec_reset, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4078C:    .long 0xA4031010        # DATA XREF: ROM:00095244↓o
# ---------------------------------------------------------------------------
                ldob    ec_ifb_emode, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_407A4:    .long 0xA4031010        # DATA XREF: ROM:00095248↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_energy, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_407BC:    .long 0xA4031010        # DATA XREF: ROM:0009524C↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_energy, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_407D4:    .long 0xA4031010        # DATA XREF: ROM:00095250↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_energy, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_407EC:    .long 0xA4031010        # DATA XREF: ROM:00095254↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_en_energy, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40804:    .long 0xA4031010        # DATA XREF: ROM:00095258↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_en_energy, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4081C:    .long 0xA4031010        # DATA XREF: ROM:0009525C↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_en_energy, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40834:    .long 0xA4031010        # DATA XREF: ROM:00095260↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_game_timer, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4084C:    .long 0xA4031010        # DATA XREF: ROM:00095264↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_game_timer, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40864:    .long 0xA4031010        # DATA XREF: ROM:00095268↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_game_timer, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4087C:    .long 0xA4031010        # DATA XREF: ROM:0009526C↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_lastcoma, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40894:    .long 0xA4031010        # DATA XREF: ROM:00095270↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_lastcoma, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_408AC:    .long 0xA4031010        # DATA XREF: ROM:00095274↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_lastcoma, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_408C4:    .long 0xA4031010        # DATA XREF: ROM:00095278↓o
# ---------------------------------------------------------------------------
                ldob    ec_motd_kind, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_408DC:    .long 0xA4031010        # DATA XREF: ROM:0009527C↓o
# ---------------------------------------------------------------------------
                ldob    ec_motd_kind0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_408F4:    .long 0xA4031010        # DATA XREF: ROM:00095280↓o
# ---------------------------------------------------------------------------
                ldob    ec_mode_set, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4090C:    .long 0xA4031010        # DATA XREF: ROM:00095284↓o
# ---------------------------------------------------------------------------
                ldob    ec_ifb_emode_old, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40924:    .long 0xA4031010        # DATA XREF: ROM:00095288↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_oldenergy, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4093C:    .long 0xA4031010        # DATA XREF: ROM:0009528C↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_en_oldenergy, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40954:    .long 0xA4031010        # DATA XREF: ROM:00095290↓o
# ---------------------------------------------------------------------------
                ldob    ec_nage, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4096C:    .long 0xA4031010        # DATA XREF: ROM:00095294↓o
# ---------------------------------------------------------------------------
                ldob    ec_aite_flag, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40984:    .long 0xA4031010        # DATA XREF: ROM:00095298↓o
# ---------------------------------------------------------------------------
                ldob    ec_aite_flag0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_4099C:    .long 0xA4031010        # DATA XREF: ROM:0009529C↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_mot2_kind, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_409B4:    .long 0xA4031010        # DATA XREF: ROM:000952A0↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_mot2_kind0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_409CC:    .long 0xA4031010        # DATA XREF: ROM:000952A4↓o
# ---------------------------------------------------------------------------
                ldob    ec_fast_attack, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_409E4:    .long 0xA4031010        # DATA XREF: ROM:000952A8↓o
# ---------------------------------------------------------------------------
                ldob    ec_far_attack, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_409FC:    .long 0xA4031010        # DATA XREF: ROM:000952AC↓o
# ---------------------------------------------------------------------------
                ldob    ec_down_attack, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40A14:    .long 0xA4031010        # DATA XREF: ROM:000952B0↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_barrier, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40A2C:    .long 0xA4031010        # DATA XREF: ROM:000952B4↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_barrier, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40A44:    .long 0xA4031010        # DATA XREF: ROM:000952B8↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_barrier, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40A5C:    .long 0xA4031010        # DATA XREF: ROM:000952BC↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_en_barrier, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40A74:    .long 0xA4031010        # DATA XREF: ROM:000952C0↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_en_barrier, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40A8C:    .long 0xA4031010        # DATA XREF: ROM:000952C4↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_en_barrier, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40AA4:    .long 0xA4031010        # DATA XREF: ROM:000952C8↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_en_rob, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40ABC:    .long 0xA4031010        # DATA XREF: ROM:000952CC↓o
# ---------------------------------------------------------------------------
                ldob    ec_ne_en_rob, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40AD4:    .long 0xA4031010        # DATA XREF: ROM:000952D0↓o
# ---------------------------------------------------------------------------
                ldob    ec_nage_sake, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40AEC:    .long 0xA4031010        # DATA XREF: ROM:000952D4↓o
# ---------------------------------------------------------------------------
                ldob    ec_k0_jump, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40B04:    .long 0xA4031010        # DATA XREF: ROM:000952D8↓o
# ---------------------------------------------------------------------------
                ldob    ec_k_jumpm, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40B1C:    .long 0xA4031010        # DATA XREF: ROM:000952DC↓o
# ---------------------------------------------------------------------------
                ldob    ec_k0_jumpm, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40B34:    .long 0xA4031010        # DATA XREF: ROM:000952E0↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_en_dist, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40B4C:    .long 0xA4031010        # DATA XREF: ROM:000952E4↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_en_dist, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40B64:    .long 0xA4031010        # DATA XREF: ROM:000952E8↓o
# ---------------------------------------------------------------------------
                ldob    ec_tobi_yoke, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40B7C:    .long 0xA4031010        # DATA XREF: ROM:000952EC↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_mem_ob, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40B94:    .long 0xA4031010        # DATA XREF: ROM:000952F0↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_mem_ob, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40BAC:    .long 0xA4031010        # DATA XREF: ROM:000952F4↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_mem_ob, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40BC4:    .long 0xA4031010        # DATA XREF: ROM:000952F8↓o
# ---------------------------------------------------------------------------
                ldob    ec_ne_mem_ob, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40BDC:    .long 0xA4031010        # DATA XREF: ROM:000952FC↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_mem_os, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40BF4:    .long 0xA4031010        # DATA XREF: ROM:00095300↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_mem_os, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40C0C:    .long 0xA4031010        # DATA XREF: ROM:00095304↓o
# ---------------------------------------------------------------------------
                ldob    ec_eq_mem_os, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40C24:    .long 0xA4031010        # DATA XREF: ROM:00095308↓o
# ---------------------------------------------------------------------------
                ldob    ec_ne_mem_os, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40C3C:    .long 0xA4031010        # DATA XREF: ROM:0009530C↓o
# ---------------------------------------------------------------------------
                ldob    ec_run_stop, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40C54:    .long 0xA4031010        # DATA XREF: ROM:00095310↓o
# ---------------------------------------------------------------------------
                ldob    ec_run_waza, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40C6C:    .long 0xA4031010        # DATA XREF: ROM:00095314↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_mode, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40C84:    .long 0xA4031010        # DATA XREF: ROM:00095318↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_mode0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40C9C:    .long 0xA4031010        # DATA XREF: ROM:0009531C↓o
# ---------------------------------------------------------------------------
                ldob    ec_jump, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40CB4:    .long 0xA4031010        # DATA XREF: ROM:00095320↓o
# ---------------------------------------------------------------------------
                ldob    ec_res_enmodekeep, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40CCC:    .long 0xA4031010        # DATA XREF: ROM:00095324↓o
# ---------------------------------------------------------------------------
                ldob    ec_back_waza2, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40CE4:    .long 0xA4031010        # DATA XREF: ROM:00095328↓o
# ---------------------------------------------------------------------------
                ldob    ec_tmrand_jump, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40CFC:    .long 0xA4031010        # DATA XREF: ROM:0009532C↓o
# ---------------------------------------------------------------------------
                ldob    ec_how_to_mode_send, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40D14:    .long 0xA4031010        # DATA XREF: ROM:00095330↓o
# ---------------------------------------------------------------------------
                ldob    ec_yoke, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40D2C:    .long 0xA4031010        # DATA XREF: ROM:00095334↓o
# ---------------------------------------------------------------------------
                ldob    ec_run_end, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40D44:    .long 0xA4031010        # DATA XREF: ROM:00095338↓o
# ---------------------------------------------------------------------------
                ldob    ec_aite_en_flag, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40D5C:    .long 0xA4031010        # DATA XREF: ROM:0009533C↓o
# ---------------------------------------------------------------------------
                ldob    ec_aite_en_flag0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40D74:    .long 0xA4031010        # DATA XREF: ROM:00095340↓o
# ---------------------------------------------------------------------------
                ldob    ec_reset_next, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40D8C:    .long 0xA4031010        # DATA XREF: ROM:00095344↓o
# ---------------------------------------------------------------------------
                ldob    ec_set_waza, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40DA4:    .long 0xA4031010        # DATA XREF: ROM:00095348↓o
# ---------------------------------------------------------------------------
                ldob    ec_set_level, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40DBC:    .long 0xA4031010        # DATA XREF: ROM:0009534C↓o
# ---------------------------------------------------------------------------
                ldob    ec_reset_stick_next, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40DD4:    .long 0xA4031010        # DATA XREF: ROM:00095350↓o
# ---------------------------------------------------------------------------
                ldob    ec_mem_set_ob, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40DEC:    .long 0xA4031010        # DATA XREF: ROM:00095354↓o
# ---------------------------------------------------------------------------
                ldob    ec_mem_set_os, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40E04:    .long 0xA4031010        # DATA XREF: ROM:00095358↓o
# ---------------------------------------------------------------------------
                ldob    ec_mem_mem_ob, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40E1C:    .long 0xA4031010        # DATA XREF: ROM:0009535C↓o
# ---------------------------------------------------------------------------
                ldob    ec_mem_mem_os, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40E34:    .long 0xA4031010        # DATA XREF: ROM:00095360↓o
# ---------------------------------------------------------------------------
                ldob    ec_how_to_d, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40E4C:    .long 0xA4031010        # DATA XREF: ROM:00095364↓o
# ---------------------------------------------------------------------------
                ldob    ec_how_to_d0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40E64:    .long 0xA4031010        # DATA XREF: ROM:00095368↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_how_to_d, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40E7C:    .long 0xA4031010        # DATA XREF: ROM:0009536C↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_how_to_d0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40E94:    .long 0xA4031010        # DATA XREF: ROM:00095370↓o
# ---------------------------------------------------------------------------
                ldob    ec_how_to_guard_send, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40EAC:    .long 0xA4031010        # DATA XREF: ROM:00095374↓o
# ---------------------------------------------------------------------------
                ldob    ec_air_combo_chk, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40EC4:    .long 0xA4031010        # DATA XREF: ROM:00095378↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_tedc, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40EDC:    .long 0xA4031010        # DATA XREF: ROM:0009537C↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_tedc, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40EF4:    .long 0xA4031010        # DATA XREF: ROM:00095380↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_land_time, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40F0C:    .long 0xA4031010        # DATA XREF: ROM:00095384↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_land_time, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40F24:    .long 0xA4031010        # DATA XREF: ROM:00095388↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_en_land_time, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40F3C:    .long 0xA4031010        # DATA XREF: ROM:0009538C↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_en_land_time, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40F54:    .long 0xA4031010        # DATA XREF: ROM:00095390↓o
# ---------------------------------------------------------------------------
                ldob    ec_taikuu_waza, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40F6C:    .long 0xA4031010        # DATA XREF: ROM:00095394↓o
# ---------------------------------------------------------------------------
                ldob    ec_rand_set, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40F84:    .long 0xA4031010        # DATA XREF: ROM:00095398↓o
# ---------------------------------------------------------------------------
                ldob    ec_front_walk, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40F9C:    .long 0xA4031010        # DATA XREF: ROM:0009539C↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_en_lastmain, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40FB4:    .long 0xA4031010        # DATA XREF: ROM:000953A0↓o
# ---------------------------------------------------------------------------
                ldob    ec_ge_en_lastmain, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40FCC:    .long 0xA4031010        # DATA XREF: ROM:000953A4↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_motd_kind, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40FE4:    .long 0xA4031010        # DATA XREF: ROM:000953A8↓o
# ---------------------------------------------------------------------------
                ldob    ec_en_motd_kind0, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_40FFC:    .long 0xA4031010        # DATA XREF: ROM:000953AC↓o
# ---------------------------------------------------------------------------
                ldob    ec_ura, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
dword_41014:    .long 0xA4031010        # DATA XREF: ROM:000953B0↓o
# ---------------------------------------------------------------------------
                ldob    ec_le_eachang, g0
# ---------------------------------------------------------------------------
                .long 0
                .long list_En_debug
                .long 0
# ---------------------------------------------------------------------------
DEBUG_UNUSED_MENU_0:                    # The 8 bytes following this address are flags for the debug window:
                balx    setup_debug_menu_window, r14
# ---------------------------------------------------------------------------
                .long 0x8200A04
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_410F8, r15
                st      r15, 0x28(g3)
                lda     loc_4106C, r15
                st      r15, 0x24(g3)
                lda     0x50C000, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_4106C:                              # DATA XREF: ROM:00041048↑o
                ld      0x40(g3), r10
                mov     0, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                ldob    0xB(g3), r9
loc_41084:                              # CODE XREF: ROM:000410F0↓j
                lda     TEXTURE_BUFFER, g1
                mov     r10, g0
                mov     8, g2
                call    sub_4EF24
                addo    0x1F, 0x1B, r15
                stib    r15, (g1)
                addo    1, g1, g1
                mov     0, r8
loc_410A8:                              # CODE XREF: ROM:000410CC↓j
                ldob    (r10)[r8], g0
                lda     0x30000002, g2
                call    sub_4EF24
                cmpinco 7, r8, r8
                be      loc_410D0
                addo    0x1F, 1, r15
                stib    r15, (g1)
                addo    1, g1, g1
                b       loc_410A8
# ---------------------------------------------------------------------------
loc_410D0:                              # CODE XREF: ROM:000410BC↑j
                lda     TEXTURE_BUFFER, g0
                call    sub_4D8B0
                addo    r8, r10, r10
                ldob    0xD(g3), r14
                addi    1, r14, r15
                stob    r15, 0xD(g3)
                cmpdeco 1, r9, r9
                bl      loc_41084
                ret
# ---------------------------------------------------------------------------
loc_410F8:                              # DATA XREF: ROM:0004103C↑o
                ld      0x40(g3), r10
                mov     8, r7
                ld      INTERUPT_FLAGS_HELD, r8
                bbc     0xD, r8, loc_4111C
                subo    r7, r10, r10
loc_41110:                              # DATA XREF: ROM:00039538↑o
                shlo    0x14, 5, r3
                cmpobge r10, r3, loc_4111C
                mov     r3, r10
loc_4111C:                              # CODE XREF: ROM:00041108↑j
                bbc     0xC, r8, loc_41124
                addo    r7, r10, r10
loc_41124:                              # CODE XREF: ROM:loc_4111C↑j
                st      r10, 0x40(g3)
                ret
# ---------------------------------------------------------------------------
DEBUG_CELL_DISP:                        # DATA XREF: ROM:loc_40000↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .byte 4, 0x12, 0x15, 8, 0, 0, 0, 0# debug_window_flags
# ---------------------------------------------------------------------------
                lda     loc_411FC, r15
                st      r15, 0x28(g3)
                lda     loc_41168, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_41168:                              # DATA XREF: ROM:00041148↑o
                ld      0x40(g3), r10
                mov     0, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                ldob    0xB(g3), r9
                mov     8, r9
loc_41184:                              # CODE XREF: ROM:000411F4↓j
                lda     TEXTURE_BUFFER, g1
                mov     r10, g0
                mov     4, g2
                call    sub_4EF24
                subo    g0, g1, r3
                call    sub_4D8B0
                addo    1, r3, r3
                ldob    0xC(g3), r14
                addi    r3, r14, r15
                stob    r15, 0xC(g3)
                lda     TEXTURE_BUFFER, g0
                mov     0x10, g1
                mov     1, g2
                mov     0, r8
loc_411C4:                              # CODE XREF: ROM:000411D0↓j
                lda     (r10)[r8], r3
                stos    r3, (g0)[r8*2]
                addo    1, r8, r8
                cmpobg  g1, r8, loc_411C4
                call    uk_texture_data_thing
                lda     (r10)[g1], r10
                mov     0, r15
                stib    r15, 0xC(g3)
                ldob    0xD(g3), r14
                addi    1, r14, r15
                stob    r15, 0xD(g3)
                cmpdeco 1, r9, r9
                bl      loc_41184
                ret
# ---------------------------------------------------------------------------
loc_411FC:                              # DATA XREF: ROM:0004113C↑o
                ld      0x40(g3), r10
                mov     0x10, r7
                ld      INTERUPT_FLAGS_HELD, r8
                bbc     0xD, r8, loc_41218
                cmpobe  0, r10, loc_41218
                subo    r7, r10, r10
loc_41218:                              # CODE XREF: ROM:0004120C↑j
                bbc     0xC, r8, loc_41220
                addo    r7, r10, r10
loc_41220:                              # CODE XREF: ROM:loc_41218↑j
                st      r10, 0x40(g3)
                ret
# ---------------------------------------------------------------------------
DEBUG_UNIT0:                            # DATA XREF: ROM:0003FF10↑o
                ld      fa_rob0, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .byte 4, 0xA, 0x14, 0x10, 0, 0, 0, 0# debug_window_flags
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_UNIT_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
DEBUG_UNIT1:                            # DATA XREF: ROM:0003FF2C↑o
                ld      fa_rob1, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .byte 0x21, 0xA, 0x14, 0x10, 0, 0, 0, 0# debug_window_flags
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_UNIT_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_unit_hara:   .long 0x6667011F        # DATA XREF: ROM:000953B8↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbHara:        .asciz "db_hara"
db_unit_mune:   .long 0x6667011F        # DATA XREF: ROM:000953BC↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x10000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbMune:        .asciz "db_mune"
db_unit_kao:    .long 0x6667011F        # DATA XREF: ROM:000953C0↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x20000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbKao:         .asciz "db_kao"
                .byte 0
db_unit_kata_r: .long 0x6667011F        # DATA XREF: ROM:000953C4↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x30000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbKataR:       .asciz "db_kata_r"
                .short 0
db_unit_ude_r:  .long 0x6667011F        # DATA XREF: ROM:000953C8↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x40000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbUdeR:        .asciz "db_ude_r"
                .fill 3, 1, 0
db_unit_te_r:   .long 0x6667011F        # DATA XREF: ROM:000953CC↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x50000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbTeR:         .asciz "db_te_r"
db_unit_kata_l: .long 0x6667011F        # DATA XREF: ROM:000953D0↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x60000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbKataL:       .asciz "db_kata_l"
                .short 0
db_unit_ude_l:  .long 0x6667011F        # DATA XREF: ROM:000953D4↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x70000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbUdeL:        .asciz "db_ude_l"
                .fill 3, 1, 0
db_unit_te_l:   .long 0x6667011F        # DATA XREF: ROM:000953D8↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x80000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbTeL:         .asciz "db_te_l"
db_unit_kosi:   .long 0x6667011F        # DATA XREF: ROM:000953DC↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x90000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbKosi:        .asciz "db_kosi"
db_unit_momo_r: .long 0x6667011F        # DATA XREF: ROM:000953E0↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0xA0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbMomoR:       .asciz "db_momo_r"
                .short 0
db_unit_hiza_r: .long 0x6667011F        # DATA XREF: ROM:000953E4↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0xB0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbHizaR:       .asciz "db_hiza_r"
                .short 0
db_unit_asi_r:  .long 0x6667011F        # DATA XREF: ROM:000953E8↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0xC0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbAsiR:        .asciz "db_asi_r"
                .fill 3, 1, 0
db_unit_momo_l: .long 0x6667011F        # DATA XREF: ROM:000953EC↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0xD0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbMomoL:       .asciz "db_momo_l"
                .short 0
db_unit_hiza_l: .long 0x6667011F        # DATA XREF: ROM:000953F0↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0xE0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbHizaL:       .asciz "db_hiza_l"
                .short 0
db_unit_asi_l:  .long 0x6667011F        # DATA XREF: ROM:000953F4↓o
# ---------------------------------------------------------------------------
                ld      0x124C(g7), g0
# ---------------------------------------------------------------------------
                .long 0xF0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDbAsiL:        .asciz "db_asi_l"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
DEBUG_COLI_POS0:                        # DATA XREF: ROM:0003FF88↑o
                lda     0x506000, g5
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .byte 4, 0xA, 0x14, 0x20, 0, 0, 0, 0# debug_window_flags
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_COLI_POS_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
DEBUG_COLI_POS1:                        # DATA XREF: ROM:0003FFA4↑o
                lda     pos_00_x, g5
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .byte 0x1E, 0xA, 0x14, 0x20, 0, 0, 0, 0# debug_window_flags
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_COLI_POS_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_coli_pos_00_x:.long 0x23100          # DATA XREF: ROM:000953FC↓o
# ---------------------------------------------------------------------------
                ld      0x0(g5), g0     # g0 = 0x506200
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos00X:        .asciz "pos_00_x"
                .fill 3, 1, 0
db_coli_pos_00_y:.long 0x23100          # DATA XREF: ROM:00095400↓o
# ---------------------------------------------------------------------------
                ld      4(g5), g0       # g0 = pos_00_x+0x04
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos00Y:        .asciz "pos_00_y"
                .byte 0
                .short 0
db_coli_pos_00_z:.long 0x23100          # DATA XREF: ROM:00095404↓o
# ---------------------------------------------------------------------------
                ld      8(g5), g0       # g0 = pos_00_x+0x08
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos00Z:        .asciz "pos_00_z"
                .byte 0
                .short 0
db_coli_pos_01_x:.long 0x23100          # DATA XREF: ROM:00095408↓o
# ---------------------------------------------------------------------------
                ld      0x10(g5), g0    # g0 = pos_00_x+0x10
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos01X:        .asciz "pos_01_x"
                .fill 3, 1, 0
db_coli_pos_01_y:.long 0x23100          # DATA XREF: ROM:0009540C↓o
# ---------------------------------------------------------------------------
                ld      0x14(g5), g0    # g0 = pos_00_x+0x14
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos01Y:        .asciz "pos_01_y"
                .fill 3, 1, 0
db_coli_pos_01_z:.long 0x23100          # DATA XREF: ROM:00095410↓o
# ---------------------------------------------------------------------------
                ld      0x18(g5), g0    # g0 = pos_00_x+0x18
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos01Z:        .asciz "pos_01_z"
                .fill 2, 1, 0
                .byte 0
db_coli_pos_02_x:.long 0x23100          # DATA XREF: ROM:00095414↓o
# ---------------------------------------------------------------------------
                ld      0x20(g5), g0    # g0 = pos_00_x+0x20
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos02X:        .asciz "pos_02_x"
                .fill 3, 1, 0
db_coli_pos_02_y:.long 0x23100          # DATA XREF: ROM:00095418↓o
# ---------------------------------------------------------------------------
                ld      0x24(g5), g0    # g0 = pos_00_x+0x24
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos02Y:        .asciz "pos_02_y"
                .fill 3, 1, 0
db_coli_pos_02_z:.long 0x23100          # DATA XREF: ROM:0009541C↓o
# ---------------------------------------------------------------------------
                ld      0x28(g5), g0    # g0 = pos_00_x+0x28
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos02Z:        .asciz "pos_02_z"
                .fill 3, 1, 0
db_coli_pos_03_x:.long 0x23100          # DATA XREF: ROM:00095420↓o
# ---------------------------------------------------------------------------
                ld      0x30(g5), g0    # g0 = pos_00_x+0x30
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos03X:        .asciz "pos_03_x"
                .fill 3, 1, 0
db_coli_pos_03_y:.long 0x23100          # DATA XREF: ROM:00095424↓o
# ---------------------------------------------------------------------------
                ld      0x34(g5), g0    # g0 = pos_00_x+0x34
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos03Y:        .asciz "pos_03_y"
                .fill 3, 1, 0
db_coli_pos_03_z:.long 0x23100          # DATA XREF: ROM:00095428↓o
# ---------------------------------------------------------------------------
                ld      0x38(g5), g0    # g0 = pos_00_x+0x38
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos03Z:        .asciz "pos_03_z"
                .fill 2, 1, 0
                .byte 0
db_coli_pos_04_x:.long 0x23100          # DATA XREF: ROM:0009542C↓o
# ---------------------------------------------------------------------------
                ld      0x40(g5), g0    # g0 = pos_00_x+0x40
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos04X:        .asciz "pos_04_x"
                .fill 3, 1, 0
db_coli_pos_04_y:.long 0x23100          # DATA XREF: ROM:00095430↓o
# ---------------------------------------------------------------------------
                ld      0x44(g5), g0    # g0 = pos_00_x+0x44
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos04Y:        .asciz "pos_04_y"
                .fill 3, 1, 0
db_coli_pos_04_z:.long 0x23100          # DATA XREF: ROM:00095434↓o
# ---------------------------------------------------------------------------
                ld      0x48(g5), g0    # g0 = pos_00_x+0x48
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos04Z:        .asciz "pos_04_z"
                .fill 3, 1, 0
db_coli_pos_05_x:.long 0x23100          # DATA XREF: ROM:00095438↓o
# ---------------------------------------------------------------------------
                ld      0x50(g5), g0    # g0 = pos_00_x+0x50
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos05X:        .asciz "pos_05_x"
                .fill 3, 1, 0
db_coli_pos_05_y:.long 0x23100          # DATA XREF: ROM:0009543C↓o
# ---------------------------------------------------------------------------
                ld      0x54(g5), g0    # g0 = pos_00_x+0x54
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos05Y:        .asciz "pos_05_y"
                .fill 3, 1, 0
db_coli_pos_05_z:.long 0x23100          # DATA XREF: ROM:00095440↓o
# ---------------------------------------------------------------------------
                ld      0x58(g5), g0    # g0 = pos_00_x+0x58
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos05Z:        .asciz "pos_05_z"
                .fill 3, 1, 0
db_coli_pos_06_x:.long 0x23100          # DATA XREF: ROM:00095444↓o
# ---------------------------------------------------------------------------
                ld      0x60(g5), g0    # g0 = pos_00_x+0x60
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos06X:        .asciz "pos_06_x"
                .fill 3, 1, 0
db_coli_pos_06_y:.long 0x23100          # DATA XREF: ROM:00095448↓o
# ---------------------------------------------------------------------------
                ld      0x64(g5), g0    # g0 = pos_00_x+0x64
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos06Y:        .asciz "pos_06_y"
                .fill 3, 1, 0
db_coli_pos_06_z:.long 0x23100          # DATA XREF: ROM:0009544C↓o
# ---------------------------------------------------------------------------
                ld      0x68(g5), g0    # g0 = pos_00_x+0x68
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos06Z:        .asciz "pos_06_z"
                .fill 3, 1, 0
db_coli_pos_07_x:.long 0x23100          # DATA XREF: ROM:00095450↓o
# ---------------------------------------------------------------------------
                ld      0x70(g5), g0    # g0 = pos_00_x+0x70
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos07X:        .asciz "pos_07_x"
                .fill 3, 1, 0
db_coli_pos_07_y:.long 0x23100          # DATA XREF: ROM:00095454↓o
# ---------------------------------------------------------------------------
                ld      0x74(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos07Y:        .asciz "pos_07_y"
                .fill 3, 1, 0
db_coli_pos_07_z:.long 0x23100          # DATA XREF: ROM:00095458↓o
# ---------------------------------------------------------------------------
                ld      0x78(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos07Z:        .asciz "pos_07_z"
                .fill 3, 1, 0
db_coli_pos_08_x:.long 0x23100          # DATA XREF: ROM:0009545C↓o
# ---------------------------------------------------------------------------
                ld      0x80(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos08X:        .asciz "pos_08_x"
                .fill 3, 1, 0
db_coli_pos_08_y:.long 0x23100          # DATA XREF: ROM:00095460↓o
# ---------------------------------------------------------------------------
                ld      0x84(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos08Y:        .asciz "pos_08_y"
                .fill 3, 1, 0
db_coli_pos_08_z:.long 0x23100          # DATA XREF: ROM:00095464↓o
# ---------------------------------------------------------------------------
                ld      0x88(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos08Z:        .asciz "pos_08_z"
                .fill 3, 1, 0
db_coli_pos_09_x:.long 0x23100          # DATA XREF: ROM:00095468↓o
# ---------------------------------------------------------------------------
                ld      0x90(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos09X:        .asciz "pos_09_x"
                .fill 3, 1, 0
db_coli_pos_09_y:.long 0x23100          # DATA XREF: ROM:0009546C↓o
# ---------------------------------------------------------------------------
                ld      0x94(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos09Y:        .asciz "pos_09_y"
                .fill 3, 1, 0
db_coli_pos_09_z:.long 0x23100          # DATA XREF: ROM:00095470↓o
# ---------------------------------------------------------------------------
                ld      0x98(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos09Z:        .asciz "pos_09_z"
                .fill 3, 1, 0
db_coli_pos_10_x:.long 0x23100          # DATA XREF: ROM:00095474↓o
# ---------------------------------------------------------------------------
                ld      0xA0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos10X:        .asciz "pos_10_x"
                .fill 3, 1, 0
db_coli_pos_10_y:.long 0x23100          # DATA XREF: ROM:00095478↓o
# ---------------------------------------------------------------------------
                ld      0xA4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos10Y:        .asciz "pos_10_y"
                .fill 3, 1, 0
db_coli_pos_10_z:.long 0x23100          # DATA XREF: ROM:0009547C↓o
# ---------------------------------------------------------------------------
                ld      0xA8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos10Z:        .asciz "pos_10_z"
                .fill 3, 1, 0
db_coli_pos_11_x:.long 0x23100          # DATA XREF: ROM:00095480↓o
# ---------------------------------------------------------------------------
                ld      0xB0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos11X:        .asciz "pos_11_x"
                .fill 3, 1, 0
db_coli_pos_11_y:.long 0x23100          # DATA XREF: ROM:00095484↓o
# ---------------------------------------------------------------------------
                ld      0xB4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos11Y:        .asciz "pos_11_y"
                .fill 3, 1, 0
db_coli_pos_11_z:.long 0x23100          # DATA XREF: ROM:00095488↓o
# ---------------------------------------------------------------------------
                ld      0xB8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos11Z:        .asciz "pos_11_z"
                .fill 3, 1, 0
db_coli_pos_12_x:.long 0x23100          # DATA XREF: ROM:0009548C↓o
# ---------------------------------------------------------------------------
                ld      0xC0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos12X:        .asciz "pos_12_x"
                .fill 3, 1, 0
db_coli_pos_12_y:.long 0x23100          # DATA XREF: ROM:00095490↓o
# ---------------------------------------------------------------------------
                ld      0xC4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos12Y:        .asciz "pos_12_y"
                .fill 3, 1, 0
db_coli_pos_12_z:.long 0x23100          # DATA XREF: ROM:00095494↓o
# ---------------------------------------------------------------------------
                ld      0xC8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos12Z:        .asciz "pos_12_z"
                .fill 3, 1, 0
db_coli_pos_13_x:.long 0x23100          # DATA XREF: ROM:00095498↓o
# ---------------------------------------------------------------------------
                ld      0xD0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos13X:        .asciz "pos_13_x"
                .fill 3, 1, 0
db_coli_pos_13_y:.long 0x23100          # DATA XREF: ROM:0009549C↓o
# ---------------------------------------------------------------------------
                ld      0xD4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos13Y:        .asciz "pos_13_y"
                .fill 3, 1, 0
db_coli_pos_13_z:.long 0x23100          # DATA XREF: ROM:000954A0↓o
# ---------------------------------------------------------------------------
                ld      0xD8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos13Z:        .asciz "pos_13_z"
                .fill 3, 1, 0
db_coli_pos_14_x:.long 0x23100          # DATA XREF: ROM:000954A4↓o
# ---------------------------------------------------------------------------
                ld      0xE0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos14X:        .asciz "pos_14_x"
                .fill 3, 1, 0
db_coli_pos_14_y:.long 0x23100          # DATA XREF: ROM:000954A8↓o
# ---------------------------------------------------------------------------
                ld      0xE4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos14Y:        .asciz "pos_14_y"
                .fill 3, 1, 0
db_coli_pos_14_z:.long 0x23100          # DATA XREF: ROM:000954AC↓o
# ---------------------------------------------------------------------------
                ld      0xE8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos14Z:        .asciz "pos_14_z"
                .fill 3, 1, 0
db_coli_pos_15_x:.long 0x23100          # DATA XREF: ROM:000954B0↓o
# ---------------------------------------------------------------------------
                ld      0xF0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos15X:        .asciz "pos_15_x"
                .fill 3, 1, 0
db_coli_pos_15_y:.long 0x23100          # DATA XREF: ROM:000954B4↓o
# ---------------------------------------------------------------------------
                ld      0xF4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos15Y:        .asciz "pos_15_y"
                .fill 3, 1, 0
db_coli_pos_15_z:.long 0x23100          # DATA XREF: ROM:000954B8↓o
# ---------------------------------------------------------------------------
                ld      0xF8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos15Z:        .asciz "pos_15_z"
                .fill 3, 1, 0
db_coli_pos_16_x:.long 0x23100          # DATA XREF: ROM:000954BC↓o
# ---------------------------------------------------------------------------
                ld      0x100(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos16X:        .asciz "pos_16_x"
                .fill 3, 1, 0
db_coli_pos_16_y:.long 0x23100          # DATA XREF: ROM:000954C0↓o
# ---------------------------------------------------------------------------
                ld      0x104(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos16Y:        .asciz "pos_16_y"
                .fill 3, 1, 0
db_coli_pos_16_z:.long 0x23100          # DATA XREF: ROM:000954C4↓o
# ---------------------------------------------------------------------------
                ld      0x108(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos16Z:        .asciz "pos_16_z"
                .fill 3, 1, 0
db_coli_pos_17_x:.long 0x23100          # DATA XREF: ROM:000954C8↓o
# ---------------------------------------------------------------------------
                ld      0x110(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos17X:        .asciz "pos_17_x"
                .fill 3, 1, 0
db_coli_pos_17_y:.long 0x23100          # DATA XREF: ROM:000954CC↓o
# ---------------------------------------------------------------------------
                ld      0x114(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos17Y:        .asciz "pos_17_y"
                .fill 3, 1, 0
db_coli_pos_17_z:.long 0x23100          # DATA XREF: ROM:000954D0↓o
# ---------------------------------------------------------------------------
                ld      0x118(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos17Z:        .asciz "pos_17_z"
                .fill 3, 1, 0
db_coli_pos_18_x:.long 0x23100          # DATA XREF: ROM:000954D4↓o
# ---------------------------------------------------------------------------
                ld      0x120(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos18X:        .asciz "pos_18_x"
                .fill 3, 1, 0
db_coli_pos_18_y:.long 0x23100          # DATA XREF: ROM:000954D8↓o
# ---------------------------------------------------------------------------
                ld      0x124(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos18Y:        .asciz "pos_18_y"
                .fill 3, 1, 0
db_coli_pos_18_z:.long 0x23100          # DATA XREF: ROM:000954DC↓o
# ---------------------------------------------------------------------------
                ld      0x128(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos18Z:        .asciz "pos_18_z"
                .fill 3, 1, 0
db_coli_pos_19_x:.long 0x23100          # DATA XREF: ROM:000954E0↓o
# ---------------------------------------------------------------------------
                ld      0x130(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos19X:        .asciz "pos_19_x"
                .fill 3, 1, 0
db_coli_pos_19_y:.long 0x23100          # DATA XREF: ROM:000954E4↓o
# ---------------------------------------------------------------------------
                ld      0x134(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos19Y:        .asciz "pos_19_y"
                .fill 3, 1, 0
db_coli_pos_19_z:.long 0x23100          # DATA XREF: ROM:000954E8↓o
# ---------------------------------------------------------------------------
                ld      0x138(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos19Z:        .asciz "pos_19_z"
                .fill 3, 1, 0
db_coli_pos_20_x:.long 0x23100          # DATA XREF: ROM:000954EC↓o
# ---------------------------------------------------------------------------
                ld      0x140(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos20X:        .asciz "pos_20_x"
                .fill 3, 1, 0
db_coli_pos_20_y:.long 0x23100          # DATA XREF: ROM:000954F0↓o
# ---------------------------------------------------------------------------
                ld      0x144(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos20Y:        .asciz "pos_20_y"
                .fill 3, 1, 0
db_coli_pos_20_z:.long 0x23100          # DATA XREF: ROM:000954F4↓o
# ---------------------------------------------------------------------------
                ld      0x148(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos20Z:        .asciz "pos_20_z"
                .fill 3, 1, 0
db_coli_pos_21_x:.long 0x23100          # DATA XREF: ROM:000954F8↓o
# ---------------------------------------------------------------------------
                ld      0x150(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos21X:        .asciz "pos_21_x"
                .fill 3, 1, 0
db_coli_pos_21_y:.long 0x23100          # DATA XREF: ROM:000954FC↓o
# ---------------------------------------------------------------------------
                ld      0x154(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos21Y:        .asciz "pos_21_y"
                .fill 3, 1, 0
db_coli_pos_21_z:.long 0x23100          # DATA XREF: ROM:00095500↓o
# ---------------------------------------------------------------------------
                ld      0x158(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos21Z:        .asciz "pos_21_z"
                .fill 3, 1, 0
db_coli_pos_22_x:.long 0x23100          # DATA XREF: ROM:00095504↓o
# ---------------------------------------------------------------------------
                ld      0x160(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos22X:        .asciz "pos_22_x"
                .fill 3, 1, 0
db_coli_pos_22_y:.long 0x23100          # DATA XREF: ROM:00095508↓o
# ---------------------------------------------------------------------------
                ld      0x164(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos22Y:        .asciz "pos_22_y"
                .fill 3, 1, 0
db_coli_pos_22_z:.long 0x23100          # DATA XREF: ROM:0009550C↓o
# ---------------------------------------------------------------------------
                ld      0x168(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos22Z:        .asciz "pos_22_z"
                .fill 3, 1, 0
db_coli_pos_23_x:.long 0x23100          # DATA XREF: ROM:00095510↓o
# ---------------------------------------------------------------------------
                ld      0x170(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos23X:        .asciz "pos_23_x"
                .fill 3, 1, 0
db_coli_pos_23_y:.long 0x23100          # DATA XREF: ROM:00095514↓o
# ---------------------------------------------------------------------------
                ld      0x174(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos23Y:        .asciz "pos_23_y"
                .fill 3, 1, 0
db_coli_pos_23_z:.long 0x23100          # DATA XREF: ROM:00095518↓o
# ---------------------------------------------------------------------------
                ld      0x178(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos23Z:        .asciz "pos_23_z"
                .fill 3, 1, 0
db_coli_pos_24_x:.long 0x23100          # DATA XREF: ROM:0009551C↓o
# ---------------------------------------------------------------------------
                ld      0x180(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos24X:        .asciz "pos_24_x"
                .fill 3, 1, 0
db_coli_pos_24_y:.long 0x23100          # DATA XREF: ROM:00095520↓o
# ---------------------------------------------------------------------------
                ld      0x184(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos24Y:        .asciz "pos_24_y"
                .fill 3, 1, 0
db_coli_pos_24_z:.long 0x23100          # DATA XREF: ROM:00095524↓o
# ---------------------------------------------------------------------------
                ld      0x188(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos24Z:        .asciz "pos_24_z"
                .fill 3, 1, 0
db_coli_pos_25_x:.long 0x23100          # DATA XREF: ROM:00095528↓o
# ---------------------------------------------------------------------------
                ld      0x190(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos25X:        .asciz "pos_25_x"
                .fill 3, 1, 0
db_coli_pos_25_y:.long 0x23100          # DATA XREF: ROM:0009552C↓o
# ---------------------------------------------------------------------------
                ld      0x194(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos25Y:        .asciz "pos_25_y"
                .fill 3, 1, 0
db_coli_pos_25_z:.long 0x23100          # DATA XREF: ROM:00095530↓o
# ---------------------------------------------------------------------------
                ld      0x198(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos25Z:        .asciz "pos_25_z"
                .fill 3, 1, 0
db_coli_pos_26_x:.long 0x23100          # DATA XREF: ROM:00095534↓o
# ---------------------------------------------------------------------------
                ld      0x1A0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos26X:        .asciz "pos_26_x"
                .fill 3, 1, 0
db_coli_pos_26_y:.long 0x23100          # DATA XREF: ROM:00095538↓o
# ---------------------------------------------------------------------------
                ld      0x1A4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos26Y:        .asciz "pos_26_y"
                .fill 3, 1, 0
db_coli_pos_26_z:.long 0x23100          # DATA XREF: ROM:0009553C↓o
# ---------------------------------------------------------------------------
                ld      0x1A8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos26Z:        .asciz "pos_26_z"
                .fill 3, 1, 0
db_coli_pos_27_x:.long 0x23100          # DATA XREF: ROM:00095540↓o
# ---------------------------------------------------------------------------
                ld      0x1B0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos27X:        .asciz "pos_27_x"
                .fill 3, 1, 0
db_coli_pos_27_y:.long 0x23100          # DATA XREF: ROM:00095544↓o
# ---------------------------------------------------------------------------
                ld      0x1B4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos27Y:        .asciz "pos_27_y"
                .fill 3, 1, 0
db_coli_pos_27_z:.long 0x23100          # DATA XREF: ROM:00095548↓o
# ---------------------------------------------------------------------------
                ld      0x1B8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos27Z:        .asciz "pos_27_z"
                .fill 3, 1, 0
db_coli_pos_28_x:.long 0x23100          # DATA XREF: ROM:0009554C↓o
# ---------------------------------------------------------------------------
                ld      0x1C0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos28X:        .asciz "pos_28_x"
                .fill 3, 1, 0
db_coli_pos_28_y:.long 0x23100          # DATA XREF: ROM:00095550↓o
# ---------------------------------------------------------------------------
                ld      0x1C4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos28Y:        .asciz "pos_28_y"
                .fill 3, 1, 0
db_coli_pos_28_z:.long 0x23100          # DATA XREF: ROM:00095554↓o
# ---------------------------------------------------------------------------
                ld      0x1C8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos28Z:        .asciz "pos_28_z"
                .fill 3, 1, 0
db_coli_pos_29_x:.long 0x23100          # DATA XREF: ROM:00095558↓o
# ---------------------------------------------------------------------------
                ld      0x1D0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos29X:        .asciz "pos_29_x"
                .fill 3, 1, 0
db_coli_pos_29_y:.long 0x23100          # DATA XREF: ROM:0009555C↓o
# ---------------------------------------------------------------------------
                ld      0x1D4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos29Y:        .asciz "pos_29_y"
                .fill 3, 1, 0
db_coli_pos_29_z:.long 0x23100          # DATA XREF: ROM:00095560↓o
# ---------------------------------------------------------------------------
                ld      0x1D8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos29Z:        .asciz "pos_29_z"
                .fill 3, 1, 0
db_coli_pos_30_y:.long 0x23100          # DATA XREF: ROM:00095564↓o
# ---------------------------------------------------------------------------
                ld      0x1E4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos30Y:        .asciz "pos_30_y"
                .fill 3, 1, 0
db_coli_pos_30_z:.long 0x23100          # DATA XREF: ROM:00095568↓o
# ---------------------------------------------------------------------------
                ld      0x1E8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos30Z:        .asciz "pos_30_z"
                .fill 3, 1, 0
db_coli_pos_31_x:.long 0x23100          # DATA XREF: ROM:0009556C↓o
# ---------------------------------------------------------------------------
                ld      0x1F0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos31X:        .asciz "pos_31_x"
                .fill 3, 1, 0
db_coli_pos_31_y:.long 0x23100          # DATA XREF: ROM:00095570↓o
# ---------------------------------------------------------------------------
                ld      0x1F4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos31Y:        .asciz "pos_31_y"
                .fill 3, 1, 0
db_coli_pos_31_z:.long 0x23100          # DATA XREF: ROM:00095574↓o
# ---------------------------------------------------------------------------
                ld      0x1F8(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPos31Z:        .asciz "pos_31_z"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
DEBUG_COLI_BALL0_R:                     # DATA XREF: ROM:0003FF48↑o
                lda     0x50A204, g5
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x20140A04
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_COLI_BALL_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
DEBUG_COLI_BALL1_R:                     # DATA XREF: ROM:0003FF68↑o
                lda     cb_r_0, g5
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x20140A1E
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_COLI_BALL_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_cb_r_0:      .long 0x23360           # DATA XREF: ROM:0009557C↓o
# ---------------------------------------------------------------------------
                ld      0x0(g5), g0     # g0 = 0x50A28C
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR0:          .asciz "cb_r_0"
                .byte 0
db_cb_r_1:      .long 0x23360           # DATA XREF: ROM:00095580↓o
# ---------------------------------------------------------------------------
                ld      4(g5), g0       # g0 = cb_r_0+0x4
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR1:          .asciz "cb_r_1"
                .byte 0
db_cb_r_2:      .long 0x23360           # DATA XREF: ROM:00095584↓o
# ---------------------------------------------------------------------------
                ld      8(g5), g0       # g0 = cb_r_0+0x08
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR2:          .asciz "cb_r_2"
                .byte 0
db_cb_r_3:      .long 0x23360           # DATA XREF: ROM:00095588↓o
# ---------------------------------------------------------------------------
                ld      0xC(g5), g0     # g0 = cb_r_0+0x0C
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR3:          .asciz "cb_r_3"
                .byte 0
db_cb_r_4:      .long 0x23360           # DATA XREF: ROM:0009558C↓o
# ---------------------------------------------------------------------------
                ld      0x10(g5), g0    # g0 = cb_r_0+0x10
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR4:          .asciz "cb_r_4"
                .byte 0
db_cb_r_5:      .long 0x23360           # DATA XREF: ROM:00095590↓o
# ---------------------------------------------------------------------------
                ld      0x14(g5), g0    # g0 = cb_r_0+0x14
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR5:          .asciz "cb_r_5"
                .byte 0
db_cb_r_6:      .long 0x23360           # DATA XREF: ROM:00095594↓o
# ---------------------------------------------------------------------------
                ld      0x18(g5), g0    # g0 = cb_r_0+0x18
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR6:          .asciz "cb_r_6"
                .byte 0
db_cb_r_7:      .long 0x23360           # DATA XREF: ROM:00095598↓o
# ---------------------------------------------------------------------------
                ld      0x1C(g5), g0    # g0 = cb_r_0+0x1C
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR7:          .asciz "cb_r_7"
                .byte 0
db_cb_r_8:      .long 0x23360           # DATA XREF: ROM:0009559C↓o
# ---------------------------------------------------------------------------
                ld      0x20(g5), g0    # g0 = cb_r_0+0x20
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR8:          .asciz "cb_r_8"
                .byte 0
db_cb_r_9:      .long 0x23360           # DATA XREF: ROM:000955A0↓o
# ---------------------------------------------------------------------------
                ld      0x24(g5), g0    # g0 = cb_r_0+0x24
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR9:          .asciz "cb_r_9"
                .byte 0
db_cb_r_10:     .long 0x23360           # DATA XREF: ROM:000955A4↓o
# ---------------------------------------------------------------------------
                ld      0x28(g5), g0    # g0 = cb_r_0+0x28
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR10:         .asciz "cb_r_10"
db_cb_r_11:     .long 0x23360           # DATA XREF: ROM:000955A8↓o
# ---------------------------------------------------------------------------
                ld      0x2C(g5), g0    # g0 = cb_r_0+0x2C
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR11:         .asciz "cb_r_11"
db_cb_r_12:     .long 0x23360           # DATA XREF: ROM:000955AC↓o
# ---------------------------------------------------------------------------
                ld      0x30(g5), g0    # g0 = cb_r_0+0x30
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR12:         .asciz "cb_r_12"
db_cb_r_13:     .long 0x23360           # DATA XREF: ROM:000955B0↓o
# ---------------------------------------------------------------------------
                ld      0x34(g5), g0    # g0 = cb_r_0+0x34
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR13:         .asciz "cb_r_13"
db_cb_r_14:     .long 0x23360           # DATA XREF: ROM:000955B4↓o
# ---------------------------------------------------------------------------
                ld      0x38(g5), g0    # g0 = cb_r_0+0x38
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR14:         .asciz "cb_r_14"
db_cb_r_15:     .long 0x23360           # DATA XREF: ROM:000955B8↓o
# ---------------------------------------------------------------------------
                ld      0x3C(g5), g0    # g0 = cb_r_0+0x3C
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR15:         .asciz "cb_r_15"
db_cb_r_16:     .long 0x23360           # DATA XREF: ROM:000955BC↓o
# ---------------------------------------------------------------------------
                ld      0x40(g5), g0    # g0 = cb_r_0+0x40
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR16:         .asciz "cb_r_16"
db_cb_r_17:     .long 0x23360           # DATA XREF: ROM:000955C0↓o
# ---------------------------------------------------------------------------
                ld      0x44(g5), g0    # g0 = cb_r_0+0x44
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR17:         .asciz "cb_r_17"
db_cb_r_18:     .long 0x23360           # DATA XREF: ROM:000955C4↓o
# ---------------------------------------------------------------------------
                ld      0x48(g5), g0    # g0 = cb_r_0+0x48
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR18:         .asciz "cb_r_18"
db_cb_r_19:     .long 0x23360           # DATA XREF: ROM:000955C8↓o
# ---------------------------------------------------------------------------
                ld      0x4C(g5), g0    # g0 = cb_r_0+0x4C
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR19:         .asciz "cb_r_19"
db_cb_r_20:     .long 0x23360           # DATA XREF: ROM:000955CC↓o
# ---------------------------------------------------------------------------
                ld      0x50(g5), g0    # g0 = cb_r_0+0x50
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR20:         .asciz "cb_r_20"
db_cb_r_21:     .long 0x23360           # DATA XREF: ROM:000955D0↓o
# ---------------------------------------------------------------------------
                ld      0x54(g5), g0    # g0 = cb_r_0+0x54
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR21:         .asciz "cb_r_21"
db_cb_r_22:     .long 0x23360           # DATA XREF: ROM:000955D4↓o
# ---------------------------------------------------------------------------
                ld      0x58(g5), g0    # g0 = cb_r_0+0x58
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR22:         .asciz "cb_r_22"
db_cb_r_23:     .long 0x23360           # DATA XREF: ROM:000955D8↓o
# ---------------------------------------------------------------------------
                ld      0x5C(g5), g0    # g0 = cb_r_0+0x5C
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR23:         .asciz "cb_r_23"
db_cb_r_24:     .long 0x23360           # DATA XREF: ROM:000955DC↓o
# ---------------------------------------------------------------------------
                ld      0x60(g5), g0    # g0 = cb_r_0+0x60
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR24:         .asciz "cb_r_24"
db_cb_r_25:     .long 0x23360           # DATA XREF: ROM:000955E0↓o
# ---------------------------------------------------------------------------
                ld      0x64(g5), g0    # g0 = cb_r_0+0x64
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR25:         .asciz "cb_r_25"
db_cb_r_26:     .long 0x23360           # DATA XREF: ROM:000955E4↓o
# ---------------------------------------------------------------------------
                ld      0x68(g5), g0    # g0 = cb_r_0+0x68
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR26:         .asciz "cb_r_26"
db_cb_r_27:     .long 0x23360           # DATA XREF: ROM:000955E8↓o
# ---------------------------------------------------------------------------
                ld      0x6C(g5), g0    # g0 = cb_r_0+0x6C
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR27:         .asciz "cb_r_27"
db_cb_r_28:     .long 0x23360           # DATA XREF: ROM:000955EC↓o
# ---------------------------------------------------------------------------
                ld      0x70(g5), g0    # g0 = cb_r_0+0x70
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR28:         .asciz "cb_r_28"
db_cb_r_29:     .long 0x23360           # DATA XREF: ROM:000955F0↓o
# ---------------------------------------------------------------------------
                ld      0x74(g5), g0    # g0 = cb_r_0+0x74
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR29:         .asciz "cb_r_29"
db_cb_r_30:     .long 0x23360           # DATA XREF: ROM:000955F4↓o
# ---------------------------------------------------------------------------
                ld      0x78(g5), g0    # g0 = cb_r_0+0x78
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR30:         .asciz "cb_r_30"
db_cb_r_31:     .long 0x23360           # DATA XREF: ROM:000955F8↓o
# ---------------------------------------------------------------------------
                ld      0x7C(g5), g0    # g0 = cb_r_0+0x7C
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbR31:         .asciz "cb_r_31"
db_cb_r_R:      .long 0x23360           # DATA XREF: ROM:000955FC↓o
# ---------------------------------------------------------------------------
                ld      0x80(g5), g0    # g0 = cb_r_0+0x80
                ret
# ---------------------------------------------------------------------------
                .long 0x300
# ---------------------------------------------------------------------------
                lda     loc_42578, g0
# ---------------------------------------------------------------------------
aCbMulR:        .asciz "cb_mul_R"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_42578:                              # DATA XREF: ROM:00042164↑o
                lda     0x50A204, r3
                lda     cb_r_0, r11
                ld      fa_rob0, r8
                ld      fa_rob1, r9
                ld      0x1D0C(r8), r8
                ld      0x1D0C(r9), r9
                mov     0, r4
loc_425AC:                              # CODE XREF: ROM:000425CC↓j
                ld      (r3)[r4*4], r6
                ld      (r11)[r4*4], r12
                st      r6, 0xC(r8)[r4*16]
                st      r12, 0xC(r9)[r4*16]
                addo    1, r4, r4
                addo    0x1F, 1, r15
                cmpobne r15, r4, loc_425AC
                call    send_coli_ball_R
                ret
# =============== S U B R O U T I N E =======================================
sub_425D8:                              # CODE XREF: collision:loc_29428↑p
                ld      copro_adr, r10
                mov     0x10, r11
                lda     ofs_0, r12
loc_425EC:                              # CODE XREF: sub_425D8+68↓j
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x24004848, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r3, (r12)
                addo    4, r12, r12
                addo    1, r10, r10
                cmpdeco 1, r11, r11
                bl      loc_425EC
                ret
# End of function sub_425D8
# ---------------------------------------------------------------------------
DEBUG_COPRO_RAM_HEX:                    # DATA XREF: ROM:0003FFC0↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x14141204
                .long 0
# ---------------------------------------------------------------------------
loc_42658:                              # DATA XREF: MAIN_DATA:0268B569↓o
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_COPRO_RAM_HEX_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_copro_ram_hex_copro_adr:.long 0x10100 # DATA XREF: ROM:00095604↓o
# ---------------------------------------------------------------------------
                ld      copro_adr, g0
# ---------------------------------------------------------------------------
                .long 0
aCoproAdr:      .asciz "copro_adr"
                .short 0
db_copro_ram_hex_ofs_0:.long 0x80010000 # DATA XREF: ROM:00095608↓o
# ---------------------------------------------------------------------------
                ld      ofs_0, g0
# ---------------------------------------------------------------------------
                .long 0
aOfs0:          .asciz "ofs 0"
                .short 0
db_copro_ram_hex_ofs_1:.long 0x80010000 # DATA XREF: ROM:0009560C↓o
# ---------------------------------------------------------------------------
                ld      ofs_1, g0
# ---------------------------------------------------------------------------
                .long 0
aOfs1:          .asciz "ofs 1"
                .short 0
db_copro_ram_hex_ofs_2:.long 0x80010000 # DATA XREF: ROM:00095610↓o
# ---------------------------------------------------------------------------
                ld      ofs_2, g0
# ---------------------------------------------------------------------------
                .long 0
aOfs2:          .asciz "ofs 2"
                .short 0
db_copro_ram_hex_ofs_3:.long 0x80010000 # DATA XREF: ROM:00095614↓o
# ---------------------------------------------------------------------------
                ld      ofs_3, g0
# ---------------------------------------------------------------------------
                .long 0
aOfs3:          .asciz "ofs 3"
                .short 0
db_copro_ram_hex_ofs_4:.long 0x80010000 # DATA XREF: ROM:00095618↓o
# ---------------------------------------------------------------------------
                ld      ofs_4, g0
# ---------------------------------------------------------------------------
                .long 0
aOfs4:          .asciz "ofs 4"
                .short 0
db_copro_ram_hex_ofs_5:.long 0x80010000 # DATA XREF: ROM:0009561C↓o
# ---------------------------------------------------------------------------
                ld      ofs_5, g0
# ---------------------------------------------------------------------------
                .long 0
aOfs5:          .asciz "ofs 5"
                .short 0
db_copro_ram_hex_ofs_6:.long 0x80010000 # DATA XREF: ROM:00095620↓o
# ---------------------------------------------------------------------------
                ld      ofs_6, g0
# ---------------------------------------------------------------------------
                .long 0
aOfs6:          .asciz "ofs 6"
                .short 0
db_copro_ram_hex_ofs_7:.long 0x80010000 # DATA XREF: ROM:00095624↓o
# ---------------------------------------------------------------------------
                ld      ofs_7, g0
# ---------------------------------------------------------------------------
                .long 0
aOfs7:          .asciz "ofs 7"
                .short 0
db_copro_ram_hex_ofs_8:.long 0x80010000 # DATA XREF: ROM:00095628↓o
# ---------------------------------------------------------------------------
                ld      ofs_8, g0
# ---------------------------------------------------------------------------
                .long 0
aOfs8:          .asciz "ofs 8"
                .short 0
db_copro_ram_hex_ofs_9:.long 0x80010000 # DATA XREF: ROM:0009562C↓o
# ---------------------------------------------------------------------------
                ld      ofs_9, g0
# ---------------------------------------------------------------------------
                .long 0
aOfs9:          .asciz "ofs 9"
                .short 0
db_copro_ram_hex_ofs_a:.long 0x80010000 # DATA XREF: ROM:00095630↓o
# ---------------------------------------------------------------------------
                ld      ofs_a, g0
# ---------------------------------------------------------------------------
                .long 0
aOfsA:          .asciz "ofs a"
                .short 0
db_copro_ram_hex_ofs_b:.long 0x80010000 # DATA XREF: ROM:00095634↓o
# ---------------------------------------------------------------------------
                ld      ofs_b, g0
# ---------------------------------------------------------------------------
                .long 0
aOfsB:          .asciz "ofs b"
                .short 0
db_copro_ram_hex_ofs_c:.long 0x80010000 # DATA XREF: ROM:00095638↓o
# ---------------------------------------------------------------------------
                ld      ofs_c, g0
# ---------------------------------------------------------------------------
                .long 0
aOfsC:          .asciz "ofs c"
                .short 0
db_copro_ram_hex_ofs_d:.long 0x80010000 # DATA XREF: ROM:0009563C↓o
# ---------------------------------------------------------------------------
                ld      ofs_d, g0
# ---------------------------------------------------------------------------
                .long 0
aOfsD:          .asciz "ofs d"
                .short 0
db_copro_ram_hex_ofs_e:.long 0x80010000 # DATA XREF: ROM:00095640↓o
# ---------------------------------------------------------------------------
                ld      ofs_e, g0
# ---------------------------------------------------------------------------
                .long 0
aOfsE:          .asciz "ofs e"
                .short 0
db_copro_ram_hex_ofs_f:.long 0x80010000 # DATA XREF: ROM:00095644↓o
# ---------------------------------------------------------------------------
                ld      ofs_f, g0
# ---------------------------------------------------------------------------
                .long 0
aOfsF:          .asciz "ofs f"
                .short 0
# ---------------------------------------------------------------------------
DEBUG_COPRO_RAM_FLO:                    # DATA XREF: ROM:0003FFE0↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x14141204
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_COPRO_RAM_FLO_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_copro_ram_flo_copro_adr:.long 0x10100 # DATA XREF: ROM:0009564C↓o
# ---------------------------------------------------------------------------
                ld      copro_adr, g0
# ---------------------------------------------------------------------------
                .long 0
aCoproAdr_0:    .asciz "copro_adr"
                .short 0
db_copro_ram_flo_ofs_0:.long 0x80023000 # DATA XREF: ROM:00095650↓o
# ---------------------------------------------------------------------------
                ld      ofs_0, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfs0_0:        .asciz "ofs 0"
                .short 0
db_copro_ram_flo_ofs_1:.long 0x80023000 # DATA XREF: ROM:00095654↓o
# ---------------------------------------------------------------------------
                ld      ofs_1, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfs1_0:        .asciz "ofs 1"
                .short 0
db_copro_ram_flo_ofs_2:.long 0x80023000 # DATA XREF: ROM:00095658↓o
# ---------------------------------------------------------------------------
                ld      ofs_2, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfs2_0:        .asciz "ofs 2"
                .short 0
db_copro_ram_flo_ofs_3:.long 0x80023000 # DATA XREF: ROM:0009565C↓o
# ---------------------------------------------------------------------------
                ld      ofs_3, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfs3_0:        .asciz "ofs 3"
                .short 0
db_copro_ram_flo_ofs_4:.long 0x80023000 # DATA XREF: ROM:00095660↓o
# ---------------------------------------------------------------------------
                ld      ofs_4, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfs4_0:        .asciz "ofs 4"
                .short 0
db_copro_ram_flo_ofs_5:.long 0x80023000 # DATA XREF: ROM:00095664↓o
# ---------------------------------------------------------------------------
                ld      ofs_5, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfs5_0:        .asciz "ofs 5"
                .short 0
db_copro_ram_flo_ofs_6:.long 0x80023000 # DATA XREF: ROM:00095668↓o
# ---------------------------------------------------------------------------
                ld      ofs_6, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfs6_0:        .asciz "ofs 6"
                .short 0
db_copro_ram_flo_ofs_7:.long 0x80023000 # DATA XREF: ROM:0009566C↓o
# ---------------------------------------------------------------------------
                ld      ofs_7, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfs7_0:        .asciz "ofs 7"
                .short 0
db_copro_ram_flo_ofs_8:.long 0x80023000 # DATA XREF: ROM:00095670↓o
# ---------------------------------------------------------------------------
                ld      ofs_8, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfs8_0:        .asciz "ofs 8"
                .short 0
db_copro_ram_flo_ofs_9:.long 0x80023000 # DATA XREF: ROM:00095674↓o
# ---------------------------------------------------------------------------
                ld      ofs_9, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfs9_0:        .asciz "ofs 9"
                .short 0
db_copro_ram_flo_ofs_a:.long 0x80023000 # DATA XREF: ROM:00095678↓o
# ---------------------------------------------------------------------------
                ld      ofs_a, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfsA_0:        .asciz "ofs a"
                .short 0
db_copro_ram_flo_ofs_b:.long 0x80023000 # DATA XREF: ROM:0009567C↓o
# ---------------------------------------------------------------------------
                ld      ofs_b, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfsB_0:        .asciz "ofs b"
                .short 0
db_copro_ram_flo_ofs_c:.long 0x80023000 # DATA XREF: ROM:00095680↓o
# ---------------------------------------------------------------------------
                ld      ofs_c, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfsC_0:        .asciz "ofs c"
                .short 0
db_copro_ram_flo_ofs_d:.long 0x80023000 # DATA XREF: ROM:00095684↓o
# ---------------------------------------------------------------------------
                ld      ofs_d, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfsD_0:        .asciz "ofs d"
                .short 0
db_copro_ram_flo_ofs_e:.long 0x80023000 # DATA XREF: ROM:00095688↓o
# ---------------------------------------------------------------------------
                ld      ofs_e, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfsE_0:        .asciz "ofs e"
                .short 0
db_copro_ram_flo_ofs_f:.long 0x80023000 # DATA XREF: ROM:0009568C↓o
# ---------------------------------------------------------------------------
                ld      ofs_f, g0
# ---------------------------------------------------------------------------
                .long 0x500
aOfsF_0:        .asciz "ofs f"
                .short 0
# ---------------------------------------------------------------------------
DEBUG_PARTS0_INFO:                      # DATA XREF: ROM:0004001C↑o
                ld      fa_rob0, g7
                ld      mod_fa_effect, g6
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x14120A01
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     DEBUG_PARTS_INFO_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
DEBUG_PARTS1_INFO:                      # DATA XREF: ROM:00040038↑o
                ld      fa_rob1, g7
                ld      mod_fa_effect, g6
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x14120A26
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     DEBUG_PARTS_INFO_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_parts_flag:  .long 0x80010000        # DATA XREF: ROM:00095694↓o
# ---------------------------------------------------------------------------
                ld      0x7F0(g7), g0   # g0 = P1_PARTS+0x7F0 or P2_PARTS+0x7F0
                ret
# ---------------------------------------------------------------------------
                .long 0
aPartsFlag:     .asciz "parts_flag"
                .byte 0
db_brk_up_damage:.long 0x80000000       # DATA XREF: ROM:00095698↓o
# ---------------------------------------------------------------------------
                ld      0xAF0(g7), g0   # g0 = P1_PARTS+0xAF0 or P2_PARTS+0xAF0
                ret
# ---------------------------------------------------------------------------
                .long 0
aBrkUpDamage:   .asciz "brk_up_damage"
                .short 0
db_up_damage:   .long 0x80000000        # DATA XREF: ROM:0009569C↓o
# ---------------------------------------------------------------------------
                ld      0x1F74(g7), g0
# ---------------------------------------------------------------------------
                .long 0
aUpDamage:      .asciz "up_damage"   # g0 = P1_PARTS+0x1F74 or P2_PARTS+0x1F74
                .short 0
db_old_up_damage:.long 0x80000000       # DATA XREF: ROM:000956A0↓o
# ---------------------------------------------------------------------------
                ld      0x1F7C(g7), g0  # g0 = P1_PARTS+0x1F7C or P2_PARTS+0x1F7C
# ---------------------------------------------------------------------------
                .long 0
aOldUpDamage:   .asciz "old_up_damage"
                .short 0
db_brk_dn_damage:.long 0x80000000       # DATA XREF: ROM:000956A4↓o
# ---------------------------------------------------------------------------
                ld      0xAF4(g7), g0   # g0 = P1_PARTS+0xAF4 or P2_PARTS+0xAF4
                ret
# ---------------------------------------------------------------------------
                .long 0
aBrkDnDamage:   .asciz "brk_dn_damage"
                .short 0
dword_42B58:    .long 0x80000000        # DATA XREF: ROM:000956A8↓o
# ---------------------------------------------------------------------------
                ld      0x1F78(g7), g0  # g0 = P1_PARTS+0x1F78 or P2_PARTS+0x1F78
# ---------------------------------------------------------------------------
                .long 0
aDownDamage:    .asciz "down_damage"
dword_42B74:    .long 0x80000000        # DATA XREF: ROM:000956AC↓o
# ---------------------------------------------------------------------------
                ld      0x1F80(g7), g0  # g0 = P1_PARTS+0x1F80 or P2_PARTS+0x1F80
# ---------------------------------------------------------------------------
                .long 0
aOldDownDamag:  .asciz "old_down_damag"
                .byte 0
dword_42B94:    .long 0x80002000        # DATA XREF: ROM:000956B0↓o
# ---------------------------------------------------------------------------
                ldos    0x1F00(g7), g0  # g0 = P1_PARTS+0x1F00 or P2_PARTS+0x1F00
# ---------------------------------------------------------------------------
                .long 0
aDmgHara:       .asciz "dmg_hara"
                .fill 3, 1, 0
dword_42BB0:    .long 0x80002000        # DATA XREF: ROM:000956B4↓o
# ---------------------------------------------------------------------------
                ldos    0x1F02(g7), g0  # g0 = P1_PARTS+0x1F02 or P2_PARTS+0x1F02
# ---------------------------------------------------------------------------
                .long 0
aDmgMune:       .asciz "dmg_mune"
                .fill 3, 1, 0
dword_42BCC:    .long 0x80002000        # DATA XREF: ROM:000956B8↓o
# ---------------------------------------------------------------------------
                ldos    0x1F04(g7), g0  # g0 = P1_PARTS+0x1F04 or P2_PARTS+0x1F04
# ---------------------------------------------------------------------------
                .long 0
aDmgKao:        .asciz "dmg_kao"
dword_42BE4:    .long 0x80002000        # DATA XREF: ROM:000956BC↓o
# ---------------------------------------------------------------------------
                ldos    0x1F06(g7), g0  # g0 = P1_PARTS+0x1F06 or P2_PARTS+0x1F06
# ---------------------------------------------------------------------------
                .long 0
aDmgKatar:      .asciz "dmg_katar"
                .short 0
dword_42C00:    .long 0x80002000        # DATA XREF: ROM:000956C0↓o
# ---------------------------------------------------------------------------
                ldos    0x1F08(g7), g0  # g0 = P1_PARTS+0x1F08 or P2_PARTS+0x1F08
# ---------------------------------------------------------------------------
                .long 0
aDmgUder:       .asciz "dmg_uder"
                .fill 3, 1, 0
dword_42C1C:    .long 0x80002000        # DATA XREF: ROM:000956C4↓o
# ---------------------------------------------------------------------------
                ldos    0x1F0A(g7), g0  # g0 = P1_PARTS+0x1F0A or P2_PARTS+0x1F0A
# ---------------------------------------------------------------------------
                .long 0
aDmgTeR:        .asciz "dmg_te_r"
                .fill 3, 1, 0
dword_42C38:    .long 0x80002000        # DATA XREF: ROM:000956C8↓o
# ---------------------------------------------------------------------------
                ldos    0x1F0C(g7), g0  # g0 = P1_PARTS+0x1F0C or P2_PARTS+0x1F0C
# ---------------------------------------------------------------------------
                .long 0
aDmgKatal:      .asciz "dmg_katal"
                .short 0
dword_42C54:    .long 0x80002000        # DATA XREF: ROM:000956CC↓o
# ---------------------------------------------------------------------------
                ldos    0x1F0E(g7), g0  # g0 = P1_PARTS+0x1F0E or P2_PARTS+0x1F0E
# ---------------------------------------------------------------------------
                .long 0
aDmgUdeL:       .asciz "dmg_ude_l"
                .short 0
dword_42C70:    .long 0x80002000        # DATA XREF: ROM:000956D0↓o
# ---------------------------------------------------------------------------
                ldos    0x1F10(g7), g0  # g0 = P1_PARTS+0x1F10 or P2_PARTS+0x1F10
# ---------------------------------------------------------------------------
                .long 0
aDmgTeL:        .asciz "dmg_te_l"
                .fill 3, 1, 0
dword_42C8C:    .long 0x80002000        # DATA XREF: ROM:000956D4↓o
# ---------------------------------------------------------------------------
                ldos    0x1F12(g7), g0  # g0 = P1_PARTS+0x1F12 or P2_PARTS+0x1F12
# ---------------------------------------------------------------------------
                .long 0
aDmgKosi:       .asciz "dmg_kosi"
                .fill 3, 1, 0
dword_42CA8:    .long 0x80002000        # DATA XREF: ROM:000956D8↓o
# ---------------------------------------------------------------------------
                ldos    0x1F14(g7), g0  # g0 = P1_PARTS+0x1F14 or P2_PARTS+0x1F14
# ---------------------------------------------------------------------------
                .long 0
aDmgMomor:      .asciz "dmg_momor"
                .short 0
dword_42CC4:    .long 0x80002000        # DATA XREF: ROM:000956DC↓o
# ---------------------------------------------------------------------------
                ldos    0x1F16(g7), g0  # g0 = P1_PARTS+0x1F16 or P2_PARTS+0x1F16
# ---------------------------------------------------------------------------
                .long 0
aDmgHizar:      .asciz "dmg_hizar"
                .short 0
dword_42CE0:    .long 0x80002000        # DATA XREF: ROM:000956E0↓o
# ---------------------------------------------------------------------------
                ldos    0x1F18(g7), g0  # g0 = P1_PARTS+0x1F18 or P2_PARTS+0x1F18
# ---------------------------------------------------------------------------
                .long 0
aDmgAsi:        .asciz "dmg_asi_"
                .fill 3, 1, 0
dword_42CFC:    .long 0x80002000        # DATA XREF: ROM:000956E4↓o
# ---------------------------------------------------------------------------
                ldos    0x1F1A(g7), g0  # g0 = P1_PARTS+0x1F1A or P2_PARTS+0x1F1A
# ---------------------------------------------------------------------------
                .long 0
aDmgMomol:      .asciz "dmg_momol"
                .short 0
dword_42D18:    .long 0x80002000        # DATA XREF: ROM:000956E8↓o
# ---------------------------------------------------------------------------
                ldos    0x1F1C(g7), g0  # g0 = P1_PARTS+0x1F1C or P2_PARTS+0x1F1C
# ---------------------------------------------------------------------------
                .long 0
aDmgHizal:      .asciz "dmg_hizal"
                .short 0
dword_42D34:    .long 0x80002000        # DATA XREF: ROM:000956EC↓o
# ---------------------------------------------------------------------------
                ldos    0x1F1E(g7), g0  # g0 = P1_PARTS+0x1F1E or P2_PARTS+0x1F1E
# ---------------------------------------------------------------------------
                .long 0
aDmgAsil:       .asciz "dmg_asil"
                .fill 3, 1, 0
dword_42D50:    .long 0x80002000        # DATA XREF: ROM:000956F0↓o
# ---------------------------------------------------------------------------
                ldos    0x1F20(g7), g0  # g0 = P1_PARTS+0x1F20 or P2_PARTS+0x1F20
# ---------------------------------------------------------------------------
                .long 0
aArmHara:       .asciz "arm_hara"
                .fill 3, 1, 0
dword_42D6C:    .long 0x80002000        # DATA XREF: ROM:000956F4↓o
# ---------------------------------------------------------------------------
                ldos    0x1F22(g7), g0  # g0 = P1_PARTS+0x1F22 or P2_PARTS+0x1F22
# ---------------------------------------------------------------------------
                .long 0
aArmMune:       .asciz "arm_mune"
                .fill 3, 1, 0
dword_42D88:    .long 0x80002000        # DATA XREF: ROM:000956F8↓o
# ---------------------------------------------------------------------------
                ldos    0x1F24(g7), g0  # g0 = P1_PARTS+0x1F24 or P2_PARTS+0x1F24
# ---------------------------------------------------------------------------
                .long 0
aArmKao:        .asciz "arm_kao"
dword_42DA0:    .long 0x80002000        # DATA XREF: ROM:000956FC↓o
# ---------------------------------------------------------------------------
                ldos    0x1F26(g7), g0  # g0 = P1_PARTS+0x1F26 or P2_PARTS+0x1F26
# ---------------------------------------------------------------------------
                .long 0
aArmKatar:      .asciz "arm_katar"
                .short 0
dword_42DBC:    .long 0x80002000        # DATA XREF: ROM:00095700↓o
# ---------------------------------------------------------------------------
                ldos    0x1F28(g7), g0  # g0 = P1_PARTS+0x1F28 or P2_PARTS+0x1F28
# ---------------------------------------------------------------------------
                .long 0
aArmUder:       .asciz "arm_uder"
                .fill 3, 1, 0
dword_42DD8:    .long 0x80002000        # DATA XREF: ROM:00095704↓o
# ---------------------------------------------------------------------------
                ldos    0x1F2A(g7), g0  # g0 = P1_PARTS+0x1F2A or P2_PARTS+0x1F2A
# ---------------------------------------------------------------------------
                .long 0
aArmTeR:        .asciz "arm_te_r"
                .fill 3, 1, 0
dword_42DF4:    .long 0x80002000        # DATA XREF: ROM:00095708↓o
# ---------------------------------------------------------------------------
                ldos    0x1F2C(g7), g0  # g0 = P1_PARTS+0x1F2C or P2_PARTS+0x1F2C
# ---------------------------------------------------------------------------
                .long 0
aArmKatal:      .asciz "arm_katal"
                .short 0
dword_42E10:    .long 0x80002000        # DATA XREF: ROM:0009570C↓o
# ---------------------------------------------------------------------------
                ldos    0x1F2E(g7), g0  # g0 = P1_PARTS+0x1F2E or P2_PARTS+0x1F2E
# ---------------------------------------------------------------------------
                .long 0
aArmUdeL:       .asciz "arm_ude_l"
                .short 0
dword_42E2C:    .long 0x80002000        # DATA XREF: ROM:00095710↓o
# ---------------------------------------------------------------------------
                ldos    0x1F30(g7), g0  # g0 = P1_PARTS+0x1F30 or P2_PARTS+0x1F30
# ---------------------------------------------------------------------------
                .long 0
aArmTeL:        .asciz "arm_te_l"
                .fill 3, 1, 0
dword_42E48:    .long 0x80002000        # DATA XREF: ROM:00095714↓o
# ---------------------------------------------------------------------------
                ldos    0x1F32(g7), g0  # g0 = P1_PARTS+0x1F32 or P2_PARTS+0x1F32
# ---------------------------------------------------------------------------
                .long 0
aArmKosi:       .asciz "arm_kosi"
                .fill 3, 1, 0
dword_42E64:    .long 0x80002000        # DATA XREF: ROM:00095718↓o
# ---------------------------------------------------------------------------
                ldos    0x1F34(g7), g0  # g0 = P1_PARTS+0x1F34 or P2_PARTS+0x1F34
# ---------------------------------------------------------------------------
                .long 0
aArmMomor:      .asciz "arm_momor"
                .short 0
dword_42E80:    .long 0x80002000        # DATA XREF: ROM:0009571C↓o
# ---------------------------------------------------------------------------
                ldos    0x1F36(g7), g0  # g0 = P1_PARTS+0x1F36 or P2_PARTS+0x1F36
# ---------------------------------------------------------------------------
                .long 0
aArmHizar:      .asciz "arm_hizar"
                .short 0
dword_42E9C:    .long 0x80002000        # DATA XREF: ROM:00095720↓o
# ---------------------------------------------------------------------------
                ldos    0x1F38(g7), g0  # g0 = P1_PARTS+0x1F38 or P2_PARTS+0x1F38
# ---------------------------------------------------------------------------
                .long 0
aArmAsi:        .asciz "arm_asi_"
                .fill 3, 1, 0
dword_42EB8:    .long 0x80002000        # DATA XREF: ROM:00095724↓o
# ---------------------------------------------------------------------------
                ldos    0x1F3A(g7), g0  # g0 = P1_PARTS+0x1F3A or P2_PARTS+0x1F3A
# ---------------------------------------------------------------------------
                .long 0
aArmMomol:      .asciz "arm_momol"
                .short 0
dword_42ED4:    .long 0x80002000        # DATA XREF: ROM:00095728↓o
# ---------------------------------------------------------------------------
                ldos    0x1F3C(g7), g0  # g0 = P1_PARTS+0x1F3C or P2_PARTS+0x1F3C
# ---------------------------------------------------------------------------
                .long 0
aArmHizal:      .asciz "arm_hizal"
                .short 0
dword_42EF0:    .long 0x80002000        # DATA XREF: ROM:0009572C↓o
# ---------------------------------------------------------------------------
                ldos    0x1F3E(g7), g0  # g0 = P1_PARTS+0x1F3E or P2_PARTS+0x1F3E
# ---------------------------------------------------------------------------
                .long 0
aArmAsil:       .asciz "arm_asil"
                .fill 3, 1, 0
dword_42F0C:    .long 0x80001000        # DATA XREF: ROM:00095730↓o
# ---------------------------------------------------------------------------
                ldob    0x1F4C(g7), g0  # g0 = P1_PARTS+0x1F4C or P2_PARTS+0x1F4C
# ---------------------------------------------------------------------------
                .long 0
aPnumHara:      .asciz "pnum_hara"
                .short 0
dword_42F28:    .long 0x80001000        # DATA XREF: ROM:00095734↓o
# ---------------------------------------------------------------------------
                ldob    0x1F4D(g7), g0  # g0 = P1_PARTS+0x1F4D or P2_PARTS+0x1F4D
# ---------------------------------------------------------------------------
                .long 0
aPnumMune:      .asciz "pnum_mune"
                .short 0
dword_42F44:    .long 0x80001000        # DATA XREF: ROM:00095738↓o
# ---------------------------------------------------------------------------
                ldob    0x1F4E(g7), g0  # g0 = P1_PARTS+0x1F4E or P2_PARTS+0x1F4E
# ---------------------------------------------------------------------------
                .long 0
aPnumKao:       .asciz "pnum_kao"
                .fill 3, 1, 0
dword_42F60:    .long 0x80001000        # DATA XREF: ROM:0009573C↓o
# ---------------------------------------------------------------------------
                ldob    0x1F4F(g7), g0  # g0 = P1_PARTS+0x1F4F or P2_PARTS+0x1F4F
# ---------------------------------------------------------------------------
                .long 0
aPnumKatar:     .asciz "pnum_katar"
                .byte 0
dword_42F7C:    .long 0x80001000        # DATA XREF: ROM:00095740↓o
# ---------------------------------------------------------------------------
                ldob    0x1F50(g7), g0  # g0 = P1_PARTS+0x1F50 or P2_PARTS+0x1F50
# ---------------------------------------------------------------------------
                .long 0
aPnumUder:      .asciz "pnum_uder"
                .short 0
dword_42F98:    .long 0x80001000        # DATA XREF: ROM:00095744↓o
# ---------------------------------------------------------------------------
                ldob    0x1F51(g7), g0  # g0 = P1_PARTS+0x1F51 or P2_PARTS+0x1F51
# ---------------------------------------------------------------------------
                .long 0
aPnumTeR:       .asciz "pnum_te_r"
                .short 0
dword_42FB4:    .long 0x80001000        # DATA XREF: ROM:00095748↓o
# ---------------------------------------------------------------------------
                ldob    0x1F52(g7), g0  # g0 = P1_PARTS+0x1F52 or P2_PARTS+0x1F52
# ---------------------------------------------------------------------------
                .long 0
aPnumKatal:     .asciz "pnum_katal"
                .byte 0
dword_42FD0:    .long 0x80001000        # DATA XREF: ROM:0009574C↓o
# ---------------------------------------------------------------------------
                ldob    0x1F53(g7), g0  # g0 = P1_PARTS+0x1F53 or P2_PARTS+0x1F53
# ---------------------------------------------------------------------------
                .long 0
aPnumUdeL:      .asciz "pnum_ude_l"
                .byte 0
dword_42FEC:    .long 0x80001000        # DATA XREF: ROM:00095750↓o
# ---------------------------------------------------------------------------
                ldob    0x1F54(g7), g0  # g0 = P1_PARTS+0x1F54 or P2_PARTS+0x1F54
# ---------------------------------------------------------------------------
                .long 0
aPnumTeL:       .asciz "pnum_te_l"
                .short 0
dword_43008:    .long 0x80001000        # DATA XREF: ROM:00095754↓o
# ---------------------------------------------------------------------------
                ldob    0x1F55(g7), g0  # g0 = P1_PARTS+0x1F55 or P2_PARTS+0x1F55
# ---------------------------------------------------------------------------
                .long 0
aPnumKosi:      .asciz "pnum_kosi"
                .short 0
dword_43024:    .long 0x80001000        # DATA XREF: ROM:00095758↓o
# ---------------------------------------------------------------------------
                ldob    0x1F56(g7), g0  # g0 = P1_PARTS+0x1F56 or P2_PARTS+0x1F56
# ---------------------------------------------------------------------------
                .long 0
aPnumMomor:     .asciz "pnum_momor"
                .byte 0
dword_43040:    .long 0x80001000        # DATA XREF: ROM:0009575C↓o
# ---------------------------------------------------------------------------
                ldob    0x1F57(g7), g0  # g0 = P1_PARTS+0x1F57 or P2_PARTS+0x1F57
# ---------------------------------------------------------------------------
                .long 0
aPnumHizar:     .asciz "pnum_hizar"
                .byte 0
dword_4305C:    .long 0x80001000        # DATA XREF: ROM:00095760↓o
# ---------------------------------------------------------------------------
                ldob    0x1F58(g7), g0  # g0 = P1_PARTS+0x1F58 or P2_PARTS+0x1F58
# ---------------------------------------------------------------------------
                .long 0
aPnumAsi:       .asciz "pnum_asi_"
                .short 0
dword_43078:    .long 0x80001000        # DATA XREF: ROM:00095764↓o
# ---------------------------------------------------------------------------
                ldob    0x1F59(g7), g0  # g0 = P1_PARTS+0x1F59 or P2_PARTS+0x1F59
# ---------------------------------------------------------------------------
                .long 0
aPnumMomol:     .asciz "pnum_momol"
                .byte 0
dword_43094:    .long 0x80001000        # DATA XREF: ROM:00095768↓o
# ---------------------------------------------------------------------------
                ldob    0x1F5A(g7), g0  # g0 = P1_PARTS+0x1F5A or P2_PARTS+0x1F5A
# ---------------------------------------------------------------------------
                .long 0
aPnumHizal:     .asciz "pnum_hizal"
                .byte 0
dword_430B0:    .long 0x80001000        # DATA XREF: ROM:0009576C↓o
# ---------------------------------------------------------------------------
                ldob    0x1F5B(g7), g0  # g0 = P1_PARTS+0x1F5B or P2_PARTS+0x1F5B
# ---------------------------------------------------------------------------
                .long 0
aPnumAsil:      .asciz "pnum_asil"
                .short 0
# ---------------------------------------------------------------------------
DEBUG_ROB0_INFO:                        # DATA XREF: ROM:0003FE04↑o
                ld      fa_rob0, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xF120A01
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     DEBUG_ROB_INFO_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
DEBUG_ROB1_INFO:                        # DATA XREF: ROM:0003FE20↑o
                ld      fa_rob1, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xF120A26
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     DEBUG_ROB_INFO_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
rob_info_idnm:  .long 0x80001000        # DATA XREF: ROM:00095774↓o
# ---------------------------------------------------------------------------
                ldob    4(g7), g0       # g0 = P1_PARTS+0x7 or P2_PARTS+0x7
                ret
# ---------------------------------------------------------------------------
                .long 0
aIdnm:          .asciz "idnm"
                .fill 3, 1, 0
rob_info_command:.long 0x80010000       # DATA XREF: ROM:00095778↓o
# ---------------------------------------------------------------------------
                ld      0x194(g7), g0   # g0 = P1_PARTS+0x194 or P2_PARTS+0x194
                ret
# ---------------------------------------------------------------------------
                .long 0
aCommand:       .asciz "command"
rob_info_action:.long 0x80010000        # DATA XREF: ROM:0009577C↓o
# ---------------------------------------------------------------------------
                ld      0x19C(g7), g0   # g0 = P1_PARTS+0x19C or P2_PARTS+0x19C
                ret
# ---------------------------------------------------------------------------
                .float 0.0
aAction:        .asciz "action"
                .byte 0
rob_info_step:  .long 0x80001000        # DATA XREF: ROM:00095780↓o
# ---------------------------------------------------------------------------
                ldob    0x1B2(g7), g0   # g0 = P1_PARTS+0x1B2 or P2_PARTS+0x1B2
                ret
# ---------------------------------------------------------------------------
                .long 0
aStep:          .asciz "step"
                .fill 3, 1, 0
rob_info_mot_num:.long 0x80002000       # DATA XREF: ROM:00095784↓o
# ---------------------------------------------------------------------------
                ldos    0x1A8(g7), g0   # g0 = P1_PARTS+0x1A8 or P2_PARTS+0x1A8
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotNum:        .asciz "mot_num"
rob_info_mot_num_0:.long 0x80032010     # DATA XREF: ROM:00095788↓o
# ---------------------------------------------------------------------------
                ldos    0x1A8(g7), g0   # g0 = P1_PARTS+0x1A8 or P2_PARTS+0x1A8
                ret
# ---------------------------------------------------------------------------
                .long 0
                .long 0x6400004
                .long 0
rob_info_moc_coma:.long 0x80002000      # DATA XREF: ROM:0009578C↓o
# ---------------------------------------------------------------------------
                ldos    0x1AA(g7), g0   # g0 = P1_PARTS+0x1AA or P2_PARTS+0x1AA
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotComa:       .asciz "mot_coma"
                .fill 3, 1, 0
rob_info_motd_leng:.long 0x80002000     # DATA XREF: ROM:00095790↓o
# ---------------------------------------------------------------------------
                ldos    0x800(g7), g0   # g0 = P1_PARTS+0x800 or P2_PARTS+0x800
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdLeng:      .asciz "motd_leng"
                .short 0
rob_info_main:  .long 0x80002000        # DATA XREF: ROM:00095794↓o
# ---------------------------------------------------------------------------
                ldos    0x808(g7), g0   # g0 = P1_PARTS+0x808 or P2_PARTS+0x808
                ret
# ---------------------------------------------------------------------------
                .long 0
aMain:          .asciz "main"
                .fill 3, 1, 0
rob_info_follow1:.long 0x80002000       # DATA XREF: ROM:00095798↓o
# ---------------------------------------------------------------------------
                ldos    0x80A(g7), g0   # g0 = P1_PARTS+0x80A or P2_PARTS+0x80A
                ret
# ---------------------------------------------------------------------------
                .long 0
aFollow1:       .asciz "follow1"
rob_info_follow2:.long 0x80002000       # DATA XREF: ROM:0009579C↓o
# ---------------------------------------------------------------------------
                ldos    0x80C(g7), g0   # g0 = P1_PARTS+0x80C or P2_PARTS+0x80C
                ret
# ---------------------------------------------------------------------------
                .long 0
aFollow2:       .asciz "follow2"
rob_info_my_status:.long 0x80010260     # DATA XREF: ROM:000957A0↓o
# ---------------------------------------------------------------------------
                ld      0x1250(g7), g0  # g0 = P1_PARTS+0x1250 or P2_PARTS+0x1250
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_my_status_submenu, g0
# ---------------------------------------------------------------------------
aMyStatus:      .asciz "my_status"
                .short 0
rob_info_old_mot_number:.long 0x80002000 # DATA XREF: ROM:000957A4↓o
# ---------------------------------------------------------------------------
                ldos    0x1E1C(g7), g0  # g0 = P1_PARTS+0x1E1C or P2_PARTS+0x1E1C
# ---------------------------------------------------------------------------
                .long 0
aOldMotNum:     .asciz "old_mot_num"
rob_info_mot_coma:.long 0x80002000      # DATA XREF: ROM:000957A8↓o
# ---------------------------------------------------------------------------
                ldos    0xC4E(g7), g0   # g0 = P1_PARTS+0xC4E or P2_PARTS+0xC4E
                ret
# ---------------------------------------------------------------------------
                .long 0
aOldMotComa:    .asciz "old_mot_coma"
                .fill 3, 1, 0
rob_info_motd_next:.long 0x80002000     # DATA XREF: ROM:000957AC↓o
# ---------------------------------------------------------------------------
                ldos    0x802(g7), g0   # P1_PARTS+0x802 or P2_PARTS+0x802
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdNext:      .asciz "motd_next"
                .short 0
rob_info_motd_kind:.long 0x80010260     # DATA XREF: ROM:000957B0↓o
# ---------------------------------------------------------------------------
                ld      0x804(g7), g0   # g0 = P1_PARTS+0x804 or P2_PARTS+0x804
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_motd_kind_submenu, g0
# ---------------------------------------------------------------------------
aMotdKind:      .asciz "motd_kind"
                .short 0
rob_info_old_motd_kind:.long 0x80010260 # DATA XREF: ROM:000957B4↓o
# ---------------------------------------------------------------------------
                ld      0xC30(g7), g0   # g0 = P1_PARTS+0xC30 or P2_PARTS+0xC30
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_old_motd_kind_submenu, g0
# ---------------------------------------------------------------------------
aOldMotdKind:   .asciz "old_motd_kind"
                .short 0
rob_info_mot_kind:.long 0x80010260      # DATA XREF: ROM:000957B8↓o
# ---------------------------------------------------------------------------
                ld      0x1A4(g7), g0   # g0 = P1_PARTS+0x1A4 or P2_PARTS+0x1A4
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_mot_kind_submenu, g0
# ---------------------------------------------------------------------------
aMotKind:       .asciz "mot_kind"
                .fill 3, 1, 0
rob_info_old_mot_kind:.long 0x80010260  # DATA XREF: ROM:000957BC↓o
# ---------------------------------------------------------------------------
                ld      0x1E18(g7), g0  # g0 = P1_PARTS+0x1E18 or P2_PARTS+0x1E18
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_old_mot_kind_submenu, g0
# ---------------------------------------------------------------------------
aOldMotKind:    .asciz "old_mot_kind"
                .fill 3, 1, 0
rob_info_motd_kind2:.long 0x80010260    # DATA XREF: ROM:000957C0↓o
# ---------------------------------------------------------------------------
                ld      0x860(g7), g0   # g0 = P1_PARTS+0x860 or P2_PARTS+0x860
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_motd_kind2_submenu, g0
# ---------------------------------------------------------------------------
aMotdKind2:     .asciz "motd_kind2"
                .byte 0
rob_info_old_motd_kind2:.long 0x80010260 # DATA XREF: ROM:000957C4↓o
# ---------------------------------------------------------------------------
                ld      0xC5C(g7), g0   # g0 = P1_PARTS+0xC5C or P2_PARTS+0xC5C
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_old_motd_kind2_submenu, g0
# ---------------------------------------------------------------------------
aOldMotdKind2:  .asciz "old_motd_kind2"
                .byte 0
rob_info_mot_kind2:.long 0x80010260     # DATA XREF: ROM:000957C8↓o
# ---------------------------------------------------------------------------
                ld      0x70C(g7), g0   # g0 = P1_PARTS+0x70C or P2_PARTS+0x70C
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_mot_kind2_submenu, g0
# ---------------------------------------------------------------------------
aMotKind2:      .asciz "mot_kind2"
                .short 0
rob_info_old_mot_kind2:.long 0x80010260 # DATA XREF: ROM:000957CC↓o
# ---------------------------------------------------------------------------
                ld      0x1E24(g7), g0  # g0 = P1_PARTS+0x1E24 or P2_PARTS+0x1E24
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_old_mot_kind2_submenu, g0
# ---------------------------------------------------------------------------
aOldMotKind2:   .asciz "old_mot_kind2"
                .short 0
rob_info_skeleton_type:.long 0x80001000 # DATA XREF: ROM:000957D0↓o
# ---------------------------------------------------------------------------
                ldob    0x84C(g7), g0   # g0 = P1_PARTS+0x84C or P2_PARTS+0x84C
                ret
# ---------------------------------------------------------------------------
                .long 0
aSkeltonType:   .asciz "skelton_type"
                .fill 3, 1, 0
rob_info_smooth_type:.long 0x80001000   # DATA XREF: ROM:000957D4↓o
# ---------------------------------------------------------------------------
                ldob    0xBDD(g7), g0   # g0 = P1_PARTS+0xBDD or P2_PARTS+0xBDD
                ret
# ---------------------------------------------------------------------------
                .long 0
aSmoothType:    .asciz "smooth_type"
rob_info_smooth_sw:.long 0x80001000     # DATA XREF: ROM:000957D8↓o
# ---------------------------------------------------------------------------
                ldob    0xBE4(g7), g0   # g0 = P1_PARTS+0xBE4 or P2_PARTS+0xBE4
                ret
# ---------------------------------------------------------------------------
                .long 0
aSmoothSw:      .asciz "smooth_sw"
                .short 0
rob_info_smooth_flag:.long 0x80001000   # DATA XREF: ROM:000957DC↓o
# ---------------------------------------------------------------------------
                ldob    0xBE5(g7), g0   # g0 = P1_PARTS+0xBE5 or P2_PARTS+0xBE5
                ret
# ---------------------------------------------------------------------------
                .long 0
aSmoothFlag:    .asciz "smooth_flag"
rob_info_smooth_timer:.long 0x80002000  # DATA XREF: ROM:000957E0↓o
# ---------------------------------------------------------------------------
                ldos    0xBE2(g7), g0   # g0 = P1_PARTS+0xBE2 or P2_PARTS+0xBE2
                ret
# ---------------------------------------------------------------------------
                .long 0
aSmoothTimer:   .asciz "smooth_timer"
                .fill 3, 1, 0
rob_info_mot_basic_step:.long 0x80001000 # DATA XREF: ROM:000957E4↓o
# ---------------------------------------------------------------------------
                ldob    0xA00(g7), g0   # g0 = P1_PARTS+0xA00 or P2_PARTS+0xA00
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotBasicStep:  .asciz "mot_basic_step"
                .byte 0
rob_info_en_flag:.long 0x80010260       # DATA XREF: ROM:000957E8↓o
# ---------------------------------------------------------------------------
                ld      0x5B8(g7), g0   # g0 = P1_PARTS+0x5B8 or P2_PARTS+0x5B8
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_en_flag_submenu, g0
# ---------------------------------------------------------------------------
aEnFlag:        .asciz "en_flag"
rob_info_en_nage_flag:.long 0x80010260  # DATA XREF: ROM:000957EC↓o
# ---------------------------------------------------------------------------
                ld      0x720(g7), g0   # g0 = P1_PARTS+0x720 or P2_PARTS+0x720
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_en_nage_flag_submenu, g0
# ---------------------------------------------------------------------------
aEnNageFlag:    .asciz "en_nage_flag"
                .fill 3, 1, 0
rob_info_flag:  .long 0x80010260        # DATA XREF: ROM:000957F0↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0     # g0 = P1_PARTS or P2_PARTS
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_flag_submenu, g0
# ---------------------------------------------------------------------------
aFlag:          .asciz "flag"
                .fill 3, 1, 0
rob_info_flag_old:.long 0x80010000      # DATA XREF: ROM:000957F4↓o
# ---------------------------------------------------------------------------
                ld      0x7EC(g7), g0   # g0 = P1_PARTS+0x7EC or P2_PARTS+0x7EC
                ret
# ---------------------------------------------------------------------------
                .long 0
aFlagOld:       .asciz "flag_old"
                .fill 3, 1, 0
rob_info_motd_uk_type:.long 0x80002000  # DATA XREF: ROM:000957F8↓o
# ---------------------------------------------------------------------------
                ldos    0x864(g7), g0   # g0 = P1_PARTS+0x864 or P2_PARTS+0x864
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdUkType:    .asciz "motd_uk_type"
                .fill 3, 1, 0
rob_info_motd_uk_coma:.long 0x80002000  # DATA XREF: ROM:000957FC↓o
# ---------------------------------------------------------------------------
                ldos    0x868(g7), g0   # g0 = P1_PARTS+0x868 or P2_PARTS+0x868
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdUkComa:    .asciz "motd_uk_coma"
                .fill 3, 1, 0
rob_info_rob_weight:.long 0x80023000    # DATA XREF: ROM:00095800↓o
# ---------------------------------------------------------------------------
                ld      0x5D8(g7), g0   # g0 = P1_PARTS+0x5D8 or P2_PARTS+0x5D8
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aRobWeight:     .asciz "rob_weight"
                .byte 0
rob_info_parts_weight:.long 0x80023000  # DATA XREF: ROM:00095804↓o
# ---------------------------------------------------------------------------
                ld      0x7D8(g7), g0   # g0 = P1_PARTS+0x7D8 or P2_PARTS+0x7D8
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPartsWeight:   .asciz "parts_weight"
                .fill 3, 1, 0
dword_435DC:    .long 0x80023000        # DATA XREF: ROM:00095808↓o
# ---------------------------------------------------------------------------
                ld      0x7DC(g7), g0   # g0 = P1_PARTS+0x7DC or P2_PARTS+0x7DC
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aHuamnWeight:   .asciz "huamn_weight"
                .fill 3, 1, 0
dword_435FC:    .long 0x80000000        # DATA XREF: ROM:0009580C↓o
# ---------------------------------------------------------------------------
                ld      0x7E0(g7), g0   # g0 = P1_PARTS+0x7E0 or P2_PARTS+0x7E0
                ret
# ---------------------------------------------------------------------------
                .long 0
aHitUnit:       .asciz "hit_unit"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_43618:                              # DATA XREF: ROM:00095810↓o
                ldob    0x0(r4), pfp
                ldos    0x7EA(g7), g0   # g0 = P1_PARTS+0x7EA or P2_PARTS+0x7EA
                ret
# ---------------------------------------------------------------------------
                .long 0
aOrgPartsUnit:  .asciz "org_parts_unit"
                .byte 0
# ---------------------------------------------------------------------------
loc_43638:                              # DATA XREF: ROM:00095814↓o
                ldob    0x0(r4), pfp
                ldos    0x7E8(g7), g0   # g0 = P1_PARTS+0x7E8 or P2_PARTS+0x7E8
                ret
# ---------------------------------------------------------------------------
                .long 0
aPartsUnit:     .asciz "parts_unit"
                .byte 0
dword_43654:    .long 0x80023000        # DATA XREF: ROM:00095818↓o
# ---------------------------------------------------------------------------
                ld      0x7E4(g7), g0   # g0 = P1_PARTS+0x7E4 or P2_PARTS+0x7E4
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aHitRatio:      .asciz "hit_ratio"
                .short 0
dword_43670:    .long 0x80010260        # DATA XREF: ROM:0009581C↓o
# ---------------------------------------------------------------------------
                ld      0x6D4(g7), g0   # g0 = P1_PARTS+0x6D4 or P2_PARTS+0x6D4
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     rob_info_defence_submenu, g0
# ---------------------------------------------------------------------------
aDefence_2:     .asciz "defence"
dword_43690:    .long 0x23100           # DATA XREF: ROM:00095820↓o
# ---------------------------------------------------------------------------
                ld      0x18(g7), g0    # g0 = P1_PARTS+0x18 or P2_PARTS+0x18
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aXpos_1:        .asciz "xpos"
                .fill 3, 1, 0
dword_436A8:    .long 0x23100           # DATA XREF: ROM:00095824↓o
# ---------------------------------------------------------------------------
                ld      0x1C(g7), g0    # g0 = P1_PARTS+0x1C or P2_PARTS+0x1C
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aYpos_1:        .asciz "ypos"
                .fill 3, 1, 0
dword_436C0:    .long 0x23100           # DATA XREF: ROM:00095828↓o
# ---------------------------------------------------------------------------
                ld      0x20(g7), g0    # g0 = P1_PARTS+0x20 or P2_PARTS+0x20
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aZpos_1:        .asciz "zpos"
                .fill 3, 1, 0
dword_436D8:    .long 0x80023000        # DATA XREF: ROM:0009582C↓o
# ---------------------------------------------------------------------------
                ld      0x80(g7), g0    # g0 = P1_PARTS+0x80 or P2_PARTS+0x80
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aHaraXpos:      .asciz "hara_xpos"
                .short 0
dword_436F4:    .long 0x80023000        # DATA XREF: ROM:00095830↓o
# ---------------------------------------------------------------------------
                ld      0x84(g7), g0    # g0 = P1_PARTS+0x84 or P2_PARTS+0x84
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aHaraYpos:      .asciz "hara_ypos"
                .short 0
dword_43710:    .long 0x80023000        # DATA XREF: ROM:00095834↓o
# ---------------------------------------------------------------------------
                ld      0x88(g7), g0    # g0 = P1_PARTS+0x88 or P2_PARTS+0x88
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aHaraZpos:      .asciz "hara_zpos"
                .short 0
dword_4372C:    .long 0x80023000        # DATA XREF: ROM:00095838↓o
# ---------------------------------------------------------------------------
                ld      0x1F4(g7), g0   # g0 = P1_PARTS+0x1F4 or P2_PARTS+0x1F4
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aGxpos:         .asciz "gxpos"
                .short 0
dword_43744:    .long 0x80023000        # DATA XREF: ROM:0009583C↓o
# ---------------------------------------------------------------------------
                ld      0x1F8(g7), g0   # g0 = P1_PARTS+0x1F8 or P2_PARTS+0x1F8
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aGypos:         .asciz "gypos"
                .short 0
dword_4375C:    .long 0x80023000        # DATA XREF: ROM:00095840↓o
# ---------------------------------------------------------------------------
                ld      0x1FC(g7), g0   # g0 = P1_PARTS+0x1FC or P2_PARTS+0x1FC
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aGzpos:         .asciz "gzpos"
                .short 0
dword_43774:    .long 0x80023000        # DATA XREF: ROM:00095844↓o
# ---------------------------------------------------------------------------
                ld      0x1E00(g7), g0  # g0 = P1_PARTS+0x1E00 or P2_PARTS+0x1E00
# ---------------------------------------------------------------------------
                .long 0x200
aMovSpdXpos:    .asciz "mov_spd_xpos"
                .fill 3, 1, 0
dword_43794:    .long 0x80023000        # DATA XREF: ROM:00095848↓o
# ---------------------------------------------------------------------------
                ld      0x1E04(g7), g0  # g0 = P1_PARTS+0x1E04 or P2_PARTS+0x1E04
# ---------------------------------------------------------------------------
                .long 0x200
aMovSpdYpos:    .asciz "mov_spd_ypos"
                .fill 3, 1, 0
dword_437B4:    .long 0x80023000        # DATA XREF: ROM:0009584C↓o
# ---------------------------------------------------------------------------
                ld      0x1E08(g7), g0  # g0 = P1_PARTS+0x1E08 or P2_PARTS+0x1E08
# ---------------------------------------------------------------------------
                .long 0x200
aMovSpdZpos:    .asciz "mov_spd_zpos"
                .fill 3, 1, 0
dword_437D4:    .long 0x80023000        # DATA XREF: ROM:00095850↓o
# ---------------------------------------------------------------------------
                ld      0x1E0C(g7), g0  # g0 = P1_PARTS+0x1E0C or P2_PARTS+0x1E0C
# ---------------------------------------------------------------------------
                .long 0x200
aOldGxpos:      .asciz "old_gxpos"
                .short 0
dword_437F0:    .long 0x80023000        # DATA XREF: ROM:00095854↓o
# ---------------------------------------------------------------------------
                ld      0x1E10(g7), g0  # g0 = P1_PARTS+0x1E10 or P2_PARTS+0x1E10
# ---------------------------------------------------------------------------
                .long 0x200
aOldGypos:      .asciz "old_gypos"
                .short 0
dword_4380C:    .long 0x80023000        # DATA XREF: ROM:00095858↓o
# ---------------------------------------------------------------------------
                ld      0x1E14(g7), g0  # g0 = P1_PARTS+0x1E14 or P2_PARTS+0x1E14
# ---------------------------------------------------------------------------
                .long 0x200
aOldGzpos:      .asciz "old_gzpos"
                .short 0
dword_43828:    .long 0x80023000        # DATA XREF: ROM:0009585C↓o
# ---------------------------------------------------------------------------
                ld      0x2C(g7), g0    # g0 = P1_PARTS+0x2C or P2_PARTS+0x2C
                ret
# ---------------------------------------------------------------------------
                .long 0x400
aXspd:          .asciz "xspd"
                .fill 3, 1, 0
dword_43840:    .long 0x80023000        # DATA XREF: ROM:00095860↓o
# ---------------------------------------------------------------------------
                ld      0x30(g7), g0    # g0 = P1_PARTS+0x30 or P2_PARTS+0x30
                ret
# ---------------------------------------------------------------------------
                .long 0x400
aYspd:          .asciz "yspd"
                .fill 3, 1, 0
dword_43858:    .long 0x80023000        # DATA XREF: ROM:00095864↓o
# ---------------------------------------------------------------------------
                ld      0x34(g7), g0    # g0 = P1_PARTS+0x34 or P2_PARTS+0x34
                ret
# ---------------------------------------------------------------------------
                .long 0x400
aZspd:          .asciz "zspd"
                .fill 3, 1, 0
dword_43870:    .long 0x11100           # DATA XREF: ROM:00095868↓o
# ---------------------------------------------------------------------------
                ldob    0x27(g7), g0    # g0 = P1_PARTS+0x27 or P2_PARTS+0x27
                ret
# ---------------------------------------------------------------------------
                .long 0
aYang:          .asciz "yang"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_43888:                              # DATA XREF: ROM:0009586C↓o
                ldob    0x0(r4), pfp
                ldos    0x26(g7), g0    # g0 = P1_PARTS+0x26 or P2_PARTS+0x26
                ret
# ---------------------------------------------------------------------------
                .long 0
aYang_0:        .asciz "yang"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_438A0:                              # DATA XREF: ROM:00095870↓o
                ldob    0x0(r4), pfp
                ldos    0x5B4(g7), g0   # g0 = P1_PARTS+0x5B4 or P2_PARTS+0x5B4
                ret
# ---------------------------------------------------------------------------
                .long 0
aActYang:       .asciz "act_yang"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_438BC:                              # DATA XREF: ROM:00095874↓o
                ldob    0x0(r4), pfp
                ldos    0x812(g7), g0   # g0 = P1_PARTS+0x812 or P2_PARTS+0x812
                ret
# ---------------------------------------------------------------------------
                .long 0
aMovYang:       .asciz "mov_yang"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_438D8:                              # DATA XREF: ROM:00095878↓o
                ldob    0x0(r4), pfp
                ldos    0x616(g7), g0   # g0 = P1_PARTS+0x616 or P2_PARTS+0x616
                ret
# ---------------------------------------------------------------------------
                .long 0
aGyang:         .asciz "gyang"
                .short 0
# ---------------------------------------------------------------------------
loc_438F0:                              # DATA XREF: ROM:0009587C↓o
                ldob    0x0(r4), pfp
                ldos    0x688(g7), g0   # g0 = P1_PARTS+0x688 or P2_PARTS+0x688
                ret
# ---------------------------------------------------------------------------
                .long 0
aHaraYangAve:   .asciz "hara_yang_ave"
                .short 0
# ---------------------------------------------------------------------------
loc_43910:                              # DATA XREF: ROM:00095880↓o
                ldob    0x0(r4), pfp
                ldos    0x68A(g7), g0   # g0 = P1_PARTS+0x68A or P2_PARTS+0x68A
                ret
# ---------------------------------------------------------------------------
                .long 0
aHaraYangMat:   .asciz "hara_yang_mat"
                .short 0
# ---------------------------------------------------------------------------
loc_43930:                              # DATA XREF: ROM:00095884↓o
                ldob    0x0(r4), pfp
                ldos    0x5B6(g7), g0   # g0 = P1_PARTS+0x5B6 or P2_PARTS+0x5B6
                ret
# ---------------------------------------------------------------------------
                .long 0
aEnDirYang:     .asciz "en_dir_yang"
dword_4394C:    .long 0x80002000        # DATA XREF: ROM:00095888↓o
# ---------------------------------------------------------------------------
                ldos    0x5BC(g7), g0   # g0 = P1_PARTS+0x5BC or P2_PARTS+0x5BC
                ret
# ---------------------------------------------------------------------------
                .long 0
aLandTime:      .asciz "land_time"
                .short 0
dword_43968:    .long 0x80001000        # DATA XREF: ROM:0009588C↓o
# ---------------------------------------------------------------------------
                ldob    0x822(g7), g0   # g0 = P1_PARTS+0x822 or P2_PARTS+0x822
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdDamage:    .asciz "motd_damage"
dword_43984:    .long 0x80001000        # DATA XREF: ROM:00095890↓o
# ---------------------------------------------------------------------------
                ldob    0x85C(g7), g0   # g0 = P1_PARTS+0x85C or P2_PARTS+0x85C
                ret
# ---------------------------------------------------------------------------
                .long 0
aGuardStop:     .asciz "guard_stop"
                .byte 0
dword_439A0:    .long 0x80001000        # DATA XREF: ROM:00095894↓o
# ---------------------------------------------------------------------------
                ldob    0x85D(g7), g0   # g0 = P1_PARTS+0x85D or P2_PARTS+0x85D
                ret
# ---------------------------------------------------------------------------
                .long 0
aYarareStop:    .asciz "yarare_stop"
dword_439BC:    .long 0x80001000        # DATA XREF: ROM:00095898↓o
# ---------------------------------------------------------------------------
                ldob    0x85E(g7), g0   # g0 = P1_PARTS+0x85E or P2_PARTS+0x85E
                ret
# ---------------------------------------------------------------------------
                .long 0
aCounterStop:   .asciz "counter_stop"
                .fill 3, 1, 0
dword_439DC:    .long 0x80002000        # DATA XREF: ROM:0009589C↓o
# ---------------------------------------------------------------------------
                ldos    0x1AC(g7), g0   # g0 = P1_PARTS+0x1AC or P2_PARTS+0x1AC
                ret
# ---------------------------------------------------------------------------
                .long 0
aEnergy:        .asciz "energy"
                .byte 0
dword_439F4:    .long 0x80002000        # DATA XREF: ROM:000958A0↓o
# ---------------------------------------------------------------------------
                ldos    0x5DE(g7), g0   # g0 = P1_PARTS+0x5DE or P2_PARTS+0x5DE
                ret
# ---------------------------------------------------------------------------
                .long 0
aDownCounter:   .asciz "down_counter"
                .fill 3, 1, 0
dword_43A14:    .long 0x80002000        # DATA XREF: ROM:000958A4↓o
# ---------------------------------------------------------------------------
                ldos    0x6D0(g7), g0   # g0 = P1_PARTS+0x6D0 or P2_PARTS+0x6D0
                ret
# ---------------------------------------------------------------------------
                .long 0
aAttackCount:   .asciz "attack_count"
                .fill 3, 1, 0
dword_43A34:    .long 0x80002000        # DATA XREF: ROM:000958A8↓o
# ---------------------------------------------------------------------------
                ldos    0x6D8(g7), g0   # g0 = P1_PARTS+0x6D8 or P2_PARTS+0x6D8
                ret
# ---------------------------------------------------------------------------
                .long 0
aGuAtkCount:    .asciz "gu_atk_count"
                .fill 3, 1, 0
dword_43A54:    .long 0x80010000        # DATA XREF: ROM:000958AC↓o
# ---------------------------------------------------------------------------
                ld      0x6B0(g7), g0   # g0 = P1_PARTS+0x6B0 or P2_PARTS+0x6B0
                ret
# ---------------------------------------------------------------------------
                .long 0
aKageInFlag:    .asciz "kage in flag"
                .fill 3, 1, 0
dword_43A74:    .long 0x80010000        # DATA XREF: ROM:000958B0↓o
# ---------------------------------------------------------------------------
                ld      0x6B4(g7), g0   # g0 = P1_PARTS+0x6B4 or P2_PARTS+0x6B4
                ret
# ---------------------------------------------------------------------------
                .long 0
aKageOtFlag:    .asciz "kage ot flag"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_43A94:                              # DATA XREF: ROM:000958B4↓o
                ldob    0x0(r4), pfp
                ldos    0x614(g7), g0   # g0 = P1_PARTS+0x614 or P2_PARTS+0x614
                ret
# ---------------------------------------------------------------------------
                .long 0
aStageOn:       .asciz "stage_on"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_43AB0:                              # DATA XREF: ROM:000958B8↓o
                ldob    0x0(r4), pfp
                ldos    0x624(g7), g0   # g0 = P1_PARTS+0x624 or P2_PARTS+0x624
                ret
# ---------------------------------------------------------------------------
                .long 0
aOutOn:         .asciz "out_on"
                .byte 0
# ---------------------------------------------------------------------------
loc_43AC8:                              # DATA XREF: ROM:000958BC↓o
                ldob    0x0(r4), pfp
                ldos    0x618(g7), g0   # g0 = P1_PARTS+0x618 or P2_PARTS+0x618
                ret
# ---------------------------------------------------------------------------
                .long 0
aSupport:       .asciz "support"
# ---------------------------------------------------------------------------
loc_43AE0:                              # DATA XREF: ROM:000958C0↓o
                ldob    0x0(r4), pfp
                ldos    0x6F8(g7), g0   # g0 = P1_PARTS+0x6F8 or P2_PARTS+0x6F8
                ret
# ---------------------------------------------------------------------------
                .long 0
aNoColi:        .asciz "no_coli"
dword_43AF8:    .long 0x80023000        # DATA XREF: ROM:000958C4↓o
# ---------------------------------------------------------------------------
                ld      0x5F8(g7), g0   # g0 = P1_PARTS+0x5F8 or P2_PARTS+0x5F8
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aFrontOut:      .asciz "front_out"
                .short 0
dword_43B14:    .long 0x80023000        # DATA XREF: ROM:000958C8↓o
# ---------------------------------------------------------------------------
                ld      0x5FC(g7), g0   # g0 = P1_PARTS+0x5FC or P2_PARTS+0x5FC
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aBackOut:       .asciz "back_out"
                .fill 3, 1, 0
dword_43B30:    .long 0x80023000        # DATA XREF: ROM:000958CC↓o
# ---------------------------------------------------------------------------
                ld      0x6A8(g7), g0   # g0 = P1_PARTS+0x6A8 or P2_PARTS+0x6A8
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aMinOut:        .asciz "min_out"
dword_43B48:    .long 0x80001000        # DATA XREF: ROM:000958D0↓o
# ---------------------------------------------------------------------------
                ldob    0x1202(g7), g0  # g0 = P1_PARTS+0x1202 or P2_PARTS+0x1202
# ---------------------------------------------------------------------------
                .long 0
aWritePnt:      .asciz "write_pnt"
                .short 0
dword_43B64:    .long 0x80001000        # DATA XREF: ROM:000958D4↓o
# ---------------------------------------------------------------------------
                ldob    0x1203(g7), g0  # g0 = P1_PARTS+0x1203 or P2_PARTS+0x1203
# ---------------------------------------------------------------------------
                .long 0
aReadPnt:       .asciz "read_pnt"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_43B80:                              # DATA XREF: ROM:000958D8↓o
                ldob    (pfp), pfp
                ldob    0x1204(g7), g0  # g0 = P1_PARTS+0x1204 or P2_PARTS+0x1204
# ---------------------------------------------------------------------------
                .long 0
aNotRp:         .asciz "not_rp"
                .byte 0
# ---------------------------------------------------------------------------
loc_43B98:                              # DATA XREF: ROM:000958DC↓o
                ldob    (pfp), pfp
                ldob    0x1205(g7), g0  # g0 = P1_PARTS+0x1205 or P2_PARTS+0x1205
# ---------------------------------------------------------------------------
                .long 0
aNotDirRp:      .asciz "not_dir_rp"
                .byte 0
# ---------------------------------------------------------------------------
loc_43BB4:                              # DATA XREF: ROM:000958E0↓o
                ldob    (pfp), pfp
                ldob    0x1206(g7), g0  # g0 = P1_PARTS+0x1206 or P2_PARTS+0x1206
# ---------------------------------------------------------------------------
                .long 0
aNotYokeRp:     .asciz "not_yoke_rp"
dword_43BD0:    .long 0x80002000        # DATA XREF: ROM:000958E4↓o
# ---------------------------------------------------------------------------
                ldos    0x120E(g7), g0  # g0 = P1_PARTS+0x120E or P2_PARTS+0x120E
# ---------------------------------------------------------------------------
                .long 0
aWaitComa:      .asciz "wait_coma"
                .short 0
dword_43BEC:    .long 0x80001000        # DATA XREF: ROM:000958E8↓o
# ---------------------------------------------------------------------------
                ldob    0x1240(g7), g0  # g0 = P1_PARTS+0x1240 or P2_PARTS+0x1240
# ---------------------------------------------------------------------------
                .long 0
aWithholdPnt:   .asciz "withhold_pnt"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_43C0C:                              # DATA XREF: ROM:000958EC↓o
                ldob    (pfp), pfp
                ldob    0x123C(g7), g0  # g0 = P1_PARTS+0x123C or P2_PARTS+0x123C
# ---------------------------------------------------------------------------
                .long 0
aWithholdTime:  .asciz "withhold_time"
                .short 0
# ---------------------------------------------------------------------------
loc_43C2C:                              # DATA XREF: ROM:000958F0↓o
                ldob    (r4), pfp
                ldob    0x123E(g7), g0  # g0 = P1_PARTS+0x123E or P2_PARTS+0x123E
# ---------------------------------------------------------------------------
                .long 0
aWithholdTrig:  .asciz "withhold_trig"
                .short 0
# ---------------------------------------------------------------------------
loc_43C4C:                              # DATA XREF: ROM:000958F4↓o
                ldob    (pfp), pfp
                ldob    0x1241(g7), g0  # g0 = P1_PARTS+0x1241 or P2_PARTS+0x1241
# ---------------------------------------------------------------------------
                .long 0
aWithholdPnt1:  .asciz "withhold_pnt1"
                .short 0
# ---------------------------------------------------------------------------
loc_43C6C:                              # DATA XREF: ROM:000958F8↓o
                ldob    (pfp), pfp
                ldob    0x123D(g7), g0  # g0 = P1_PARTS+0x123D or P2_PARTS+0x123D
# ---------------------------------------------------------------------------
                .long 0
aWithholdTime1: .asciz "withhold_time1"
                .byte 0
# ---------------------------------------------------------------------------
loc_43C8C:                              # DATA XREF: ROM:000958FC↓o
                ldob    (r4), pfp
                ldob    0x123F(g7), g0  # g0 = P1_PARTS+0x123F or P2_PARTS+0x123F
# ---------------------------------------------------------------------------
                .long 0
aWithholdTrig1: .asciz "withhold_trig1"
                .byte 0
# ---------------------------------------------------------------------------
loc_43CAC:                              # DATA XREF: ROM:00095900↓o
                ldob    (pfp), pfp
                ldob    0x1242(g7), g0  # g0 = P1_PARTS+0x1242 or P2_PARTS+0x1242
# ---------------------------------------------------------------------------
                .long 0
aWithholdPntC:  .asciz "withhold_pnt_c"
                .byte 0
dword_43CCC:    .long 0x80010000        # DATA XREF: ROM:00095904↓o
# ---------------------------------------------------------------------------
                ld      0x1218(g7), g0  # g0 = P1_PARTS+0x1218 or P2_PARTS+0x1218
# ---------------------------------------------------------------------------
                .long 0
aPcCommand:     .asciz "pc_command"
                .byte 0
dword_43CE8:    .long 0x80010000        # DATA XREF: ROM:00095908↓o
# ---------------------------------------------------------------------------
                ld      0x121C(g7), g0  # g0 = P1_PARTS+0x121C or P2_PARTS+0x121C
# ---------------------------------------------------------------------------
                .long 0
aPcSpeAdr:      .asciz "pc_spe_adr"
                .byte 0
dword_43D04:    .long 0x80002000        # DATA XREF: ROM:0009590C↓o
# ---------------------------------------------------------------------------
                ldos    0x1220(g7), g0  # g0 = P1_PARTS+0x1220 or P2_PARTS+0x1220
# ---------------------------------------------------------------------------
                .long 0
aPcSpeTime:     .asciz "pc_spe_time"
dword_43D20:    .long 0x80023000        # DATA XREF: ROM:00095910↓o
# ---------------------------------------------------------------------------
                ld      0x5F4(g7), g0   # g0 = P1_PARTS+0x5F4 or P2_PARTS+0x5F4
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aEnDist:        .asciz "en_dist"
dword_43D38:    .long 0x80010000        # DATA XREF: ROM:00095914↓o
# ---------------------------------------------------------------------------
                ld      0x684(g7), g0   # g0 = P1_PARTS+0x684 or P2_PARTS+0x684
                ret
# ---------------------------------------------------------------------------
                .long 0
aSleepCommand:  .asciz "sleep_command"
                .short 0
dword_43D58:    .long 0x80002000        # DATA XREF: ROM:00095918↓o
# ---------------------------------------------------------------------------
                ldos    0x62A(g7), g0   # g0 = P1_PARTS+0x62A or P2_PARTS+0x62A
                ret
# ---------------------------------------------------------------------------
                .long 0
aSleepTime:     .asciz "sleep_time"
                .byte 0
dword_43D74:    .long 0x80002000        # DATA XREF: ROM:0009591C↓o
# ---------------------------------------------------------------------------
                ldos    0x626(g7), g0   # g0 = P1_PARTS+0x626 or P2_PARTS+0x626
                ret
# ---------------------------------------------------------------------------
                .long 0
aTagEnComa:     .asciz "tag_en_coma"
dword_43D90:    .long 0x80010000        # DATA XREF: ROM:00095920↓o
# ---------------------------------------------------------------------------
                ld      0x844(g7), g0   # g0 = P1_PARTS+0x844 or P2_PARTS+0x844
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdKaesare:   .asciz "motd_kaesare"
                .fill 3, 1, 0
dword_43DB0:    .long 0x80002000        # DATA XREF: ROM:00095924↓o
# ---------------------------------------------------------------------------
                ldos    0x6DA(g7), g0   # g0 = P1_PARTS+0x6DA or P2_PARTS+0x6DA
                ret
# ---------------------------------------------------------------------------
                .long 0
aKaeshiNo:      .asciz "kaeshi_no"
                .short 0
dword_43DCC:    .long 0x80001000        # DATA XREF: ROM:00095928↓o
# ---------------------------------------------------------------------------
                ldob    0x5BE(g7), g0   # g0 = P1_PARTS+0x844 or P2_PARTS+0x844
                ret
# ---------------------------------------------------------------------------
                .long 0
aJumpH:         .asciz "jump_h"
                .byte 0
dword_43DE4:    .long 0x80002000        # DATA XREF: ROM:0009592C↓o
# ---------------------------------------------------------------------------
                ldos    0x5C0(g7), g0   # g0 = P1_PARTS+0x5C0 or P2_PARTS+0x5C0
                ret
# ---------------------------------------------------------------------------
                .long 0
aJpNextLacoma:  .asciz "jp_next_lacoma"
                .byte 0
dword_43E04:    .long 0x80002000        # DATA XREF: ROM:00095930↓o
# ---------------------------------------------------------------------------
                ldos    0x80E(g7), g0   # g0 = P1_PARTS+0x80E or P2_PARTS+0x80E
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdJumpComa:  .asciz "motd_jump_coma"
                .byte 0
dword_43E24:    .long 0x80002000        # DATA XREF: ROM:00095934↓o
# ---------------------------------------------------------------------------
                ldos    0x816(g7), g0   # g0 = P1_PARTS+0x816 or P2_PARTS+0x816
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdStopComa:  .asciz "motd_stop_coma"
                .byte 0
dword_43E44:    .long 0x80002000        # DATA XREF: ROM:00095938↓o
# ---------------------------------------------------------------------------
                ldos    0x818(g7), g0   # g0 = P1_PARTS+0x818 or P2_PARTS+0x818
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdLandComa:  .asciz "motd_land_coma"
                .byte 0
dword_43E64:    .long 0x80002000        # DATA XREF: ROM:0009593C↓o
# ---------------------------------------------------------------------------
                ldos    0x872(g7), g0   # g0 = P1_PARTS+0x872 or P2_PARTS+0x872
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdDownComa:  .asciz "motd_down_coma"
                .byte 0
dword_43E84:    .long 0x80001000        # DATA XREF: ROM:00095940↓o
# ---------------------------------------------------------------------------
                ldob    0x85F(g7), g0   # g0 = P1_PARTS+0x85F or P2_PARTS+0x85F
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdNgPara:    .asciz "motd_ng_para  "
                .byte 0
dword_43EA4:    .long 0x80001000        # DATA XREF: ROM:00095944↓o
# ---------------------------------------------------------------------------
                ldob    0x821(g7), g0   # g0 = P1_PARTS+0x821 or P2_PARTS+0x821
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdAp:        .asciz "motd_ap  "
                .short 0
dword_43EC0:    .long 0x80012000        # DATA XREF: ROM:00095948↓o
# ---------------------------------------------------------------------------
                ldos    0x876(g7), g0   # g0 = P1_PARTS+0x876 or P2_PARTS+0x876
                ret
# ---------------------------------------------------------------------------
                .long 0
aMotdAtkAng:    .asciz "motd_atk_ang"
                .fill 3, 1, 0
dword_43EE0:    .long 0x80002000        # DATA XREF: ROM:0009594C↓o
# ---------------------------------------------------------------------------
                ldos    0xBDE(g7), g0   # g0 = P1_PARTS+0xBDE or P2_PARTS+0xBDE
                ret
# ---------------------------------------------------------------------------
                .long 0
aSmoothFComa:   .asciz "smooth_f_coma"
                .short 0
dword_43F00:    .long 0x80002000        # DATA XREF: ROM:00095950↓o
# ---------------------------------------------------------------------------
                ldos    0xBE0(g7), g0   # g0 = P1_PARTS+0x8E0 or P2_PARTS+0x8E0
                ret
# ---------------------------------------------------------------------------
                .long 0
aSmoothRComa:   .asciz "smooth_r_coma"
                .short 0
dword_43F20:    .long 0x6667011F        # DATA XREF: ROM:00095954↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 24               # Bit 24
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aGyangDisp_0:   .asciz "gyang_disp"
                .byte 0
dword_43F50:    .long 0x6667011F        # DATA XREF: ROM:00095958↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 25               # bit 25
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aColiBallDisp_0:.asciz "coli_ball_disp"
                .byte 0
dword_43F84:    .long 0x6667011F        # DATA XREF: ROM:0009595C↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 26               # Bit 26
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSmoothSwitch_0:.asciz "smooth_switch"
                .short 0
dword_43FB8:    .long 0x6667011F        # DATA XREF: ROM:00095960↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 23               # Bit 23
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aKaoMuken_0:    .asciz "kao_muken"
                .short 0
rob_info_me_muken:.long 0x6667011F      # DATA XREF: ROM:00095964↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 20               # Bit 20
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
loc_44000:                              # DATA XREF: MAIN_DATA:028A0D1C↓o
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aMeMuken:       .asciz "me_muken"
                .fill 3, 1, 0
dword_44018:    .long 0x6667011F        # DATA XREF: ROM:00095968↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 22               # Bit 22
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aDontRevise_0:  .asciz "dont_revise"
dword_44048:    .long 0x6667011F        # DATA XREF: ROM:0009596C↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 17               # Bit 17
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aCameraMesen:   .asciz "camera_mesen"
                .fill 3, 1, 0
rob_info_automatic:.long 0x6667011F     # DATA XREF: ROM:00095970↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 30               # Bit 30
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aAutomatic:     .asciz "automatic"
                .short 0
# ---------------------------------------------------------------------------
rob_info_old_mot_kind_submenu:          # DATA XREF: ROM:00043378↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_440D4, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_440D4:                              # DATA XREF: ROM:000440BC↑o
                ld      0x1E18(g7), g0
                lda     motion_kind, g1
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
rob_info_mot_kind_submenu:              # DATA XREF: ROM:00043354↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_44114, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_44114:                              # DATA XREF: ROM:000440FC↑o
                ld      0x1A4(g7), g0
                lda     motion_kind, g1
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
rob_info_motd_kind_submenu:             # DATA XREF: ROM:00043308↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_44150, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_44150:                              # DATA XREF: ROM:00044138↑o
                ld      0x804(g7), g0
                lda     motion_kind, g1
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
rob_info_old_motd_kind_submenu:         # DATA XREF: ROM:loc_4332C↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_4418C, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_4418C:                              # DATA XREF: ROM:00044174↑o
                ld      0xC30(g7), g0
                lda     motion_kind, g1
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
rob_info_mot_kind2_submenu:             # DATA XREF: ROM:000433EC↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_441C8, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_441C8:                              # DATA XREF: ROM:000441B0↑o
                ld      0x70C(g7), g0
                lda     motion_kind2, g1
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
rob_info_motd_kind2_submenu:            # DATA XREF: ROM:000433A0↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_44204, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_44204:                              # DATA XREF: ROM:000441EC↑o
                ld      0x860(g7), g0
                lda     motion_kind2, g1
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
rob_info_old_motd_kind2_submenu:        # DATA XREF: ROM:000433C4↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_44240, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_44240:                              # DATA XREF: ROM:00044228↑o
                ld      0xC5C(g7), g0
                lda     motion_kind2, g1
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
rob_info_old_mot_kind2_submenu:         # DATA XREF: ROM:00043410↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_4427C, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_4427C:                              # DATA XREF: ROM:00044264↑o
                ld      0x1E24(g7), g0
                lda     motion_kind2, g1
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
motion_kind:    .long aMkChange         # DATA XREF: ROM:000440DC↑o
                .long aMkBegin          # "mk_begin"
                .long aMkFollow         # "mk_follow"
                .long aMkSyagami        # "mk_syagami"
                .long aMkAir            # "mk_air"
                .long aMkMove           # "mk_move"
                .long aMkTurn           # "mk_turn"
                .long aMkTrans          # "mk_trans"
                .long aMkAttack         # "mk_attack"
                .long aMkKamae          # "mk_kamae"
                .long aMkWalk           # "mk_walk"
                .long aMkBack           # "mk_back"
                .long aMkJump           # "mk_jump"
                .long aMkGuard          # "mk_guard"
                .long aMkDown           # "mk_down"
                .long aMkRise           # "mk_rise"
                .long aMkDownPose       # "mk_down_pose"
                .long aMkYarare         # "mk_yarare"
                .long aMkNage           # "mk_nage"
                .long aMkNagerare       # "mk_nagerare"
                .long aMkDturn          # "mk_dturn"
                .long aMkMirror         # "mk_mirror"
                .long aMkRideOn         # "mk_ride_on"
                .long aMkKaeseru        # "mk_kaeseru"
                .long aMkGacha          # "mk_gacha"
                .long aMkDontRYang      # "mk_dont_r_yang"
                .long aMkGAtk           # "mk_g_atk"
                .long aMkRun            # "mk_run"
                .long aMkRevise         # "mk_revise"
                .long aMkNagehanashi    # "mk_nagehanashi"
                .long aMkMuteki         # "mk_muteki"
                .long aMkYoke           # "mk_yoke"
motion_kind2:   .long aMk2KabeShift     # DATA XREF: ROM:000441CC↑o
                .long aMk2Tsunaganai    # "mk2_tsunaganai"
                .long aMk2Ukemi         # "mk2_ukemi"
                .long aMk2Sankaku       # "mk2_sankaku"
                .long aMk2Kikite        # "mk2_kikite"
                .long aMk2Replay        # "mk2_replay"
                .long aMk2ReplayInit    # "mk2_replay_init"
                .long aMk2Winpose       # "mk2_winpose"
                .long aMk2Zibaku        # "mk2_zibaku"
                .long aMk2Out           # "mk2_out"
                .long aMk2Pika          # "mk2_pika"
                .long aMk2AirNstart     # "mk2_air_nstart"
                .long aMk2Skelton       # "mk2_skelton"
                .long aMk2UdeR          # "mk2_ude_r"
                .long aMk2UdeL          # "mk2_ude_l"
                .long aMk2AsiR          # "mk2_asi_r"
                .long aMk2AsiL          # "mk2_asi_l"
                .long aMk2Jiku          # "mk2_jiku"
                .long aMk2Tobikoe       # "mk2_tobikoe"
                .long aMk2TouchNage     # "mk2_touch_nage"
                .long aMk2BackAttack    # "mk2_back_attack"
                .long aMk2Hadou         # "mk2_hadou"
                .long aMk2AttackOnce    # "mk2_attack_once"
                .long aMk2KosiNobi      # "mk2_kosi_nobi"
                .long aMk2NcBarrier     # "mk2_nc_barrier"
                .long aMk2TobiGuard     # "mk2_tobi_guard"
                .long aMk2StartCombo    # "mk2_start_combo"
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
# ---------------------------------------------------------------------------
rob_info_my_status_submenu:             # DATA XREF: ROM:0004328C↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_443BC, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_443BC:                              # DATA XREF: ROM:000443A4↑o
                ld      0x1250(g7), g0
                lda     off_443D4, g1   # "my_near_kabe"
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
off_443D4:      .long aMyNearKabe       # DATA XREF: ROM:000443C4↑o
                .long aMyNearUraKabe    # "my_near_ura_kabe"
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
dword_44400:    .long 0                 # DATA XREF: MAIN_DATA:028A1020↓o
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
dword_44430:    .long 0                 # DATA XREF: MAIN_DATA:028A1024↓o
                .long 0
                .long 0
                .long 0
                .long 0
dword_44444:    .long 0                 # DATA XREF: MAIN_DATA:028AE876↓o
                .long 0
                .long 0
                .long 0
# ---------------------------------------------------------------------------
rob_info_en_flag_submenu:               # DATA XREF: ROM:000434EC↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_4447C, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_4447C:                              # DATA XREF: ROM:00044464↑o
                ld      0x5B8(g7), g0
                lda     off_44490, g1   # "en_from_behind\t"
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
off_44490:      .long aEnFromBehind     # DATA XREF: ROM:00044480↑o
                .long aEnNotLookMe      # "en_not_look_me\t"
                .long aEnRun            # "en_run\t\t"
                .long aEnLookRightAtt   # "en_look_right_attack"
                .long aEnKamaeMirror    # "en_kamae_mirror"
                .long aEnDownAttack     # "en_down_attack"
                .long aEnSmall          # "en_small"
                .long aEnTikazuku       # "en_tikazuku"
                .long aEnTozakaru       # "en_tozakaru"
                .long aEnUpMove         # "en_up_move"
                .long aEnDownMove       # "en_down_move"
                .long 0
                .long 0
                .long 0
                .long 0
                .long aKtRight          # "kt_right"
                .long aKtTeTori         # "kt_te_tori"
                .long aKtAsiTori        # "kt_asi_tori"
                .long aKtPunchKaeshi    # "kt_punch_kaeshi"
                .long aKtLowPunchKaes   # "kt_low_punch_kaeshi"
                .long aKtHijiKaeshi     # "kt_hiji_kaeshi"
                .long aKtKickKaeshi     # "kt_kick_kaeshi"
                .long aKtMidKickKaesh   # "kt_mid_kick_kaeshi"
off_444EC:      .long aKtLowKickKaesh   # "kt_low_kick_kaeshi"
                .long 0
                .long 0
                .long aKtNageSpecial    # "kt_nage_special"
                .long 0
                .long 0
                .long 0
                .long aKtSyGuard        # "kt_sy_guard"
                .long 0
# ---------------------------------------------------------------------------
rob_info_en_nage_flag_submenu:          # DATA XREF: ROM:0004350C↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_44538, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_44538:                              # DATA XREF: ROM:00044520↑o
                ld      0x720(g7), g0
                lda     off_4454C, g1   # "en_nagereru"
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
off_4454C:      .long aEnNagereru       # DATA XREF: ROM:0004453C↑o
                .long aEnNagereru2      # "en_nagereru_2"
                .long aEnSyNagereru     # "en_sy_nagereru"
                .long aEnUraNagereru    # "en_ura_nagereru"
                .long aEnUsyNagereru    # "en_usy_nagereru"
                .long aEnMaxNagereru    # "en_max_nagereru"
                .long aEnDownNagereru   # "en_down_nagereru"
                .long aEnUraDownNager   # "en_ura_down_nagereru"
                .long aEnKabeChikai     # "en_kabe_chikai"
                .long aEnUraKabeChika   # "en_ura_kabe_chikai"
                .long aEnComboNagerer   # "en_combo_nagereru"
                .long aEnComboUraNage   # "en_combo_ura_nagereru"
                .long aEnTouchNagerer   # "en_touch_nagereru"
                .long aEnTouchUraNage   # "en_touch_ura_nagereru"
                .long 0
                .long aEnTouchNage      # "en_touch_nage"
                .long aEnAirNagereru    # "en_air_nagereru"
                .long aEnAirUranagere   # "en_air_uranagereru"
                .long aEnAirzNagereru   # "en_airz_nagereru"
                .long aEnAirzUranager   # "en_airz_uranagereru"
                .long aEnAirkNagereru   # "en_airk_nagereru"
                .long aEnAirkUranager   # "en_airk_uranagereru"
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
# ---------------------------------------------------------------------------
rob_info_flag_submenu:                  # DATA XREF: ROM:00043534↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_445F4, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_445F4:                              # DATA XREF: ROM:000445DC↑o
                ld      0x0(g7), g0
                lda     off_44608, g1   # "mot_end"
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
off_44608:      .long aMotEnd           # DATA XREF: ROM:000445F8↑o
                .long aDispLeftLook     # "disp_left_look"
                .long aFixHara          # "fix_hara"
                .long aYposCheckPass    # "ypos_check_pass"
                .long aCompel           # "compel"
                .long aLost             # "lost"
                .long aMirror           # "mirror"
                .long aInitEnd          # "init_end"
                .long aPlSyagami        # "pl_syagami"
                .long aTagYang          # "tag_yang"
                .long aNextMirror       # "next_mirror"
                .long aMotChange        # "mot_change"
                .long aMkChangeReq      # "mk_change_req"
                .long aLand             # "land"
                .long aCanUkemi         # "can_ukemi"
                .long aRiseCancel       # "rise_cancel"
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long aKaoInit          # "kao_init"
                .long aDontRevise       # "dont_revise"
                .long aKaoMuken         # "kao_muken"
                .long aGyangDisp        # "gyang_disp"
                .long aColiBallDisp     # "coli_ball_disp"
                .long aSmoothSwitch     # "smooth_switch"
                .long aOptionUnitF      # "option_unit_f"
                .long aHadaka           # "hadaka"
                .long aSmall            # "small"
                .long 0
                .long 0
# ---------------------------------------------------------------------------
rob_info_defence_submenu:               # DATA XREF: ROM:00043680↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_446B0, r15
                st      r15, 0x24(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_446B0:                              # DATA XREF: ROM:00044698↑o
                ld      0x6D4(g7), g0
                lda     off_446C4, g1   # "hd_ta_guard"
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
off_446C4:      .long aHdTaGuard        # DATA XREF: ROM:000446B4↑o
                .long aHdSyGuard        # "hd_sy_guard"
                .long aHdSyYoke         # "hd_sy_yoke"
                .long aHdAirYoke        # "hd_air_yoke"
                .long aHdMkChange       # "hd_mk_change"
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long aHdNoPerfect      # "hd_no_perfect"
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
# ---------------------------------------------------------------------------
DEBUG_GAME_PARAM:                       # DATA XREF: ROM:0003FE74↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xA191E0F
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     DEBUG_GAME_PARAM_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_game_param_nagerenai_timer:          # DATA XREF: ROM:0009600C↓o
                ldob    (pfp), pfp
                ldob    nagerenai_timer, g0 # nagerenai = "can't throw"
# ---------------------------------------------------------------------------
                .long 0
aNagerenaiTimer:.asciz "nagerenai_timer"
db_game_param_attack_base:.long 0x241103 # DATA XREF: ROM:00096010↓o
# ---------------------------------------------------------------------------
                ldob    attack_base, g0
# ---------------------------------------------------------------------------
                .long 3
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
aAttackBase:    .asciz "attack_base"
db_game_param_rise_base:.long 0x241103  # DATA XREF: ROM:00096014↓o
# ---------------------------------------------------------------------------
                ldob    rise_base, g0
# ---------------------------------------------------------------------------
                .long 3
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
aRiseBase:      .asciz "rise_base"
                .short 0
db_game_param_precede_inp_time:.long 0x241103
# ---------------------------------------------------------------------------
                ldob    precede_inp_time, g0
# ---------------------------------------------------------------------------
                .long 3
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
aPrecedeInpTime:.asciz "precede_inp_time"
                .fill 3, 1, 0
db_game_param_stage_low_judge:.long 0x23100 # DATA XREF: ROM:0009601C↓o
# ---------------------------------------------------------------------------
                ld      stage_low_judge, g0
# ---------------------------------------------------------------------------
                .long 0x200
aStageLowJudge: .asciz "stage_low_judge"
db_game_param_guard_limit:.long 0x241103 # DATA XREF: ROM:00096020↓o
# ---------------------------------------------------------------------------
                ldob    guard_limit, g0
# ---------------------------------------------------------------------------
                .long 3
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
aGuardLimit:    .asciz "guard_limit"
db_game_param_en_ang_dist:.long 0x23100 # DATA XREF: ROM:00096024↓o
# ---------------------------------------------------------------------------
                ld      en_ang_dist, g0
# ---------------------------------------------------------------------------
                .long 0x200
aEnAngDist:     .asciz "en_ang_dist"
db_game_param_no_coli_height:.long 0x23100 # DATA XREF: ROM:00096028↓o
# ---------------------------------------------------------------------------
                ld      no_coli_height, g0
# ---------------------------------------------------------------------------
                .long 0x200
aNoColiHeight:  .asciz "no_coli_height"
                .byte 0
db_game_param_barrier_default_num:.long 0x100
# ---------------------------------------------------------------------------
                ld      barrier_default_num, g0
# ---------------------------------------------------------------------------
                .long 0
aBarrierDefault:.asciz "barrier_default_num"
db_game_param_zanzou_ma:.long 0x23100   # DATA XREF: ROM:00096030↓o
# ---------------------------------------------------------------------------
                ld      zanzou_ma, g0
# ---------------------------------------------------------------------------
                .long 0x200
aZanzouMa:      .asciz "zanzou_ma"
                .short 0
db_game_param_zanzou_inc:.long 0x6100   # DATA XREF: ROM:00096034↓o
# ---------------------------------------------------------------------------
                ldis    zanzou_inc, g0
# ---------------------------------------------------------------------------
                .long 0
aZanzouInc:     .asciz "zanzou_inc"
                .byte 0
db_game_param_zanzou_pat1:.long 0x6100  # DATA XREF: ROM:00096038↓o
# ---------------------------------------------------------------------------
                ldis    zanzou_pat1, g0
# ---------------------------------------------------------------------------
                .long 0
aZanzouPat1:    .asciz "zanzou_pat1"
db_game_param_zanzou_pat2:.long 0x6100  # DATA XREF: ROM:0009603C↓o
# ---------------------------------------------------------------------------
                ldis    zanzou_pat2, g0
# ---------------------------------------------------------------------------
                .long 0
aZanzouPat2:    .asciz "zanzou_pat2"
db_game_param_zanzou_num:.long 0x80002000 # DATA XREF: ROM:00096040↓o
# ---------------------------------------------------------------------------
                ldos    zanzou_num, g0
# ---------------------------------------------------------------------------
                .long 0
aZanzouNum:     .asciz "zanzou_num"
                .byte 0
# ---------------------------------------------------------------------------
DEBUG_DOWN_EFC_SPD:                     # DATA XREF: ROM:0003FE90↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xE12140F
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_449A4, r15
                st      r15, 0x24(g3)
                lda     DEBUG_DOWN_EFC_SPD_list, r15
                st      r15, 0x40(g3)
                mov     0, r3
                lda     list_90_floats_RAM, g4
                stob    r3, 0x44(g3)
                stob    r3, 0x110(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_449A4:                              # DATA XREF: ROM:0004496C↑o
                ldob    0x110(g3), r3
                addo    0x1F, 9, r13
                mulo    r13, r3, r3
                lda     list_90_floats_RAM(r3), g4
                call    loc_4E8F0
                ret
# ---------------------------------------------------------------------------
db_down_efc_combo_start:.long 0x1100    # DATA XREF: ROM:00096048↓o
# ---------------------------------------------------------------------------
                ldob    combo_start, g0
# ---------------------------------------------------------------------------
                .long 0
aComboStart:    .asciz "combo_start"
db_down_efc_combo_sub:.long 0x12100     # DATA XREF: ROM:0009604C↓o
# ---------------------------------------------------------------------------
                ldos    combo_sub, g0
# ---------------------------------------------------------------------------
                .long 4
aComboSub:      .asciz "combo_sub"
                .short 0
db_down_efc_combo_limit:.long 0x12100   # DATA XREF: ROM:00096050↓o
# ---------------------------------------------------------------------------
                ldos    combo_limit, g0
# ---------------------------------------------------------------------------
                .long 4
aComboLimit:    .asciz "combo_limit"
db_down_efc_no_coli_low:.long 0x23100   # DATA XREF: ROM:00096054↓o
# ---------------------------------------------------------------------------
                ld      no_coli_low, g0
# ---------------------------------------------------------------------------
                .long 0x200
aNoColiLow:     .asciz "no_coli_low"
db_down_efc_no_coli_height:.long 0x23100 # DATA XREF: ROM:00096058↓o
# ---------------------------------------------------------------------------
                ld      no_coli_height, g0
# ---------------------------------------------------------------------------
                .long 0x200
aNoColiAhigh:   .asciz "no_coli_ahigh"
                .byte 0
                .byte 0
db_down_efc_lau_mul_J:.long 0x266310F   # DATA XREF: ROM:0009605C↓o
# ---------------------------------------------------------------------------
                ld      lau_mul_J, g0
# ---------------------------------------------------------------------------
                .long 0x200
# ---------------------------------------------------------------------------
                lda     displacement, g0
                lda     0x40000000, g0
# ---------------------------------------------------------------------------
aLauMulJ:       .asciz "lau_mul_J"
                .short 0
db_down_efc_lau_add_xang:.long 0x16100  # DATA XREF: ROM:00096060↓o
# ---------------------------------------------------------------------------
                ldis    lau_add_xang, g0
# ---------------------------------------------------------------------------
                .long 4
aLauAddXang:    .asciz "lau_add_xang"
                .fill 2, 1, 0
                .byte 0
db_down_efc_limit_xang:.long 0x16100    # DATA XREF: ROM:00096064↓o
# ---------------------------------------------------------------------------
                ldis    limit_xang, g0
# ---------------------------------------------------------------------------
                .long 4
aLimitXang:     .asciz "limit_xang"
                .byte 0
db_down_efc_down_table:.long 0x241103   # DATA XREF: ROM:00096068↓o
# ---------------------------------------------------------------------------
                ldob    0x110(g3), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
aDownTable:     .asciz "down_table"
                .byte 0
db_down_efc_pow:.long 0x23100           # DATA XREF: ROM:0009606C↓o
# ---------------------------------------------------------------------------
                ld      8(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aPow:           .asciz "pow"
db_down_efc_cu_pow:.long 0x23100        # DATA XREF: ROM:00096070↓o
# ---------------------------------------------------------------------------
                ld      0xC(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCuPow:         .asciz "cu_pow"
                .byte 0
db_down_efc_dw_xang:.long 0x16100       # DATA XREF: ROM:00096074↓o
# ---------------------------------------------------------------------------
                ldis    0x20(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 4
aDwXang:        .asciz "dw_xang"
db_down_efc_dw_pow:.long 0x23100        # DATA XREF: ROM:00096078↓o
# ---------------------------------------------------------------------------
                ld      0x10(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aDwPow:         .asciz "dw_pow"
                .byte 0
db_down_efc_cu_dw_xang:.long 0x16100    # DATA XREF: ROM:0009607C↓o
# ---------------------------------------------------------------------------
                ldis    0x22(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 4
aCuDwXang:      .asciz "cu_dw_xang"
                .byte 0
db_down_efc_cu_dw_pow:.long 0x23100     # DATA XREF: ROM:00096080↓o
# ---------------------------------------------------------------------------
                ld      0x14(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCuDwPow:       .asciz "cu_dw_pow"
                .byte 0
                .byte 0
db_down_efc_dw_air_xang:.long 0x16100   # DATA XREF: ROM:00096084↓o
# ---------------------------------------------------------------------------
                ldis    0x24(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 4
aDwAirXang:     .asciz "dw_air_xang"
db_down_efc_dw_air_pow:.long 0x23100    # DATA XREF: ROM:00096088↓o
# ---------------------------------------------------------------------------
                ld      0x18(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aDwAirPow:      .asciz "dw_air_pow"
                .byte 0
db_down_efc_cu_dw_air_xang:.long 0x16100 # DATA XREF: ROM:0009608C↓o
# ---------------------------------------------------------------------------
                ldis    0x26(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 4
aCuDwAirXang:   .asciz "cu_dw_air_xang"
                .byte 0
db_down_efc_cu_dw_air_pow:.long 0x23100 # DATA XREF: ROM:00096090↓o
# ---------------------------------------------------------------------------
                ld      0x1C(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCuDwAirPow:    .asciz "cu_dw_air_pow"
                .byte 0
                .byte 0
db_down_efc_test_int:.long 0x100        # DATA XREF: ROM:00096094↓o
# ---------------------------------------------------------------------------
                ld      test_int, g0
# ---------------------------------------------------------------------------
                .long 0
aTestInt_0:     .asciz "test_int"
                .fill 3, 1, 0
db_down_efc_test_float:.long 0x80023000 # DATA XREF: ROM:00096098↓o
# ---------------------------------------------------------------------------
                ld      test_float, g0
# ---------------------------------------------------------------------------
                .long 0x200
aTestFloat:     .asciz "test_float"
                .byte 0
db_down_efc_cvt_ir:.long 0x6667011F     # DATA XREF: ROM:0009609C↓o
# ---------------------------------------------------------------------------
                ld      cvt_ir, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aCvtIr:         .asciz "cvt_ir"
                .byte 0
db_down_efc_loop:.long 0x100            # DATA XREF: ROM:000960A0↓o
# ---------------------------------------------------------------------------
                ld      loop, g0
# ---------------------------------------------------------------------------
                .long 0
aLoop:          .asciz "loop"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
DEBUG_PARAMETER_SET:                    # DATA XREF: ROM:0003FEB0↑o
                ld      fa_camera, g4
                ld      fa_rob0, g5
                ld      fa_rob1, g6
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xA141408
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     DEBUG_PARAMETER_SET_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_44CC4:                              # DATA XREF: ROM:00044D84↓o
                call    change_scene
                call    scr_bg_int
                mov     1, r4
                ld      mod_fa_obj0, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     object_init, r5
                st      r5, 0xC(r3)
                call    send_tex_col
                ret
# ---------------------------------------------------------------------------
loc_44CF8:                              # DATA XREF: ROM:00044DD0↓o
                call    sub_5A784
                call    send_tex_col
                call    sub_81038
                call    sub_7F0E8       # Inits player bodies
                call    scale_something
                call    char_nameplate_dsp
                ret
# ---------------------------------------------------------------------------
db_param_time:  .long 0x264510F         # DATA XREF: ROM:000960A8↓o
# ---------------------------------------------------------------------------
                ldib    time, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                lda     0x63, g0
                ret
# ---------------------------------------------------------------------------
aTime:          .asciz "time"
                .fill 3, 1, 0
db_param_round: .long 0x264510F         # DATA XREF: ROM:000960AC↓o
# ---------------------------------------------------------------------------
                ldib    start_stage, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xA, g0
                ret
# ---------------------------------------------------------------------------
aRound:         .asciz "round"
                .short 0
db_param_stage: .long 0x264536F         # DATA XREF: ROM:000960B0↓o
# ---------------------------------------------------------------------------
                ldib    stage_num, g0
# ---------------------------------------------------------------------------
                .long 2
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xF, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_44CC4, g0
# ---------------------------------------------------------------------------
aStage:         .asciz "stage"
                .short 0
db_param_stage_name:.long 0xA4035010    # DATA XREF: ROM:000960B4↓o
# ---------------------------------------------------------------------------
                ldib    stage, g0
# ---------------------------------------------------------------------------
                .long 0
                .long stage_name_list
                .long 0
db_param_p1_name:.long 0x2667537F       # DATA XREF: ROM:000960B8↓o
# ---------------------------------------------------------------------------
                ldib    0x1B0(g5), g0   # g0 = P1_PARTS+0x1B0
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0x33, g0
                ret
# ---------------------------------------------------------------------------
                .long character_name_list
# ---------------------------------------------------------------------------
                lda     loc_44CF8, g0
# ---------------------------------------------------------------------------
a1pChar:        .asciz "1P CHAR"
db_param_p2_name:.long 0x2667537F       # DATA XREF: ROM:000960BC↓o
# ---------------------------------------------------------------------------
                ldib    0x1B0(g6), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0x33, g0
                ret
# ---------------------------------------------------------------------------
                .long character_name_list
# ---------------------------------------------------------------------------
                lda     loc_44CF8, g0
# ---------------------------------------------------------------------------
a2pChar:        .asciz "2P CHAR"
db_param_game_music:.long 0x6667011F    # DATA XREF: ROM:000960C0↓o
# ---------------------------------------------------------------------------
                ld      debug_flag, g0
# ---------------------------------------------------------------------------
                .long 0xB0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aGameMusic:     .asciz "game_music"
                .byte 0
db_param_sfx_on_off:.long 0x6667011F    # DATA XREF: ROM:000960C4↓o
# ---------------------------------------------------------------------------
                ld      debug_flag, g0
# ---------------------------------------------------------------------------
                .long 0xF0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSe:            .asciz "SE"
                .byte 0
db_param_no_kamae_move:.long 0x6667011F # DATA XREF: ROM:000960C8↓o
# ---------------------------------------------------------------------------
                ld      debug_flag, g0
# ---------------------------------------------------------------------------
                .long 0x100000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aNoKamaeMove:   .asciz "no_kamae_move"
                .short 0
db_param_cage_height:.long 0x23100      # DATA XREF: ROM:000960CC↓o
# ---------------------------------------------------------------------------
                ld      cage_height, g0
# ---------------------------------------------------------------------------
                .long 0x200
aCageHeight:    .asciz "cage_height"
db_param_stage_xpos:.long 0x23100       # DATA XREF: ROM:000960D0↓o
# ---------------------------------------------------------------------------
                ld      stage_xpos, g0
# ---------------------------------------------------------------------------
                .long 0x101
aStageXpos:     .asciz "stage_xpos"
                .byte 0
db_param_stage_ypos:.long 0x23100       # DATA XREF: ROM:000960D4↓o
# ---------------------------------------------------------------------------
                ld      stage_ypos, g0
# ---------------------------------------------------------------------------
                .long 0x101
aStageYpos:     .asciz "stage_ypos"
                .byte 0
db_param_stage_zpos:.long 0x23100       # DATA XREF: ROM:000960D8↓o
# ---------------------------------------------------------------------------
                ld      stage_zpos, g0
# ---------------------------------------------------------------------------
                .long 0x101
aStageZpos:     .asciz "stage_zpos"
                .byte 0
db_param_stage_xang:.long 0x11100       # DATA XREF: ROM:000960DC↓o
# ---------------------------------------------------------------------------
                ldob    stage_xang, g0
# ---------------------------------------------------------------------------
                .long 2
aStageXang:     .asciz "stage_xang"
                .byte 0
db_param_stage_yang:.long 0x11100       # DATA XREF: ROM:000960E0↓o
# ---------------------------------------------------------------------------
                ldob    stage_yang, g0
# ---------------------------------------------------------------------------
                .long 2
aStageYang:     .asciz "stage_yang"
                .byte 0
db_param_stage_zang:.long 0x11100       # DATA XREF: ROM:000960E4↓o
# ---------------------------------------------------------------------------
                ldob    stage_zang, g0
# ---------------------------------------------------------------------------
                .long 2
aStageZang:     .asciz "stage_zang"
                .byte 0
db_param_start_yang:.long 0x11100       # DATA XREF: ROM:000960E8↓o
# ---------------------------------------------------------------------------
                ldob    start_yang, g0
# ---------------------------------------------------------------------------
                .long 2
aStartYang:     .asciz "start_yang"
                .byte 0
db_param_stage_xmin:.long 0x80023000    # DATA XREF: ROM:000960EC↓o
# ---------------------------------------------------------------------------
                ld      stage_xmin, g0
# ---------------------------------------------------------------------------
                .long 0x203
aStageXmin:     .asciz "stage_xmin"
                .byte 0
db_param_stage_xmax:.long 0x80023000    # DATA XREF: ROM:000960F0↓o
# ---------------------------------------------------------------------------
                ld      stage_xmax, g0
# ---------------------------------------------------------------------------
                .long 0x203
aStageXmax:     .asciz "stage_xmax"
                .byte 0
db_param_stage_vxmin:.long 0x80023000   # DATA XREF: ROM:000960F4↓o
# ---------------------------------------------------------------------------
                ld      stage_vxmin, g0
# ---------------------------------------------------------------------------
                .long 0x203
aStageVxmin:    .asciz "stage_vxmin"
db_param_stage_x:.long 0x23100          # DATA XREF: ROM:000960F8↓o
# ---------------------------------------------------------------------------
                ld      stage_x, g0
# ---------------------------------------------------------------------------
                .long 0x200
aStageX:        .asciz "stage_x"
db_param_stage_size:.long 0x23100       # DATA XREF: ROM:000960FC↓o
# ---------------------------------------------------------------------------
                ld      floor_stage_size_0, g0
# ---------------------------------------------------------------------------
                .long 0x200
aStageSize:     .asciz "stage_size"  # DATA XREF: MAIN_DATA:0289193C↓o
                .byte 0
db_param_stage_vmax:.long 0x80023000    # DATA XREF: ROM:00096100↓o
# ---------------------------------------------------------------------------
                ld      stage_vxmax, g0
# ---------------------------------------------------------------------------
                .long 0x203
aStageVxmax:    .asciz "stage_vxmax"
db_param_cage_ypos:.long 0x23100        # DATA XREF: ROM:00096104↓o
# ---------------------------------------------------------------------------
                ld      cage_ypos, g0
# ---------------------------------------------------------------------------
                .long 0x203
aCageYpos:      .asciz "cage_ypos"
                .short 0
db_param_pole_shift_on_off:.long 0x6667011F # DATA XREF: ROM:00096108↓o
# ---------------------------------------------------------------------------
                ld      pole_shift, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aPoleShift:     .asciz "pole shift"
                .byte 0
db_param_thunder_on_off:.long 0x6667011F # DATA XREF: ROM:0009610C↓o
# ---------------------------------------------------------------------------
                ld      0xDF(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aThunder:       .asciz "thunder"
db_param_not_scr_bg_move_on_off:.long 0x6667011F
# ---------------------------------------------------------------------------
                ld      not_scr_bg_move, g0
# ---------------------------------------------------------------------------
                .long 0xE0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aNotScrBgMove:  .asciz "not_scr_bg_move"
db_param_stage_soko:.long 0x80023000    # DATA XREF: ROM:00096114↓o
# ---------------------------------------------------------------------------
                ld      stage_soko, g0
# ---------------------------------------------------------------------------
                .long 0x200
aStageSoko:     .asciz "stage_soko"
                .byte 0
                .long stage_soko_Off    # "OFF"
                .long stage_soko_On     # " ON"
stage_name_list:.long a0Dummy           # DATA XREF: ROM:00044DA4↑o
                .long a1Eisland         # " 1:  EISLAND"
                .long a2Kinoko          # " 2:  KINOKO"
                .long a3Egypt           # " 3:  EGYPT"
                .long a4Factory         # " 4: FACTORY"
                .long a5_3              # " 5:         "
                .long a6Pinball         # " 6: PINBALL"
                .long a7NorthPole       # " 7: NORTH_POLE"
                .long a8_1              # " 8:         "
                .long a9_1              # " 9:         "
                .long a10_3             # "10:         "
                .long a11_1             # "11:         "
                .long a12_0             # "12:         "
                .long a13_0             # "13:         "
                .long a14AdvMovie       # "14:ADV_MOVIE"
                .long a15AdvMov2        # "15:ADV_MOV2 "
                .long a16_0             # "16:         "
                .long a17_0             # "17"
                .long a18_0             # "18"
                .long a19_0             # "19"
                .long a20_2             # "20"
                .long a21_0             # "21"
                .long a22_2             # "22"
                .long a23_0             # "23"
                .long a24_0             # "24"
                .long a25_1             # "25"
                .long a26               # "26"
                .long a27               # "27"
                .long a28Colloseum      # "28:COLLOSEUM"
                .long a29               # "29"
                .long a30Snow           # "30:SNOW     "
                .long a31               # "31"
                .long a32_1             # "32"
                .long a33_3             # "33"
                .long a34               # "34"
                .long a35_0             # "35"
                .long a36               # "36"
                .long a37               # "37"
                .long a38               # "38"
                .long a39               # "39"
                .long a40_1             # "40"
                .long a41               # "41"
                .long a42               # "42"
                .long a43               # "43"
                .long a44               # "44"
                .long a45_0             # "45"
                .long a46               # "46"
                .long a47               # "47"
                .long a48               # "48"
                .long a49               # "49"
                .long a50_0             # "50"
                .long a51               # "51"
                .long a52               # "52"
                .long a53               # "53"
                .long a54               # "54"
                .long a55_1             # "55"
                .long a56               # "56"
                .long a57               # "57"
                .long a58               # "58"
                .long a59               # "59"
                .long a60_0             # "60"
                .long a61               # "61"
                .long a62               # "62"
                .long a63               # "63"
                .long a64               # "64"
                .long a65               # "65"
                .long a66               # "66"
                .long a67               # "67"
                .long a68               # "68"
                .long a69               # "69"
                .long a70_0             # "70"
                .long a71               # "71"
                .long a72               # "72"
                .long a73               # "73"
                .long a74               # "74"
                .long a75               # "75"
                .long a76               # "76"
                .long a77               # "77"
                .long a78               # "78"
                .long a79               # "79"
                .long a80_0             # "80"
                .long a81               # "81"
                .long a82               # "82"
                .long a83               # "83"
                .long a84               # "84"
                .long a85               # "85"
                .long a86               # "86"
                .long a87               # "87"
                .long a88               # "88"
                .long a89               # "89"
                .long a90_0             # "90"
                .long a91               # "91"
                .long a92               # "92"
                .long a93               # "93"
                .long a94               # "94"
                .long a95               # "95"
                .long a96               # "96"
                .long a97               # "97"
                .long a98Normal         # "98:NORMAL   "
                .long a99Nameentry      # "99:NAMEENTRY"
character_name_list:.long aSonic_4      # DATA XREF: ROM:00044DCC↑o
                .long aTails_4          # "TAILS"
                .long aAmy_4            # "AMY"
                .long aMetal_1          # "METAL"
                .long aFang_4           # "FANG"
                .long aKuma             # "KUMA"
                .long aKnuckle          # "KNUCKLE"
                .long aEspio_2          # "ESPIO"
                .long aEggman_0         # "EGGMAN"
                .long aEggmanb_0        # "EGGMANB"
                .long aBean_3           # "BEAN"
                .long aEggRob1          # "EGG_ROB1"
                .long aDum4_0           # "DUM4"
                .long aDum5             # "DUM5"
                .long aDum6             # "DUM6"
                .long aHoney            # "HONEY"
                .long aDum8             # "DUM8"
                .long aDum9             # "DUM9"
                .long aDum10            # "DUM10"
                .long aDum11            # "DUM11"
                .long aDum12            # "DUM12"
                .long aDum13            # "DUM13"
                .long aDum14            # "DUM14"
                .long aDum15            # "DUM15"
                .long aDum16            # "DUM16"
                .long aDum17            # "DUM17"
                .long aSonicI           # "SONIC_I"
                .long aTailsI           # "TAILS_I"
                .long aAmyI             # "AMY_I"
                .long aMetalI           # "METAL_I"
                .long aFangI            # "FANG_I"
                .long aKumaI            # "KUMA_I"
                .long aKnuckleI         # "KNUCKLE_I"
                .long aEspioI           # "ESPIO_I"
                .long aEggmanI          # "EGGMAN_I"
                .long aEggmanbI         # "EGGMANB_I"
                .long aBeanI            # "BEAN_I"
                .long aEggRob1I         # "EGG_ROB1_I"
                .long aDum4I            # "DUM4_I"
                .long aDum5I            # "DUM5_I"
                .long aDum6I            # "DUM6_I"
                .long aHoneyI           # "HONEY_I"
                .long aDum8I            # "DUM8_I"
                .long aDum9I            # "DUM9_I"
                .long aDum10I           # "DUM10_I"
                .long aDum11I           # "DUM11_I"
                .long aDum12I           # "DUM12_I"
                .long aDum13I           # "DUM13_I"
                .long aDum14I           # "DUM14_I"
                .long aDum15I           # "DUM15_I"
                .long aDum16I           # "DUM16_I"
                .long aDum17I           # "DUM17_I"
# ---------------------------------------------------------------------------
DEBUG_CAMERA_INFO:                      # DATA XREF: ROM:0004006C↑o
                ld      mod_fa_obj0, g5
                ld      fa_camera, g4
                ld      mod_fa_game_disp, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x7122323
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     DEBUG_CAM_INFO_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_cam_info_game_disp_flag:.long 0x80010000 # DATA XREF: ROM:00096488↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0     # "mod_fa_game_disp_add" is really "game_disp_flag"
                ret
# ---------------------------------------------------------------------------
                .long 0
aGameDispFlag:  .asciz "game_disp_flag"
                .byte 0
db_cam_info_cam_mode:.long 0x1100       # DATA XREF: ROM:0009648C↓o
# ---------------------------------------------------------------------------
                ldob    0x40(g4), g0    # g0 = mod_fa_camera_add+0x40
                ret
# ---------------------------------------------------------------------------
                .long 0
aCamMode:       .asciz "cam_mode"
                .fill 2, 1, 0
                .byte 0
db_cam_info_object_cntr:.long 0x2100    # DATA XREF: ROM:00096490↓o
# ---------------------------------------------------------------------------
                ldos    6(g5), g0       # g0 = mod_fa_obj0_add+0x6
                ret
# ---------------------------------------------------------------------------
                .long 0
aObjectCntr:    .asciz "object cntr"
db_cam_info_xang:.long 0x11100          # DATA XREF: ROM:00096494↓o
# ---------------------------------------------------------------------------
                ldob    0x25(g4), g0    # g0 = mod_fa_camera_add+0x25
                ret
# ---------------------------------------------------------------------------
                .long 2
aXang_1:        .asciz "xang"
                .byte 0
                .byte 0
                .byte 0
db_cam_info_not_labeled:.long 0x12100   # DATA XREF: ROM:00096498↓o
# ---------------------------------------------------------------------------
                ldos    0x24(g4), g0    # g0 = mod_fa_camera_add+0x24
                ret
# ---------------------------------------------------------------------------
                .long 0
                .long 0
db_cam_info_yang:.long 0x11100          # DATA XREF: ROM:0009649C↓o
# ---------------------------------------------------------------------------
                ldob    0x27(g4), g0    # g0 = mod_fa_camera_add+0x27
                ret
# ---------------------------------------------------------------------------
                .long 2
aYang_5:        .asciz "yang"
                .byte 0
                .short 0
db_cam_info_zang:.long 0x11100          # DATA XREF: ROM:000964A0↓o
# ---------------------------------------------------------------------------
                ldob    0x29(g4), g0    # g0 = mod_fa_camera_add+0x29
                ret
# ---------------------------------------------------------------------------
                .long 2
aZang_1:        .asciz "zang"
                .fill 3, 1, 0
db_cam_info_xpos:.long 0x23100          # DATA XREF: ROM:000964A4↓o
# ---------------------------------------------------------------------------
                ld      0x18(g4), g0    # g0 = mod_fa_camera_add+0x18
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aXpos_3:        .asciz "xpos"
                .fill 3, 1, 0
db_cam_info_ypos:.long 0x23100          # DATA XREF: ROM:000964A8↓o
# ---------------------------------------------------------------------------
                ld      0x1C(g4), g0    # g0 = mod_fa_camera_add+0x1C
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aYpos_3:        .asciz "ypos"
                .fill 3, 1, 0
db_cam_info_zpos:.long 0x23100          # DATA XREF: ROM:000964AC↓o
# ---------------------------------------------------------------------------
                ld      0x20(g4), g0    # g0 = mod_fa_camera_add+0x20
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aZpos_3:        .asciz "zpos"
                .fill 3, 1, 0
db_cam_info_cam_dist:.long 0x23100      # DATA XREF: ROM:000964B0↓o
# ---------------------------------------------------------------------------
                ld      0x2E8(g4), g0   # g0 = mod_fa_camera_add+0x2E8
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCamDist:       .asciz "cam_dist"
                .fill 2, 1, 0
                .byte 0
db_cam_info_cam_dist_ratio:.long 0x23100 # DATA XREF: ROM:000964B4↓o
# ---------------------------------------------------------------------------
                ld      0x30C(g4), g0   # g0 = mod_fa_camera_add+0x30C
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCamDistRatio:  .asciz "cam_dist_ratio"
                .byte 0
db_cam_info_ypos_bias:.long 0x23100     # DATA XREF: ROM:000964B8↓o
# ---------------------------------------------------------------------------
                ld      0x2DC(g4), g0   # g0 = mod_fa_camera_add+0x2DC
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aYposBias:      .asciz "ypos_bias"
                .short 0
db_cam_info_dir_bias:.long 0x23100      # DATA XREF: ROM:000964BC↓o
# ---------------------------------------------------------------------------
                ld      0x2E0(g4), g0   # g0 = mod_fa_camera_add+0x2E0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aDirBias:       .asciz "dir_bias"
                .fill 3, 1, 0
db_cam_info_center:.long 0x23100        # DATA XREF: ROM:000964C0↓o
# ---------------------------------------------------------------------------
                ld      0x2EC(g4), g0   # g0 = mod_fa_camera_add+0x2EC
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCenter_0:      .asciz "center"
                .byte 0
db_cam_info_zure:.long 0x23100          # DATA XREF: ROM:000964C4↓o
# ---------------------------------------------------------------------------
                ld      0x2F0(g4), g0   # g0 = mod_fa_camera_add+0x2F0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aZure:          .asciz "zure"
                .fill 3, 1, 0
db_cam_info_cam_st_x:.long 0x23100      # DATA XREF: ROM:000964C8↓o
# ---------------------------------------------------------------------------
                ld      0x120(g4), g0   # g0 = mod_fa_camera_add+0x120
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCamStX:        .asciz "cam_st_x"
                .fill 3, 1, 0
db_cam_info_cam_st_y:.long 0x23100      # DATA XREF: ROM:000964CC↓o
# ---------------------------------------------------------------------------
                ld      0x124(g4), g0   # g0 = mod_fa_camera_add+0x124
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCamStY:        .asciz "cam_st_y"
                .fill 3, 1, 0
db_cam_info_cam_st_z:.long 0x23100      # DATA XREF: ROM:000964D0↓o
# ---------------------------------------------------------------------------
                ld      0x128(g4), g0   # g0 = mod_fa_camera_add+0x128
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCamStZ:        .asciz "cam_st_z"
                .fill 3, 1, 0
db_cam_info_yang_kirikae:.long 0x2100   # DATA XREF: ROM:000964D4↓o
# ---------------------------------------------------------------------------
                ldos    0x306(g4), g0   # g0 = mod_fa_camera_add+0x306
                ret
# ---------------------------------------------------------------------------
                .long 0
aYangKirikae:   .asciz "yang_kirikae"
                .fill 3, 1, 0
db_cam_info_ypos_bias_1:.long 0x23100   # DATA XREF: ROM:000964D8↓o
# ---------------------------------------------------------------------------
                ld      0x2DC(g4), g0   # g0 = mod_fa_camera_add+0x2DC
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aYposBias_1:    .asciz "ypos_bias"
                .short 0
db_cam_info_dir_bias_1:.long 0x23100    # DATA XREF: ROM:000964DC↓o
# ---------------------------------------------------------------------------
                ld      0x2E0(g4), g0   # g0 = mod_fa_camera_add+0x2E0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aDirBias_1:     .asciz "dir_bias"
                .fill 3, 1, 0
db_cam_info_yang_spd:.long 0x12100      # DATA XREF: ROM:000964E0↓o
# ---------------------------------------------------------------------------
                ldos    0x304(g4), g0   # g0 = mod_fa_camera_add+0x304
                ret
# ---------------------------------------------------------------------------
                .long 0
aYangSpd:       .asciz "yang_spd"
                .fill 3, 1, 0
db_cam_info_next_yang:.long 0x11100     # DATA XREF: ROM:000964E4↓o
# ---------------------------------------------------------------------------
                ldob    0x309(g4), g0   # g0 = mod_fa_camera_add+0x309
                ret
# ---------------------------------------------------------------------------
                .long 2
aNextYang:      .asciz "next_yang"
                .short 0
db_cam_info_game_xang:.long 0x12100     # DATA XREF: ROM:000964E8↓o
# ---------------------------------------------------------------------------
                ldos    0xF9(g4), g0    # g0 = mod_fa_camera_add+0xF9
                ret
# ---------------------------------------------------------------------------
                .long 2
aGameXang_0:    .asciz "game_xang"
                .short 0
db_cam_info_not_labeled_1:.long 0x80012000 # DATA XREF: ROM:000964EC↓o
# ---------------------------------------------------------------------------
                ldos    0xF8(g4), g0    # g0 = mod_fa_camera_add+0xF8
                ret
# ---------------------------------------------------------------------------
                .long 0
                .long 0
db_cam_info_focus_dist_x:.long 0x23100  # DATA XREF: ROM:000964F0↓o
# ---------------------------------------------------------------------------
                ld      focus_dist_x, g0
# ---------------------------------------------------------------------------
                .long 0
aFocusDistX:    .asciz "focus_dist_x"
                .fill 3, 1, 0
db_cam_info_focus_dist_y:.long 0x23100  # DATA XREF: ROM:000964F4↓o
# ---------------------------------------------------------------------------
                ld      focus_dist_y, g0
# ---------------------------------------------------------------------------
                .long 0
aFocusDistY:    .asciz "focus_dist_y"
                .fill 3, 1, 0
db_cam_info_cage_f_disp:.long 0x6667011F # DATA XREF: ROM:000964F8↓o
# ---------------------------------------------------------------------------
                ld      0x0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 14               # Bit 14
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aCageFDisp:     .asciz "cage_f_disp"
db_cam_info_cage_no_disp:.long 0x6667011F # DATA XREF: ROM:000964FC↓o
# ---------------------------------------------------------------------------
                ld      0x0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 15               # Bit 15
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aCageNoDisp:    .asciz "cage_no_disp"
                .short 0
                .byte 0
db_cam_info_rob0_disp:.long 0x6667011F  # DATA XREF: ROM:00096500↓o
# ---------------------------------------------------------------------------
                ld      0x0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 1                # Bit 1
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aRob0Disp:      .asciz "rob0_disp"
                .short 0
db_cam_info_rob1_disp:.long 0x6667011F  # DATA XREF: ROM:00096504↓o
# ---------------------------------------------------------------------------
                ld      0x0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 2                # Bit 2
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aRob1Disp:      .asciz "rob1_disp"
                .short 0
db_cam_info_o_no_disp:.long 0x6667011F  # DATA XREF: ROM:00096508↓o
# ---------------------------------------------------------------------------
                ld      0x0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 16               # Bit 16
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aONoDisp:       .asciz "o_no_disp"
                .short 0
db_cam_info_u_no_disp:.long 0x6667011F  # DATA XREF: ROM:0009650C↓o
# ---------------------------------------------------------------------------
                ld      0x0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 17               # Bit 17
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aUNoDisp:       .asciz "u_no_disp"
                .short 0
db_cam_info_g_no_disp:.long 0x6667011F  # DATA XREF: ROM:00096510↓o
# ---------------------------------------------------------------------------
                ld      0x0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 18               # Bit 18
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aGNoDisp:       .asciz "g_no_disp"
                .short 0
db_cam_info_obj_no_disp:.long 0x6667011F # DATA XREF: ROM:00096514↓o
# ---------------------------------------------------------------------------
                ld      0x0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 20               # Bit 20
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aObjNoDisp:     .asciz "obj_no_disp"
db_cam_info_stage_no_disp:.long 0x6667011F # DATA XREF: ROM:00096518↓o
# ---------------------------------------------------------------------------
                ld      0x0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 19               # Bit 19
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aStageNoDisp:   .asciz "stage_no_disp"
                .short 0
db_cam_info_etc_no_disp:.long 0x6667011F # DATA XREF: ROM:0009651C↓o
# ---------------------------------------------------------------------------
                ld      0x0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 21               # Bit 21
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aEtcNoDisp:     .asciz "etc_no_disp"
db_cam_info_scrB_H_page:.long 0x12100   # DATA XREF: ROM:00096520↓o
# ---------------------------------------------------------------------------
                ldos    scrB_H_page, g0
# ---------------------------------------------------------------------------
                .long 4
aScrbHPage:     .asciz "scrB_H_page"
db_cam_info_scrB_V_page:.long 0x12100   # DATA XREF: ROM:00096524↓o
# ---------------------------------------------------------------------------
                ldos    scrB_V_page, g0
# ---------------------------------------------------------------------------
                .long 4
aScrbVPage:     .asciz "scrB_V_page"
db_cam_info_scroll_stage_num:.long 0x12100 # DATA XREF: ROM:00096528↓o
# ---------------------------------------------------------------------------
                ldos    scroll_stage_num, g0
# ---------------------------------------------------------------------------
                .long 2
aScrollStageNum:.asciz "scroll_stage_num"
                .fill 3, 1, 0
db_cam_scrB_send:.long 0x200            # DATA XREF: ROM:0009652C↓o
# ---------------------------------------------------------------------------
                lda     scr_bg_int, g0
# ---------------------------------------------------------------------------
                .long 0
aSend:          .asciz "send"
                .fill 3, 1, 0
db_cam_info_win_points:.long 0x100      # DATA XREF: ROM:00096530↓o
# ---------------------------------------------------------------------------
                ld      win_points, g0
# ---------------------------------------------------------------------------
                .long 6
aWinPoints:     .asciz "win_points"
                .byte 0
db_cam_info_time_points:.long 0x100     # DATA XREF: ROM:00096534↓o
# ---------------------------------------------------------------------------
                ld      time_points, g0
# ---------------------------------------------------------------------------
                .long 6
aTimePoints:    .asciz "time_points"
db_cam_info_skill_points:.long 0x100    # DATA XREF: ROM:00096538↓o
# ---------------------------------------------------------------------------
                ld      skill_points, g0
# ---------------------------------------------------------------------------
                .long 6
aSkillPoints:   .asciz "skill_points"
                .fill 3, 1, 0
db_cam_info_total_skill:.long 0x80000000 # DATA XREF: ROM:0009653C↓o
# ---------------------------------------------------------------------------
                ld      total_skill, g0
# ---------------------------------------------------------------------------
                .long 6
aTotalSkill:    .asciz "total_skill"
db_cam_info_sd_wait_timer:.long 0x80002000 # DATA XREF: ROM:00096540↓o
# ---------------------------------------------------------------------------
                ldos    sd_wait_timer, g0
# ---------------------------------------------------------------------------
                .long 4
aSdWaitTimer:   .asciz "sd_wait_timer"
                .short 0
db_cam_info_win_down:.long 0x2100       # DATA XREF: ROM:00096544↓o
# ---------------------------------------------------------------------------
                ldos    win_down, g0    # Window down
# ---------------------------------------------------------------------------
                .long 0
aWinDown:       .asciz "win_down"
                .fill 3, 1, 0
db_cam_info_win_left:.long 0x2100       # DATA XREF: ROM:00096548↓o
# ---------------------------------------------------------------------------
                ldos    win_left, g0    # Window left
# ---------------------------------------------------------------------------
                .long 0
aWinLeft:       .asciz "win_left"
                .fill 3, 1, 0
db_cam_info_win_up:.long 0x2100         # DATA XREF: ROM:0009654C↓o
# ---------------------------------------------------------------------------
                ldos    win_up, g0      # Window up
# ---------------------------------------------------------------------------
                .long 0
aWinUp:         .asciz "win_up"
                .byte 0
db_cam_info_win_right:.long 0x2100      # DATA XREF: ROM:00096550↓o
# ---------------------------------------------------------------------------
                ldos    win_right, g0   # Window right
# ---------------------------------------------------------------------------
                .long 0
aWinRight:      .asciz "win_right"
                .short 0
db_cam_info_win_eye0_y:.long 0x2100     # DATA XREF: ROM:00096554↓o
# ---------------------------------------------------------------------------
                ldos    win_eye0_y, g0
# ---------------------------------------------------------------------------
                .long 0
aWinEye0Y:      .asciz "win_eye0_y"
                .byte 0
db_cam_info_win_eye0_x:.long 0x2100     # DATA XREF: ROM:00096558↓o
# ---------------------------------------------------------------------------
                ldos    win_eye0_x, g0
# ---------------------------------------------------------------------------
                .long 0
aWinEye0X:      .asciz "win_eye0_x"
                .byte 0
db_cam_info_win_eye1_y:.long 0x2100     # DATA XREF: ROM:0009655C↓o
# ---------------------------------------------------------------------------
                ldos    win_eye1_y, g0
# ---------------------------------------------------------------------------
                .long 0
aWinEye1Y:      .asciz "win_eye1_y"
                .byte 0
db_cam_info_win_eye1_x:.long 0x2100     # DATA XREF: ROM:00096560↓o
# ---------------------------------------------------------------------------
                ldos    win_eye1_x, g0
# ---------------------------------------------------------------------------
                .long 0
aWinEye1X:      .asciz "win_eye1_x"
                .byte 0
db_cam_info_win_eye2_y:.long 0x2100     # DATA XREF: ROM:00096564↓o
# ---------------------------------------------------------------------------
                ldos    win_eye2_y, g0
# ---------------------------------------------------------------------------
                .long 0
aWinEye2Y:      .asciz "win_eye2_y"
                .byte 0
db_cam_info_win_eye2_x:.long 0x2100     # DATA XREF: ROM:00096568↓o
# ---------------------------------------------------------------------------
                ldos    win_eye2_x, g0
# ---------------------------------------------------------------------------
                .long 0
aWinEye2X:      .asciz "win_eye2_x"
                .byte 0
db_cam_info_win_eye3_y:.long 0x2100     # DATA XREF: ROM:0009656C↓o
# ---------------------------------------------------------------------------
                ldos    win_eye3_y, g0
# ---------------------------------------------------------------------------
                .long 0
aWinEye3Y:      .asciz "win_eye3_y"
                .byte 0
db_cam_info_win_eye3_x:.long 0x2100     # DATA XREF: ROM:00096570↓o
# ---------------------------------------------------------------------------
                ldos    win_eye3_x, g0
# ---------------------------------------------------------------------------
                .long 0
aWinEye3X:      .asciz "win_eye3_x"
                .byte 0
# ---------------------------------------------------------------------------
                ldob    0x5010DD, r3
                stob    r3, _3D_ZCLIP_START
                ret
# ---------------------------------------------------------------------------
DEBUG_CAMERA:                           # DATA XREF: ROM:00040054↑o
                ld      fa_camera, g6
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x8151204
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_45B40, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     DEBUG_CAMERA_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_45B40:                              # DATA XREF: ROM:00045B10↑o
                movt    0, r4
                stt     r4, 0xB4(g6)
                lda     loc_45B54, r15
                st      r15, 0x28(g3)
loc_45B54:                              # DATA XREF: ROM:00045B48↑o
                ld      fa_camera, g6
                ld      INTERUPT_FLAGS_HELD, r11
                lda     0x3D4CCCCD, r3
                lda     0xBD4CCCCD, r7
                movt    0, r4
                ldt     0x18(g6), r8
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g6), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x24(g6), r15
                st      r15, (g11)[g12*1]
                bbs     0xD, r11, loc_45C18
                bbs     0xC, r11, loc_45C20
loc_45BC4:                              # CODE XREF: ROM:00045C1C↓j
                bbs     0xE, r11, loc_45C28
                bbs     0xF, r11, loc_45C30
loc_45BCC:                              # CODE XREF: ROM:00045C2C↓j
                bbs     8, r11, loc_45C40
                bbs     9, r11, loc_45C38
loc_45BD4:                              # CODE XREF: ROM:00045C3C↓j
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r6
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                addr    r4, r8, r8
                addr    r5, r9, r9
                addr    r6, r10, r10
                stt     r8, 0x18(g6)
                b       loc_45C48
# ---------------------------------------------------------------------------
loc_45C18:                              # CODE XREF: ROM:00045BBC↑j
                mov     r3, r6
                b       loc_45BC4
# ---------------------------------------------------------------------------
loc_45C20:                              # CODE XREF: ROM:00045BC0↑j
                mov     r7, r6
                b       loc_45BC4
# ---------------------------------------------------------------------------
loc_45C28:                              # CODE XREF: ROM:loc_45BC4↑j
                mov     r3, r4
                b       loc_45BCC
# ---------------------------------------------------------------------------
loc_45C30:                              # CODE XREF: ROM:00045BC8↑j
                mov     r7, r4
                b       loc_45BCC
# ---------------------------------------------------------------------------
loc_45C38:                              # CODE XREF: ROM:00045BD0↑j
                mov     r3, r5
                b       loc_45BD4
# ---------------------------------------------------------------------------
loc_45C40:                              # CODE XREF: ROM:loc_45BCC↑j
                mov     r7, r5
                b       loc_45BD4
# ---------------------------------------------------------------------------
loc_45C48:                              # CODE XREF: ROM:00045C14↑j
                movt    0, r4
                ldt     0xB4(g6), r8
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                ldos    0x26(g6), r4
                notbit  7, r4, r4
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ldos    0x24(g6), r4
                notbit  7, r4, r4
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                bbs     0x15, r11, loc_45CF4
                bbs     0x14, r11, loc_45CFC
loc_45CA0:                              # CODE XREF: ROM:00045CF8↓j
                bbs     0x16, r11, loc_45D04
                bbs     0x17, r11, loc_45D0C
loc_45CA8:                              # CODE XREF: ROM:00045D08↓j
                bbs     0xA, r11, loc_45D1C
                bbs     0x11, r11, loc_45D14
loc_45CB0:                              # CODE XREF: ROM:00045D18↓j
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r6
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                addr    r4, r8, r8
                addr    r5, r9, r9
                addr    r6, r10, r10
                stt     r8, 0xB4(g6)
                b       loc_45D24
# ---------------------------------------------------------------------------
loc_45CF4:                              # CODE XREF: ROM:00045C98↑j
                mov     r3, r6
                b       loc_45CA0
# ---------------------------------------------------------------------------
loc_45CFC:                              # CODE XREF: ROM:00045C9C↑j
                mov     r7, r6
                b       loc_45CA0
# ---------------------------------------------------------------------------
loc_45D04:                              # CODE XREF: ROM:loc_45CA0↑j
                mov     r3, r4
                b       loc_45CA8
# ---------------------------------------------------------------------------
loc_45D0C:                              # CODE XREF: ROM:00045CA4↑j
                mov     r7, r4
                b       loc_45CA8
# ---------------------------------------------------------------------------
loc_45D14:                              # CODE XREF: ROM:00045CAC↑j
                mov     r3, r5
                b       loc_45CB0
# ---------------------------------------------------------------------------
loc_45D1C:                              # CODE XREF: ROM:loc_45CA8↑j
                mov     r7, r5
                b       loc_45CB0
# ---------------------------------------------------------------------------
loc_45D24:                              # CODE XREF: ROM:00045CF0↑j
                ldt     0x18(g6), r4
                subr    r4, r8, r4
                subr    r5, r9, r5
                subr    r6, r10, r6
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                stos    r11, 0x24(g6)
                notbit  0x1F, r4, r4
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                stos    r11, 0x26(g6)
                lda     0x3DCCCCCD, r7
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                movt    r8, g0
                call    area_check
                mov     g0, r3
                ldob    0xFA(g6), r4
                clrbit  0, r4, r4
                bbs     0, r4, loc_45DEC
                cmpobne 0, r3, loc_45E90
                b       loc_45DF0
# ---------------------------------------------------------------------------
loc_45DEC:                              # CODE XREF: ROM:00045DE0↑j
                cmpobe  0, r3, loc_45E90
loc_45DF0:                              # CODE XREF: ROM:00045DE8↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50186C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_45E38
                st      r13, 0x0(r15)
                b       loc_45E44
# ---------------------------------------------------------------------------
loc_45E38:                              # CODE XREF: ROM:00045E2C↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_45E44:                              # CODE XREF: ROM:00045E34↑j
                mov     0, g1
                lda     5, g0
                call    set_obj
                lda     0x50186C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                b       loc_45F2C
# ---------------------------------------------------------------------------
loc_45E90:                              # CODE XREF: ROM:00045DE4↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501844, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_45ED8
                st      r13, 0x0(r15)
                b       loc_45EE4
# ---------------------------------------------------------------------------
loc_45ED8:                              # CODE XREF: ROM:00045ECC↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_45EE4:                              # CODE XREF: ROM:00045ED4↑j
                mov     0, g1
                lda     5, g0
                call    set_obj
                lda     0x501844, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
loc_45F2C:                              # CODE XREF: ROM:00045E8C↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ret
# ---------------------------------------------------------------------------
db_cam_xpos:    .long 0x80023000        # DATA XREF: ROM:00096578↓o
# ---------------------------------------------------------------------------
                ld      0x18(g6), g0    # g0 = mod_fa_camera_add+0x18
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aXpos_2:        .asciz "Xpos"
                .fill 3, 1, 0
db_cam_ypos:    .long 0x80023000        # DATA XREF: ROM:0009657C↓o
# ---------------------------------------------------------------------------
                ld      0x1C(g6), g0    # g0 = mod_fa_camera_add+0x1C
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aYpos_2:        .asciz "Ypos"
                .fill 3, 1, 0
db_cam_zpos:    .long 0x80023000        # DATA XREF: ROM:00096580↓o
# ---------------------------------------------------------------------------
                ld      0x20(g6), g0    # g0 = mod_fa_camera_add+0x20
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aZpos_2:        .asciz "Zpos"
                .fill 3, 1, 0
db_cam_intrxpos:.long 0x80023000        # DATA XREF: ROM:00096584↓o
# ---------------------------------------------------------------------------
                ld      0xB4(g6), g0    # g0 = mod_fa_camera_add+0xB4
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aIntrxpos:      .asciz "intrXpos"
                .fill 3, 1, 0
db_cam_intrypos:.long 0x80023000        # DATA XREF: ROM:00096588↓o
# ---------------------------------------------------------------------------
                ld      0xB8(g6), g0    # g0 = mod_fa_camera_add+0xB8
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aIntrypos:      .asciz "intrYpos"
                .fill 3, 1, 0
db_cam_intrzpos:.long 0x80023000        # DATA XREF: ROM:0009658C↓o
# ---------------------------------------------------------------------------
                ld      0xBC(g6), g0    # g0 = mod_fa_camera_add+0xBC
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aIntrzpos:      .asciz "intrZpos"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
db_cam_xang:                            # DATA XREF: ROM:00096590↓o
                ldob    0x0(r4), pfp
                ldos    0x24(g6), g0    # g0 = mod_fa_camera_add+0x24
                ret
# ---------------------------------------------------------------------------
                .long 4
aXang_4:        .asciz "Xang"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
db_cam_yang:                            # DATA XREF: ROM:00096594↓o
                ldob    0x0(r4), pfp
                ldos    0x26(g6), g0    # g0 = mod_fa_camera_add+0x26
                ret
# ---------------------------------------------------------------------------
                .long 4
aYang_4:        .asciz "Yang"        # DATA XREF: MAIN_DATA:02816B24↓o
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
DEBUG_OBJECT_TEST:                      # DATA XREF: ROM:000400E0↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x4141204
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_46050, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_OBJECT_TEST_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_46050:                              # DATA XREF: ROM:00046018↑o
                ldos    VECTER_X, r3
                shro    8, r3, r3
                stos    r3, VECTER_X
                ldos    VECTER_Y, r3
                shro    8, r3, r3
                stos    r3, VECTER_Y
                call    debug_window_setup
                ldos    VECTER_X, r3
                shlo    8, r3, r3
                stos    r3, VECTER_X
                ldos    VECTER_Y, r3
                shlo    8, r3, r3
                stos    r3, VECTER_Y
                ret
# ---------------------------------------------------------------------------
obj_test_TRANS_MAP:.long 0x265136F      # DATA XREF: ROM:0009659C↓o
# ---------------------------------------------------------------------------
                ldob    TRANS_MAP, g0
# ---------------------------------------------------------------------------
                .long 2
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_5B958, g0
# ---------------------------------------------------------------------------
aTransMap:      .asciz "TRANS MAP"
                .short 0
obj_test_VECTER_X:.long 0x12360         # DATA XREF: ROM:000965A0↓o
# ---------------------------------------------------------------------------
                ldos    VECTER_X, g0
# ---------------------------------------------------------------------------
                .long 4
# ---------------------------------------------------------------------------
                lda     loc_5B998, g0
# ---------------------------------------------------------------------------
                .long 0x2059414C
aVecterX:       .asciz "VECTER X"
                .fill 3, 1, 0
obj_test_VECTER_Y:.long 0x12360         # DATA XREF: ROM:000965A4↓o
# ---------------------------------------------------------------------------
                ldos    VECTER_Y, g0
# ---------------------------------------------------------------------------
                .long 4
# ---------------------------------------------------------------------------
                lda     loc_5B998, g0
# ---------------------------------------------------------------------------
                .long 0x2059414C
aVecterY:       .asciz "VECTER Y"
                .fill 3, 1, 0
obj_test_BRIGHT:.long 0x23100           # DATA XREF: ROM:000965A8↓o
# ---------------------------------------------------------------------------
                ld      BRIGHT, g0
# ---------------------------------------------------------------------------
                .long 5
                .long 0x47495242        # BRIGHT(co.)
                .long 0x63285448
                .long 0x292E6F
obj_test_BRIGHT_fi:.long 0x23100        # DATA XREF: ROM:000965AC↓o
# ---------------------------------------------------------------------------
                ld      BRIGHT, g0
# ---------------------------------------------------------------------------
                .long 0x203
                .long 0x47495242        # BRIGHT(fi.)
                .long 0x66285448
                .long 0x292E69
obj_test_ROB_LENG:.long 0x23100         # DATA XREF: ROM:000965B0↓o
# ---------------------------------------------------------------------------
                ld      ROB_LENG, g0
# ---------------------------------------------------------------------------
                .long 0x203
                .long 0x5F424F52        # ROB_LENG
                .long 0x474E454C
                .long 0
obj_test_ROB_LIMIT:.long 0x23100        # DATA XREF: ROM:000965B4↓o
# ---------------------------------------------------------------------------
                ld      ROB_LIMIT, g0
# ---------------------------------------------------------------------------
                .long 0x203
                .long 0x5F424F52        # ROB_LIMIT
                .long 0x494D494C
                .long 0x54
obj_test_ROB_LIMIT2:.long 0x23100       # DATA XREF: ROM:000965B8↓o
# ---------------------------------------------------------------------------
                ld      ROB_LIMIT2, g0
# ---------------------------------------------------------------------------
                .long 0x203
                .long 0x5F424F52        # ROB_LIMIT2
                .long 0x494D494C
                .long 0x3254
obj_test_ROB_ZANG:.long 0x11100         # DATA XREF: ROM:000965BC↓o
# ---------------------------------------------------------------------------
                ldob    ROB_ZANG, g0
# ---------------------------------------------------------------------------
                .long 0
                .long 0x5F424F52        # ROB_ZANG
                .long 0x474E415A
                .long 0
obj_test_ROB0:  .long 0x23100           # DATA XREF: ROM:000965C0↓o
# ---------------------------------------------------------------------------
                ld      ROB0, g0
# ---------------------------------------------------------------------------
                .long 0x203
                .long 0x30424F52        # ROB0
                .long 0
obj_test_ROB1:  .long 0x23100           # DATA XREF: ROM:000965C4↓o
# ---------------------------------------------------------------------------
                ld      ROB1, g0
# ---------------------------------------------------------------------------
                .long 0x203
                .long 0x31424F52        # ROB1
                .long 0
obj_test_ROB0_ZANG:.long 0x12100        # DATA XREF: ROM:000965C8↓o
# ---------------------------------------------------------------------------
                ldos    ROB0_ZANG, g0
# ---------------------------------------------------------------------------
                .long 0
                .long 0x30424F52        # ROB0_ZANG
                .long 0x4E415A5F
                .long 0x47
obj_test_ROB1_ZANG:.long 0x12100        # DATA XREF: ROM:000965CC↓o
# ---------------------------------------------------------------------------
                ldos    ROB1_ZANG, g0
# ---------------------------------------------------------------------------
                .long 0
                .long 0x31424F52        # ROB1_ZANG
                .long 0x4E415A5F
                .long 0x47
# ---------------------------------------------------------------------------
DEBUG_UNUSED_MENU_1:
                ld      fa_camera, g6
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x3141204
                .long 0
# ---------------------------------------------------------------------------
                lda     check_p1_punch, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     obj_test_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
check_p1_punch:                         # DATA XREF: ROM:00046254↑o
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                bbc     8, r8, loc_462B0 # P1 P
                ldob    POLYGON_DISP, r3
                and     1, r3, r3
                notbit  0, r3, r3
                stob    r3, POLYGON_DISP
loc_462B0:                              # CODE XREF: ROM:00046294↑j
                ret
# ---------------------------------------------------------------------------
obj_test_xangle:.long 0x80002000        # DATA XREF: ROM:000965D4↓o
# ---------------------------------------------------------------------------
                ldos    0x24(g6), g0    # g0 = mod_fa_camera_add+0x24
                ret
# ---------------------------------------------------------------------------
                .long 0x400
aXangle:        .asciz "Xangle"
                .byte 0
obj_test_yangle:.long 0x80002000        # DATA XREF: ROM:000965D8↓o
# ---------------------------------------------------------------------------
                ldos    0x26(g6), g0    # g0 = mod_fa_camera_add+0x26
                ret
# ---------------------------------------------------------------------------
                .long 0x400
aYangle:        .asciz "Yangle"
                .byte 0
obj_test_polygon_disp:.long 0xA4031010  # DATA XREF: ROM:000965DC↓o
# ---------------------------------------------------------------------------
                ldob    POLYGON_DISP, g0
# ---------------------------------------------------------------------------
                .long 0
                .long PolygonDisp_on_off
aPolygonDisp_0: .asciz "POLYGON DISP"
                .fill 3, 1, 0
PolygonDisp_on_off:.long aPolygon_On    # DATA XREF: ROM:000462F4↑o
                .long aPolygon_Off      # "OFF"
# ---------------------------------------------------------------------------
DEBUG_UNUSED_MENU_2:                    # The 8 bytes following this address are flags for the debug window:
                balx    setup_debug_menu_window, r14
# ---------------------------------------------------------------------------
                .long 0x3151204
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     db_unused_menu_2_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
dword_46358:    .long 0x264136F         # DATA XREF: ROM:000965EC↓o
# ---------------------------------------------------------------------------
                ldob    0x53014C, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0x80, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_4642C, g0
# ---------------------------------------------------------------------------
                .long 0x303031
dword_46384:    .long 0x264136F         # DATA XREF: ROM:000965F0↓o
# ---------------------------------------------------------------------------
                ldob    0x53014D, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0x80, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_4642C, g0
# ---------------------------------------------------------------------------
                .long 0x203031
dword_463B0:    .long 0x264136F         # DATA XREF: ROM:000965F4↓o
# ---------------------------------------------------------------------------
                ldob    0x53014E, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0x80, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_4642C, g0
# ---------------------------------------------------------------------------
                .long 0x202031
dword_463DC:    .long 0x2667137F        # DATA XREF: ROM:000965F8↓o
# ---------------------------------------------------------------------------
                ldob    0x530150, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     4, g0
                ret
# ---------------------------------------------------------------------------
                .long polygon_disp_list
# ---------------------------------------------------------------------------
                lda     loc_4642C, g0
# ---------------------------------------------------------------------------
aPolygonDisp:   .asciz "POLYGON DISP"
                .fill 3, 1, 0
polygon_disp_list:.long aOff_24         # DATA XREF: ROM:000463FC↑o
                .long aNum_0            # "NUM"
                .long aTrans            # "TRANS"
                .long aTexture_0        # "TEXTURE"
                .long aSendMaterial     # "SEND MATERIAL"
# ---------------------------------------------------------------------------
loc_4642C:                              # DATA XREF: ROM:00046378↑o
                ldob    0x530150, r14
                cmpobne 4, r14, loc_46440
                call    sub_29110
                b       loc_4648C
# ---------------------------------------------------------------------------
loc_46440:                              # CODE XREF: ROM:00046434↑j
                ldob    0x530150, r14
                cmpobe  0, r14, loc_46474
                mov     1, r4
                ld      mod_fa_pol_test, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     fa_pol_test, r5
                st      r5, 0xC(r3)
                b       loc_4648C
# ---------------------------------------------------------------------------
loc_46474:                              # CODE XREF: ROM:00046448↑j
                mov     1, r4
                ld      mod_fa_pol_test, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
loc_4648C:                              # CODE XREF: ROM:0004643C↑j
                ret
# ---------------------------------------------------------------------------
DEBUG_COLOR_TEST:                       # DATA XREF: ROM:000400C4↑o
                ld      fa_rob0, g6
                ld      fa_rob1, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x3151204
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_COLOR_TEST_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_ct_RED_MUL:  .long 0x264136F         # DATA XREF: ROM:00096624↓o
# ---------------------------------------------------------------------------
                ldob    TST_RED_MUL, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_46754, g0
# ---------------------------------------------------------------------------
aTstRedMul:     .asciz "TST_RED_MUL"
db_ct_RED_ADD:  .long 0x264136F         # DATA XREF: ROM:00096628↓o
# ---------------------------------------------------------------------------
                ldob    TST_RED_ADD, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_46754, g0
# ---------------------------------------------------------------------------
aTstRedAdd:     .asciz "TST_RED_ADD"
db_ct_GRN_MUL:  .long 0x264136F         # DATA XREF: ROM:0009662C↓o
# ---------------------------------------------------------------------------
                ldob    TST_GRN_MUL, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_46754, g0
# ---------------------------------------------------------------------------
aTstGrnMul:     .asciz "TST_GRN_MUL"
db_ct_GRN_ADD:  .long 0x264136F         # DATA XREF: ROM:00096630↓o
# ---------------------------------------------------------------------------
                ldob    TST_GRN_ADD, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_46754, g0
# ---------------------------------------------------------------------------
aTstGrnAdd:     .asciz "TST_GRN_ADD"
db_ct_BLUE_MUL: .long 0x264136F         # DATA XREF: ROM:00096634↓o
# ---------------------------------------------------------------------------
                ldob    TST_BLUE_MUL, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_46754, g0
# ---------------------------------------------------------------------------
aTstBlueMul:    .asciz "TST_BLUE_MUL"
                .fill 3, 1, 0
db_ct_BLUE_ADD: .long 0x264136F         # DATA XREF: ROM:00096638↓o
# ---------------------------------------------------------------------------
                ldob    TST_BLUE_ADD, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
loc_46600:                              # DATA XREF: MAIN_DATA:0280EA99↓o
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_46754, g0
# ---------------------------------------------------------------------------
aTstBlueAdd:    .asciz "TST_BLUE_ADD"
                .fill 3, 1, 0
db_ct_B_BRIGHT: .long 0x264136F         # DATA XREF: ROM:0009663C↓o
# ---------------------------------------------------------------------------
                ldob    TST_B_BRIGHT, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_46754, g0
# ---------------------------------------------------------------------------
aTstBBright:    .asciz "TST_B_BRIGHT"
                .fill 3, 1, 0
db_ct_RED:      .long 0x264136F         # DATA XREF: ROM:00096640↓o
# ---------------------------------------------------------------------------
                ldob    RED, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_46754, g0
# ---------------------------------------------------------------------------
aRed_0:         .asciz "RED"
db_ct_GREEN:    .long 0x264136F         # DATA XREF: ROM:00096644↓o
# ---------------------------------------------------------------------------
                ldob    GREEN, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_46754, g0
# ---------------------------------------------------------------------------
aGreen_0:       .asciz "GREEN"
                .short 0
db_ct_BLUE:     .long 0x264136F         # DATA XREF: ROM:00096648↓o
# ---------------------------------------------------------------------------
                ldob    BLUE, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_46754, g0
# ---------------------------------------------------------------------------
aBlue_0:        .asciz "BLUE"
                .fill 3, 1, 0
db_ct_EGG_PTN_1P:.long 0x264136F        # DATA XREF: ROM:0009664C↓o
# ---------------------------------------------------------------------------
                ldob    0x6CC(g6), g0   # g0 = P1_PARTS+0x6CC
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_4642C, g0
# ---------------------------------------------------------------------------
aEggPtn1p:      .asciz "EGG_PTN_1P"
                .byte 0
db_ct_EGG_PTN_2P:.long 0x264136F        # DATA XREF: ROM:00096650↓o
# ---------------------------------------------------------------------------
                ldob    0x6CC(g7), g0   # g0 = P2_PARTS+0x6CC
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     128, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_4642C, g0
# ---------------------------------------------------------------------------
aEggPtn2p:      .asciz "EGG_PTN_2P"
                .byte 0
# ---------------------------------------------------------------------------
loc_46754:                              # DATA XREF: ROM:00046508↑o
                call    chg_scr_color_req
                call    chg_pol_color_req
                ldob    stage_num, r12
                shlo    8, r12, r4
                ldos    word_8F3DC(r4), g0
                ldos    word_8F3DE(r4), g1
                call    send_tex_col_stage
                ld      fa_rob0, r3
                ldob    0x1B0(r3), g1
                mov     0, g0
                call    send_tex_col_skin
                ld      fa_rob1, r3
                ldob    0x1B0(r3), g1
                mov     1, g0
                call    send_tex_col_skin
                ld      fa_rob0, r3
                ldob    0x1B0(r3), g1
                mov     0, g0
                call    send_tex_col_part
                ld      fa_rob1, r3
                ldob    0x1B0(r3), g1
                mov     1, g0
                call    send_tex_col_part
                ret
# ---------------------------------------------------------------------------
alt_DEBUG_BGM_TEST_1:
                ld      mod_fa_sound, g4
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x2151204
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_46A40, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     alt_DEBUG_BGM_TEST_1_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stis    r15, 0x80(g4)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
alt_DEBUG_BGM_TEST_2:
                ld      mod_fa_sound, g4
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x2151204
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_46A2C, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     alt_DEBUG_BGM_TEST_2_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stis    r15, 0x80(g4)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
DEBUG_BGM_TEST:                         # DATA XREF: ROM:0004011C↑o
                ld      mod_fa_sound, g4
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x2151704
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_46A1C, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                mov     0, r15
                st      r15, 0x44(g3)
                lda     DEBUG_BGM_TEST_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stis    r15, 0x80(g4)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_bgm_test_sound_num:                  # DATA XREF: ROM:00096658↓o
                ldob    0x0(r4), pfp
                ldos    0x80(g4), g0    # g0 = mod_fa_sound_add+0x80
                ret
# ---------------------------------------------------------------------------
                .long 0
aSoundNum:      .asciz "SOUND NUM"
                .short 0
db_bgm_test_sound:.long 0xA4032010      # DATA XREF: ROM:0009665C↓o
# ---------------------------------------------------------------------------
                ldos    0x80(g4), g0    # g0 = mod_fa_sound_add+0x80
                ret
# ---------------------------------------------------------------------------
                .long 0
                .long BGM_TEST_value
                .long 0
BGM_TEST_list:  .long 0xAE1000          # DATA XREF: ROM:loc_46A1C↓o
                .long 0xAE1001
                .long 0xAE1002
                .long 0xAE1003
                .long 0xAE1004
                .long 0xAE1005
                .long 0xAE1006
                .long 0xAE1007
                .long 0xAE1008
                .long 0xAE1009
                .long 0xAE100A
                .long 0xAE100B
                .long 0xAE100C
                .long 0xAE100D
                .long 0xAE100E
                .long 0xAE100F
                .long 0xAE1010
                .long 0xAE1011
                .long 0xAE1012
                .long 0xAE1013
                .long 0xAE1014
                .long 0xAE1015
                .long 0xAE1016
                .long 0xAE1017
                .long 0xAE1018
                .long 0xAE1019
                .long 0xAE101A
                .long 0xAE101B
                .long 0xAE101C
                .long 0xAE101D
                .long 0xAE101E
                .long 0xAE101F
                .long 0xA00004
                .long 0xA00002
BGM_TEST_value: .long a0xae1000         # DATA XREF: ROM:00046904↑o
                .long a0xae1001         # "0xae1001"
                .long a0xae1002         # "0xae1002"
                .long a0xae1003         # "0xae1003"
                .long a0xae1004         # "0xae1004"
                .long a0xae1005         # "0xae1005"
                .long a0xae1006         # "0xae1006"
                .long a0xae1007         # "0xae1007"
                .long a0xae1008         # "0xae1008"
                .long a0xae1009         # "0xae1009"
                .long a0xae100a         # "0xae100a"
                .long a0xae100b         # "0xae100b"
                .long a0xae100c         # "0xae100c"
                .long a0xae100d         # "0xae100d"
                .long a0xae100e         # "0xae100e"
                .long a0xae100f         # "0xae100f"
                .long a0xae1010         # "0xae1010"
                .long a0xae1011         # "0xae1011"
                .long a0xae1012         # "0xae1012"
                .long a0xae1013         # "0xae1013"
                .long a0xae1014         # "0xae1014"
                .long a0xae1015         # "0xae1015"
                .long a0xae1016         # "0xae1016"
                .long a0xae1017         # "0xae1017"
                .long a0xae1018         # "0xae1018"
                .long a0xae1019         # "0xae1019"
                .long a0xae101a         # "0xae101a"
                .long a0xae101b         # "0xae101b"
                .long a0xae101c         # "0xae101c"
                .long a0xae101d         # "0xae101d"
                .long a0xae101e         # "0xae101e"
                .long a0xae101f         # "0xae101f"
                .long aPause            # "pause"
                .long aSdBgmClear       # "SD_BGM_CLEAR"
# ---------------------------------------------------------------------------
loc_46A1C:                              # DATA XREF: ROM:00046898↑o
                lda     BGM_TEST_list, r7
                addo    0x1F, 3, r4
                b       loc_46A50
# ---------------------------------------------------------------------------
loc_46A2C:                              # DATA XREF: ROM:00046840↑o
                lda     sd_A00001, r7
                lda     displacement1, r4
                b       loc_46A50
# ---------------------------------------------------------------------------
loc_46A40:                              # DATA XREF: ROM:000467E8↑o
                lda     off_46B30, r7
                lda     displacement1, r4
loc_46A50:                              # CODE XREF: ROM:00046A28↑j
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                ld      INTERUPT_FLAGS_HELD, r9
                ld      mod_fa_sound, g4
                bbc     0xA, r9, loc_46A84
                bbc     0xA, r9, loc_46A74
                mov     r9, r8
loc_46A74:                              # CODE XREF: ROM:00046A6C↑j
                ld      loc_C000, r3
                and     r3, r9, r3
                or      r3, r8, r8
loc_46A84:                              # CODE XREF: ROM:00046A68↑j
                ldos    0x80(g4), r3
                bbc     0xF, r8, loc_46A90
                subi    1, r3, r3
loc_46A90:                              # CODE XREF: ROM:00046A88↑j
                bbc     0xE, r8, loc_46A98
                addi    1, r3, r3
loc_46A98:                              # CODE XREF: ROM:loc_46A90↑j
                cmpibg  r4, r3, loc_46AA0
                mov     0, r3
loc_46AA0:                              # CODE XREF: ROM:loc_46A98↑j
                cmpible 0, r3, loc_46AA8
                subo    1, r4, r3
loc_46AA8:                              # CODE XREF: ROM:loc_46AA0↑j
                stos    r3, 0x80(g4)
                bbc     8, r8, loc_46AD0
                addo    4, sp, sp
                st      g0, -4(sp)
                ld      (r7)[r3*4], g0
                call    sound_request_u
                ld      -4(sp), g0
                subo    4, sp, sp
loc_46AD0:                              # CODE XREF: ROM:00046AAC↑j
                bbc     9, r8, loc_46AF8
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0xA00001, g0
                call    sound_request_u
                ld      -4(sp), g0
                subo    4, sp, sp
loc_46AF8:                              # CODE XREF: ROM:loc_46AD0↑j
                ret
# ---------------------------------------------------------------------------
loc_46AFC:                              # DATA XREF: ROM:00096798↓o
                ldob    0x0(r4), pfp
                ldos    0x80(g4), g0    # g0 = mod_fa_sound_add+0x80
                ret
# ---------------------------------------------------------------------------
                .long 0
aSoundNum_0:    .asciz "SOUND NUM"
                .short 0
dword_46B18:    .long 0xA4032010        # DATA XREF: ROM:0009679C↓o
# ---------------------------------------------------------------------------
                ldos    0x80(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
                .long sd_null
                .long 0
off_46B30:      .long 0xA00000          # DATA XREF: ROM:loc_46A40↑o
# ---------------------------------------------------------------------------
loc_46B34:                              # DATA XREF: ROM:000967A4↓o
                ldob    0x0(r4), pfp
                ldos    0x80(g4), g0    # g0 = mod_fa_sound_add+0x80
                ret
# ---------------------------------------------------------------------------
                .long 0
aSoundNum_1:    .asciz "SOUND NUM"
                .short 0
dword_46B50:    .long 0xA4032010        # DATA XREF: ROM:000967A8↓o
# ---------------------------------------------------------------------------
                ldos    0x80(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
                .long sd_all_clear
                .long 0
sd_A00001:      .long 0xA00001          # DATA XREF: ROM:loc_46A2C↑o
sd_null:        .long aSdNull           # DATA XREF: ROM:00046B28↑o
sd_all_clear:   .long aSdAllClear       # DATA XREF: ROM:00046B60↑o
# ---------------------------------------------------------------------------
DEBUG_ROB0_PARAM:                       # DATA XREF: ROM:0003FED0↑o
                ld      mod_fa_enemy0, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xC141C01
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     ROB0_PARAM_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
DEBUG_ROB1_PARAM:                       # DATA XREF: ROM:0003FEF0↑o
                ld      mod_fa_enemy1, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xC141C25
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     ROB1_PARAM_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_ROB_PARAM_ALL_CLEAR:                 # DATA XREF: ROM:00046F38↓o
                shlo    7, 0xF, r15
                stis    r15, 0x4C(g7)
                mov     0, r15
                stib    r15, 0x54(g7)
                mov     0, r15
                stib    r15, 0x55(g7)
                mov     0, r15
                stib    r15, 0x56(g7)
                mov     0, r15
                stib    r15, 0x57(g7)
                mov     0, r15
                stib    r15, 0x58(g7)
                mov     0, r15
                stib    r15, 0x59(g7)
                mov     0, r15
                stib    r15, 0x5A(g7)
                mov     0, r15
                stib    r15, 0x5B(g7)
                mov     0, r15
                stib    r15, 0x5C(g7)
                mov     0, r15
                stib    r15, 0x5D(g7)
                mov     0, r15
                stib    r15, 0x5E(g7)
                ret
# ---------------------------------------------------------------------------
db_ROB_PARAM_NAGE_MAX:                  # DATA XREF: ROM:00046F54↓o
                mov     0, r15
                stis    r15, 0x4C(g7)
                lda     0xFF, r15
                stib    r15, 0x5E(g7)
                ret
# ---------------------------------------------------------------------------
db_ROB_PARAM_KAESHI_MAX:                # DATA XREF: ROM:00046F70↓o
                lda     0xFF, r15
                stib    r15, 0x5A(g7)
                ret
# ---------------------------------------------------------------------------
db_ROB_PARAM_OKIAGARI_MAX:              # DATA XREF: ROM:00046FB0↓o
                lda     0xFF, r15
                stib    r15, 0x5C(g7)
                ret
# ---------------------------------------------------------------------------
db_ROB_PARAM_FUKKATSU_MAX:              # DATA XREF: ROM:00046FD0↓o
                lda     0xFF, r15
                stib    r15, 0x5D(g7)
                ret
# ---------------------------------------------------------------------------
db_ROB_PARAM_DEFENSE_MAX:               # DATA XREF: ROM:00046F90↓o
                lda     0xFF, r15
                stib    r15, 0x57(g7)
                lda     0xFF, r15
                stib    r15, 0x58(g7)
                ret
# ---------------------------------------------------------------------------
                ldob    ROB0_DEBUG_PARAM, r3
                notbit  1, r3, r3
                stob    r3, ROB0_DEBUG_PARAM
                ret
# ---------------------------------------------------------------------------
db_ROB0_PARAM_DIFF_RATE:                # DATA XREF: ROM:00046F1C↓o
                ld      mod_fa_enemy0, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xF120000
                .long 0
# ---------------------------------------------------------------------------
                b       loc_46D10
# ---------------------------------------------------------------------------
db_ROB1_PARAM_DIFF_RATE:                # DATA XREF: ROM:000472A8↓o
                ld      mod_fa_enemy1, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xF120028
                .long 0
# ---------------------------------------------------------------------------
loc_46D10:                              # CODE XREF: ROM:00046CF4↑j
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     rob_param_diff_rate_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                mov     2, r15
                stib    r15, 0xF(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_ROB_PARAM_ENEMY_STATUS:              # DATA XREF: ROM:00047584↓o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0020
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_46DA4, r15
                st      r15, 0x24(g3)
                ldob    4(g7), r14
                cmpobe  0, r14, loc_46D90
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x201A0000
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_46DC0, r15
                st      r15, 0x24(g3)
loc_46D90:                              # CODE XREF: ROM:00046D70↑j
                mov     2, r15
                stib    r15, 0xF(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_46DA4:                              # DATA XREF: ROM:00046D60↑o
                ld      mod_fa_enemy0, g7
                ld      0x40(g7), g0
                lda     mod_fa_enemy_list, g1
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
loc_46DC0:                              # DATA XREF: ROM:00046D84↑o
                ld      mod_fa_enemy1, g7
                ld      0x40(g7), g0
                lda     mod_fa_enemy_list, g1
                call    loc_4DFA8
                ret
# ---------------------------------------------------------------------------
mod_fa_enemy_list:.long aControlEnd     # DATA XREF: ROM:00046DB0↑o
                .long aYoketeiru        # "yoketeiru"
                .long aBackNai          # "back_nai"
                .long aBackMajiNai      # "back_maji_nai"
                .long aFrontNai         # "front_nai"
                .long aFrontMajiNai     # "front_maji_nai"
                .long aMyRingKiwa       # "my_ring_kiwa"
                .long aEnRingKiwa       # "en_ring_kiwa"
                .long aWanpatan         # "wanpatan"
                .long aOrenoMaai        # "oreno_maai"
                .long aOrenoMaaiFar     # "oreno_maai_far"
                .long aNageNerai        # "nage_nerai"
                .long aAttackNerai      # "attack_nerai"
                .long aGuardNerai       # "guard_nerai"
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
                .long 0
ROB0_PARAM_DEBUG_NUMBER:.long 0x264110F # DATA XREF: ROM:0009686C↓o
# ---------------------------------------------------------------------------
                ldob    ROB0_DEBUG_PARAM, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     5, g0
                ret
# ---------------------------------------------------------------------------
aDebugNumber:   .asciz "DEBUG_NUMBER"
                .fill 3, 1, 0
ROB0_PARAM_ROB_MODE:.long 0xA4031010    # DATA XREF: ROM:00096870↓o
# ---------------------------------------------------------------------------
                ldob    ROB0_DEBUG_PARAM, g0
# ---------------------------------------------------------------------------
                .long 0
                .long ROB_MODES
                .long 0
ROB0_PARAM_WAZA_CHECK:.long 0x264110F   # DATA XREF: ROM:00096874↓o
# ---------------------------------------------------------------------------
                ldob    0xD1(g7), g0    # g0= mod_fa_enemy0_add+0xD1 or mod_fa_enemy1_add+0xD1
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
aWazaCheck:     .asciz "WAZA_CHECK"
                .byte 0
ROB0_PARAM_WAZA_NUMBER:.long 0x264110F  # DATA XREF: ROM:00096878↓o
# ---------------------------------------------------------------------------
                ldob    0xD2(g7), g0    # g0= mod_fa_enemy0_add+0xD2 or mod_fa_enemy1_add+0xD2
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aWazaNumber:    .asciz "WAZA_NUMBER"
ROB0_PARAM_ENEMY_MODE:.long 0x80000000  # DATA XREF: ROM:0009687C↓o
# ---------------------------------------------------------------------------
                ld      0x6C(g7), g0    # g0= mod_fa_enemy0_add+0x6C or mod_fa_enemy1_add+0x6C
                ret
# ---------------------------------------------------------------------------
                .long 0
aEnemyMode:     .asciz "ENEMY_MODE"
                .byte 0
ROB0_PARAM_DIFF_RATE:.long 0x200        # DATA XREF: ROM:00096880↓o
# ---------------------------------------------------------------------------
                lda     db_ROB0_PARAM_DIFF_RATE, g0
# ---------------------------------------------------------------------------
                .long 0
aDiffRate:      .asciz "DIFF_RATE"
                .short 0
ROB0_PARAM_ALL_CLEAR:.long 0x200        # DATA XREF: ROM:00096884↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_ALL_CLEAR, g0
# ---------------------------------------------------------------------------
                .long 0
aAllClear:      .asciz "(ALL CLEAR)"
ROB0_PARAM_NAGE_MAX:.long 0x200         # DATA XREF: ROM:00096888↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_NAGE_MAX, g0
# ---------------------------------------------------------------------------
                .long 0
aNageMax:       .asciz "(NAGE MAX)"
                .byte 0
ROB0_PARAM_KAESHI_MAX:.long 0x200       # DATA XREF: ROM:0009688C↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_KAESHI_MAX, g0
# ---------------------------------------------------------------------------
                .long 0
aKaeshiMax:     .asciz "(KAESHI MAX)"
                .fill 3, 1, 0
ROB0_PARAM_DEFENCE_MAX:.long 0x200      # DATA XREF: ROM:00096890↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_DEFENSE_MAX, g0
# ---------------------------------------------------------------------------
                .long 0
aDefenceMax:    .asciz "(DEFENCE MAX)"
                .short 0
ROB0_PARAM_OKIAGARI_MAX:.long 0x200     # DATA XREF: ROM:00096894↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_OKIAGARI_MAX, g0
# ---------------------------------------------------------------------------
                .long 0
aOkiagariMax:   .asciz "(OKIAGARI MAX)"
                .byte 0
ROB0_PARAM_FUKKATSU_MAX:.long 0x200     # DATA XREF: ROM:00096898↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_FUKKATSU_MAX, g0
# ---------------------------------------------------------------------------
                .long 0
aFukkatsuMax:   .asciz "(FUKKATSU MAX)"
                .byte 0
ROB0_PARAM_ATTACK:.long 0x264110F       # DATA XREF: ROM:0009689C↓o
# ---------------------------------------------------------------------------
                ldob    0x54(g7), g0    # g0= mod_fa_enemy0_add+0x54 or mod_fa_enemy1_add+0x54
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aAttack:        .asciz "ATTACK"
                .byte 0
ROB0_PARAM_SYS_ATTACK:.long 0x264110F   # DATA XREF: ROM:000968A0↓o
# ---------------------------------------------------------------------------
                ldob    0x55(g7), g0    # g0= mod_fa_enemy0_add+0x55 or mod_fa_enemy1_add+0x55
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aSyaAttack:     .asciz "SYA_ATTACK"
                .byte 0
ROB0_PARAM_UP_ATTACK:.long 0x264110F    # DATA XREF: ROM:000968A4↓o
# ---------------------------------------------------------------------------
                ldob    0x56(g7), g0    # g0= mod_fa_enemy0_add+0x56 or mod_fa_enemy1_add+0x56
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aUpAttack:      .asciz "UP_ATTACK"
                .short 0
ROB0_PARAM_DOWN_ATTACK:.long 0x264110F  # DATA XREF: ROM:000968A8↓o
# ---------------------------------------------------------------------------
                ldob    0x5B(g7), g0    # g0= mod_fa_enemy0_add+0x5B or mod_fa_enemy1_add+0x5B
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aDownAttack:    .asciz "DOWN_ATTACK"
ROB0_PARAM_DEFENCE:.long 0x264110F      # DATA XREF: ROM:000968AC↓o
# ---------------------------------------------------------------------------
                ldob    0x57(g7), g0    # g0= mod_fa_enemy0_add+0x57 or mod_fa_enemy1_add+0x57
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aDefence:       .asciz "DEFENCE"
ROB0_PARAM_YOKE:.long 0x264110F         # DATA XREF: ROM:000968B0↓o
# ---------------------------------------------------------------------------
                ldob    0x58(g7), g0    # g0= mod_fa_enemy0_add+0x58 or mod_fa_enemy1_add+0x58
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aYoke:          .asciz "YOKE"
                .fill 3, 1, 0
ROB0_PARAM_CHANCE:.long 0x264110F       # DATA XREF: ROM:000968B4↓o
# ---------------------------------------------------------------------------
                ldob    0x59(g7), g0    # g0= mod_fa_enemy0_add+0x59 or mod_fa_enemy1_add+0x59
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aChance:        .asciz "CHANCE"
                .byte 0
ROB0_PARAM_KAESI:.long 0x264110F        # DATA XREF: ROM:000968B8↓o
# ---------------------------------------------------------------------------
                ldob    0x5A(g7), g0    # g0= mod_fa_enemy0_add+0x5A or mod_fa_enemy1_add+0x5A
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aKaesi:         .asciz "KAESI"
                .short 0
ROB0_PARAM_OKIAGARI:.long 0x264110F     # DATA XREF: ROM:000968BC↓o
# ---------------------------------------------------------------------------
                ldob    0x5C(g7), g0    # g0= mod_fa_enemy0_add+0x5C or mod_fa_enemy1_add+0x5C
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aOkiagari:      .asciz "OKIAGARI"
                .fill 3, 1, 0
ROB0_PARAM_FUKKATSU:.long 0x264110F     # DATA XREF: ROM:000968C0↓o
# ---------------------------------------------------------------------------
                ldob    0x5D(g7), g0    # g0= mod_fa_enemy0_add+0x5D or mod_fa_enemy1_add+0x5D
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aFukkatsu:      .asciz "FUKKATSU"
                .fill 3, 1, 0
ROB0_PARAM_NAGE:.long 0x264110F         # DATA XREF: ROM:000968C4↓o
# ---------------------------------------------------------------------------
                ldob    0x5E(g7), g0    # g0= mod_fa_enemy0_add+0x5E or mod_fa_enemy1_add+0x5E
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aNage_1:        .asciz "NAGE"
                .fill 3, 1, 0
ROB0_PARAM_NAGE_YAME_TIME:.long 0x264210F # DATA XREF: ROM:000968C8↓o
# ---------------------------------------------------------------------------
                ldos    0x4C(g7), g0    # g0= mod_fa_enemy0_add+0x4C or mod_fa_enemy1_add+0x4C
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0x7FFE, g0
# ---------------------------------------------------------------------------
aNageYameTime_0:.asciz "NAGE_YAME_TIME"
                .byte 0
ROB1_DEBUG_NUMBER:.long 0x264110F       # DATA XREF: ROM:000968D0↓o
# ---------------------------------------------------------------------------
                ldob    ROB1_DEBUG_PARAM, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     5, g0
                ret
# ---------------------------------------------------------------------------
aDebugNumber_0: .asciz "DEBUG_NUMBER"
                .fill 3, 1, 0
ROB1_ROB_MODE:  .long 0xA4031010        # DATA XREF: ROM:000968D4↓o
# ---------------------------------------------------------------------------
                ldob    ROB1_DEBUG_PARAM, g0
# ---------------------------------------------------------------------------
                .long 0
                .long ROB_MODES
                .long 0
ROB1_WAZA_CHECK:.long 0x264110F         # DATA XREF: ROM:000968D8↓o
# ---------------------------------------------------------------------------
                ldob    0xD1(g7), g0    # g0= mod_fa_enemy0_add+0xD1 or mod_fa_enemy1_add+0xD1
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
aWazaCheck_0:   .asciz "WAZA_CHECK"
                .byte 0
ROB1_WAZA_NUMBER:.long 0x264110F        # DATA XREF: ROM:000968DC↓o
# ---------------------------------------------------------------------------
                ldob    0xD2(g7), g0    # g0= mod_fa_enemy0_add+0xD2 or mod_fa_enemy1_add+0xD2
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aWazaNumber_0:  .asciz "WAZA_NUMBER"
ROB1_ENEMY_MODE:.long 0x80000000        # DATA XREF: ROM:000968E0↓o
# ---------------------------------------------------------------------------
                ld      0x6C(g7), g0    # g0= mod_fa_enemy0_add+0x6C or mod_fa_enemy1_add+0x6C
                ret
# ---------------------------------------------------------------------------
                .long 0
aEnemyMode_0:   .asciz "ENEMY_MODE"
                .byte 0
ROB1_DIFF_RATE: .long 0x200             # DATA XREF: ROM:000968E4↓o
# ---------------------------------------------------------------------------
                lda     db_ROB1_PARAM_DIFF_RATE, g0
# ---------------------------------------------------------------------------
                .long 0
aDiffRate_0:    .asciz "DIFF_RATE"
                .short 0
dword_472C0:    .long 0x200             # DATA XREF: ROM:000968E8↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_ALL_CLEAR, g0
# ---------------------------------------------------------------------------
                .long 0
aAllClear_0:    .asciz "(ALL CLEAR)"
dword_472DC:    .long 0x200             # DATA XREF: ROM:000968EC↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_NAGE_MAX, g0
# ---------------------------------------------------------------------------
                .long 0
aNageMax_0:     .asciz "(NAGE MAX)"
                .byte 0
dword_472F8:    .long 0x200             # DATA XREF: ROM:000968F0↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_KAESHI_MAX, g0
# ---------------------------------------------------------------------------
                .long 0
aKaeshiMax_0:   .asciz "(KAESHI MAX)"
                .fill 3, 1, 0
dword_47318:    .long 0x200             # DATA XREF: ROM:000968F4↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_DEFENSE_MAX, g0
# ---------------------------------------------------------------------------
                .long 0
aDefenceMax_0:  .asciz "(DEFENCE MAX)"
                .short 0
dword_47338:    .long 0x200             # DATA XREF: ROM:000968F8↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_OKIAGARI_MAX, g0
# ---------------------------------------------------------------------------
                .long 0
aOkiagariMax_0: .asciz "(OKIAGARI MAX)"
                .byte 0
dword_47358:    .long 0x200             # DATA XREF: ROM:000968FC↓o
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_FUKKATSU_MAX, g0
# ---------------------------------------------------------------------------
                .long 0
aFukkatsuMax_0: .asciz "(FUKKATSU MAX)"
                .byte 0
dword_47378:    .long 0x264110F         # DATA XREF: ROM:00096900↓o
# ---------------------------------------------------------------------------
                ldob    0x54(g7), g0    # g0= mod_fa_enemy0_add+0x54 or mod_fa_enemy1_add+0x54
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aAttack_0:      .asciz "ATTACK"
                .byte 0
dword_473A0:    .long 0x264110F         # DATA XREF: ROM:00096904↓o
# ---------------------------------------------------------------------------
                ldob    0x55(g7), g0    # g0= mod_fa_enemy0_add+0x55 or mod_fa_enemy1_add+0x55
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aSyaAttack_0:   .asciz "SYA_ATTACK"
                .byte 0
dword_473CC:    .long 0x264110F         # DATA XREF: ROM:00096908↓o
# ---------------------------------------------------------------------------
                ldob    0x56(g7), g0    # g0= mod_fa_enemy0_add+0x56 or mod_fa_enemy1_add+0x56
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aUpAttack_0:    .asciz "UP_ATTACK"
                .short 0
dword_473F8:    .long 0x264110F         # DATA XREF: ROM:0009690C↓o
# ---------------------------------------------------------------------------
                ldob    0x5B(g7), g0    # g0= mod_fa_enemy0_add+0x5B or mod_fa_enemy1_add+0x5B
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aDownAttack_0:  .asciz "DOWN_ATTACK"
dword_47424:    .long 0x264110F         # DATA XREF: ROM:00096910↓o
# ---------------------------------------------------------------------------
                ldob    0x57(g7), g0    # g0= mod_fa_enemy0_add+0x57 or mod_fa_enemy1_add+0x57
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aDefence_0:     .asciz "DEFENCE"
dword_4744C:    .long 0x264110F         # DATA XREF: ROM:00096914↓o
# ---------------------------------------------------------------------------
                ldob    0x58(g7), g0    # g0= mod_fa_enemy0_add+0x58 or mod_fa_enemy1_add+0x58
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aYoke_0:        .asciz "YOKE"
                .fill 3, 1, 0
dword_47474:    .long 0x264110F         # DATA XREF: ROM:00096918↓o
# ---------------------------------------------------------------------------
                ldob    0x59(g7), g0    # g0= mod_fa_enemy0_add+0x59 or mod_fa_enemy1_add+0x59
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aChance_0:      .asciz "CHANCE"
                .byte 0
dword_4749C:    .long 0x264110F         # DATA XREF: ROM:0009691C↓o
# ---------------------------------------------------------------------------
                ldob    0x5A(g7), g0    # g0= mod_fa_enemy0_add+0x5A or mod_fa_enemy1_add+0x5A
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aKaesi_0:       .asciz "KAESI"
                .short 0
dword_474C4:    .long 0x264110F         # DATA XREF: ROM:00096920↓o
# ---------------------------------------------------------------------------
                ldob    0x5C(g7), g0    # g0= mod_fa_enemy0_add+0x5C or mod_fa_enemy1_add+0x5C
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aOkiagari_0:    .asciz "OKIAGARI"
                .fill 3, 1, 0
dword_474F0:    .long 0x264110F         # DATA XREF: ROM:00096924↓o
# ---------------------------------------------------------------------------
                ldob    0x5D(g7), g0    # g0= mod_fa_enemy0_add+0x5D or mod_fa_enemy1_add+0x5D
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aFukkatsu_0:    .asciz "FUKKATSU"
                .fill 3, 1, 0
dword_4751C:    .long 0x264110F         # DATA XREF: ROM:00096928↓o
# ---------------------------------------------------------------------------
                ldob    0x5E(g7), g0    # g0= mod_fa_enemy0_add+0x5E or mod_fa_enemy1_add+0x5E
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xFF, g0
                ret
# ---------------------------------------------------------------------------
aNage_2:        .asciz "NAGE"
                .fill 3, 1, 0
dword_47544:    .long 0x264210F         # DATA XREF: ROM:0009692C↓o
# ---------------------------------------------------------------------------
                ldos    0x4C(g7), g0    # g0= mod_fa_enemy0_add+0x4C or mod_fa_enemy1_add+0x4C
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0x7FFE, g0
# ---------------------------------------------------------------------------
aNageYameTime:  .asciz "NAGE_YAME_TIME"
                .byte 0
dword_47574:    .long 0x80011260        # DATA XREF: ROM:00096934↓o
# ---------------------------------------------------------------------------
                ldob    0x40(g7), g0    # g0= mod_fa_enemy0_add+0x40 or mod_fa_enemy1_add+0x40
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     db_ROB_PARAM_ENEMY_STATUS, g0
# ---------------------------------------------------------------------------
aEnemyStatus:   .asciz "ENEMY_STATUS"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_4759C:                              # DATA XREF: ROM:00096938↓o
                ldob    (r4), pfp
                ldob    0xBA(g7), g0    # g0= mod_fa_enemy0_add+0xBA or mod_fa_enemy1_add+0xBA
                ret
# ---------------------------------------------------------------------------
                .long 0
aWazaNum:       .asciz "WAZA_NUM"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_475B8:                              # DATA XREF: ROM:0009693C↓o
                ldob    (r4), pfp
                ldob    0xC5(g7), g0    # g0= mod_fa_enemy0_add+0xC5 or mod_fa_enemy1_add+0xC5
                ret
# ---------------------------------------------------------------------------
                .long 0
aWazaCntr:      .asciz "WAZA_CNTR"
                .short 0
# ---------------------------------------------------------------------------
loc_475D4:                              # DATA XREF: ROM:00096940↓o
                ldob    (r4), pfp
                ldob    0x5F(g7), g0    # g0= mod_fa_enemy0_add+0x5F or mod_fa_enemy1_add+0x5F
                ret
# ---------------------------------------------------------------------------
                .long 0
aTekagen:       .asciz "TEKAGEN"
# ---------------------------------------------------------------------------
loc_475EC:                              # DATA XREF: ROM:00096944↓o
                ldob    (r4), pfp
                ldob    0x60(g7), g0    # g0= mod_fa_enemy0_add+0x60 or mod_fa_enemy1_add+0x60
                ret
# ---------------------------------------------------------------------------
                .long 0
aAttack_1:      .asciz "ATTACK"
                .byte 0
# ---------------------------------------------------------------------------
loc_47604:                              # DATA XREF: ROM:00096948↓o
                ldob    (r4), pfp
                ldob    0x61(g7), g0    # g0= mod_fa_enemy0_add+0x61 or mod_fa_enemy1_add+0x61
                ret
# ---------------------------------------------------------------------------
                .long 0
aSyaAttack_1:   .asciz "SYA_ATTACK"
                .byte 0
# ---------------------------------------------------------------------------
loc_47620:                              # DATA XREF: ROM:0009694C↓o
                ldob    (r4), pfp
                ldob    0x62(g7), g0    # g0= mod_fa_enemy0_add+0x62 or mod_fa_enemy1_add+0x62
                ret
# ---------------------------------------------------------------------------
                .long 0
aUpAttack_1:    .asciz "UP_ATTACK"
                .short 0
# ---------------------------------------------------------------------------
loc_4763C:                              # DATA XREF: ROM:00096950↓o
                ldob    (r4), pfp
                ldob    0x67(g7), g0    # g0= mod_fa_enemy0_add+0x67 or mod_fa_enemy1_add+0x67
                ret
# ---------------------------------------------------------------------------
                .long 0
aDownAttack_1:  .asciz "DOWN_ATTACK"
# ---------------------------------------------------------------------------
loc_47658:                              # DATA XREF: ROM:00096954↓o
                ldob    (r4), pfp
                ldob    0x63(g7), g0    # g0= mod_fa_enemy0_add+0x63 or mod_fa_enemy1_add+0x63
                ret
# ---------------------------------------------------------------------------
                .long 0
aDefence_1:     .asciz "DEFENCE"
# ---------------------------------------------------------------------------
loc_47670:                              # DATA XREF: ROM:00096958↓o
                ldob    (r4), pfp
                ldob    0x64(g7), g0    # g0= mod_fa_enemy0_add+0x64 or mod_fa_enemy1_add+0x64
                ret
# ---------------------------------------------------------------------------
                .long 0
aYoke_1:        .asciz "YOKE"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_47688:                              # DATA XREF: ROM:0009695C↓o
                ldob    (r4), pfp
                ldob    0x65(g7), g0    # g0= mod_fa_enemy0_add+0x65 or mod_fa_enemy1_add+0x65
                ret
# ---------------------------------------------------------------------------
                .long 0
aChance_1:      .asciz "CHANCE"
                .byte 0
# ---------------------------------------------------------------------------
loc_476A0:                              # DATA XREF: ROM:00096960↓o
                ldob    (r4), pfp
                ldob    0x66(g7), g0    # g0= mod_fa_enemy0_add+0x66 or mod_fa_enemy1_add+0x66
                ret
# ---------------------------------------------------------------------------
                .long 0
aKaesi_1:       .asciz "KAESI"
                .short 0
# ---------------------------------------------------------------------------
loc_476B8:                              # DATA XREF: ROM:00096964↓o
                ldob    (r4), pfp
                ldob    0x68(g7), g0    # g0= mod_fa_enemy0_add+0x68 or mod_fa_enemy1_add+0x68
                ret
# ---------------------------------------------------------------------------
                .long 0
aOkiagari_1:    .asciz "OKIAGARI"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_476D4:                              # DATA XREF: ROM:00096968↓o
                ldob    (r4), pfp
                ldob    0x69(g7), g0    # g0= mod_fa_enemy0_add+0x69 or mod_fa_enemy1_add+0x69
                ret
# ---------------------------------------------------------------------------
                .long 0
aFukkatsu_1:    .asciz "FUKKATSU"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_476F0:                              # DATA XREF: ROM:0009696C↓o
                ldob    (r4), pfp
                ldob    0x6A(g7), g0    # g0= mod_fa_enemy0_add+0x6A or mod_fa_enemy1_add+0x6A
                ret
# ---------------------------------------------------------------------------
                .long 0
aNage_3:        .asciz "NAGE"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .byte 0x1E, 0x14, 0x12, 7, 0, 0, 0, 0# debug_window_flags
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     db_free_not_use, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
debug_rob_free: .long 0x80010000        # DATA XREF: ROM:00096974↓o
# ---------------------------------------------------------------------------
                ld      free, g0
# ---------------------------------------------------------------------------
                .long 0
aFree:          .asciz "free"
                .fill 3, 1, 0
debug_rob_not_use:.long 0x80010000      # DATA XREF: ROM:00096978↓o
# ---------------------------------------------------------------------------
                ld      not_use, g0
# ---------------------------------------------------------------------------
                .long 0
aNotUse:        .asciz "not_use"
# ---------------------------------------------------------------------------
DEBUG_BREAK_POINT:                      # DATA XREF: ROM:00040138↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .byte 0x19, 1, 0xF, 0xA, 0, 0, 0, 0# debug_window_flags
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     db_break_point_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_bp_break_point:.long 0x2667111F      # DATA XREF: ROM:00096980↓o
# ---------------------------------------------------------------------------
                ldob    break_point, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long db_breakpoint_on_off
aBreakPoint_0:  .asciz "break point"
db_bp_switch0:  .long 0x6667011F        # DATA XREF: ROM:00096984↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch0:       .asciz "switch 0"
                .fill 3, 1, 0
db_bp_switch1:  .long 0x6667011F        # DATA XREF: ROM:00096988↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0x10000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch1:       .asciz "switch 1"
                .fill 3, 1, 0
db_bp_switch2:  .long 0x6667011F        # DATA XREF: ROM:0009698C↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0x20000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch2:       .asciz "switch 2"
                .fill 3, 1, 0
db_bp_switch3:  .long 0x6667011F        # DATA XREF: ROM:00096990↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0x30000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch3:       .asciz "switch 3"
                .fill 3, 1, 0
db_bp_switch4:  .long 0x6667011F        # DATA XREF: ROM:00096994↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0x40000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch4:       .asciz "switch 4"
                .fill 3, 1, 0
db_bp_switch5:  .long 0x6667011F        # DATA XREF: ROM:00096998↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0x50000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch5:       .asciz "switch 5"
                .fill 3, 1, 0
db_bp_switch6:  .long 0x6667011F        # DATA XREF: ROM:0009699C↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0x60000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch6:       .asciz "switch 6"
                .fill 3, 1, 0
db_bp_switch7:  .long 0x6667011F        # DATA XREF: ROM:000969A0↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0x70000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch7:       .asciz "switch 7"
                .fill 3, 1, 0
db_bp_switch8:  .long 0x6667011F        # DATA XREF: ROM:000969A4↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0x80000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch8:       .asciz "switch 8"
                .fill 3, 1, 0
db_bp_switch9:  .long 0x6667011F        # DATA XREF: ROM:000969A8↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0x90000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch9:       .asciz "switch 9"
                .fill 3, 1, 0
db_bp_switch10: .long 0x6667011F        # DATA XREF: ROM:000969AC↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0xA0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch10:      .asciz "switch 10"
                .short 0
db_bp_switch11: .long 0x6667011F        # DATA XREF: ROM:000969B0↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0xB0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch11:      .asciz "switch 11"
                .short 0
db_bp_switch12: .long 0x6667011F        # DATA XREF: ROM:000969B4↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0xC0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch12:      .asciz "switch 12"
                .short 0
db_bp_switch13: .long 0x6667011F        # DATA XREF: ROM:000969B8↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0xD0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch13:      .asciz "switch 13"
                .short 0
db_bp_switch14: .long 0x6667011F        # DATA XREF: ROM:000969BC↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0xE0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch14:      .asciz "switch 14"
                .short 0
db_bp_switch15: .long 0x6667011F        # DATA XREF: ROM:000969C0↓o
# ---------------------------------------------------------------------------
                ld      bp_switch, g0
# ---------------------------------------------------------------------------
                .long 0xF0000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aSwitch15:      .asciz "switch 15"
                .short 0
db_bp_step:     .long 0x2667111F        # DATA XREF: ROM:000969C4↓o
# ---------------------------------------------------------------------------
                ldob    bp_switch_step, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xF, g0
                ret
# ---------------------------------------------------------------------------
                .long db_breakpoint_switches
aStep_0:        .asciz "step"
                .byte 0
                .short 0
db_breakpoint_continue:.long 0x2667111F # DATA XREF: ROM:000969C8↓o
# ---------------------------------------------------------------------------
                ldob    bp_switch_cont, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xF, g0
                ret
# ---------------------------------------------------------------------------
                .long db_breakpoint_switches
aCont:          .asciz "cont"
                .fill 3, 1, 0
db_breakpoint_off:.long 0x2667111F      # DATA XREF: ROM:000969CC↓o
# ---------------------------------------------------------------------------
                ldob    bp_switches_on_off, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xF, g0
                ret
# ---------------------------------------------------------------------------
                .long db_breakpoint_switches
                .asciz "off"
db_breakpoint_on_off:.long db_breakpoint_ascii_on
                .long db_breakpoint_ascii_off # "OFF"
db_breakpoint_switches:.long aPl1Punch  # DATA XREF: ROM:00047B18↑o
                .long aPl1Kick          # "pl1_kick"
                .long aPl1Guard         # "pl1_guard"
                .long aPl1Up            # "pl1_up"
                .long aPl1Down          # "pl1_down"
                .long aPl1Left          # "pl1_left"
                .long aPl1Right         # "pl1_right"
                .long aPl2Punch         # "pl2_punch"
                .long aPl2Kick          # "pl2_kick"
                .long aPl2Guard         # "pl2_guard"
                .long aPl2Up            # "pl2_up"
                .long aPl2Down          # "pl2_down"
                .long aPl2Left          # "pl2_left"
                .long aPl2Right         # "pl2_right"
                .long aStart1           # "start1"
                .long aStart2           # "start2"
# ---------------------------------------------------------------------------
DEBUG_UNUSED_MENU:
                ld      fa_rob0, g7
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xF120A01
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     DEBUG_UNUSED_MENU_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                mov     0, r15
                stib    r15, 0xF(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_unused_yang:                         # DATA XREF: ROM:00096A6C↓o
                ldob    0x0(r4), pfp
                ldos    0x26(g7), g0    # P1_PARTS+0x26
                ret
# ---------------------------------------------------------------------------
                .long 0
aYang_1:        .asciz "yang"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
db_unused_act_yang:                     # DATA XREF: ROM:00096A70↓o
                ldob    0x0(r4), pfp
                ldos    0x5B4(g7), g0   # P1_PARTS+0x5B4
                ret
# ---------------------------------------------------------------------------
                .long 0
aActYang_0:     .asciz "act_yang"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
db_unused_mov_yang:                     # DATA XREF: ROM:00096A74↓o
                ldob    0x0(r4), pfp
                ldos    0x812(g7), g0   # P1_PARTS+0x812
                ret
# ---------------------------------------------------------------------------
                .long 0
aMovYang_0:     .asciz "mov_yang"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
db_unused_mov_yang2:                    # DATA XREF: ROM:00096A78↓o
                ldob    0x0(r4), pfp
                ldos    0x812(g7), g0   # P1_PARTS+0x812
                ret
# ---------------------------------------------------------------------------
                .long 0
aMovYang_1:     .asciz "mov_yang"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
db_unused_gyang:                        # DATA XREF: ROM:00096A7C↓o
                ldob    0x0(r4), pfp
                ldos    0x616(g7), g0   # P1_PARTS+0x616
                ret
# ---------------------------------------------------------------------------
                .long 0
aGyang_0:       .asciz "gyang"
                .short 0
# ---------------------------------------------------------------------------
db_unused_tag_yang:                     # DATA XREF: ROM:00096A80↓o
                ldob    0x0(r4), pfp
                ldos    0x61A(g7), g0   # P1_PARTS+0x61A
                ret
# ---------------------------------------------------------------------------
                .long 0
aTagYang_0:     .asciz "tag_yang"
                .fill 3, 1, 0
db_unused_back: .long 0x6667011F        # DATA XREF: ROM:00096A84↓o
# ---------------------------------------------------------------------------
                ld      0x1A4(g7), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 11               # Bit 11
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aBack:          .asciz "back"
                .fill 3, 1, 0
db_unused_gyang_disp:.long 0x6667011F   # DATA XREF: ROM:00096A88↓o
# ---------------------------------------------------------------------------
                ld      0x0(g7), g0
                ret
# ---------------------------------------------------------------------------
                .short 0
                .short 24               # Bit 24
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long debug_off_on
aGyangDisp_1:   .asciz "gyang_disp"
                .byte 0
# ---------------------------------------------------------------------------
db_unused_gyang_how:                    # DATA XREF: ROM:00096A8C↓o
                ldob    (pfp), pfp
                ldob    0x60D(g7), g0   # P1_PARTS+0x60D
                ret
# ---------------------------------------------------------------------------
                .long 0
aGyangHow:      .asciz "gyang_how"
                .short 0
db_unused_gyang_yvec:.long 0x23100      # DATA XREF: ROM:00096A90↓o
# ---------------------------------------------------------------------------
                ld      gyang_yvec, g0
# ---------------------------------------------------------------------------
                .long 0x202
aGyangYvec:     .asciz "gyang_yvec"
                .byte 0
db_unused_gyang_asi_d:.long 0x23100     # DATA XREF: ROM:00096A94↓o
# ---------------------------------------------------------------------------
                ld      gyang_asi_d, g0
# ---------------------------------------------------------------------------
                .long 0x202
aGyangAsiD:     .asciz "gyang_asi_d"
db_unused_gyang_asi_h:.long 0x23100     # DATA XREF: ROM:00096A98↓o
# ---------------------------------------------------------------------------
                ld      gyang_asi_h, g0
# ---------------------------------------------------------------------------
                .long 0x202
aGyangAsiH:     .asciz "gyang_asi_h"
db_unused_gyang_ha_d:.long 0x23100      # DATA XREF: ROM:00096A9C↓o
# ---------------------------------------------------------------------------
                ld      gyang_ha_d, g0
# ---------------------------------------------------------------------------
                .long 0x204
aGyangHaD:      .asciz "gyang_ha_d"
                .byte 0
db_unused_gyang_am_ang:.long 0x11100    # DATA XREF: ROM:00096AA0↓o
# ---------------------------------------------------------------------------
                ldob    gyang_am_ang, g0
# ---------------------------------------------------------------------------
                .long 2
aGyangAmAng:    .asciz "gyang_am_ang"
                .fill 3, 1, 0
db_unused_asi_asi_dist:.long 0x23100    # DATA XREF: ROM:00096AA4↓o
# ---------------------------------------------------------------------------
                ld      0x69C(g7), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x202
aAsiAsiDist:    .asciz "asi_asi_dist"
                .fill 3, 1, 0
db_unused_asi_asi_h:.long 0x23100       # DATA XREF: ROM:00096AA8↓o
# ---------------------------------------------------------------------------
                ld      0x6A0(g7), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x202
aAsiAsiH:       .asciz "asi_asi_h"
                .short 0
# ---------------------------------------------------------------------------
DEBUG_UNUSED_COIN_MENU:
                lda     0x1D03380, g5
                lda     CREDIT_01_bk, g6
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xE190A01, 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     db_unused_coin_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                mov     2, r15
                stib    r15, 0xF(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_47E5C:                              # DATA XREF: ROM:00047EAC↓o
                lda     0x1D03380, r5
                lda     CREDIT_01_bk, r6
                xor     r4, r4, r4
                stob    r4, 4(r5)
                stob    r4, 4(r6)
                st      r4, 0x0(r5)
                st      r4, 0x0(r6)
                stob    r4, 5(r5)
                stob    r4, 5(r6)
                st      r4, bk_chute_2
                st      r4, bk_chute_1
                st      r4, bk_service_credits
                call    write_stats_to_backup_ram
                ret
# ---------------------------------------------------------------------------
db_coin_ChuteClear:.long 0x200          # DATA XREF: ROM:00096AB0↓o
# ---------------------------------------------------------------------------
                lda     loc_47E5C, g0
# ---------------------------------------------------------------------------
                .long 0
aCoinChuteClear:.asciz "coin chute clear"
                .fill 3, 1, 0
db_coin_BkChute1:.long 0x80000000       # DATA XREF: ROM:00096AB4↓o
# ---------------------------------------------------------------------------
                ld      bk_chute_2, g0
# ---------------------------------------------------------------------------
                .long 5
aBkChute1:      .asciz "bk chute 1"
                .byte 0
db_coin_BkChute2:.long 0x80000000       # DATA XREF: ROM:00096AB8↓o
# ---------------------------------------------------------------------------
                ld      bk_chute_1, g0
# ---------------------------------------------------------------------------
                .long 5
aBkChute2:      .asciz "bk chute 2"
                .byte 0
db_coin_BkCoinCredits:.long 0x80000000  # DATA XREF: ROM:00096ABC↓o
# ---------------------------------------------------------------------------
                ld      bk_coin_credits, g0
# ---------------------------------------------------------------------------
                .long 5
aBkCoinCredits: .asciz "bk coin credits"
db_bk_service_credits:.long 0x80000000  # DATA XREF: ROM:00096AC0↓o
# ---------------------------------------------------------------------------
                ld      bk_service_credits, g0
# ---------------------------------------------------------------------------
                .long 5
aBkServiceCredi:.asciz "bk service credits"
                .byte 0
# ---------------------------------------------------------------------------
db_cur_coin_in_1:                       # DATA XREF: ROM:00096AC4↓o
                ldob    (pfp), pfp
                ldob    4(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 2
aCurCoinIn1:    .asciz "cur.coin in 1"
                .short 0
# ---------------------------------------------------------------------------
db_cur_coin_in_2:                       # DATA XREF: ROM:00096AC8↓o
                ldob    (pfp), pfp
                ldob    4(g6), g0
                ret
# ---------------------------------------------------------------------------
                .long 2
aCurCoinIn2:    .asciz "cur.coin in 2"
                .short 0
db_coin_credit_1:.long 0x80000000       # DATA XREF: ROM:00096ACC↓o
# ---------------------------------------------------------------------------
                ld      0x0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 2
aCoinCredit1:   .asciz "coin credit 1"
                .short 0
db_coin_credit_2:.long 0x80000000       # DATA XREF: ROM:00096AD0↓o
# ---------------------------------------------------------------------------
                ld      0x0(g6), g0
                ret
# ---------------------------------------------------------------------------
                .long 2
aCoinCredit2:   .asciz "coin credit 2"
                .short 0
# ---------------------------------------------------------------------------
db_service_1:                           # DATA XREF: ROM:00096AD4↓o
                ldob    (pfp), pfp
                ldob    5(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 2
aService1:      .asciz "service 1"
                .short 0
# ---------------------------------------------------------------------------
db_service_2:                           # DATA XREF: ROM:00096AD8↓o
                ldob    (pfp), pfp
                ldob    5(g6), g0
                ret
# ---------------------------------------------------------------------------
                .long 2
aService2:      .asciz "service 2"
                .short 0
# ---------------------------------------------------------------------------
DEBUG_UNUSED_ROB_LIGHT_MENU:            # The 8 bytes following this address are flags for the debug window:
                balx    setup_debug_menu_window, r14
# ---------------------------------------------------------------------------
                .long 0xA121919
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     db_un_rob_light_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_rob_light_sonic:.long 0x23100        # DATA XREF: ROM:00096AE0↓o
# ---------------------------------------------------------------------------
                ld      rob_light_sonic, g0
# ---------------------------------------------------------------------------
                .long 0x202
aSonic_5:       .asciz "SONIC"
                .byte 0
                .byte 0
db_rob_light_tails:.long 0x23100        # DATA XREF: ROM:00096AE4↓o
# ---------------------------------------------------------------------------
                ld      rob_light_tails, g0
# ---------------------------------------------------------------------------
                .long 0x202
aTails_5:       .asciz "TAILS"
                .short 0
db_rob_light_amy:.long 0x23100          # DATA XREF: ROM:00096AE8↓o
# ---------------------------------------------------------------------------
                ld      rob_light_amy, g0
# ---------------------------------------------------------------------------
                .long 0x202
aAmy_5:         .asciz "AMY"
db_rob_light_metal:.long 0x23100        # DATA XREF: ROM:00096AEC↓o
# ---------------------------------------------------------------------------
                ld      rob_light_metal, g0
# ---------------------------------------------------------------------------
                .long 0x202
aMetal_2:       .asciz "METAL"
                .short 0
db_rob_light_fang:.long 0x23100         # DATA XREF: ROM:00096AF0↓o
# ---------------------------------------------------------------------------
                ld      rob_light_fang, g0
# ---------------------------------------------------------------------------
                .long 0x202
aFang_5:        .asciz "FANG"
                .fill 3, 1, 0
db_rob_light_kuma:.long 0x23100         # DATA XREF: ROM:00096AF4↓o
# ---------------------------------------------------------------------------
                ld      rob_light_kuma, g0
# ---------------------------------------------------------------------------
                .long 0x202
aKuma_0:        .asciz "KUMA"
                .fill 3, 1, 0
db_rob_light_knuckle:.long 0x23100      # DATA XREF: ROM:00096AF8↓o
# ---------------------------------------------------------------------------
                ld      rob_light_knuckle, g0
# ---------------------------------------------------------------------------
                .long 0x202
aKnuckle_0:     .asciz "KNUCKLE"
db_rob_light_espio:.long 0x23100        # DATA XREF: ROM:00096AFC↓o
# ---------------------------------------------------------------------------
                ld      rob_light_espio, g0
# ---------------------------------------------------------------------------
                .long 0x202
aEspio_3:       .asciz "ESPIO"
                .short 0
db_rob_light_eggman:.long 0x23100       # DATA XREF: ROM:00096B00↓o
# ---------------------------------------------------------------------------
                ld      rob_light_eggman, g0
# ---------------------------------------------------------------------------
                .long 0x202
aEggman_1:      .asciz "EGGMAN"
                .byte 0
db_rob_light_bean:.long 0x23100         # DATA XREF: ROM:00096B04↓o
# ---------------------------------------------------------------------------
                ld      rob_light_bean, g0
# ---------------------------------------------------------------------------
                .long 0x202
aBean_4:        .asciz "BEAN"
                .fill 3, 1, 0
db_rob_light_sonic_i:.long 0x23100      # DATA XREF: ROM:00096B08↓o
# ---------------------------------------------------------------------------
                ld      rob_light_sonic_i, g0
# ---------------------------------------------------------------------------
                .long 0x202
aSonicI_0:      .asciz "SONIC_I"
db_rob_light_tails_i:.long 0x23100      # DATA XREF: ROM:00096B0C↓o
# ---------------------------------------------------------------------------
                ld      rob_light_tails_i, g0
# ---------------------------------------------------------------------------
                .long 0x202
aTailsI_0:      .asciz "TAILS_I"
db_rob_light_amy_i:.long 0x23100        # DATA XREF: ROM:00096B10↓o
# ---------------------------------------------------------------------------
                ld      rob_light_amy_i, g0
# ---------------------------------------------------------------------------
                .long 0x202
aAmyI_0:        .asciz "AMY_I"
                .short 0
db_rob_light_metal_i:.long 0x23100      # DATA XREF: ROM:00096B14↓o
# ---------------------------------------------------------------------------
                ld      rob_light_metal_i, g0
# ---------------------------------------------------------------------------
                .long 0x202
aMetalI_0:      .asciz "METAL_I"
db_rob_light_fang_i:.long 0x23100       # DATA XREF: ROM:00096B18↓o
# ---------------------------------------------------------------------------
                ld      rob_light_fang_i, g0
# ---------------------------------------------------------------------------
                .long 0x202
aFangI_0:       .asciz "FANG_I"
                .byte 0
db_rob_light_kuma_i:.long 0x23100       # DATA XREF: ROM:00096B1C↓o
# ---------------------------------------------------------------------------
                ld      rob_light_kuma_i, g0
# ---------------------------------------------------------------------------
                .long 0x202
aKumaI_0:       .asciz "KUMA_I"
                .byte 0
db_rob_light_knuckle_i:.long 0x23100    # DATA XREF: ROM:00096B20↓o
# ---------------------------------------------------------------------------
                ld      rob_light_knuckle_i, g0
# ---------------------------------------------------------------------------
                .long 0x202
aKnuckleI_0:    .asciz "KNUCKLE_I"
                .short 0
db_rob_light_espio_i:.long 0x23100      # DATA XREF: ROM:00096B24↓o
# ---------------------------------------------------------------------------
                ld      rob_light_espio_i, g0
# ---------------------------------------------------------------------------
                .long 0x202
aEspioI_0:      .asciz "ESPIO_I"
db_rob_light_eggman_i:.long 0x23100     # DATA XREF: ROM:00096B28↓o
# ---------------------------------------------------------------------------
                ld      rob_light_eggman_i, g0
# ---------------------------------------------------------------------------
                .long 0x202
aEggmanI_0:     .asciz "EGGMAN_I"
                .fill 3, 1, 0
db_rob_light_bean_i:.long 0x23100       # DATA XREF: ROM:00096B2C↓o
# ---------------------------------------------------------------------------
                ld      rob_light_bean_i, g0
# ---------------------------------------------------------------------------
                .long 0x202
aBeanI_0:       .asciz "BEAN_I"
                .byte 0
# ---------------------------------------------------------------------------
DEBUG_POLYGON_TEST:                     # DATA XREF: ROM:00040088↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x8121E1E
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_482C0, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     poly_test_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                mov     0, r3
                stos    r3, mem_poly_test_No
                stos    r3, mem_poly_test_No_disp
                st      r3, mem_poly_test_xpos
                st      r3, mem_poly_test_ypos
                stos    r3, 0x508088
                stos    r3, 0x50808A
                stos    r3, 0x50808C
                lda     0x3FC00000, r15
                st      r15, mem_poly_test_zpos
                ret
# ---------------------------------------------------------------------------
loc_482C0:                              # DATA XREF: ROM:0004823C↑o
                ld      fa_camera, r4
                ld      0x0(r4), r15
                setbit  6, r15, r15
                st      r15, 0x0(r4)
                ld      mem_poly_test_zpos, r5
                lda     0x42700000, r13
                divr    r13, r5, r5
                ld      INTERUPT_FLAGS_HELD, r3
                ld      INTERUPT_FLAGS_MOMENTARY, r4
                bbc     0xF, r3, loc_48310
                ld      mem_poly_test_xpos, r14
                subr    r5, r14, r15
                st      r15, mem_poly_test_xpos
loc_48310:                              # CODE XREF: ROM:000482F8↑j
                bbc     0xE, r3, loc_48328
                ld      mem_poly_test_xpos, r14
                addr    r5, r14, r15
                st      r15, mem_poly_test_xpos
loc_48328:                              # CODE XREF: ROM:loc_48310↑j
                bbs     0xA, r3, loc_48360
                bbc     0xC, r3, loc_48344
                ld      mem_poly_test_zpos, r14
                subr    r5, r14, r15
                st      r15, mem_poly_test_zpos
loc_48344:                              # CODE XREF: ROM:0004832C↑j
                bbc     0xD, r3, loc_4835C
                ld      mem_poly_test_zpos, r14
                addr    r5, r14, r15
                st      r15, mem_poly_test_zpos
loc_4835C:                              # CODE XREF: ROM:loc_48344↑j
                b       loc_48390
# ---------------------------------------------------------------------------
loc_48360:                              # CODE XREF: ROM:loc_48328↑j
                bbc     0xC, r3, loc_48378
                ld      mem_poly_test_ypos, r14
                subr    r5, r14, r15
                st      r15, mem_poly_test_ypos
loc_48378:                              # CODE XREF: ROM:loc_48360↑j
                bbc     0xD, r3, loc_48390
                ld      mem_poly_test_ypos, r14
                addr    r5, r14, r15
                st      r15, mem_poly_test_ypos
loc_48390:                              # CODE XREF: ROM:loc_4835C↑j
                bbs     0xA, r3, loc_483C8
                bbc     9, r4, loc_483AC
                ldos    mem_poly_test_No, r14
                addi    1, r14, r15
                stos    r15, mem_poly_test_No
loc_483AC:                              # CODE XREF: ROM:00048394↑j
                bbc     8, r4, loc_483C4
                ldos    mem_poly_test_No, r14
                subi    1, r14, r15
                stos    r15, mem_poly_test_No
loc_483C4:                              # CODE XREF: ROM:loc_483AC↑j
                b       loc_483F8
# ---------------------------------------------------------------------------
loc_483C8:                              # CODE XREF: ROM:loc_48390↑j
                bbc     9, r3, loc_483E0
                ldos    mem_poly_test_No, r14
                addi    4, r14, r15
                stos    r15, mem_poly_test_No
loc_483E0:                              # CODE XREF: ROM:loc_483C8↑j
                bbc     8, r3, loc_483F8
                ldos    mem_poly_test_No, r14
                subi    4, r14, r15
                stos    r15, mem_poly_test_No
loc_483F8:                              # CODE XREF: ROM:loc_483C4↑j
                bbc     0x15, r3, loc_48414
                shlo    8, 1, r13
                ldos    0x508088, r14
                subi    r13, r14, r15
                stos    r15, 0x508088
loc_48414:                              # CODE XREF: ROM:loc_483F8↑j
                bbc     0x14, r3, loc_48430
                shlo    8, 1, r13
                ldos    0x508088, r14
                addi    r13, r14, r15
                stos    r15, 0x508088
loc_48430:                              # CODE XREF: ROM:loc_48414↑j
                bbs     0xA, r3, loc_48470
                bbc     0x17, r3, loc_48450
                shlo    8, 1, r13
                ldos    0x50808A, r14
                subi    r13, r14, r15
                stos    r15, 0x50808A
loc_48450:                              # CODE XREF: ROM:00048434↑j
                bbc     0x16, r3, loc_4846C
                shlo    8, 1, r13
                ldos    0x50808A, r14
                addi    r13, r14, r15
                stos    r15, 0x50808A
loc_4846C:                              # CODE XREF: ROM:loc_48450↑j
                b       loc_484A8
# ---------------------------------------------------------------------------
loc_48470:                              # CODE XREF: ROM:loc_48430↑j
                bbc     0x17, r3, loc_4848C
                shlo    8, 1, r13
                ldos    0x50808C, r14
                subi    r13, r14, r15
                stos    r15, 0x50808C
loc_4848C:                              # CODE XREF: ROM:loc_48470↑j
                bbc     0x16, r3, loc_484A8
                shlo    8, 1, r13
                ldos    0x50808C, r14
                addi    r13, r14, r15
                stos    r15, 0x50808C
loc_484A8:                              # CODE XREF: ROM:loc_4846C↑j
                ldis    mem_poly_test_No, r15
                stis    r15, mem_poly_test_No_disp
                call    loc_4E8F0
                ret
# ---------------------------------------------------------------------------
poly_test_No_:  .long 0x246103          # DATA XREF: ROM:00096B34↓o
# ---------------------------------------------------------------------------
                ldis    mem_poly_test_No_disp, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
aNo_0:          .asciz "No"
                .byte 0
poly_test_xpos: .long 0x23100           # DATA XREF: ROM:00096B38↓o
# ---------------------------------------------------------------------------
                ld      mem_poly_test_xpos, g0
# ---------------------------------------------------------------------------
                .long 0x202
aXpos_4:        .asciz "xpos"
                .fill 3, 1, 0
poly_test_ypos: .long 0x23100           # DATA XREF: ROM:00096B3C↓o
# ---------------------------------------------------------------------------
                ld      mem_poly_test_ypos, g0
# ---------------------------------------------------------------------------
                .long 0x202
aYpos_4:        .asciz "ypos"
                .fill 3, 1, 0
poly_test_zpos: .long 0x23100           # DATA XREF: ROM:00096B40↓o
# ---------------------------------------------------------------------------
                ld      mem_poly_test_zpos, g0
# ---------------------------------------------------------------------------
                .long 0x202
aZpos_4:        .asciz "zpos"
                .fill 3, 1, 0
poly_test_xang: .long 0x11100           # DATA XREF: ROM:00096B44↓o
# ---------------------------------------------------------------------------
                ldob    mem_poly_test_xang, g0
# ---------------------------------------------------------------------------
                .long 0
aXang:          .asciz "xang"
                .fill 3, 1, 0
poly_test_yang: .long 0x11100           # DATA XREF: ROM:00096B48↓o
# ---------------------------------------------------------------------------
                ldob    mem_poly_test_yang, g0
# ---------------------------------------------------------------------------
                .long 0
aYang_2:        .asciz "yang"
                .fill 3, 1, 0
poly_test_zang: .long 0x11100           # DATA XREF: ROM:00096B4C↓o
# ---------------------------------------------------------------------------
                ldob    mem_poly_test_zang, g0
# ---------------------------------------------------------------------------
                .long 0
aZang:          .asciz "zang"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
DEBUG_PARTS_TEST:                       # DATA XREF: ROM:000400A8↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xA121E1E
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_48658, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     db_parts_test_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                mov     0, r3
                stos    r3, 0x5080A2
                st      r3, db_parts_xpos
                st      r3, db_parts_ypos
                st      r3, 0x5080B8
                lda     0x40200000, r15
                st      r15, db_parts_zpos
                lda     mot_list, r15
                st      r15, 0x5080A4
                ld      0x5080A4, r15
                st      r15, 0x5080A8
                ld      0x5080A8, r10
                ld      0x18(r10), r15
                st      r15, 0x5080AC
                ld      0x14(r10), r15
                st      r15, db_parts_Weight
                ldis    0xE(r10), r15
                stis    r15, 0x50809C
                ldis    0x10(r10), r15
                stis    r15, 0x50809E
                ldis    0x12(r10), r15
                stis    r15, 0x5080A0
                ld      0x20(r10), r15
                st      r15, db_parts_yofs
                ret
# ---------------------------------------------------------------------------
loc_48658:                              # DATA XREF: ROM:0004857C↑o
                ld      fa_camera, r4
                ld      0x0(r4), r15
                setbit  0x19, r15, r15
                st      r15, 0x0(r4)
                ld      db_parts_zpos, r5
                lda     0x42700000, r13
                divr    r13, r5, r5
                ld      INTERUPT_FLAGS_HELD, r3
                ld      INTERUPT_FLAGS_MOMENTARY, r4
                bbc     4, r4, loc_486A8
                ld      0x5080B8, r14
                not     r14, r14
                st      r14, 0x5080B8
loc_486A8:                              # CODE XREF: ROM:00048690↑j
                bbc     0xF, r3, loc_486C0
                ld      db_parts_xpos, r14
                subr    r5, r14, r15
                st      r15, db_parts_xpos
loc_486C0:                              # CODE XREF: ROM:loc_486A8↑j
                bbc     0xE, r3, loc_486D8
                ld      db_parts_xpos, r14
                addr    r5, r14, r15
                st      r15, db_parts_xpos
loc_486D8:                              # CODE XREF: ROM:loc_486C0↑j
                bbs     0xA, r3, loc_48710
                bbc     0xC, r3, loc_486F4
                ld      db_parts_zpos, r14
                subr    r5, r14, r15
                st      r15, db_parts_zpos
loc_486F4:                              # CODE XREF: ROM:000486DC↑j
                bbc     0xD, r3, loc_4870C
                ld      db_parts_zpos, r14
                addr    r5, r14, r15
                st      r15, db_parts_zpos
loc_4870C:                              # CODE XREF: ROM:loc_486F4↑j
                b       loc_48740
# ---------------------------------------------------------------------------
loc_48710:                              # CODE XREF: ROM:loc_486D8↑j
                bbc     0xC, r3, loc_48728
                ld      db_parts_ypos, r14
                subr    r5, r14, r15
                st      r15, db_parts_ypos
loc_48728:                              # CODE XREF: ROM:loc_48710↑j
                bbc     0xD, r3, loc_48740
                ld      db_parts_ypos, r14
                addr    r5, r14, r15
                st      r15, db_parts_ypos
loc_48740:                              # CODE XREF: ROM:loc_4870C↑j
                ld      0x5080AC, r10
                lda     0x3A83126F, r11
                bbc     0xA, r3, loc_4877C
                bbs     9, r3, loc_4876C
                bbc     8, r3, loc_4877C
                subr    r11, r10, r10
                st      r10, 0x5080AC
                b       loc_488A0
# ---------------------------------------------------------------------------
loc_4876C:                              # CODE XREF: ROM:00048754↑j
                addr    r11, r10, r10
                st      r10, 0x5080AC
                b       loc_488A0
# ---------------------------------------------------------------------------
loc_4877C:                              # CODE XREF: ROM:00048750↑j
                ld      0x5080A8, r10
                ld      0x5080A4, r11
                bbs     9, r4, loc_48818
                bbc     8, r4, loc_488A0
                cmpoble r10, r11, loc_488A0
                addo    0x1F, 9, r13
                ld      0x5080A8, r14
                subi    r13, r14, r15
                st      r15, 0x5080A8
                ldos    0x5080A2, r14
                subi    1, r14, r15
                stos    r15, 0x5080A2
                mov     0, r15
                st      r15, db_parts_ypos
                ld      0x5080A8, r10
                ld      0x18(r10), r15
                st      r15, 0x5080AC
                ldis    0xE(r10), r15
                stis    r15, 0x50809C
                ldis    0x10(r10), r15
                stis    r15, 0x50809E
                ldis    0x12(r10), r15
                stis    r15, 0x5080A0
                ld      0x14(r10), r15
                st      r15, db_parts_Weight
                b       loc_488A0
# ---------------------------------------------------------------------------
loc_48818:                              # CODE XREF: ROM:0004878C↑j
                ld      0x28(r10), r13
                subo    1, 0, r14
                cmpobe  r13, r14, loc_488A0
                addo    0x1F, 9, r13
                ld      0x5080A8, r14
                addi    r13, r14, r15
                st      r15, 0x5080A8
                ldos    0x5080A2, r14
                addi    1, r14, r15
                stos    r15, 0x5080A2
                mov     0, r15
                st      r15, db_parts_ypos
                ld      0x5080A8, r10
                ld      0x18(r10), r15
                st      r15, 0x5080AC
                ldis    0xE(r10), r15
                stis    r15, 0x50809C
                ldis    0x10(r10), r15
                stis    r15, 0x50809E
                ldis    0x12(r10), r15
                stis    r15, 0x5080A0
                ld      0x14(r10), r15
                st      r15, db_parts_Weight
loc_488A0:                              # CODE XREF: ROM:00048768↑j
                bbc     0x15, r3, loc_488BC
                shlo    8, 1, r13
                ldos    0x50809C, r14
                subi    r13, r14, r15
                stos    r15, 0x50809C
loc_488BC:                              # CODE XREF: ROM:loc_488A0↑j
                bbc     0x14, r3, loc_488D8
                shlo    8, 1, r13
                ldos    0x50809C, r14
                addi    r13, r14, r15
                stos    r15, 0x50809C
loc_488D8:                              # CODE XREF: ROM:loc_488BC↑j
                bbs     0xA, r3, loc_48918
                bbc     0x17, r3, loc_488F8
                shlo    8, 1, r13
                ldos    0x50809E, r14
                subi    r13, r14, r15
                stos    r15, 0x50809E
loc_488F8:                              # CODE XREF: ROM:000488DC↑j
                bbc     0x16, r3, loc_48914
                shlo    8, 1, r13
                ldos    0x50809E, r14
                addi    r13, r14, r15
                stos    r15, 0x50809E
loc_48914:                              # CODE XREF: ROM:loc_488F8↑j
                b       loc_48950
# ---------------------------------------------------------------------------
loc_48918:                              # CODE XREF: ROM:loc_488D8↑j
                bbc     0x17, r3, loc_48934
                shlo    8, 1, r13
                ldos    0x5080A0, r14
                subi    r13, r14, r15
                stos    r15, 0x5080A0
loc_48934:                              # CODE XREF: ROM:loc_48918↑j
                bbc     0x16, r3, loc_48950
                shlo    8, 1, r13
                ldos    0x5080A0, r14
                addi    r13, r14, r15
                stos    r15, 0x5080A0
loc_48950:                              # CODE XREF: ROM:loc_48914↑j
                call    loc_4E8F0
                ret
# ---------------------------------------------------------------------------
dword_48958:    .long 0x2100            # DATA XREF: ROM:00096B54↓o
# ---------------------------------------------------------------------------
                ldos    0x5080A2, g0
# ---------------------------------------------------------------------------
                .long 0
                .long 0x6F4E
dword_4896C:    .long 0x23100           # DATA XREF: ROM:00096B58↓o
# ---------------------------------------------------------------------------
                ld      db_parts_xpos, g0
# ---------------------------------------------------------------------------
                .long 0x202
aXpos_5:        .asciz "xpos"
                .fill 3, 1, 0
dword_48984:    .long 0x23100           # DATA XREF: ROM:00096B5C↓o
# ---------------------------------------------------------------------------
                ld      db_parts_ypos, g0
# ---------------------------------------------------------------------------
                .long 0x202
aYpos_5:        .asciz "ypos"
                .fill 3, 1, 0
dword_4899C:    .long 0x23100           # DATA XREF: ROM:00096B60↓o
# ---------------------------------------------------------------------------
                ld      db_parts_zpos, g0
# ---------------------------------------------------------------------------
                .long 0x202
aZpos_5:        .asciz "zpos"
                .fill 3, 1, 0
dword_489B4:    .long 0x11100           # DATA XREF: ROM:00096B64↓o
# ---------------------------------------------------------------------------
                ldob    db_parts_xang, g0
# ---------------------------------------------------------------------------
                .long 0
aXang_0:        .asciz "xang"
                .fill 3, 1, 0
dword_489CC:    .long 0x11100           # DATA XREF: ROM:00096B68↓o
# ---------------------------------------------------------------------------
                ldob    db_parts_yang, g0
# ---------------------------------------------------------------------------
                .long 0
aYang_3:        .asciz "yang"
                .fill 3, 1, 0
dword_489E4:    .long 0x11100           # DATA XREF: ROM:00096B6C↓o
# ---------------------------------------------------------------------------
                ldob    db_parts_zang, g0
# ---------------------------------------------------------------------------
                .long 0
aZang_0:        .asciz "zang"
                .fill 3, 1, 0
dword_489FC:    .long 0x23100           # DATA XREF: ROM:00096B70↓o
# ---------------------------------------------------------------------------
                ld      0x5080AC, g0
# ---------------------------------------------------------------------------
                .long 0x300
                .long 0x52
dword_48A10:    .long 0x80023000        # DATA XREF: ROM:00096B74↓o
# ---------------------------------------------------------------------------
                ld      db_parts_yofs, g0
# ---------------------------------------------------------------------------
                .long 0x300
aYofs_0:        .asciz "yofs"
                .fill 3, 1, 0
dword_48A28:    .long 0x23100           # DATA XREF: ROM:00096B78↓o
# ---------------------------------------------------------------------------
                ld      db_parts_Weight, g0
# ---------------------------------------------------------------------------
                .long 0x300
aWeight:        .asciz "Weight"
                .byte 0
# ---------------------------------------------------------------------------
DEBUG_UNUSED_MENU_3:                    # The 8 bytes following this address are flags for the debug window:
                balx    setup_debug_menu_window, r14
# ---------------------------------------------------------------------------
                .long 0x8140A23
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_48AA4, r15
                st      r15, 0x24(g3)
                lda     dword_96B7C, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                mov     2, r15
                stib    r15, 0xF(g3)
                mov     4, r15
                stib    r15, 9(g3)
                ldob    0xB(g3), r14
                subi    2, r14, r15
                stob    r15, 0xB(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_48AA4:                              # DATA XREF: ROM:00048A5C↑o
                mov     2, r15
                stib    r15, 9(g3)
                mov     0, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                ld      event, r11
                shlo    6, r11, r3
                lda     TEXTURE_BUFFER, g1
                lda     event_names(r3), r15 # 0 = fa_nameentry
                st      r15, 0x0(sp)
                mov     1, r15
                balx    sub_4ED24, r14
# ---------------------------------------------------------------------------
aExec14s:       .asciz "EXEC:%14s"
                .short 0
# ---------------------------------------------------------------------------
                call    sub_4D8B0
                mov     4, r15
                stib    r15, 9(g3)
                call    loc_4E8F0
                ret
# ---------------------------------------------------------------------------
dword_48B08:    .long 0x80000000        # DATA XREF: ROM:00096B80↓o
# ---------------------------------------------------------------------------
                ld      POLYGON, g0
# ---------------------------------------------------------------------------
                .long 6
aPolygon:       .asciz "POLYGON"
dword_48B20:    .long 0x80000000        # DATA XREF: ROM:00096B84↓o
# ---------------------------------------------------------------------------
                ld      P2_POLYGON, g0
# ---------------------------------------------------------------------------
                .long 6
aP2Poly:        .asciz "P2_POLY"
dword_48B38:    .long 0x80002000        # DATA XREF: ROM:00096B88↓o
# ---------------------------------------------------------------------------
                ldos    _1P_ROB, g0
# ---------------------------------------------------------------------------
                .long 4
a1pRob:         .asciz "1P ROB"
                .byte 0
dword_48B50:    .long 0x80002000        # DATA XREF: ROM:00096B8C↓o
# ---------------------------------------------------------------------------
                ldos    _2P_ROB, g0
# ---------------------------------------------------------------------------
                .long 4
a2pRob:         .asciz "2P ROB"
                .byte 0
dword_48B68:    .long 0x80002000        # DATA XREF: ROM:00096B90↓o
# ---------------------------------------------------------------------------
                ldos    _1P_MIRROR, g0
# ---------------------------------------------------------------------------
                .long 4
a1pMirror:      .asciz "1P MIRROR"
                .short 0
dword_48B84:    .long 0x80002000        # DATA XREF: ROM:00096B94↓o
# ---------------------------------------------------------------------------
                ldos    _2P_MIRROR, g0
# ---------------------------------------------------------------------------
                .long 4
a2pMirror:      .asciz "2P MIRROR"
                .short 0
dword_48BA0:    .long 0x80000000        # DATA XREF: ROM:00096B98↓o
# ---------------------------------------------------------------------------
                ld      BUFF_MAX, g0
# ---------------------------------------------------------------------------
                .long 6
aBuffMax:       .asciz "BUFF MAX"
                .fill 3, 1, 0
dword_48BBC:    .long 0x80010000        # DATA XREF: ROM:00096B9C↓o
# ---------------------------------------------------------------------------
                ld      debug_flag, g0
# ---------------------------------------------------------------------------
                .long 8
aDebugFlag:     .asciz "debug_flag"
                .byte 0
dword_48BD8:    .long 0x241103          # DATA XREF: ROM:00096BA0↓o
# ---------------------------------------------------------------------------
                ldob    vd_measure, g0  # vairable diff measure
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
aVdMeasure:     .asciz "vd_measure"
                .byte 0
dword_48BFC:    .long 0xA4031010        # DATA XREF: ROM:00096BA4↓o
# ---------------------------------------------------------------------------
                ldob    var_diff, g0    # vairable diff
# ---------------------------------------------------------------------------
                .long 0
                .long DIFFICULTY_SETTINGS
aVarDiff:       .asciz "var_diff"
                .fill 3, 1, 0
dword_48C1C:    .long 0x80023000        # DATA XREF: ROM:00096BA8↓o
# ---------------------------------------------------------------------------
                ld      stage_x, g0
# ---------------------------------------------------------------------------
                .long 0x100
aStageX_0:      .asciz "stage_x"
dword_48C34:    .long 0x80002000        # DATA XREF: ROM:00096BAC↓o
# ---------------------------------------------------------------------------
                ldos    energy_max, g0
# ---------------------------------------------------------------------------
                .long 0
aEnergyMax:     .asciz "energy_max"
                .byte 0
# ---------------------------------------------------------------------------
loc_48C50:                              # DATA XREF: ROM:00096BB0↓o
                ldob    (pfp), pfp
                ldob    use_working, g0
# ---------------------------------------------------------------------------
                .long 0
aUseWorking:    .asciz "use_working"
# ---------------------------------------------------------------------------
loc_48C6C:                              # DATA XREF: ROM:00096BB4↓o
                ldob    (pfp), pfp
                ldob    save_working_bk, g0
# ---------------------------------------------------------------------------
                .long 0
aSaveWorking:   .asciz "save_working"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_48C8C:                              # DATA XREF: ROM:00096BB8↓o
                ldob    (pfp), pfp
                ldob    save_working, g0
# ---------------------------------------------------------------------------
                .long 0
aSaveWorking_0: .asciz "save_working"
                .fill 3, 1, 0
off_48CAC:      .long loc_12360         # DATA XREF: ROM:00096BBC↓o
# ---------------------------------------------------------------------------
                ldos    hsync, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     load_hsync_val, g0
# ---------------------------------------------------------------------------
aHsync:         .asciz "hsync"
                .short 0
dword_48CCC:    .long 0x12360           # DATA XREF: ROM:00096BC0↓o
# ---------------------------------------------------------------------------
                ldos    vsync, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     load_vsync_val, g0
# ---------------------------------------------------------------------------
aVsync:         .asciz "vsync"
                .short 0
# ---------------------------------------------------------------------------
load_hsync_val:                         # DATA XREF: ROM:00048CBC↑o
                ldos    hsync, r3
                stos    r3, HSYNC_START
                ret
# ---------------------------------------------------------------------------
load_vsync_val:                         # DATA XREF: ROM:00048CDC↑o
                ldos    vsync, r3
                stos    r3, VSYNC_START
                ret
# ---------------------------------------------------------------------------
DIFFICULTY_SETTINGS:.long aEasy_0       # DATA XREF: ROM:00048C0C↑o
                .long aNormal_2         # "NORMAL"
                .long aHard_0           # "HARD"
                .long aHardest_0        # "HARDEST"
# ---------------------------------------------------------------------------
DEBUG_UNUSED_BACKUP_STATS:              # The 8 bytes following this address are flags for the debug window:
                balx    setup_debug_menu_window, r14
# ---------------------------------------------------------------------------
                .long 0xE190A14
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     un_db_backup_stats_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                mov     2, r15
                stib    r15, 0xF(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_backup_stats_bk_1p_count_a:.long 0x80000000
# ---------------------------------------------------------------------------
                ld      bk_1P_COUNT_A, g0
# ---------------------------------------------------------------------------
                .long 5
aBk1pCountA:    .asciz "bk 1P COUNT A"
                .short 0
db_backup_stats_bk_1p_count_a_bk:.long 0x80000000
# ---------------------------------------------------------------------------
                ld      VS_COUNT_A_bk, g0
# ---------------------------------------------------------------------------
                .long 5
aBkVsCountA:    .asciz "bk VS COUNT A"
                .short 0
db_backup_stats_bk_1p_count_b:.long 0x80000000
# ---------------------------------------------------------------------------
                ld      bk_1P_COUNT_B, g0
# ---------------------------------------------------------------------------
                .long 5
aBk1pCountB:    .asciz "bk 1P COUNT B"
                .short 0
db_backup_stats_bk_vs_count_b:.long 0x80000000
# ---------------------------------------------------------------------------
                ld      bk_VS_COUNT_B, g0
# ---------------------------------------------------------------------------
                .long 5
aBkVsCountB:    .asciz "bk VS COUNT B"
                .short 0
db_backup_stats_bk_1p_conti_b:.long 0x80000000
# ---------------------------------------------------------------------------
                ld      bk_P1_CONTI_B, g0
# ---------------------------------------------------------------------------
                .long 5
aBk1pContiB:    .asciz "bk 1P CONTI B"
                .short 0
db_backup_stats_bk_vs_conti_b:.long 0x80000000
# ---------------------------------------------------------------------------
                ld      bk_VS_CONTI_B, g0
# ---------------------------------------------------------------------------
                .long 5
aBkVsContiB:    .asciz "bk VS CONTI B"
                .short 0
# ---------------------------------------------------------------------------
DEBUG_COIN_SETTING:                     # DATA XREF: ROM:00040154↑o
                ld      add_BACKUP_RAM_TO_RAM, g4
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xE320A01
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     db_coin_setting_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                mov     0, r15
                stib    r15, 0xF(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_48E8C:                              # DATA XREF: ROM:00048F28↓o
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3329(r3), r4
                ldob    byte_48EE8[r4*2], r5
                ldob    word_48EE9[r4*2], r6
                stob    r5, 0x332A(r3)
                stob    r6, 0x332B(r3)
                ldob    0x332C(r3), r4
                ldob    byte_48EE8[r4*2], r5
                ldob    word_48EE9[r4*2], r6
                stob    r5, 0x332D(r3)
                stob    r6, 0x332E(r3)
                ret
# ---------------------------------------------------------------------------
byte_48EE8:     .byte 1                 # DATA XREF: ROM:00048E9C↑r
word_48EE9:     .short 0x201            # DATA XREF: ROM:00048EA4↑r
                .short 0x201
                .short 0x302
                .short 0x301
                .short 0x302
                .short 0x403
                .short 0x401
                .short 0x402
                .short 0x403
                .short 0x504
                .short 0x501
                .short 0x502
                .short 0x503
                .short 0x504
                .short 5
                .byte 0
dword_48F08:    .long 0x264136F         # DATA XREF: ROM:00096C00↓o
# ---------------------------------------------------------------------------
                ldob    0x3329(g4), g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xE, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_48E8C, g0
# ---------------------------------------------------------------------------
aCreditToStartS:.asciz "CREDIT TO START SET 1P"
                .byte 0
# ---------------------------------------------------------------------------
loc_48F48:                              # DATA XREF: ROM:00096C04↓o
                ldob    (pfp), pfp
                ldob    0x332A(g4), g0
# ---------------------------------------------------------------------------
                .long 0
aCreditToStart1:.asciz "  CREDIT TO START 1P"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_48F70:                              # DATA XREF: ROM:00096C08↓o
                ldob    (pfp), pfp
                ldob    0x332B(g4), g0
# ---------------------------------------------------------------------------
                .long 0
aCreditToCont1p:.asciz "  CREDIT TO CONT. 1P"
                .fill 3, 1, 0
dword_48F98:    .long 0x264136F         # DATA XREF: ROM:00096C0C↓o
# ---------------------------------------------------------------------------
                ldob    0x332C(g4), g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0xE, g0
                ret
# ---------------------------------------------------------------------------
                lda     loc_48E8C, g0
# ---------------------------------------------------------------------------
aCreditToStartS_0:.asciz "CREDIT TO START SET VS"
                .byte 0
# ---------------------------------------------------------------------------
loc_48FD8:                              # DATA XREF: ROM:00096C10↓o
                ldob    (pfp), pfp
                ldob    0x332D(g4), g0
# ---------------------------------------------------------------------------
                .long 0
aCreditToStartV:.asciz "  CREDIT TO START VS"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_49000:                              # DATA XREF: ROM:00096C14↓o
                ldob    (pfp), pfp
                ldob    0x332E(g4), g0
# ---------------------------------------------------------------------------
                .long 0
aCreditToContVs:.asciz "  CREDIT TO CONT. VS"
                .fill 3, 1, 0
dword_49028:    .long 0x6667011F        # DATA XREF: ROM:00096C18↓o
# ---------------------------------------------------------------------------
                ld      0x3320(g4), g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long Chute_Modes
aChuteMode:     .asciz "CHUTE MODE"
                .byte 0
dword_49058:    .long 0x2667111F        # DATA XREF: ROM:00096C1C↓o
# ---------------------------------------------------------------------------
                ldob    0x3324(g4), g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0x19, g0
                ret
# ---------------------------------------------------------------------------
                .long Coin_setting_Num
aSettingNum:    .asciz "SETTING NUM"
dword_49088:    .long 0x6667011F        # DATA XREF: ROM:00096C20↓o
# ---------------------------------------------------------------------------
                ld      0x3320(g4), g0
# ---------------------------------------------------------------------------
                .long 0x10000
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     1, g0
                ret
# ---------------------------------------------------------------------------
                .long off_491F4         # "OFF"
aManualSet:     .asciz "MANUAL SET"
                .byte 0
dword_490B8:    .long 0x2667111F        # DATA XREF: ROM:00096C24↓o
# ---------------------------------------------------------------------------
                ldob    0x3327(g4), g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     8, g0
                ret
# ---------------------------------------------------------------------------
                .long xCoinAsyCoin_Start
aMMulti1:       .asciz " M.MULTI 1"
                .byte 0
dword_490E8:    .long 0x2667111F        # DATA XREF: ROM:00096C28↓o
# ---------------------------------------------------------------------------
                ldob    0x3328(g4), g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     8, g0
                ret
# ---------------------------------------------------------------------------
                .long xCoinAsyCoin_Start
aMMulti2:       .asciz " M.MULTI 2"
                .byte 0
dword_49118:    .long 0x2667111F        # DATA XREF: ROM:00096C2C↓o
# ---------------------------------------------------------------------------
                ldob    0x3326(g4), g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     8, g0
                ret
# ---------------------------------------------------------------------------
                .long Adder_Coin_Start
aMBonusAdder:   .asciz " M.BONUS ADDER"
                .byte 0
dword_4914C:    .long 0x2667111F        # DATA XREF: ROM:00096C30↓o
# ---------------------------------------------------------------------------
                ldob    0x3325(g4), g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     8, g0
                ret
# ---------------------------------------------------------------------------
                .long CoinToCredit_Start
aMCoinToCredit: .asciz " M.COIN TO CREDIT"
                .short 0
Chute_Modes:    .long aCommon           # DATA XREF: ROM:00049048↑o
                .long aIndividual       # "INDIVIDUAL"
Coin_setting_Num:.long a1               # DATA XREF: ROM:00049078↑o
                .long a2_13             # "2"
                .long a3_3              # "3"
                .long a4_2              # "4"
                .long a5_4              # "5"
                .long a6_1              # "6"
                .long a7_1              # "7"
                .long a8_2              # "8"
                .long a9_2              # "9"
                .long a10               # "10"
                .long a11               # "11"
                .long a12               # "12"
                .long a13               # "13"
                .long a14               # "14"
                .long a15               # "15"
                .long a16               # "16"
                .long a17               # "17"
                .long a18               # "18"
                .long a19               # "19"
                .long a20               # "20"
                .long a21               # "21"
                .long a22               # "22"
                .long a23               # "23"
                .long a24               # "24"
                .long a25               # "25"
                .long a26FreePlay       # "26:FREE PLAY"
off_491F4:      .long aOff              # DATA XREF: ROM:000490A8↑o
                .long aOn               # "ON"
xCoinAsyCoin_Start:.long a1CoinCountAs1C # DATA XREF: ROM:000490D8↑o
                .long a1CoinCountAs2C   # "1 COIN COUNT AS 2 COINS"
                .long a1CoinCountAs3C   # "1 COIN COUNT AS 3 COINS"
                .long a1CoinCountAs4C   # "1 COIN COUNT AS 4 COINS"
                .long a1CoinCountAs5C   # "1 COIN COUNT AS 5 COINS"
                .long a1CoinCountAs6C   # "1 COIN COUNT AS 6 COINS"
                .long a1CoinCountAs7C   # "1 COIN COUNT AS 7 COINS"
                .long a1CoinCountAs8C   # "1 COIN COUNT AS 8 COINS"
                .long a1CoinCountAs9C   # "1 COIN COUNT AS 9 COINS"
Adder_Coin_Start:.long aNoAdder         # DATA XREF: ROM:00049138↑o
                .long a2CoinsGive1Ext   # "2 COINS GIVE 1 EXTRA COIN"
                .long a3CoinsGive1Ext   # "3 COINS GIVE 1 EXTRA COIN"
                .long a4CoinsGive1Ext   # "4 COINS GIVE 1 EXTRA COIN"
                .long a5CoinsGive1Ext   # "5 COINS GIVE 1 EXTRA COIN"
                .long a6CoinsGive1Ext   # "6 COINS GIVE 1 EXTRA COIN"
                .long a7CoinsGive1Ext   # "7 COINS GIVE 1 EXTRA COIN"
                .long a8CoinsGive1Ext   # "8 COINS GIVE 1 EXTRA COIN"
                .long a9CoinsGive1Ext   # "9 COINS GIVE 1 EXTRA COIN"
CoinToCredit_Start:.long a1CoinTo1Credit # DATA XREF: ROM:0004916C↑o
                .long a2CoinsTo1Credi   # "2 COINS TO 1 CREDIT"
                .long a3CoinsTo1Credi   # "3 COINS TO 1 CREDIT"
                .long a4CoinsTo1Credi   # "4 COINS TO 1 CREDIT"
                .long a5CoinsTo1Credi   # "5 COINS TO 1 CREDIT"
                .long a6CoinsTo1Credi   # "6 COINS TO 1 CREDIT"
                .long a7CoinsTo1Credi   # "7 COINS TO 1 CREDIT"
                .long a8CoinsTo1Credi   # "8 COINS TO 1 CREDIT"
                .long a9CoinsTo1Credi   # "9 COINS TO 1 CREDIT"
# ---------------------------------------------------------------------------
DEBUG_UNUSED_CAMERA_INFO:
                ld      fa_camera, g4
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x8121E1E
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_492B8, r15
                st      r15, 0x24(g3)
                lda     dword_96F04, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_492B8:                              # DATA XREF: ROM:0004928C↑o
                call    loc_4E8F0
                ldis    0xF8(g4), r15
                stis    r15, 0x24(g4)
                ret
# ---------------------------------------------------------------------------
dword_492C8:    .long 0x12100           # DATA XREF: ROM:00096F08↓o
# ---------------------------------------------------------------------------
                ldos    0xF9(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 2
aGameXang:      .asciz "game_xang"
                .short 0
dword_492E4:    .long 0x80012000        # DATA XREF: ROM:00096F0C↓o
# ---------------------------------------------------------------------------
                ldos    0xF8(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
                .long 0
dword_492F8:    .long 0x2100            # DATA XREF: ROM:00096F10↓o
# ---------------------------------------------------------------------------
                ldos    0x306(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
aYangKirikae_0: .asciz "yang_kirikae"
                .fill 3, 1, 0
dword_49318:    .long 0x23100           # DATA XREF: ROM:00096F14↓o
# ---------------------------------------------------------------------------
                ld      0x2DC(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aYposBias_0:    .asciz "ypos_bias"
                .short 0
dword_49334:    .long 0x23100           # DATA XREF: ROM:00096F18↓o
# ---------------------------------------------------------------------------
                ld      0x2E0(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aDirBias_0:     .asciz "dir_bias"
                .fill 3, 1, 0
dword_49350:    .long 0x80012000        # DATA XREF: ROM:00096F1C↓o
# ---------------------------------------------------------------------------
                ldos    0x304(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
aYangSpd_0:     .asciz "yang_spd"
                .fill 3, 1, 0
dword_4936C:    .long 0x80023000        # DATA XREF: ROM:00096F20↓o
# ---------------------------------------------------------------------------
                ld      0x120(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCamStX_0:      .asciz "cam_st_x"
                .fill 3, 1, 0
dword_49388:    .long 0x80023000        # DATA XREF: ROM:00096F24↓o
# ---------------------------------------------------------------------------
                ld      0x124(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCamStY_0:      .asciz "cam_st_y"
                .fill 3, 1, 0
dword_493A4:    .long 0x80023000        # DATA XREF: ROM:00096F28↓o
# ---------------------------------------------------------------------------
                ld      0x128(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCamStZ_0:      .asciz "cam_st_z"
                .fill 3, 1, 0
dword_493C0:    .long 0x80023000        # DATA XREF: ROM:00096F2C↓o
# ---------------------------------------------------------------------------
                ld      0x2E8(g4), g0
                ret
# ---------------------------------------------------------------------------
                .long 0x200
aCamDist_0:     .asciz "cam_dist"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
DEBUG_SCROLL_TEST2:                     # DATA XREF: ROM:000400FC↑o
                ld      fa_camera, g4
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .byte 3, 3, 0x20, 0x24, 0, 0, 0, 0# debug_window_flags
# ---------------------------------------------------------------------------
                lda     loc_4944C, r15
                st      r15, 0x28(g3)
                lda     loc_494CC, r15
                st      r15, 0x24(g3)
                lda     scoll_test2_options, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                mov     0, r15
                stis    r15, 0x44(g3)   # Why isn't this `stis    r15, 0x45(g3)` or `stis    r15, 0x44(g3)` above
                mov     0, r15
                stis    r15, 0x46(g3)
                mov     0, r15
                stib    r15, 0x48(g3)
                mov     0, r15
                stib    r15, 0x49(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_4944C:                              # DATA XREF: ROM:000493F4↑o
                ld      INTERUPT_FLAGS_HELD, r3
                ld      INTERUPT_FLAGS_MOMENTARY, r4
                bbc     10, r3, scroll_test_load_cell
                mov     r3, r4
scroll_test_load_cell:                 # CODE XREF: ROM:0004945C↑j
                ldos    0x44(g3), g1    # g3 = 0x5603A0
                ld      texture_palette_offsets[g1*4], g2 # for SONIC fv name texture, g2 = 0x29AD140
                ldl     4(g2), r8
                addo    0x1F, 1, r13
                subi    r13, r9, r9
                addo    0x1F, 5, r13
                subi    r13, r8, r8
                ldob    0x48(g3), r10   # byte at 0x5603E8
                ldob    0x49(g3), r11   # byte at 0x5603E9
                bbc     23, r3, dont_move_tex_left # P2 Left
                cmpibge r10, r9, dont_move_tex_left
                addo    1, r10, r10     # Move texture left
dont_move_tex_left:                     # CODE XREF: ROM:0004948C↑j
                bbc     22, r3, dont_move_tex_right # P2 Right
                cmpibge 0, r10, dont_move_tex_right
                subo    1, r10, r10     # Move texture right
dont_move_tex_right:                    # CODE XREF: ROM:dont_move_tex_left↑j
                bbc     21, r3, dont_move_tex_up # P2 Up
                cmpibge r11, r8, dont_move_tex_up
                addo    1, r11, r11     # Move texture up
dont_move_tex_up:                       # CODE XREF: ROM:dont_move_tex_right↑j
                bbc     20, r3, dont_move_tex_down # P2 Down
                cmpibge 0, r11, dont_move_tex_down
                subo    1, r11, r11     # Move texture down
dont_move_tex_down:                     # CODE XREF: ROM:dont_move_tex_up↑j
                stob    r10, 0x48(g3)   # byte at 0x5603E8
                stob    r11, 0x49(g3)   # byte at 0x5603E9
                call    debug_window_setup # Some variables get set up here
                ret                     # Falls back to 0x4D570
# ---------------------------------------------------------------------------
loc_494CC:                              # DATA XREF: ROM:00049400↑o
                ldos    0x44(g3), r9    # g3 = 0x5603A0
                cmpobe  0, r9, finish_texture # Branch if DST2_CELL_NO (r9) = 0
                mov     0, r15
                stib    r15, 0xC(g3)    # byte at 0x5603AC = 0
                mov     3, r15
                stib    r15, 0xD(g3)    # byte at 0x5603AD = 3
                lda     texture_palette_offsets, r3
                ld      (r3)[r9*4], r10 # Grab texture offset again
                cmpobe  0, r10, finish_texture # Branch if r10 = 0
                ldl     4(r10), r4
                addo    12, r10, r10
                mov     0, r9
loc_49500:                              # CODE XREF: ROM:00049580↓j
                lda     TEXTURE_BUFFER, r11
                shlo    6, 1, r3
                mov     0, r12
loc_49510:                              # CODE XREF: ROM:0004951C↓j
                st      r12, (r11)
                addo    4, r11, r11
                cmpdeco 1, r3, r3
                bl      loc_49510
                lda     TEXTURE_BUFFER, g0
                cmpobge r9, r4, loc_49554 # If texture height is 0, branch
                mov     r5, g1          # Move width into g1
                mov     1, g2
                mov     0, r8
handle_tex_width:                       # CODE XREF: ROM:00049550↓j
                ldob    0x49(g3), r3    # byte at 0x5603E9
                mulo    r5, r3, r3      # Multiply width (r5) by r3
                ldos    (r10)[r3*2], r3 # Store 2 bytes of texture data to r3
                addo    2, r10, r10     # Add 2 to the texture offset
                stos    r3, (g0)[r8*2]  # store r3 to the texture buffer at TEX_BUFFER
                addo    1, r8, r8       # increment r8 by 1
                cmpobg  g1, r8, handle_tex_width # if width is less than r8, loop, else fall through
loc_49554:                              # CODE XREF: ROM:00049528↑j
                ldob    0x48(g3), r3    # byte at 0x5603E8
                lda     (g0)[r3*2], g0  # g0 += r3 *2
                addo    31, 1, g1       # g1 = 32 or 0x20
                call    uk_texture_data_thing
                mov     0, r15
                stib    r15, 0xC(g3)    # byte at 0x5603AC = 0
                ldob    0xD(g3), r14
                addi    1, r14, r15
                stob    r15, 0xD(g3)    # byte at 0x5603AC += 1
                addo    1, r9, r9
                addo    31, 2, r14
                cmpobl  r9, r14, loc_49500
finish_texture:                         # CODE XREF: ROM:000494D0↑j
                call    loc_4E8F0
                ret
# ---------------------------------------------------------------------------
scroll_test_load_cg:                    # DATA XREF: ROM:000495EC↓o
                ldos    0x46(g3), r3    # Get selected CG number to assign
                addo    r3, r3, r3
                mov     r3, g0
                call    _ScrollCG_Initialize
                addo    1, r3, g0
                call    _ScrollColor_Initialize
                ret
# ---------------------------------------------------------------------------
scroll_test_cell_no:.long 0x246103      # DATA XREF: ROM:00096F34↓o
# ---------------------------------------------------------------------------
                ldis    0x44(g3), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
aCellNo:        .asciz "cell No"
scroll_test_cg_no:.long 0x246103        # DATA XREF: ROM:00096F38↓o
# ---------------------------------------------------------------------------
                ldis    0x46(g3), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
aCgNo:          .asciz "cg   No"
scroll_test_send_cg_color:.long 0x200   # DATA XREF: ROM:00096F3C↓o
# ---------------------------------------------------------------------------
                lda     scroll_test_load_cg, g0
# ---------------------------------------------------------------------------
                .long 0
aSendCgColor:   .asciz "send cg & color"
# ---------------------------------------------------------------------------
DEBUG_OSAGE:                            # DATA XREF: ROM:00040174↑o
                balx    setup_debug_menu_window, r14 # DEBUG_OSAGE has different names for values which are also labeled in DEBUG_DEBUG. For now, I am going to leave these labels as the DEBUG_DEBUG labels.
# ---------------------------------------------------------------------------
                .byte 5, 5, 0x14, 0xF, 0, 0, 0, 0# debug_window_flags
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     db_osage_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
db_osage_xang:  .long 0x11100           # DATA XREF: ROM:00096F44↓o
# ---------------------------------------------------------------------------
                ldob    debug_fxang, g0
# ---------------------------------------------------------------------------
                .long 2
aXang_3:        .asciz "xang"
                .fill 3, 1, 0
db_osage_yang:  .long 0x11100           # DATA XREF: ROM:00096F48↓o
# ---------------------------------------------------------------------------
                ldob    debug_fyang, g0
# ---------------------------------------------------------------------------
                .long 2
aYang_7:        .asciz "yang"
                .fill 3, 1, 0
db_osage_zang:  .long 0x11100           # DATA XREF: ROM:00096F4C↓o
# ---------------------------------------------------------------------------
                ldob    debug_fzang, g0
# ---------------------------------------------------------------------------
                .long 2
aZang_2:        .asciz "zang"
                .fill 3, 1, 0
dword_49698:    .long 0x11100           # DATA XREF: ROM:00096F50↓o
# ---------------------------------------------------------------------------
                ldob    debug_fzang2, g0
# ---------------------------------------------------------------------------
                .long 2
aIosMatRot0:    .asciz "ios_mat_rot+0"
                .short 0
dword_496B8:    .long 0x23100           # DATA XREF: ROM:00096F54↓o
# ---------------------------------------------------------------------------
                ld      debug_fx, g0
# ---------------------------------------------------------------------------
                .long 0x200
aFx:            .asciz "fx"
                .byte 0
dword_496CC:    .long 0x23100           # DATA XREF: ROM:00096F58↓o
# ---------------------------------------------------------------------------
                ld      debug_fy, g0
# ---------------------------------------------------------------------------
                .long 0x200
aFy:            .asciz "fy"
                .byte 0
dword_496E0:    .long 0x23100           # DATA XREF: ROM:00096F5C↓o
# ---------------------------------------------------------------------------
                ld      debug_fz, g0
# ---------------------------------------------------------------------------
                .long 0x200
aFz:            .asciz "fz"
                .byte 0
dword_496F4:    .long 0x23100           # DATA XREF: ROM:00096F60↓o
# ---------------------------------------------------------------------------
                ld      debug_fx2, g0
# ---------------------------------------------------------------------------
                .long 0x200
aFx2:           .asciz "fx2"
dword_49708:    .long 0x23100           # DATA XREF: ROM:00096F64↓o
# ---------------------------------------------------------------------------
                ld      debug_fy2, g0
# ---------------------------------------------------------------------------
                .long 0x200
aFy2:           .asciz "fy2"
dword_4971C:    .long 0x23100           # DATA XREF: ROM:00096F68↓o
# ---------------------------------------------------------------------------
                ld      debug_fz2, g0
# ---------------------------------------------------------------------------
                .long 0x200
aFz2:           .asciz "fz2"
dword_49730:    .long 0x23100           # DATA XREF: ROM:00096F6C↓o
# ---------------------------------------------------------------------------
                ld      debug_fx3, g0
# ---------------------------------------------------------------------------
                .long 0x200
aGloblGx:       .asciz "globl_Gx"
                .fill 3, 1, 0
dword_4974C:    .long 0x23100           # DATA XREF: ROM:00096F70↓o
# ---------------------------------------------------------------------------
                ld      debug_fy3, g0
# ---------------------------------------------------------------------------
                .long 0x200
aGloblGy:       .asciz "globl_Gy"
                .fill 3, 1, 0
dword_49768:    .long 0x23100           # DATA XREF: ROM:00096F74↓o
# ---------------------------------------------------------------------------
                ld      debug_fz3, g0
# ---------------------------------------------------------------------------
                .long 0x200
aGloblGz:       .asciz "globl_Gz"
                .fill 3, 1, 0
dword_49784:    .long 0x23100           # DATA XREF: ROM:00096F78↓o
# ---------------------------------------------------------------------------
                ld      debug_mx, g0
# ---------------------------------------------------------------------------
                .long 0x300
aClKaoX:        .asciz "cl_kao_x"
                .fill 3, 1, 0
dword_497A0:    .long 0x23100           # DATA XREF: ROM:00096F7C↓o
# ---------------------------------------------------------------------------
                ld      debug_my, g0
# ---------------------------------------------------------------------------
                .long 0x300
aClKaoZ:        .asciz "cl_kao_z"
                .fill 3, 1, 0
dword_497BC:    .long 0x23100           # DATA XREF: ROM:00096F80↓o
# ---------------------------------------------------------------------------
                ld      debug_mz, g0
# ---------------------------------------------------------------------------
                .long 0x300
aClKaoR:        .asciz "cl_kao_r"
                .fill 3, 1, 0
dword_497D8:    .long 0x23100           # DATA XREF: ROM:00096F84↓o
# ---------------------------------------------------------------------------
                ld      debug_mx2, g0
# ---------------------------------------------------------------------------
                .long 0x300
aClKubiX:       .asciz "cl_kubi_x"
                .short 0
dword_497F4:    .long 0x23100           # DATA XREF: ROM:00096F88↓o
# ---------------------------------------------------------------------------
                ld      debug_my2, g0
# ---------------------------------------------------------------------------
                .long 0x300
aClKubiZ:       .asciz "cl_kubi_z"
                .short 0
dword_49810:    .long 0x23100           # DATA XREF: ROM:00096F8C↓o
# ---------------------------------------------------------------------------
                ld      debug_mz2, g0
# ---------------------------------------------------------------------------
                .long 0x300
aClKubiR:       .asciz "cl_kubi_r"
                .short 0
dword_4982C:    .long 0x23100           # DATA XREF: ROM:00096F90↓o
# ---------------------------------------------------------------------------
                ld      debug_mx3, g0
# ---------------------------------------------------------------------------
                .long 0x300
aClKosiBLen:    .asciz "cl_kosi_b_len"
                .short 0
dword_4984C:    .long 0x23100           # DATA XREF: ROM:00096F94↓o
# ---------------------------------------------------------------------------
                ld      debug_my3, g0
# ---------------------------------------------------------------------------
                .long 0x300
aClKosiFLen:    .asciz "cl_kosi_f_len"
                .short 0
dword_4986C:    .long 0x23100           # DATA XREF: ROM:00096F98↓o
# ---------------------------------------------------------------------------
                ld      debug_mz3, g0
# ---------------------------------------------------------------------------
                .long 0x300
aClKataR:       .asciz "cl_kata_r"
                .short 0
dword_49888:    .long 0x11100           # DATA XREF: ROM:00096F9C↓o
# ---------------------------------------------------------------------------
                ldob    debug_mxang, g0
# ---------------------------------------------------------------------------
                .long 2
aClMuneBAng:    .asciz "cl_mune_b_ang"
                .short 0
dword_498A8:    .long 0x11100           # DATA XREF: ROM:00096FA0↓o
# ---------------------------------------------------------------------------
                ldob    debug_myang, g0
# ---------------------------------------------------------------------------
                .long 2
aClMuneFAng:    .asciz "cl_mune_f_ang"
                .short 0
dword_498C8:    .long 0x11100           # DATA XREF: ROM:00096FA4↓o
# ---------------------------------------------------------------------------
                ldob    debug_mxang2, g0
# ---------------------------------------------------------------------------
                .long 2
aClKosiBAng:    .asciz "cl_kosi_b_ang"
                .short 0
dword_498E8:    .long 0x11100           # DATA XREF: ROM:00096FA8↓o
# ---------------------------------------------------------------------------
                ldob    debug_mzang2, g0
# ---------------------------------------------------------------------------
                .long 2
aClKosiFAng:    .asciz "cl_kosi_f_ang"
                .short 0
# ---------------------------------------------------------------------------
DEBUG_DEBUG:                            # DATA XREF: ROM:000401D8↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xF140505
                .long 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     db_debug_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
dword_49950:    .long 0x23100           # DATA XREF: ROM:00096FB0↓o
# ---------------------------------------------------------------------------
                ld      debug_fx, g0
# ---------------------------------------------------------------------------
                .long 0x100
aFx_0:          .asciz "fx"
                .byte 0
dword_49964:    .long 0x23100           # DATA XREF: ROM:00096FB4↓o
# ---------------------------------------------------------------------------
                ld      debug_fy, g0
# ---------------------------------------------------------------------------
                .long 0x100
aFy_0:          .asciz "fy"
                .byte 0
dword_49978:    .long 0x23100           # DATA XREF: ROM:00096FB8↓o
# ---------------------------------------------------------------------------
                ld      debug_fz, g0
# ---------------------------------------------------------------------------
                .long 0x100
aFz_0:          .asciz "fz"
                .byte 0
dword_4998C:    .long 0x23100           # DATA XREF: ROM:00096FBC↓o
# ---------------------------------------------------------------------------
                ld      debug_fx2, g0
# ---------------------------------------------------------------------------
                .long 0x100
aFx2_0:         .asciz "fx2"
dword_499A0:    .long 0x23100           # DATA XREF: ROM:00096FC0↓o
# ---------------------------------------------------------------------------
                ld      debug_fy2, g0
# ---------------------------------------------------------------------------
                .long 0x100
aFy2_0:         .asciz "fy2"
dword_499B4:    .long 0x23100           # DATA XREF: ROM:00096FC4↓o
# ---------------------------------------------------------------------------
                ld      debug_fz2, g0
# ---------------------------------------------------------------------------
                .long 0x100
aFz2_0:         .asciz "fz2"
dword_499C8:    .long 0x23100           # DATA XREF: ROM:00096FC8↓o
# ---------------------------------------------------------------------------
                ld      debug_fx3, g0
# ---------------------------------------------------------------------------
                .long 0x100
aFx3:           .asciz "fx3"
dword_499DC:    .long 0x23100           # DATA XREF: ROM:00096FCC↓o
# ---------------------------------------------------------------------------
                ld      debug_fy3, g0
# ---------------------------------------------------------------------------
                .long 0x100
aFy3:           .asciz "fy3"
dword_499F0:    .long 0x23100           # DATA XREF: ROM:00096FD0↓o
# ---------------------------------------------------------------------------
                ld      debug_fz3, g0
# ---------------------------------------------------------------------------
                .long 0x100
aFz3:           .asciz "fz3"
dword_49A04:    .long 0x23100           # DATA XREF: ROM:00096FD4↓o
# ---------------------------------------------------------------------------
                ld      debug_mx, g0
# ---------------------------------------------------------------------------
                .long 0x100
aMx:            .asciz "mx"
                .byte 0
dword_49A18:    .long 0x23100           # DATA XREF: ROM:00096FD8↓o
# ---------------------------------------------------------------------------
                ld      debug_my, g0
# ---------------------------------------------------------------------------
                .long 0x100
aMy:            .asciz "my"
                .byte 0
dword_49A2C:    .long 0x23100           # DATA XREF: ROM:00096FDC↓o
# ---------------------------------------------------------------------------
                ld      debug_mz, g0
# ---------------------------------------------------------------------------
                .long 0x100
aMz:            .asciz "mz"
                .byte 0
dword_49A40:    .long 0x23100           # DATA XREF: ROM:00096FE0↓o
# ---------------------------------------------------------------------------
                ld      debug_mx2, g0
# ---------------------------------------------------------------------------
                .long 0x100
aMx2:           .asciz "mx2"
dword_49A54:    .long 0x23100           # DATA XREF: ROM:00096FE4↓o
# ---------------------------------------------------------------------------
                ld      debug_my2, g0
# ---------------------------------------------------------------------------
                .long 0x100
aMy2:           .asciz "my2"
dword_49A68:    .long 0x23100           # DATA XREF: ROM:00096FE8↓o
# ---------------------------------------------------------------------------
                ld      debug_mz2, g0
# ---------------------------------------------------------------------------
                .long 0x100
aMz2:           .asciz "mz2"
dword_49A7C:    .long 0x23100           # DATA XREF: ROM:00096FEC↓o
# ---------------------------------------------------------------------------
                ld      debug_mx3, g0
# ---------------------------------------------------------------------------
                .long 0x300
aMx3:           .asciz "mx3"
dword_49A90:    .long 0x23100           # DATA XREF: ROM:00096FF0↓o
# ---------------------------------------------------------------------------
                ld      debug_my3, g0
# ---------------------------------------------------------------------------
                .long 0x300
aMy3:           .asciz "my3"
dword_49AA4:    .long 0x23100           # DATA XREF: ROM:00096FF4↓o
# ---------------------------------------------------------------------------
                ld      debug_mz3, g0
# ---------------------------------------------------------------------------
                .long 0x300
aMz3:           .asciz "mz3"
dword_49AB8:    .long 0x11100           # DATA XREF: ROM:00096FF8↓o
# ---------------------------------------------------------------------------
                ldob    debug_fxang, g0
# ---------------------------------------------------------------------------
                .long 2
aFxang:         .asciz "fxang"
                .short 0
dword_49AD0:    .long 0x11100           # DATA XREF: ROM:00096FFC↓o
# ---------------------------------------------------------------------------
                ldob    debug_fyang, g0
# ---------------------------------------------------------------------------
                .long 2
aFyang:         .asciz "fyang"
                .short 0
dword_49AE8:    .long 0x11100           # DATA XREF: ROM:00097000↓o
# ---------------------------------------------------------------------------
                ldob    debug_fzang, g0
# ---------------------------------------------------------------------------
                .long 2
aFzang:         .asciz "fzang"
                .short 0
dword_49B00:    .long 0x11100           # DATA XREF: ROM:00097004↓o
# ---------------------------------------------------------------------------
                ldob    debug_fxang2, g0
# ---------------------------------------------------------------------------
                .long 2
aFxang2:        .asciz "fxang2"
                .byte 0
dword_49B18:    .long 0x11100           # DATA XREF: ROM:00097008↓o
# ---------------------------------------------------------------------------
                ldob    debug_fyang2, g0
# ---------------------------------------------------------------------------
                .long 2
aFyang2:        .asciz "fyang2"
                .byte 0
dword_49B30:    .long 0x11100           # DATA XREF: ROM:0009700C↓o
# ---------------------------------------------------------------------------
                ldob    debug_fzang2, g0
# ---------------------------------------------------------------------------
                .long 2
aFzang2:        .asciz "fzang2"
                .byte 0
dword_49B48:    .long 0x11100           # DATA XREF: ROM:00097010↓o
# ---------------------------------------------------------------------------
                ldob    debug_fxang3, g0
# ---------------------------------------------------------------------------
                .long 2
aFxang3:        .asciz "fxang3"
                .byte 0
dword_49B60:    .long 0x11100           # DATA XREF: ROM:00097014↓o
# ---------------------------------------------------------------------------
                ldob    debug_fyang3, g0
# ---------------------------------------------------------------------------
                .long 2
aFyang3:        .asciz "fyang3"
                .byte 0
dword_49B78:    .long 0x11100           # DATA XREF: ROM:00097018↓o
# ---------------------------------------------------------------------------
                ldob    debug_fzang3, g0
# ---------------------------------------------------------------------------
                .long 2
aFzang3:        .asciz "fzang3"
                .byte 0
dword_49B90:    .long 0x11100           # DATA XREF: ROM:0009701C↓o
# ---------------------------------------------------------------------------
                ldob    debug_mxang, g0
# ---------------------------------------------------------------------------
                .long 2
aMxang:         .asciz "mxang"
                .short 0
dword_49BA8:    .long 0x11100           # DATA XREF: ROM:00097020↓o
# ---------------------------------------------------------------------------
                ldob    debug_myang, g0
# ---------------------------------------------------------------------------
                .long 2
aMyang:         .asciz "myang"
                .short 0
dword_49BC0:    .long 0x11100           # DATA XREF: ROM:00097024↓o
# ---------------------------------------------------------------------------
                ldob    debug_mzang, g0
# ---------------------------------------------------------------------------
                .long 2
aMzang:         .asciz "mzang"
                .short 0
dword_49BD8:    .long 0x11100           # DATA XREF: ROM:00097028↓o
# ---------------------------------------------------------------------------
                ldob    debug_mxang2, g0
# ---------------------------------------------------------------------------
                .long 2
aMxang2:        .asciz "mxang2"
                .byte 0
dword_49BF0:    .long 0x11100           # DATA XREF: ROM:0009702C↓o
# ---------------------------------------------------------------------------
                ldob    debug_myang2, g0
# ---------------------------------------------------------------------------
                .long 2
aMyang2:        .asciz "myang2"
                .byte 0
dword_49C08:    .long 0x11100           # DATA XREF: ROM:00097030↓o
# ---------------------------------------------------------------------------
                ldob    debug_mzang2, g0
# ---------------------------------------------------------------------------
                .long 2
aMzang2:        .asciz "mzang2"
                .byte 0
dword_49C20:    .long 0x11100           # DATA XREF: ROM:00097034↓o
# ---------------------------------------------------------------------------
                ldob    debug_mxang3, g0
# ---------------------------------------------------------------------------
                .long 2
aMxang3:        .asciz "mxang3"
                .byte 0
dword_49C38:    .long 0x11100           # DATA XREF: ROM:00097038↓o
# ---------------------------------------------------------------------------
                ldob    debug_myang3, g0
# ---------------------------------------------------------------------------
                .long 2
aMyang3:        .asciz "myang3"
                .byte 0
dword_49C50:    .long 0x11100           # DATA XREF: ROM:0009703C↓o
# ---------------------------------------------------------------------------
                ldob    debug_mzang3, g0
# ---------------------------------------------------------------------------
                .long 2
aMzang3:        .asciz "mzang3"
                .byte 0
# ---------------------------------------------------------------------------
DEBUG_PUNCH:                            # DATA XREF: ROM:000401C0↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0xF140505, 0
# ---------------------------------------------------------------------------
                lda     debug_window_setup, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     db_punch_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
dword_49CB0:    .long 0x23100           # DATA XREF: ROM:00097044↓o
# ---------------------------------------------------------------------------
                ld      0x1FB8(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumE0x:   .asciz "pendulum_E0x"
                .fill 3, 1, 0
dword_49CD0:    .long 0x23100           # DATA XREF: ROM:00097048↓o
# ---------------------------------------------------------------------------
                ld      0x1FBC(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumE0y:   .asciz "pendulum_E0y"
                .fill 3, 1, 0
dword_49CF0:    .long 0x23100           # DATA XREF: ROM:0009704C↓o
# ---------------------------------------------------------------------------
                ld      0x1FC0(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumE0z:   .asciz "pendulum_E0z"
                .fill 3, 1, 0
dword_49D10:    .long 0x23100           # DATA XREF: ROM:00097050↓o
# ---------------------------------------------------------------------------
                ld      0x1FC4(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumWx:    .asciz "pendulum_Wx"
dword_49D2C:    .long 0x23100           # DATA XREF: ROM:00097054↓o
# ---------------------------------------------------------------------------
                ld      0x1FC8(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumWy:    .asciz "pendulum_Wy"
dword_49D48:    .long 0x23100           # DATA XREF: ROM:00097058↓o
# ---------------------------------------------------------------------------
                ld      0x1FCC(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumWz:    .asciz "pendulum_Wz"
dword_49D64:    .long 0x23100           # DATA XREF: ROM:0009705C↓o
# ---------------------------------------------------------------------------
                ld      0x201C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumE0x1:  .asciz "pendulum_E0x1"
                .short 0
dword_49D84:    .long 0x23100           # DATA XREF: ROM:00097060↓o
# ---------------------------------------------------------------------------
                ld      0x2020(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumE0y1:  .asciz "pendulum_E0y1"
                .short 0
dword_49DA4:    .long 0x23100           # DATA XREF: ROM:00097064↓o
# ---------------------------------------------------------------------------
                ld      0x2024(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumE0z1:  .asciz "pendulum_E0z1"
                .short 0
dword_49DC4:    .long 0x23100           # DATA XREF: ROM:00097068↓o
# ---------------------------------------------------------------------------
                ld      0x2028(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumWx1:   .asciz "pendulum_Wx1"
                .fill 3, 1, 0
dword_49DE4:    .long 0x23100           # DATA XREF: ROM:0009706C↓o
# ---------------------------------------------------------------------------
                ld      0x202C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumWy1:   .asciz "pendulum_Wy1"
                .fill 3, 1, 0
dword_49E04:    .long 0x23100           # DATA XREF: ROM:00097070↓o
# ---------------------------------------------------------------------------
                ld      0x2030(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumWz1:   .asciz "pendulum_Wz1"
                .fill 3, 1, 0
dword_49E24:    .long 0x23100           # DATA XREF: ROM:00097074↓o
# ---------------------------------------------------------------------------
                ld      0x2080(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumE0x2:  .asciz "pendulum_E0x2"
                .short 0
dword_49E44:    .long 0x23100           # DATA XREF: ROM:00097078↓o
# ---------------------------------------------------------------------------
                ld      0x2084(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumE0y2:  .asciz "pendulum_E0y2"
                .short 0
dword_49E64:    .long 0x23100           # DATA XREF: ROM:0009707C↓o
# ---------------------------------------------------------------------------
                ld      0x2088(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumE0z2:  .asciz "pendulum_E0z2"
                .short 0
dword_49E84:    .long 0x23100           # DATA XREF: ROM:00097080↓o
# ---------------------------------------------------------------------------
                ld      0x208C(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumWx2:   .asciz "pendulum_Wx2"
                .fill 3, 1, 0
dword_49EA4:    .long 0x23100           # DATA XREF: ROM:00097084↓o
# ---------------------------------------------------------------------------
                ld      0x2090(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumWy2:   .asciz "pendulum_Wy2"
                .fill 3, 1, 0
dword_49EC4:    .long 0x23100           # DATA XREF: ROM:00097088↓o
# ---------------------------------------------------------------------------
                ld      0x2094(g7), g0
# ---------------------------------------------------------------------------
                .long 0x300
aPendulumWz2:   .asciz "pendulum_Wz2"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
DEBUG_MATERIAL:                         # DATA XREF: ROM:000401A4↑o
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x5140F0F
                .long 0
# ---------------------------------------------------------------------------
                ldob    material_num, r5
                and     0x1F, r5, r5
                lda     material_num_floats[r5*4], g5
                lda     loc_49F40, r15
                st      r15, 0x28(g3)
                lda     loc_49F5C, r15
                st      r15, 0x24(g3)
                lda     db_material_list, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_49F40:                              # DATA XREF: ROM:00049F08↑o
                ldob    material_num, r5
                and     0x1F, r5, r5
                lda     material_num_floats[r5*4], g5
                call    debug_window_setup
                ret
# ---------------------------------------------------------------------------
loc_49F5C:                              # DATA XREF: ROM:00049F14↑o
                ldob    material_num, r5
                and     0x1F, r5, r5
                lda     material_num_floats[r5*4], g5
                call    loc_4E8F0
                ret
# ---------------------------------------------------------------------------
db_material_num:.long 0x264110F         # DATA XREF: ROM:00097090↓o
# ---------------------------------------------------------------------------
                ldob    material_num, g0
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                lda     0, g0
                ret
# ---------------------------------------------------------------------------
                lda     0x1F, g0
                ret
# ---------------------------------------------------------------------------
aMaterialNum:   .asciz "material num" # DATA XREF: RAMBASE:0059C110↓o
                .fill 3, 1, 0
db_material_num_list:.long 0xA4031010   # DATA XREF: ROM:00097094↓o
# ---------------------------------------------------------------------------
                ldob    material_num, g0
# ---------------------------------------------------------------------------
                .long 0
                .long material_num_list
                .long 0
db_material_mirror:.long 0x11100        # DATA XREF: ROM:00097098↓o
# ---------------------------------------------------------------------------
                ldob    3(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
aMirror_0:      .asciz "mirror"
                .byte 0
db_material_speculer:.long 0x11100      # DATA XREF: ROM:0009709C↓o
# ---------------------------------------------------------------------------
                ldob    2(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
aSpeculer:      .asciz "speculer"
                .fill 3, 1, 0
db_material_ambient:.long 0x11100       # DATA XREF: ROM:000970A0↓o
# ---------------------------------------------------------------------------
                ldob    1(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
aAmbient:       .asciz "ambient"
db_material_deffuse:.long 0x11100       # DATA XREF: ROM:000970A4↓o
# ---------------------------------------------------------------------------
                ldob    0x0(g5), g0
                ret
# ---------------------------------------------------------------------------
                .long 0
aDeffuse:       .asciz "deffuse"
material_num_list:.long a0x00Aa         # DATA XREF: ROM:00049FB8↑o
                .long a0x01Ab           # "0x01 (AB)"
                .long a0x02Ac           # "0x02 (AC)"
                .long a0x03Ad           # "0x03 (AD)"
                .long a0x04Ae           # "0x04 (AE)"
                .long a0x05Af           # "0x05 (AF)"
                .long a0x06Ag           # "0x06 (AG)"
                .long a0x07Ah           # "0x07 (AH)"
                .long a0x08Ai           # "0x08 (AI)"
                .long a0x09Aj           # "0x09 (AJ)"
                .long a0x0aAk           # "0x0A (AK)"
                .long a0x0bAl           # "0x0B (AL)"
                .long a0x0cAm           # "0x0C (AM)"
                .long a0x0dAn           # "0x0D (AN)"
                .long a0x0eAo           # "0x0E (AO)"
                .long a0x0fAp           # "0x0F (AP)"
                .long a0x10Ba           # "0x10 (BA)"
                .long a0x11Bb           # "0x11 (BB)"
                .long a0x12Bc           # "0x12 (BC)"
                .long a0x13Bd           # "0x13 (BD)"
                .long a0x14Be           # "0x14 (BE)"
                .long a0x15Bf           # "0x15 (BF)"
                .long a0x16Bg           # "0x16 (BG)"
                .long a0x17Bh           # "0x17 (BH)"
                .long a0x18Bi           # "0x18 (BI)"
                .long a0x19Bj           # "0x19 (BJ)"
                .long a0x1aBk           # "0x1A (BK)"
                .long a0x1bBl           # "0x1B (BL)"
                .long a0x1cBm           # "0x1C (BM)"
                .long a0x1dBn           # "0x1D (BN)"
                .long a0x1eBo           # "0x1E (BO)"
                .long a0x1fBp           # "0x1F (BP)"
# ---------------------------------------------------------------------------
DEBUG_SKY_EYE:                          # DATA XREF: ROM:0004018C↑o
                ld      fa_camera, g6
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x8151C0E
                .long 0
# ---------------------------------------------------------------------------
                lda     loc_4A0EC, r15
                st      r15, 0x28(g3)
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     db_skye_eye_list, r15
                st      r15, 0x40(g3)
                call    sub_4D820
                call    sub_4DCA0
                ret
# ---------------------------------------------------------------------------
loc_4A0EC:                              # DATA XREF: ROM:0004A0BC↑o
                ld      INTERUPT_FLAGS_HELD, r3
                ld      0x1C(g6), r5
                lda     0x42700000, r13
                divr    r13, r5, r5
                bbc     0xF, r3, loc_4A114
                ld      0x18(g6), r14
                subr    r5, r14, r15
                st      r15, 0x18(g6)
loc_4A114:                              # CODE XREF: ROM:0004A104↑j
                bbc     0xE, r3, loc_4A124
                ld      0x18(g6), r14
                addr    r5, r14, r15
                st      r15, 0x18(g6)
loc_4A124:                              # CODE XREF: ROM:loc_4A114↑j
                bbc     0xC, r3, loc_4A134
                ld      0x20(g6), r14
                subr    r5, r14, r15
                st      r15, 0x20(g6)
loc_4A134:                              # CODE XREF: ROM:loc_4A124↑j
                bbc     0xD, r3, loc_4A144
                ld      0x20(g6), r14
                addr    r5, r14, r15
                st      r15, 0x20(g6)
loc_4A144:                              # CODE XREF: ROM:loc_4A134↑j
                bbc     0xA, r3, loc_4A154
                ld      0x1C(g6), r14
                subr    r5, r14, r15
                st      r15, 0x1C(g6)
loc_4A154:                              # CODE XREF: ROM:loc_4A144↑j
                bbc     9, r3, loc_4A164
                ld      0x1C(g6), r14
                addr    r5, r14, r15
                st      r15, 0x1C(g6)
loc_4A164:                              # CODE XREF: ROM:loc_4A154↑j
                bbc     0x15, r3, loc_4A178
                shlo    8, 1, r13
                ldos    0x24(g6), r14
                subi    r13, r14, r15
                stos    r15, 0x24(g6)
loc_4A178:                              # CODE XREF: ROM:loc_4A164↑j
                bbc     0x14, r3, loc_4A18C
                shlo    8, 1, r13
                ldos    0x24(g6), r14
                addi    r13, r14, r15
                stos    r15, 0x24(g6)
loc_4A18C:                              # CODE XREF: ROM:loc_4A178↑j
                bbs     0xA, r3, loc_4A1BC
                bbc     0x17, r3, loc_4A1A4
                shlo    8, 1, r13
                ldos    0x26(g6), r14
                subi    r13, r14, r15
                stos    r15, 0x26(g6)
loc_4A1A4:                              # CODE XREF: ROM:0004A190↑j
                bbc     0x16, r3, loc_4A1B8
                shlo    8, 1, r13
                ldos    0x26(g6), r14
                addi    r13, r14, r15
                stos    r15, 0x26(g6)
loc_4A1B8:                              # CODE XREF: ROM:loc_4A1A4↑j
                b       loc_4A1E4
# ---------------------------------------------------------------------------
loc_4A1BC:                              # CODE XREF: ROM:loc_4A18C↑j
                bbc     0x17, r3, loc_4A1D0
                shlo    8, 1, r13
                ldos    0x28(g6), r14
                subi    r13, r14, r15
                stos    r15, 0x28(g6)
loc_4A1D0:                              # CODE XREF: ROM:loc_4A1BC↑j
                bbc     0x16, r3, loc_4A1E4
                shlo    8, 1, r13
                ldos    0x28(g6), r14
                addi    r13, r14, r15
                stos    r15, 0x28(g6)
loc_4A1E4:                              # CODE XREF: ROM:loc_4A1B8↑j
                ret
# ---------------------------------------------------------------------------
sky_eye_xpos:   .long 0x80023000        # DATA XREF: ROM:000971EC↓o
# ---------------------------------------------------------------------------
                ld      0x18(g6), g0    # g0 = mod_fa_camera_add+0x18
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aXpos_6:        .asciz "Xpos"
                .fill 3, 1, 0
sky_eye_ypos:   .long 0x80023000        # DATA XREF: ROM:000971F0↓o
# ---------------------------------------------------------------------------
                ld      0x1C(g6), g0    # g0 = mod_fa_camera_add+0x1C
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aYpos_6:        .asciz "Ypos"
                .fill 3, 1, 0
sky_eye_zpos:   .long 0x80023000        # DATA XREF: ROM:000971F4↓o
# ---------------------------------------------------------------------------
                ld      0x20(g6), g0    # g0 = mod_fa_camera_add+0x20
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aZpos_6:        .asciz "Zpos"
                .fill 3, 1, 0
sky_eye_intrxpos:.long 0x80023000       # DATA XREF: ROM:000971F8↓o
# ---------------------------------------------------------------------------
                ld      0x120(g6), g0   # g0 = mod_fa_camera_add+0x120
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aIntrxpos_0:    .asciz "intrXpos"
                .fill 3, 1, 0
sky_eye_intrypos:.long 0x80023000       # DATA XREF: ROM:000971FC↓o
# ---------------------------------------------------------------------------
                ld      0x124(g6), g0   # g0 = mod_fa_camera_add+0x124
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aIntrypos_0:    .asciz "intrYpos"
                .fill 3, 1, 0
sky_eye_intrzpos:.long 0x80023000       # DATA XREF: ROM:00097200↓o
# ---------------------------------------------------------------------------
                ld      0x128(g6), g0   # g0 = mod_fa_camera_add+0x128
                ret
# ---------------------------------------------------------------------------
                .long 0x100
aIntrzpos_0:    .asciz "intrZpos"
                .fill 3, 1, 0
sky_eye_xang:   .long 0x80012000        # DATA XREF: ROM:00097204↓o
# ---------------------------------------------------------------------------
                ldos    0x24(g6), g0
                ret
# ---------------------------------------------------------------------------
                .long 4
aXang_2:        .asciz "Xang"
                .fill 3, 1, 0
sky_eye_yang:   .long 0x80012000        # DATA XREF: ROM:00097208↓o
# ---------------------------------------------------------------------------
                ldos    0x26(g6), g0
                ret
# ---------------------------------------------------------------------------
                .long 4
aYang_6:        .asciz "Yang"
                .fill 3, 1, 0
ROB_MODES:      .long aNormalMode       # DATA XREF: ROM:00046E9C↑o
                .long aComPlayer        # "COM_PLAYER"
                .long aNoUse            # "NO_USE"
                .long aDekuMode         # "DEKU_MODE"
                .long aNoUse_0          # "NO_USE"
                .long aManPlayer        # "MAN_PLAYER"
debug_off_on:   .long aOff_0            # DATA XREF: ROM:000412E8↑o
                .long aOn_0             # "ON"
debug_on_off:   .long aOn_1             # "ON"
                .long aOff_1            # "OFF"
texture_check_var:.long 0x400CCCCD      # DATA XREF: ROM:0004A62C↓r
                .long 0
                .long 0
                .long 0
NUM_1_TO_7_LONGS:.long 0                # DATA XREF: unpack_lod_data+600↓r
                .long 1
                .long 2
                .long 3
                .long 4
                .long 5
                .long 6
                .long 7
                .long loc_4BA5C
                .long loc_4BA2C
                .long sub_4BB30
                .long sub_4BAE8
                .long loc_4BA70
                .long loc_4BA70
shader_fil_test:.short 0                # DATA XREF: unpack_lod_data+668↓r
                .short 0x1111
                .short 0x2222
                .short 0x3333
                .short 0x4444
                .short 0x5555
                .short 0x6666
                .short 0x7777
                .short 0x8888
                .short 0x9999
                .short 0xAAAA
                .short 0xBBBB
                .short 0xCCCC
                .short 0xDDDD
                .short 0xEEEE
                .short 0xFFFF
# ---------------------------------------------------------------------------
loc_4A344:                              # CODE XREF: unp_send_tex_para_sub+1DC↓j
                st      g1, (g0)
                addo    4, g0, g0
                st      g2, (g0)
                addo    4, g0, g0
                st      g3, (g0)
                addo    4, g0, g0
                st      g4, (g0)
                addo    4, g0, g0
                st      g5, (g0)
                addo    4, g0, g0
                st      g6, (g0)
                addo    4, g0, g0
                st      g7, (g0)
                addo    4, g0, g0
                st      g8, (g0)
                addo    4, g0, g0
                st      g9, (g0)
                addo    4, g0, g0
                st      g10, (g0)
                addo    4, g0, g0
                st      g11, (g0)
                addo    4, g0, g0
                st      g12, (g0)
                addo    4, g0, g0
                st      g13, (g0)
                addo    4, g0, g0
                st      g14, (g0)
                addo    4, g0, g0
                st      r3, (g0)
                addo    4, g0, g0
                st      r4, (g0)
                addo    4, g0, g0
                st      r5, (g0)
                addo    4, g0, g0
                st      r6, (g0)
                addo    4, g0, g0
                st      r7, (g0)
                addo    4, g0, g0
                st      r8, (g0)
                addo    4, g0, g0
                st      r9, (g0)
                addo    4, g0, g0
                st      r10, (g0)
                addo    4, g0, g0
                st      r11, (g0)
                addo    4, g0, g0
                st      r12, (g0)
                addo    4, g0, g0
                st      r13, (g0)
                addo    4, g0, g0
                st      r14, (g0)
                addo    4, g0, g0
                st      r15, (g0)
                addo    4, g0, g0
                ret
# ---------------------------------------------------------------------------
loc_4A420:                              # CODE XREF: unp_send_tex_para_sub+4C↓j
                ld      (g0), g1
                addo    4, g0, g0
                ld      (g0), g2
                addo    4, g0, g0
                ld      (g0), g3
                addo    4, g0, g0
                ld      (g0), g4
                addo    4, g0, g0
                ld      (g0), g5
                addo    4, g0, g0
                ld      (g0), g6
                addo    4, g0, g0
                ld      (g0), g7
                addo    4, g0, g0
                ld      (g0), g8
                addo    4, g0, g0
                ld      (g0), g9
                addo    4, g0, g0
                ld      (g0), g10
                addo    4, g0, g0
                ld      (g0), g11
                addo    4, g0, g0
                ld      (g0), g12
                addo    4, g0, g0
                ld      (g0), g13
                addo    4, g0, g0
                ld      (g0), g14
                addo    4, g0, g0
                ld      (g0), r3
                addo    4, g0, g0
                ld      (g0), r4
                addo    4, g0, g0
                ld      (g0), r5
                addo    4, g0, g0
                ld      (g0), r6
                addo    4, g0, g0
                ld      (g0), r7
                addo    4, g0, g0
                ld      (g0), r8
                addo    4, g0, g0
                ld      (g0), r9
                addo    4, g0, g0
                ld      (g0), r10
                addo    4, g0, g0
                ld      (g0), r11
                addo    4, g0, g0
                ld      (g0), r12
                addo    4, g0, g0
                ld      (g0), r13
                addo    4, g0, g0
                ld      (g0), r14
                addo    4, g0, g0
                ld      (g0), r15
                addo    4, g0, g0
                ld      (g0), g0
                bx      (g0)
# =============== S U B R O U T I N E =======================================
four_flags:                             # CODE XREF: ROM:00006AA4↑p
                mov     0, r15
                stis    r15, 0x5502A8
                mov     0, r15
                stis    r15, 0x5502B0
                mov     0, r15
                stis    r15, 0x5502B8
                mov     0, r15
                st      r15, 0x546000
                ret
# End of function four_flags
# ---------------------------------------------------------------------------
                mov     1, g3           # unreachable code
                lda     0x550168, g2
                ld      0x50901C, g0
                ld      0x509020, g1
                and     1, g1, g1
                call    unp_send_tex_req
                ret
# =============== S U B R O U T I N E =======================================
check_timer_4:                          # CODE XREF: ROM:0004A620↓p
                ldl     TIMER_03, r14   # Label from Fighting Vipers source
                lda     0xFFFFF, r14
                and     r14, r15, r15
                subi    r15, r14, r15
                subo    0x12, r15, r15
                divo    0x19, r15, g0
                lda     0x64(g0), g0
                call    timer_manipulation
                ldob    RAMBASE_START, r3
loc_4A58C:                              # CODE XREF: check_timer_4+44↓j
                ldob    RAMBASE_START, r4
                cmpobne r3, r4, loc_4A5B4
                ldob    0x50008C, r5
                cmpobe  0, r5, loc_4A58C
                mov     0, r15
                stis    r15, 0x55C2F2
                ret
# ---------------------------------------------------------------------------
loc_4A5B4:                              # CODE XREF: check_timer_4+38↑j
                mov     1, r15
                stis    r15, 0x55C2F2
                call    interrupt_wait
                ret
# End of function check_timer_4
# ---------------------------------------------------------------------------
send_tex_default:                       # CODE XREF: ROM:00006A78↑p
                mov     0, g0           # Label from Fighting Vipers source
                st      g0, 0x55000C
                st      g0, 0x550080
                st      g0, 0x5500F4
                lda     0x5502C0, r3
                mov     0, r15
                st      r15, [r3*1]
                lda     0x5502D0, r3
                mov     0, r15
                st      r15, [r3*1]
                lda     0x5502E0, r3
                mov     0, r15
                st      r15, [r3*1]
                call    check_timer_4
                lda     0x1000A28, g9
                ld      texture_check_var, r3
                ld      texture_check_data, r4
                cmpobe  r3, r4, loc_4A6E8
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aTextureDataVer:.asciz "Texture Data Version Mismuch.."
                .byte 0
# ---------------------------------------------------------------------------
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .long 0x20657273        # sre  tex0 tex1 tex2 tex3 wo site kudasai.
                .long 0x203F3F3F
                .long 0x30786574
                .long 0x78657420
                .long 0x65742031
                .long 0x74203278
                .long 0x20337865
                .long 0x73206F77
                .long 0x20657469
                .long 0x6164756B
                .long 0x2E696173
                .long 0
# ---------------------------------------------------------------------------
                mov     r3, g0
                lda     0x447A0000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
                .long 0x5F677270        # prg_version
                .long 0x73726576
                .long 0x6E6F69
# ---------------------------------------------------------------------------
                mov     r4, g0
                lda     0x447A0000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
                .long 0x5F6D6F72        # rom_version
                .long 0x73726576
                .long 0x6E6F69
# ---------------------------------------------------------------------------
loc_4A6E8:                              # CODE XREF: ROM:0004A63C↑j
                ld      0x2300004, r6
                mov     0, r7
                ld      (r6), r4
                addo    4, r6, r6
                ld      0x2301000, r3
                cmpobe  r4, r3, loc_4A73C
                mov     1, r7
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .long 0x61746146        # Fatal !! sre  tex1 wo site kudasai.
                .long 0x2121206C
                .long 0x65727320
                .long 0x3F3F3F20
                .long 0x78657420
                .long 0x6F772031
                .long 0x74697320
                .long 0x756B2065
                .long 0x61736164
                .long 0x2E69
# ---------------------------------------------------------------------------
loc_4A73C:                              # CODE XREF: ROM:0004A704↑j
                ld      (r6), r4
                addo    4, r6, r6
                ld      0x2400000, r3
                cmpobe  r4, r3, loc_4A784
                mov     1, r7
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .long 0x61746146        # Fatal !! sre  tex2 wo site kudasai.
                .long 0x2121206C
                .long 0x65727320
                .long 0x3F3F3F20
                .long 0x78657420
                .long 0x6F772032
                .long 0x74697320
                .long 0x756B2065
                .long 0x61736164
                .long 0x2E69
# ---------------------------------------------------------------------------
loc_4A784:                              # CODE XREF: ROM:0004A74C↑j
                ld      (r6), r4
                addo    4, r6, r6
                ld      0x2600000, r3
                cmpobe  r4, r3, loc_4A7CC
                mov     1, r7
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .long 0x61746146        # Fatal !! sre  tex3 wo site kudasai.
                .long 0x2121206C
                .long 0x65727320
                .long 0x3F3F3F20
                .long 0x78657420
                .long 0x6F772033
                .long 0x74697320
                .long 0x756B2065
                .long 0x61736164
                .long 0x2E69
# ---------------------------------------------------------------------------
loc_4A7CC:                              # CODE XREF: ROM:0004A794↑j
                ld      (r6), r4
                addo    4, r6, r6
                ld      0x2B00000, r3
                cmpobe  r4, r3, loc_4A814
                mov     1, r7
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .long 0x61746146        # Fatal !! sre  tex4 wo site kudasai.
                .long 0x2121206C
                .long 0x65727320
                .long 0x3F3F3F20
                .long 0x78657420
                .long 0x6F772034
                .long 0x74697320
                .long 0x756B2065
                .long 0x61736164
                .long 0x2E69
# ---------------------------------------------------------------------------
loc_4A814:                              # CODE XREF: ROM:0004A7DC↑j
                cmpobe  0, r7, loc_4A948
                ld      0x2300004, r6
                mov     0, r7
                ld      (r6), r4
                addo    4, r6, r6
                ld      0x2301000, r3
                lda     loc_2710, g0
                remo    g0, r4, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aHead:          .asciz "head"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                lda     loc_2710, g0
                remo    g0, r3, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aTex1:          .asciz "tex1"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      (r6), r4
                addo    4, r6, r6
                ld      0x2400000, r3
                lda     loc_2710, g0
                remo    g0, r4, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aHead_0:        .asciz "head"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                lda     loc_2710, g0
                remo    g0, r3, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aTex2:          .asciz "tex2"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      (r6), r4
                addo    4, r6, r6
                ld      0x2600000, r3
                lda     loc_2710, g0
                remo    g0, r4, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aHead_1:        .asciz "head"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                lda     loc_2710, g0
                remo    g0, r3, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aTex3:          .asciz "tex3"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      (r6), r4
                addo    4, r6, r6
                ld      0x2B00000, r3
                lda     loc_2710, g0
                remo    g0, r4, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aHead_2:        .asciz "head"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                lda     loc_2710, g0
                remo    g0, r3, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aTex4:          .asciz "tex4"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_4A944:                              # CODE XREF: ROM:loc_4A944↓j
                b       loc_4A944
# ---------------------------------------------------------------------------
loc_4A948:                              # CODE XREF: ROM:loc_4A814↑j
                mov     0, r3
                stos    r3, 0x55C2F0
                lda     0xFFFF, r3
                mov     0, r4
                mov     0, r7
                lda     0x550168, r5
                lda     0x5502A8, r6
loc_4A974:                              # CODE XREF: ROM:0004A984↓j
                stos    r3, 0x0(r5)
                stis    r4, 2(r5)
                stos    r7, 0x1C(r5)
                lda     0x20(r5), r5
                cmpobl  r5, r6, loc_4A974
                mov     1, g0
                mov     0, g1
                mov     0, g2
                call    send_tex_rob
                ret
# =============== S U B R O U T I N E =======================================
send_tex_debug:                         # CODE XREF: ROM:0005B604↓p
                mov     1, g3           # Label from Fighting Vipers source
                lda     0x550168, g2
                mov     0, g1
                lda     0xFFFF, r3
                stos    r3, 0x0(g2)
                call    unp_send_tex_req
                ret
# End of function send_tex_debug
# =============== S U B R O U T I N E =======================================
send_tex_stage:                         # CODE XREF: change_scene+D0↑p
                mov     1, r3           # Label from Fighting Vipers source
                st      r3, busy_signal_flag
                lda     0x5502E0, r3
                mov     3, r15
                st      r15, [r3*1]
                st      g0, 4[r3*1]
                st      g1, 8[r3*1]
                st      g2, 0xC[r3*1]
                ret
# End of function send_tex_stage
# =============== S U B R O U T I N E =======================================
send_tex_stage_delay:                   # CODE XREF: unp_send_tex_para+13C↓p
                addo    4, sp, sp       # Label from Fighting Vipers source
                st      g1, -4(sp)
                mov     1, g3
                lda     0x550288, g2
                mov     0, g1
                call    unp_send_tex_req
                ld      -4(sp), g1
                subo    4, sp, sp
                lda     0x5502B8, g2
                call    send_tex_stage_col_req
                ret
# End of function send_tex_stage_delay
# ---------------------------------------------------------------------------
stage_tex_cancel:                       # Label from Fighting Vipers source
                lda     0x5502E0, r3
                mov     0, r15
                st      r15, [r3*1]
                mov     0, r15
                stis    r15, 0x55028A
                ret
# ---------------------------------------------------------------------------
                mov     g2, g4
                mov     2, g3
                cmpobne 0, g1, loc_4AA74
                lda     0x5501C8, g2
                b       loc_4AA7C
# ---------------------------------------------------------------------------
loc_4AA74:                              # CODE XREF: ROM:0004AA64↑j
                lda     0x5501E8, g2
loc_4AA7C:                              # CODE XREF: ROM:0004AA70↑j
                setbit  4, g1, g1
                clrbit  5, g1, g1
                mov     1, r3
                stos    r3, 0xA(g2)
                call    unp_send_tex_req
                ret
# ---------------------------------------------------------------------------
                mov     g2, g4
                mov     2, g3
                cmpobne 0, g1, loc_4AAAC
                lda     0x550208, g2
                b       loc_4AAB4
# ---------------------------------------------------------------------------
loc_4AAAC:                              # CODE XREF: ROM:0004AA9C↑j
                lda     0x550228, g2
loc_4AAB4:                              # CODE XREF: ROM:0004AAA8↑j
                setbit  4, g1, g1
                setbit  5, g1, g1
                mov     1, r3
                stos    r3, 0xA(g2)
                call    unp_send_tex_req
                ret
# ---------------------------------------------------------------------------
                mov     1, g3
                lda     0x550168, g2
                mov     0, g1
                call    unp_send_tex_req
                ret
# =============== S U B R O U T I N E =======================================
send_tex_rob:                           # CODE XREF: ROM:0004A994↑p
                mov     1, r3           # Label from Virtua Fighter 2 source
                st      r3, busy_signal_flag
                cmpobne 0, g1, loc_4AB2C
                lda     0x5502C0, r3
                mov     3, r15
                st      r15, [r3*1]
                st      g0, 4[r3*1]
                st      g1, 8[r3*1]
                st      g2, 0xC[r3*1]
                lda     0x550188, r4
                b       loc_4AB60
# ---------------------------------------------------------------------------
loc_4AB2C:                              # CODE XREF: send_tex_rob+C↑j
                lda     0x5502D0, r3
                mov     3, r15
                st      r15, [r3*1]
                st      g0, 4[r3*1]
                st      g1, 8[r3*1]
                st      g2, 0xC[r3*1]
                lda     0x5501A8, r4
loc_4AB60:                              # CODE XREF: send_tex_rob+44↑j
                ldos    0x0(r4), r4
                ret
# End of function send_tex_rob
# =============== S U B R O U T I N E =======================================
sub_4AB68:                              # CODE XREF: unp_send_tex_para+7C↓p
                lda     0x550188, g0
                ld      fa_rob0, g2
                call    sub_4AB94       # g2 = P1_PARTS_ADD or P2_PARTS_ADD
                lda     0x5501A8, g0
                ld      fa_rob1, g2
                call    sub_4AB94       # g2 = P1_PARTS_ADD or P2_PARTS_ADD
                ret
# End of function sub_4AB68
# =============== S U B R O U T I N E =======================================
# g2 = P1_PARTS_ADD or P2_PARTS_ADD
# p1 0x550188 p2 0x5501A8
sub_4AB94:                              # CODE XREF: sub_4AB68+10↑p
                ld      0x640(g2), r3   # P1_PARTS+0x640 or P2_PARTS+0x640
                ldos    0x0(g0), r4
                cmpobne r3, r4, loc_4ABA4
                ldis    2(g0), r3
loc_4ABA4:                              # CODE XREF: sub_4AB94+8↑j
                ret
# End of function sub_4AB94
# =============== S U B R O U T I N E =======================================
sub_4ABA8:                              # CODE XREF: unp_send_tex_para+BC↓p
                mov     g0, r10
                mov     g1, r11
                mov     g2, r12
                cmpobne 0, r11, loc_4ABD4
                lda     0x5502A8, r5
                lda     0x550188, r6
                lda     0x550248, r7
                b       loc_4ABEC
# ---------------------------------------------------------------------------
loc_4ABD4:                              # CODE XREF: sub_4ABA8+C↑j
                lda     0x5502B0, r5
                lda     0x5501A8, r6
                lda     0x550268, r7
loc_4ABEC:                              # CODE XREF: sub_4ABA8+28↑j
                mov     r11, g0
                mov     r12, g1
                mov     r5, g2
                call    sub_4ACBC
                mov     r10, g0
                mov     r11, g1
                mov     r6, g2
                mov     3, g3
                call    unp_send_tex_req
                ret
# End of function sub_4ABA8
# ---------------------------------------------------------------------------
                ret
# =============== S U B R O U T I N E =======================================
unp_send_tex_req:                       # CODE XREF: ROM:0004A554↑p
                ld      texture_check_var, r3 # Label from official source
                ld      texture_check_data, r4
                cmpobne r3, r4, loc_4ACB8
                mov     0x11, r3
                cmpoble g0, r3, loc_4AC58
                lda     0x1000064, g9
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aTexNumError:   .asciz "tex num error"
                .short 0
# ---------------------------------------------------------------------------
                b       loc_4ACB8
# ---------------------------------------------------------------------------
loc_4AC58:                              # CODE XREF: unp_send_tex_req+18↑j
                bbc     4, g1, loc_4AC68
                ldos    8(g2), r4
                stos    g4, 8(g2)
                cmpobne r4, g4, loc_4AC70
loc_4AC68:                              # CODE XREF: unp_send_tex_req:loc_4AC58↑j
                ldos    0x0(g2), r3
                cmpobe  g0, r3, loc_4ACB8
loc_4AC70:                              # CODE XREF: unp_send_tex_req+4C↑j
                mov     1, r3
                st      r3, busy_signal_flag
                stos    g0, 0x0(g2)
                subo    1, 0, r3
                stis    r3, 2(g2)
                st      g1, 0x10(g2)
                stos    g3, 0x1C(g2)
                ldos    0x55C2F0, r3
                cmpoble g3, r3, loc_4ACB8
                mov     0, g0
                st      g0, 0x55000C
                st      g0, 0x550080
                st      g0, 0x5500F4
loc_4ACB8:                              # CODE XREF: unp_send_tex_req+10↑j
                ret
# End of function unp_send_tex_req
# =============== S U B R O U T I N E =======================================
sub_4ACBC:                              # CODE XREF: sub_4ABA8+50↑p
                mov     1, r15
                stis    r15, 0x0(g2)
                stos    g0, 2(g2)
                stos    g1, 4(g2)
                ret
# End of function sub_4ACBC
# =============== S U B R O U T I N E =======================================
send_tex_stage_col_req:                 # CODE XREF: send_tex_stage_delay+34↑p
                mov     1, r15          # Label from Fighting Vipers source
                stis    r15, 0x0(g2)
                stos    g1, 4(g2)
                ret
# End of function send_tex_stage_col_req
# =============== S U B R O U T I N E =======================================
send_tex_col:                           # CODE XREF: VsyncScr+50↑p
                lda     0x5502A8, r5 # Label from Fighting Vipers source
                ldos    0x0(r5), r3
                cmpobe  1, r3, loc_4AD18
                lda     0x5502B0, r5
                ldos    0x0(r5), r3
                cmpobe  1, r3, loc_4AD18
                lda     0x5502B8, r5
                ldos    0x0(r5), r3
                cmpobe  1, r3, loc_4AD58
                call    chg_pol_color_send
                ret
# ---------------------------------------------------------------------------
loc_4AD18:                              # CODE XREF: send_tex_col+C↑j
                lda     125, g0         # Init count to 125
loc_4AD1C:                              # CODE XREF: send_tex_col+40↓j
                cmpdeco 1, g0, g0       # Count down
                bl      loc_4AD1C
                mov     0, r15
                stis    r15, 0x0(r5)
                ldos    2(r5), g0
                ldos    4(r5), g1
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                call    send_tex_col_skin
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                call    send_tex_col_part
                ret
# ---------------------------------------------------------------------------
loc_4AD58:                              # CODE XREF: send_tex_col+2C↑j
                lda     125, g0         # Init count to 125
loc_4AD5C:                              # CODE XREF: send_tex_col+80↓j
                cmpdeco 1, g0, g0       # Count down
                bl      loc_4AD5C
                mov     0, r15
                stis    r15, 0x0(r5)
                ldos    4(r5), g1
                call    send_tex_col_stage
                ret
# End of function send_tex_col
# =============== S U B R O U T I N E =======================================
unp_send_tex_para:                      # CODE XREF: main_loop:skip_frame↑p
                addo    4, sp, sp       # Label from Fighting Vipers source
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                call    unp_send_tex_para_sub
                call    sub_4AB68
                lda     0x5502C0, r3
                ld      [r3*1], r4
                cmpdeco 1, r4, r4
                bg      loc_4AE38
                st      r4, [r3*1]
                bl      loc_4AE38
                ld      4[r3*1], g0
                ld      8[r3*1], g1
                ld      0xC[r3*1], g2
                call    sub_4ABA8
loc_4AE38:                              # CODE XREF: unp_send_tex_para+94↑j
                lda     0x5502D0, r3
                ld      [r3*1], r4
                cmpdeco 1, r4, r4
                bg      loc_4AE78
                st      r4, [r3*1]
                bl      loc_4AE78
                ld      4[r3*1], g0
                ld      8[r3*1], g1
                ld      0xC[r3*1], g2
                call    sub_4ABA8
loc_4AE78:                              # CODE XREF: unp_send_tex_para+D4↑j
                lda     0x5502E0, r3
                ld      [r3*1], r4
                cmpdeco 1, r4, r4
                bg      loc_4AEB8
                st      r4, [r3*1]
                bl      loc_4AEB8
                ld      4[r3*1], g0
                ld      8[r3*1], g1
                ld      0xC[r3*1], g2
                call    send_tex_stage_delay
loc_4AEB8:                              # CODE XREF: unp_send_tex_para+114↑j
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ret
# End of function unp_send_tex_para
# =============== S U B R O U T I N E =======================================
unp_send_tex_para_sub:                  # CODE XREF: unp_send_tex_para+78↑p
                ldob    RAMBASE_START, g0 # Label from Fighting Vipers source
                cmpobe  0, g0, loc_4AF50
                mov     2, g0
                stob    g0, CPU_FAIL_flag
                ret
# ---------------------------------------------------------------------------
loc_4AF50:                              # CODE XREF: unp_send_tex_para_sub+8↑j
                mov     0, g0
                stob    g0, CPU_FAIL_flag
                call    sub_4B240
                ld      0x55000C, g0
                cmpobe  0, g0, loc_4AF84
                mov     0, g0
                st      g0, 0x55000C
                lda     0x550010, g0
                b       loc_4A420
# ---------------------------------------------------------------------------
loc_4AF84:                              # CODE XREF: unp_send_tex_para_sub+34↑j
                lda     0x550168, r5
                lda     0x5502A8, r6
loc_4AF94:                              # CODE XREF: unp_send_tex_para_sub+6C↓j
                ldis    2(r5), r3
                cmpobne 0, r3, loc_4AFA8
                lda     0x20(r5), r5
                cmpobl  r5, r6, loc_4AF94
                b       loc_4B1F0
# ---------------------------------------------------------------------------
loc_4AFA8:                              # CODE XREF: unp_send_tex_para_sub+64↑j
                ldos    0x0(r5), g0
                ld      debug_flag, r15
                bbs     9, r15, loc_4AFBC
                call    dsp_send_msg
loc_4AFBC:                              # CODE XREF: unp_send_tex_para_sub+80↑j
                cmpible 0, r3, loc_4B040
                ldos    0x1C(r5), g0
                stos    g0, 0x55C2F0
                ldos    0x0(r5), r3
                ld      0x230000C, r4
                ld      (r4)[r3*4], r10
                ld      0x2300008, r9
                ld      (r10), r3
                addo    4, r10, r10
                ld      (r9)[r3*4], r9
                ld      (r9), r8
                addo    4, r9, r9
                ld      0x10(r5), g0
                bbc     4, g0, loc_4B010
                ldos    8(r5), r3
                ldos    0xA(r5), r8
                lda     (r9)[r3*4], r9
                lda     (r10)[r3*4], r10
loc_4B010:                              # CODE XREF: unp_send_tex_para_sub+C8↑j
                ld      0x10(r5), g0
                bbs     3, g0, loc_4B020
                ld      0x10(r5), g0
                bbc     1, g0, loc_4B030
loc_4B020:                              # CODE XREF: unp_send_tex_para_sub+E0↑j
                ldos    4(r5), r3
                ldos    6(r5), r8
                lda     (r9)[r3*4], r9
                lda     (r10)[r3*4], r10
loc_4B030:                              # CODE XREF: unp_send_tex_para_sub+E8↑j
                stis    r8, 2(r5)
                st      r9, 0x14(r5)
                st      r10, 0x18(r5)
                cmpobe  0, r8, loc_4AF84
loc_4B040:                              # CODE XREF: unp_send_tex_para_sub:loc_4AFBC↑j
                ld      0x10(r5), r7
                ldis    2(r5), r8
                ld      0x14(r5), r9
                ld      0x18(r5), r10
                st      r7, 0x55C2F4
                mov     1, r6
loc_4B05C:                              # CODE XREF: unp_send_tex_para_sub+290↓j
                bbs     3, r7, loc_4B09C
                ld      (r9), g2
                xor     g2, r7, g8
                and     g8, 1, g8
                shlo    0x10, g2, g0
                shro    0x11, g0, g0
                ldos    word_4B394[g0*4], g6
                ldos    word_4B396[g0*4], g7
                shro    0x18, g2, g0
                shlo    8, g2, g1
                shro    0x18, g1, g1
                addo    g6, g0, g6
                addo    g7, g1, g7
                b       loc_4B0A8
# ---------------------------------------------------------------------------
loc_4B09C:                              # CODE XREF: unp_send_tex_para_sub:loc_4B05C↑j
                shlo    8, 1, g6
                mov     0, g7
                and     1, r7, g8
loc_4B0A8:                              # CODE XREF: unp_send_tex_para_sub+164↑j
                bbc     4, r7, loc_4B0C8
                bbs     5, r7, loc_4B0BC
                shlo    8, 3, g6
                shlo    7, 1, g7
                b       loc_4B0C4
# ---------------------------------------------------------------------------
loc_4B0BC:                              # CODE XREF: unp_send_tex_para_sub+178↑j
                shlo    8, 3, g6
                mov     0, g7
loc_4B0C4:                              # CODE XREF: unp_send_tex_para_sub+184↑j
                and     1, r7, g8
loc_4B0C8:                              # CODE XREF: unp_send_tex_para_sub:loc_4B0A8↑j
                call    sub_4C444
                ld      (r10), g3
                ld      (g3), r3
                addo    4, g3, g3
                cmpobe  0, r3, loc_4B118
loc_4B0DC:                              # DATA XREF: unp_send_tex_para_sub+1C4↓o
                call    send_beta_data
                ld      0x550080, g0
                cmpobe  0, g0, loc_4B114
                mov     1, g0
                st      g0, 0x55000C
                lda     loc_4B0DC, g0
                st      g0, 0x55007C
                lda     0x550010, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4B114:                              # CODE XREF: unp_send_tex_para_sub+1B4↑j
                b       loc_4B1C0
# ---------------------------------------------------------------------------
loc_4B118:                              # CODE XREF: unp_send_tex_para_sub+1A4↑j
                call    unpack_lod_data
                ld      0x550080, g0
                cmpobe  0, g0, loc_4B150
                mov     1, g0
                st      g0, 0x55000C
                lda     loc_4B118, g0
                st      g0, 0x55007C
                lda     0x550010, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4B150:                              # CODE XREF: unp_send_tex_para_sub+1F0↑j
                call    send_lod_data
                ld      0x550080, g0
                cmpobe  0, g0, loc_4B188
                mov     1, g0
                st      g0, 0x55000C
                lda     loc_4B150, g0
                st      g0, 0x55007C
                lda     0x550010, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4B188:                              # CODE XREF: unp_send_tex_para_sub+228↑j
                call    send_lod_data_q
                ld      0x550080, g0
                cmpobe  0, g0, loc_4B1C0
                mov     1, g0
                st      g0, 0x55000C
                lda     loc_4B188, g0
                st      g0, 0x55007C
                lda     0x550010, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4B1C0:                              # CODE XREF: unp_send_tex_para_sub:loc_4B114↑j
                cmpdeco 1, r6, r6
                bl      loc_4B05C
                ldis    2(r5), g0
                cmpibg  0, g0, loc_4B1EC
                cmpibe  0, g0, loc_4B1EC
                subo    1, r8, r8
                addo    4, r9, r9
                addo    4, r10, r10
                stis    r8, 2(r5)
                st      r9, 0x14(r5)
                st      r10, 0x18(r5)
loc_4B1EC:                              # CODE XREF: unp_send_tex_para_sub+298↑j
                b       loc_4AF84
# ---------------------------------------------------------------------------
loc_4B1F0:                              # CODE XREF: unp_send_tex_para_sub+70↑j
                mov     0, r3
                stos    r3, 0x55C2F0
                ld      0x5502C0, r14
                cmpobne 0, r14, loc_4B22C
                ld      0x5502D0, r14
                cmpobne 0, r14, loc_4B22C
                ld      0x5502E0, r14
                cmpobne 0, r14, loc_4B22C
                mov     0, r3
                st      r3, busy_signal_flag
loc_4B22C:                              # CODE XREF: unp_send_tex_para_sub+2D0↑j
                ld      debug_flag, r15
                bbs     9, r15, loc_4B23C
                call    loc_4C534
loc_4B23C:                              # CODE XREF: unp_send_tex_para_sub+300↑j
                ret
# End of function unp_send_tex_para_sub
# =============== S U B R O U T I N E =======================================
sub_4B240:                              # CODE XREF: unp_send_tex_para_sub+28↑p
                ld      not_scr_bg_move, r15
                bbs     0x10, r15, loc_4B364
                ldob    also_mode, r15
                lda     start_ip_add, r14
                cmpobe  r14, r15, loc_4B32C
                lda     start_ip_add+1, r14
                cmpobe  r14, r15, loc_4B32C
                ldob    also_mode, r15
                lda     displacement64, r14
                lda     displacement128(r14), r14
                bbs     r15, r14, loc_4B374
                lda     sys_proc_table, r14
                lda     loc_8000(r14), r14
                bbs     r15, r14, loc_4B350
                lda     prcb, r14
                lda     displacement8(r14), r14
                bbs     r15, r14, loc_4B390
                lda     displacement9, r14
                cmpobne r15, r14, loc_4B2E0
                ldob    stage_num, r14
                lda     prcb, r15
                cmpobe  r14, r15, loc_4B33C
                lda     stage8, r15
                cmpobe  r14, r15, loc_4B33C
                b       loc_4B2F4
# ---------------------------------------------------------------------------
loc_4B2E0:                              # CODE XREF: sub_4B240+78↑j
                lda     dword_3E80, r10
                lda     loc_4E20, r11
                b       loc_4B380
# ---------------------------------------------------------------------------
loc_4B2F4:                              # CODE XREF: sub_4B240+9C↑j
                ldob    also_sub_mode, r15
                lda     mode8, r14
                cmpobl  r15, r14, loc_4B31C
                lda     dword_3E80, r10
                lda     loc_4E20, r11
                b       loc_4B380
# ---------------------------------------------------------------------------
loc_4B31C:                              # CODE XREF: sub_4B240+C4↑j
                lda     dword_4330, r10
                mov     0, r11
                b       loc_4B380
# ---------------------------------------------------------------------------
loc_4B32C:                              # CODE XREF: sub_4B240+1C↑j
                mov     0, r10
                lda     loc_4E20, r11
                b       loc_4B380
# ---------------------------------------------------------------------------
loc_4B33C:                              # CODE XREF: sub_4B240+8C↑j
                lda     dword_4330, r10
                lda     loc_4E20, r11
                b       loc_4B380
# ---------------------------------------------------------------------------
loc_4B350:                              # CODE XREF: sub_4B240+58↑j
                lda     loc_32C8, r10
                lda     loc_4E20, r11
                b       loc_4B380
# ---------------------------------------------------------------------------
loc_4B364:                              # CODE XREF: sub_4B240+8↑j
                mov     0, r10
                lda     loc_4E20, r11
                b       loc_4B380
# ---------------------------------------------------------------------------
loc_4B374:                              # CODE XREF: sub_4B240+44↑j
                mov     0, r10
                lda     loc_4E20, r11
loc_4B380:                              # CODE XREF: sub_4B240+B0↑j
                st      r10, 0x550004
                st      r11, 0x550008
loc_4B390:                              # CODE XREF: sub_4B240+6C↑j
                ret
# End of function sub_4B240
# ---------------------------------------------------------------------------
word_4B394:     .short 0                # DATA XREF: unp_send_tex_para_sub+140↑r
word_4B396:     .short 0                # DATA XREF: unp_send_tex_para_sub+148↑r
                .short 0x100
                .short 0
                .short 0x200
                .short 0
                .short 0x300
                .short 0
                .short 0
                .short 0x100
                .short 0x100
                .short 0x100
                .short 0x200
                .short 0x100
                .short 0x300
                .short 0x100
                .short 0
                .short 0x200
                .short 0x100
                .short 0x200
                .short 0x200
                .short 0x200
                .short 0x300
                .short 0x200
                .short 0
                .short 0x300
                .short 0x100
                .short 0x300
                .short 0x200
                .short 0x300
                .short 0x300
                .short 0x300
                .short 0
                .short 0x400
                .short 0x100
                .short 0x400
                .short 0
                .short 0x500
                .short 0x100
                .short 0x500
                .short 0
                .short 0x600
                .short 0x100
                .short 0x600
                .short 0
                .short 0x700
                .short 0x100
                .short 0x700
                .short 0
                .short 0
                .short 0
                .short 0
# =============== S U B R O U T I N E =======================================
unpack_lod_data:                        # CODE XREF: unp_send_tex_para_sub:loc_4B118↑p
                ld      0x550080, g0 # Label from Fighting Vipers source
                cmpobe  0, g0, loc_4B420
                mov     0, g0
                st      g0, 0x550080
                lda     0x550084, g0
                b       loc_4A420
# ---------------------------------------------------------------------------
loc_4B420:                              # CODE XREF: unpack_lod_data+8↑j
                mov     g3, r15
                ldos    (r15), g11
                addo    2, r15, r15
                mov     0, r14
                mov     0, r13
                cmpo    r14, 0x10
                shlo    r14, g11, g0
                bg      loc_4B450
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B450:                              # CODE XREF: unpack_lod_data+40↑j
                cmpo    r14, 0x10
                shlo    r14, g11, g0
                bg      loc_4B46C
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B46C:                              # CODE XREF: unpack_lod_data+5C↑j
                shlo    0x18, r13, g2
                shro    0x18, g2, g2
                subo    8, r14, r14
                cmpo    r14, 0x10
                shro    8, r13, r13
                bg      loc_4B498
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B498:                              # CODE XREF: unpack_lod_data+84↑j
                addo    1, g2, g2
                shro    1, g2, g2
                stos    g2, 0x55C320
                shlo    0x18, r13, g3
                shro    0x18, g3, g3
                subo    8, r14, r14
                cmpo    r14, 0x10
                shro    8, r13, r13
                bg      loc_4B4D4
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B4D4:                              # CODE XREF: unpack_lod_data+C0↑j
                addo    1, g3, g3
                shro    1, g3, g3
                stos    g3, 0x55C322
                mulo    g2, g3, g2
                st      g2, 0x55C324
                shlo    0x18, r13, g2
                shro    0x18, g2, g2
                subo    8, r14, r14
                cmpo    r14, 0x10
                shro    8, r13, r13
                bg      loc_4B51C
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B51C:                              # CODE XREF: unpack_lod_data+108↑j
                st      g2, 0x55C330
                shlo    0x10, r13, g2
                shro    0x10, g2, g2
                subo    0x10, r14, r14
                cmpo    r14, 0x10
                shro    0x10, r13, r13
                bg      loc_4B550
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B550:                              # CODE XREF: unpack_lod_data+13C↑j
                st      g2, 0x55C32C
                shlo    0x10, r13, g2
                shro    0x10, g2, g2
                subo    0x10, r14, r14
                cmpo    r14, 0x10
                shro    0x10, r13, r13
                bg      loc_4B584
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B584:                              # CODE XREF: unpack_lod_data+170↑j
                st      g2, 0x55C334
                shlo    0x10, r13, g2
                shro    0x10, g2, g2
                subo    0x10, r14, r14
                cmpo    r14, 0x10
                shro    0x10, r13, r13
                bg      loc_4B5B8
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B5B8:                              # CODE XREF: unpack_lod_data+1A4↑j
                st      g2, 0x55C338
                and     0xF, r13, g2
                subo    4, r14, r14
                cmpo    r14, 0x10
                shro    4, r13, r13
                bg      loc_4B5E8
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B5E8:                              # CODE XREF: unpack_lod_data+1D4↑j
                st      g2, 0x55C33C
                shlo    0x10, r13, g2
                shro    0x10, g2, g2
                subo    0x10, r14, r14
                cmpo    r14, 0x10
                shro    0x10, r13, r13
                bg      loc_4B61C
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B61C:                              # CODE XREF: unpack_lod_data+208↑j
                st      g2, 0x55C340
                ld      0x55C32C, r4
                shlo    1, r4, r7
                subo    1, r7, r7
                st      r7, 0x55C328
                shlo    8, 1, g3
                lda     0x102, g4
                lda     0x122, g5
                lda     0x142, g6
                lda     0x55C344, r3  # Some sort of long pointer thing
                lda     0x55C344, r4  # Some sort of long pointer thing
                ld      0x55C330, r5
                shlo    r5, 1, r12
                subo    1, r12, r12
loc_4B66C:                              # CODE XREF: unpack_lod_data+358↓j
                and     r13, r12, g2
                subo    r5, r14, r14
                cmpo    r14, 0x10
                shro    r5, r13, r13
                bg      loc_4B694
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B694:                              # CODE XREF: unpack_lod_data+280↑j
                cmpobl  g2, g6, loc_4B6A8
                subo    g6, g2, g2
                shlo    2, g2, g2
                addo    r4, g2, g2
                b       loc_4B748
# ---------------------------------------------------------------------------
loc_4B6A8:                              # CODE XREF: unpack_lod_data:loc_4B694↑j
                cmpobge g2, g4, loc_4B700
                cmpobl  g2, g3, loc_4B6CC
                cmpobe  g2, g3, loc_4B6C0
                lda     0xA0000000, g2
                b       loc_4B748
# ---------------------------------------------------------------------------
loc_4B6C0:                              # CODE XREF: unpack_lod_data+2B4↑j
                lda     0x90000000, g2
                b       loc_4B748
# ---------------------------------------------------------------------------
loc_4B6CC:                              # CODE XREF: unpack_lod_data+2B0↑j
                ld      0x2300010[g2*4], g2
                and     0xF, g2, g0
                cmpobe  0, g0, loc_4B6EC
                lda     0x80000000, g0
                or      g0, g2, g2
                b       loc_4B748
# ---------------------------------------------------------------------------
loc_4B6EC:                              # CODE XREF: unpack_lod_data+2DC↑j
                shro    8, g2, g2
                lda     0xC0000000, g0
                or      g0, g2, g2
                b       loc_4B748
# ---------------------------------------------------------------------------
loc_4B700:                              # CODE XREF: unpack_lod_data:loc_4B6A8↑j
                cmpobge g2, g5, loc_4B728
                subo    g4, g2, g2
                addo    1, g2, g2
                cmpobg  0x11, g2, loc_4B718
                subo    0x10, g2, g2
                shlo    4, g2, g2
loc_4B718:                              # CODE XREF: unpack_lod_data+310↑j
                lda     0xB0000000, g0
                or      g2, g0, g2
                b       loc_4B748
# ---------------------------------------------------------------------------
loc_4B728:                              # CODE XREF: unpack_lod_data:loc_4B700↑j
                subo    g5, g2, g2
                addo    1, g2, g2
                cmpobg  0x11, g2, loc_4B73C
                subo    0x10, g2, g2
                shlo    4, g2, g2
loc_4B73C:                              # CODE XREF: unpack_lod_data+334↑j
                lda     0xD0000000, g0
                or      g2, g0, g2
loc_4B748:                              # CODE XREF: unpack_lod_data+2A8↑j
                st      g2, (r3)
                addo    4, r3, r3
                cmpdeco 1, r7, r7
                bl      loc_4B66C
                ld      0x55C338, r7
                lda     0x55CD50, r3
                cmpobe  0, r7, loc_4B7D8
loc_4B76C:                              # CODE XREF: unpack_lod_data+3D8↓j
                shlo    0x10, r13, g2
                shro    0x10, g2, g2
                subo    0x10, r14, r14
                cmpo    r14, 0x10
                shro    0x10, r13, r13
                bg      loc_4B798
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B798:                              # CODE XREF: unpack_lod_data+384↑j
                and     0xF, r13, g3
                subo    4, r14, r14
                cmpo    r14, 0x10
                shro    4, r13, r13
                bg      loc_4B7C0
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4B7C0:                              # CODE XREF: unpack_lod_data+3AC↑j
                shlo    8, g2, g2
                or      g3, g2, g2
                st      g2, (r3)
                addo    4, r3, r3
                cmpdeco 1, r7, r7
                bl      loc_4B76C
loc_4B7D8:                              # CODE XREF: unpack_lod_data+36C↑j
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                lda     0x545000, g10
                shlo    8, 1, g9
                mov     0, g14
                lda     0x55C344, g13 # Some sort of long pointer thing
                mov     0, g12
                call    make_huf_8bit
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ld      0x55C2F4, g0
                bbs     1, g0, loc_4B900
                lda     0x5502F0, r11
                b       loc_4B928
# ---------------------------------------------------------------------------
loc_4B900:                              # CODE XREF: unpack_lod_data+4F4↑j
                ld      0x5D0000, r11
                lda     0x2004(r11), g0
                st      g0, 0x5D0000
                ld      0x55C340, g0
                st      g0, (r11)
                addo    4, r11, r11
loc_4B928:                              # CODE XREF: unpack_lod_data+500↑j
                mov     0, r8
                mov     0, r7
                ld      0x55C33C, r6
                lda     0x545000, r5
                ld      0x55C340, g10
                lda     0x55C2EF, r10
                lda     0x55C2EE, r9
                shlo    r6, 1, r12
                subo    1, r12, r12
                shlo    0x18, r13, g0
                shro    0x18, g0, g0
                ldl     (r5)[g0*8], g4
                ldos    0x55C320, g14
loc_4B974:                              # CODE XREF: ROM:0004BAE0↓j
                ldob    RAMBASE_START, g0
                cmpobe  0, g0, loc_4B9B4
                mov     1, g0
                stob    g0, CPU_FAIL_flag
                mov     1, g0
                st      g0, 0x550080
                lda     loc_4B9B4, g0
                st      g0, 0x5500F0
                lda     0x550084, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4B9B4:                              # CODE XREF: unpack_lod_data+580↑j
                ldos    0x55C322, g13
                b       loc_4BA98
# ---------------------------------------------------------------------------
loc_4B9C0:                              # CODE XREF: unpack_lod_data+6A4↓j
                mov     g4, g3
                mov     8, r4
loc_4B9C8:                              # CODE XREF: unpack_lod_data+5E4↓j
                ld      (g3), g4
                chkbit  r4, r13
                addo    r4, 1, r4
                be      loc_4B9E8
                cmpi    g4, 0
                addo    4, g3, g3
                bge     loc_4B9C8
                b       loc_4B9F4
# ---------------------------------------------------------------------------
loc_4B9E8:                              # CODE XREF: unpack_lod_data+5D8↑j
                cmpi    g4, 0
                mov     g4, g3
                bge     loc_4B9C8
loc_4B9F4:                              # CODE XREF: unpack_lod_data+5E8↑j
                shro    0x1C, g4, g0
                subo    1, r4, r4
                ld      NUM_1_TO_7_LONGS[g0*4], g3
                subo    r4, r14, r14
                cmpo    r14, 0x10
                shro    r4, r13, r13
                bg      loc_4BA28
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4BA28:                              # CODE XREF: unpack_lod_data+614↑j
                bx      (g3)
# ---------------------------------------------------------------------------
loc_4BA2C:                              # DATA XREF: ROM:0004A310↑o
                and     r13, r12, g4
                subo    r6, r14, r14
                cmpo    r14, 0x10
                shro    r6, r13, r13
                bg      loc_4BA54
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4BA54:                              # CODE XREF: unpack_lod_data+640↑j
                ld      0x55CD50[g4*4], g4
loc_4BA5C:                              # DATA XREF: ROM:0004A30C↑o
                addo    r8, g4, r8
                and     0xF, r8, r8
                ldos    shader_fil_test[r8*2], r7
                shro    8, g4, g4
loc_4BA70:                              # DATA XREF: ROM:0004A31C↑o
                stob    r8, (r10)
                subo    2, r10, r10
                addo    r7, g4, g4
                stos    g4, (r11)
                addo    2, r11, r11
                shlo    0x18, r13, g0
                shro    0x18, g0, g0
                ldl     (r5)[g0*8], g4
                cmpdeco 1, g13, g13
loc_4BA94:                              # CODE XREF: sub_4BAE8+44↓j
                be      loc_4BAD0
loc_4BA98:                              # CODE XREF: unpack_lod_data+5C0↑j
                cmpi    g4, 0
                shro    0x18, g4, g2
                bge     loc_4B9C0
                and     0xF, g2, g2
                subo    g2, r14, r14
                cmpo    r14, 0x10
                shro    g2, r13, r13
                bg      loc_4BACC
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4BACC:                              # CODE XREF: unpack_lod_data+6B8↑j
                bx      (g5)
# End of function unpack_lod_data
# ---------------------------------------------------------------------------
loc_4BAD0:                              # CODE XREF: unpack_lod_data:loc_4BA94↑j
                mov     r9, g0
                mov     r10, r9
                mov     g0, r10
                cmpdeco 1, g14, g14
                bl      loc_4B974
                ret
# =============== S U B R O U T I N E =======================================
sub_4BAE8:                              # DATA XREF: ROM:0004A318↑o
                stos    g10, (r11)
                addo    2, r11, r11
                shlo    0x18, g4, g1
                shro    0x18, g1, g1
                subo    g1, g13, g13
loc_4BAFC:                              # CODE XREF: sub_4BAE8+20↓j
                stob    r8, (r10)
                subo    2, r10, r10
                cmpdeco 1, g1, g1
                bl      loc_4BAFC
                shlo    8, r7, g2
                or      g4, g2, g2
                stos    g2, (r11)
                addo    2, r11, r11
                shlo    0x18, r13, g0
                shro    0x18, g0, g0
                ldl     (r5)[g0*8], g4
                cmpo    0, g13
                b       loc_4BA94
# End of function sub_4BAE8
# =============== S U B R O U T I N E =======================================
sub_4BB30:                              # DATA XREF: ROM:0004A314↑o
                shlo    0x10, r13, g2
                shro    0x10, g2, g2
                subo    0x10, r14, r14
                cmpo    r14, 0x10
                shro    0x10, r13, r13
                bg      loc_4BB5C
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4BB5C:                              # CODE XREF: sub_4BB30+14↑j
                and     0xF, r13, g1
                subo    4, r14, r14
                cmpo    r14, 0x10
                shro    4, r13, r13
                bg      loc_4BB84
                shlo    r14, g11, g0
                ldos    (r15), g11
                addo    2, r15, r15
                or      r13, g0, r13
                addo    0x10, r14, r14
loc_4BB84:                              # CODE XREF: sub_4BB30+3C↑j
                shlo    0x18, r13, g0
                shro    0x18, g0, g0
                ldl     (r5)[g0*8], g4
                addo    r8, g1, r8
                and     0xF, r8, r8
                ldos    shader_fil_test[r8*2], r7
                cmpdeco 1, g13, g13
                stob    r8, (r10)
                subo    2, r10, r10
                addo    r7, g2, g2
                stos    g2, (r11)
                addo    2, r11, r11
                b       loc_4BA94
# End of function sub_4BB30
# =============== S U B R O U T I N E =======================================
make_huf_8bit:                          # CODE XREF: unpack_lod_data+470↑p
                cmpobne 8, g14, loc_4BBC8 # Label from Fighting Vipers source
                st      g13, (g10)[g12*8]
                ret
# ---------------------------------------------------------------------------
loc_4BBC8:                              # CODE XREF: make_huf_8bit↑j
                mov     g14, r14
                mov     g13, r13
                mov     g12, r12
                addo    1, r14, r7
                addo    4, r13, r11
                mov     r12, r9
                ld      (r11), r3
                cmpible 0, r3, loc_4BC10
                shlo    0x18, r7, r4
                or      r3, r4, g4
                shro    0x1C, g4, g0
                ld      NUM_1_TO_7_LONGS[g0*4], g5
                shlo    r7, 1, r4
loc_4BC00:                              # CODE XREF: make_huf_8bit+4C↓j
                stl     g4, (g10)[r9*8]
                addo    r4, r9, r9
                cmpobl  r9, g9, loc_4BC00
                b       loc_4BC20
# ---------------------------------------------------------------------------
loc_4BC10:                              # CODE XREF: make_huf_8bit+28↑j
                mov     r7, g14
                mov     r11, g13
                mov     r9, g12
                call    make_huf_8bit
loc_4BC20:                              # CODE XREF: make_huf_8bit+50↑j
                ld      (r13), r11
                shlo    r14, 1, r3
                or      r12, r3, r9
                ld      (r11), r3
                cmpible 0, r3, loc_4BC5C
                shlo    0x18, r7, r4
                or      r3, r4, g4
                shro    0x1C, g4, g0
                ld      NUM_1_TO_7_LONGS[g0*4], g5
                shlo    r7, 1, r4
loc_4BC4C:                              # CODE XREF: make_huf_8bit+98↓j
                stl     g4, (g10)[r9*8]
                addo    r4, r9, r9
                cmpobl  r9, g9, loc_4BC4C
                b       loc_4BC6C
# ---------------------------------------------------------------------------
loc_4BC5C:                              # CODE XREF: make_huf_8bit+74↑j
                mov     r7, g14
                mov     r11, g13
                mov     r9, g12
                call    make_huf_8bit
loc_4BC6C:                              # CODE XREF: make_huf_8bit+9C↑j
                ret
# End of function make_huf_8bit
# ---------------------------------------------------------------------------
send_beta_data:                         # CODE XREF: unp_send_tex_para_sub:loc_4B0DC↑p
                ld      0x550004, r13 # Label from Sonic the Fighters source
                lda     0xFFFFF, r15
                mulo    0x19, r13, r13
                subo    r13, r15, r13
loc_4BC88:                              # CODE XREF: ROM:0004BCAC↓j
                ldob    RAMBASE_START, r14
                cmpobne 0, r14, loc_4BCB0
                ldl     TIMER_03, r14
                lda     0xFFFFF, r14
                and     r15, r14, r15
                cmpobe  r15, r14, loc_4BCB0
                cmpobg  r15, r13, loc_4BC88
loc_4BCB0:                              # CODE XREF: ROM:0004BC90↑j
                ld      0x550008, g0
                call    timer_manipulation
                ld      0x550080, g0
                cmpobe  0, g0, loc_4BCE0
                mov     0, g0
                st      g0, 0x550080
                lda     0x550084, g0
                b       loc_4A420
# ---------------------------------------------------------------------------
loc_4BCE0:                              # CODE XREF: ROM:0004BCC4↑j
                mov     g3, r15
                ldob    (r15), r12
                addo    1, r15, r15
                addo    1, r12, r12
                ldob    (r15), r13
                addo    1, r15, r15
                addo    1, r13, r13
                ldob    (r15), g0
                addo    g0, r15, r15
                and     0xF, r15, g0
                cmpobne 0, g0, loc_4BDFC
                lda     0x55C2F8, r14
loc_4BD14:                              # CODE XREF: ROM:0004BDF4↓j
                ld      (r14), r11
                addo    4, r14, r14
                shro    1, r12, r12
                shro    1, r13, r13
                cmpobg  1, r12, loc_4BDF8
                cmpobg  8, r13, loc_4BDF8
                mov     r12, g12
loc_4BD30:                              # CODE XREF: ROM:0004BDF0↓j
                mov     r11, r10
                lda     0x400(r11), r11
                shro    3, r13, g13
loc_4BD3C:                              # CODE XREF: ROM:0004BD98↓j
                ldq     (r15), g0
                addo    0x10, r15, r15
                stos    g0, (r10)
                addo    2, r10, r10
                stos    g1, (r10)
                addo    2, r10, r10
                stos    g2, (r10)
                addo    2, r10, r10
                stos    g3, (r10)
                addo    2, r10, r10
                shro    0x10, g0, g4
                shro    0x10, g1, g5
                shro    0x10, g2, g6
                shro    0x10, g3, g7
                stos    g4, (r10)
                addo    2, r10, r10
                stos    g5, (r10)
                addo    2, r10, r10
                stos    g6, (r10)
                addo    2, r10, r10
                stos    g7, (r10)
                addo    2, r10, r10
                cmpdeco 1, g13, g13
                bl      loc_4BD3C
                ldob    RAMBASE_START, g0
                cmpobne 0, g0, loc_4BDB8
                ldob    0x50008C, g0
                cmpobe  0, g0, loc_4BDEC
                b       loc_4BDC4
# ---------------------------------------------------------------------------
loc_4BDB8:                              # CODE XREF: ROM:0004BDA4↑j
                mov     1, g0
                stob    g0, CPU_FAIL_flag
loc_4BDC4:                              # CODE XREF: ROM:0004BDB4↑j
                mov     1, g0
                st      g0, 0x550080
                lda     loc_4BDEC, g0
                st      g0, 0x5500F0
                lda     0x550084, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4BDEC:                              # CODE XREF: ROM:0004BDB0↑j
                cmpdeco 1, g12, g12
                bl      loc_4BD30
                b       loc_4BD14
# ---------------------------------------------------------------------------
loc_4BDF8:                              # CODE XREF: ROM:0004BD24↑j
                ret
# ---------------------------------------------------------------------------
loc_4BDFC:                              # CODE XREF: ROM:0004BD08↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000A32, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSendTexAlignEr:.asciz "Send Tex Align Error!!"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ret
# =============== S U B R O U T I N E =======================================
send_lod_data:                          # CODE XREF: unp_send_tex_para_sub:loc_4B150↑p
                ld      0x550004, r13 # Label from Fighting Vipers source
                lda     0xFFFFF, r15
                mulo    0x19, r13, r13
                subo    r13, r15, r13
loc_4BE58:                              # CODE XREF: send_lod_data+3C↓j
                ldob    RAMBASE_START, r14
                cmpobne 0, r14, loc_4BE80
                ldl     TIMER_03, r14
                lda     0xFFFFF, r14
                and     r15, r14, r15
                cmpobe  r15, r14, loc_4BE80
                cmpobg  r15, r13, loc_4BE58
loc_4BE80:                              # CODE XREF: send_lod_data+20↑j
                ld      0x550008, g0
                call    timer_manipulation
                ld      0x550080, g0
                cmpobe  0, g0, loc_4BEB0
                mov     0, g0
                st      g0, 0x550080
                lda     0x550084, g0
                b       loc_4A420
# ---------------------------------------------------------------------------
loc_4BEB0:                              # CODE XREF: send_lod_data+54↑j
                ld      0x55C2F4, g0
                bbs     1, g0, loc_4BFA0
                ld      0x55C340, r8
                ld      0x55C2F8, r11
                ld      0x55C2F4, g0
                bbs     2, g0, loc_4BEE4
                lda     0x5502F0, r9
                b       loc_4BF04
# ---------------------------------------------------------------------------
loc_4BEE4:                              # CODE XREF: send_lod_data+94↑j
                ld      0x5D0000, r9
                lda     0x2004(r9), g0
                st      g0, 0x5D0000
                ld      (r9), r8
                addo    4, r9, r9
loc_4BF04:                              # CODE XREF: send_lod_data+A0↑j
                ldos    (r9), g2
                addo    2, r9, r9
                ldos    0x55C320, r12
loc_4BF14:                              # CODE XREF: send_lod_data+15C↓j
                ldob    RAMBASE_START, g0
                cmpobne 0, g0, loc_4BF30
                ldob    0x50008C, g0
                cmpobe  0, g0, loc_4BF64
                b       loc_4BF3C
# ---------------------------------------------------------------------------
loc_4BF30:                              # CODE XREF: send_lod_data+DC↑j
                mov     1, g0
                stob    g0, CPU_FAIL_flag
loc_4BF3C:                              # CODE XREF: send_lod_data+EC↑j
                mov     1, g0
                st      g0, 0x550080
                lda     loc_4BF64, g0
                st      g0, 0x5500F0
                lda     0x550084, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4BF64:                              # CODE XREF: send_lod_data+E8↑j
                mov     r11, r10
                lda     0x400(r11), r11
                ldos    0x55C322, r13
loc_4BF74:                              # CODE XREF: send_lod_data+154↓j
                cmpo    r8, g2
                subo    1, r13, r13
                be      loc_4BFA4
                stos    g2, (r10)
                addo    2, r10, r10
                ldos    (r9), g2
                cmpi    0, r13
                addo    2, r9, r9
                bl      loc_4BF74
                cmpdeco 1, r12, r12
                bl      loc_4BF14
loc_4BFA0:                              # CODE XREF: send_lod_data+78↑j
                ret
# ---------------------------------------------------------------------------
loc_4BFA4:                              # CODE XREF: send_lod_data+13C↑j
                ldos    (r9), g1
                addo    2, r9, r9
                addo    1, r13, r13
                shro    8, g1, g2
                shlo    8, g2, g4
                or      g2, g4, g2
                xor     g1, g4, g3
                subo    g3, r13, r13
loc_4BFC4:                              # CODE XREF: send_lod_data+190↓j
                stos    g2, (r10)
                addo    2, r10, r10
                cmpdeco 1, g3, g3
                bl      loc_4BFC4
                ldos    (r9), g2
                cmpi    0, r13
                addo    2, r9, r9
                bl      loc_4BF74
                cmpdeco 1, r12, r12
                bl      loc_4BF14
                ret
# End of function send_lod_data
# =============== S U B R O U T I N E =======================================
send_lod_data_q:                        # CODE XREF: unp_send_tex_para_sub:loc_4B188↑p
                ld      0x550004, r13 # Label from Fighting Vipers source
                lda     0xFFFFF, r15
                mulo    0x19, r13, r13
                subo    r13, r15, r13
loc_4C008:                              # CODE XREF: send_lod_data_q+3C↓j
                ldob    RAMBASE_START, r14
                cmpobne 0, r14, loc_4C030
                ldl     TIMER_03, r14
                lda     0xFFFFF, r14
                and     r15, r14, r15
                cmpobe  r15, r14, loc_4C030
                cmpobg  r15, r13, loc_4C008
loc_4C030:                              # CODE XREF: send_lod_data_q+20↑j
                ld      0x550008, g0
                call    timer_manipulation
                ld      0x550080, g0
                cmpobe  0, g0, loc_4C060
                mov     0, g0
                st      g0, 0x550080
                lda     0x550084, g0
                b       loc_4A420
# ---------------------------------------------------------------------------
loc_4C060:                              # CODE XREF: send_lod_data_q+54↑j
                ld      0x55C2F4, g0
                bbs     1, g0, loc_4C0E8
                lda     0x55C2F8, r11
                ldos    0x55C320, r12
                ldos    0x55C322, r13
                shlo    0xA, 1, g10
loc_4C088:                              # CODE XREF: send_lod_data_q:loc_4C0E0↓j
                shro    1, r12, r12
                shro    1, r13, r13
                cmpobe  0, r12, loc_4C0E4
                cmpobe  0, r13, loc_4C0E4
                addo    4, r11, r11
                ld      (r11), g11
                mov     r12, g12
                mov     r13, g13
loc_4C0A8:                              # DATA XREF: send_lod_data_q+D4↓o
                call    send_lod_data_q_sub_norm
                ld      0x5500F4, g0
                cmpobe  0, g0, loc_4C0E0
                mov     1, g0
                st      g0, 0x550080
                lda     loc_4C0A8, g0
                st      g0, 0x5500F0
                lda     0x550084, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4C0E0:                              # CODE XREF: send_lod_data_q+C4↑j
                b       loc_4C088
# ---------------------------------------------------------------------------
loc_4C0E4:                              # CODE XREF: send_lod_data_q+A0↑j
                ret
# ---------------------------------------------------------------------------
loc_4C0E8:                              # CODE XREF: send_lod_data_q+78↑j
                ld      0x5D0000, g11
                ldos    0x55C320, r12
                ldos    0x55C322, r13
loc_4C100:                              # CODE XREF: send_lod_data_q:loc_4C150↓j
                shro    1, r12, r12
                shro    1, r13, r13
                mulo    r12, r13, r3
                cmpobe  0, r3, loc_4C154
                mov     r12, g12
                mov     r13, g13
loc_4C118:                              # DATA XREF: send_lod_data_q+144↓o
                call    send_lod_data_q_sub_anim
                ld      0x5500F4, g0
                cmpobe  0, g0, loc_4C150
                mov     1, g0
                st      g0, 0x550080
                lda     loc_4C118, g0
                st      g0, 0x5500F0
                lda     0x550084, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4C150:                              # CODE XREF: send_lod_data_q+134↑j
                b       loc_4C100
# ---------------------------------------------------------------------------
loc_4C154:                              # CODE XREF: send_lod_data_q+11C↑j
                st      g11, 0x5D0000
                ret
# End of function send_lod_data_q
# =============== S U B R O U T I N E =======================================
send_lod_data_q_sub_norm:               # CODE XREF: send_lod_data_q:loc_4C0A8↑p
                ld      0x5500F4, g0 # Label from Fighting Vipers source
                cmpobe  0, g0, loc_4C184
                mov     0, g0
                st      g0, 0x5500F4
                lda     0x5500F8, g0
                b       loc_4A420
# ---------------------------------------------------------------------------
loc_4C184:                              # CODE XREF: send_lod_data_q_sub_norm+8↑j
                subo    1, 0, g8
                lda     0x55C2EC, r9
                lda     0x55C2EF, r3
                lda     0x55C2EE, r4
                ld      (r9), r8
                mov     g12, r12
loc_4C1A8:                              # CODE XREF: send_lod_data_q_sub_norm+100↓j
                ldob    RAMBASE_START, g0
                cmpobne 0, g0, loc_4C1C4
                ldob    0x50008C, g0
                cmpobe  0, g0, loc_4C1F8
                b       loc_4C1D0
# ---------------------------------------------------------------------------
loc_4C1C4:                              # CODE XREF: send_lod_data_q_sub_norm+50↑j
                mov     1, g0
                stob    g0, CPU_FAIL_flag
loc_4C1D0:                              # CODE XREF: send_lod_data_q_sub_norm+60↑j
                mov     1, g0
                st      g0, 0x5500F4
                lda     loc_4C1F8, g0
                st      g0, 0x550164
                lda     0x5500F8, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4C1F8:                              # CODE XREF: send_lod_data_q_sub_norm+5C↑j
                mov     g11, r10
                addo    g10, g11, g11
                mov     g13, r13
loc_4C204:                              # CODE XREF: send_lod_data_q_sub_norm+EC↓j
                cmpo    r8, g8
                subo    4, r9, r9
                be      loc_4C268
                shro    0xC, r8, g2
                or      r8, g2, r6
                stos    r6, (r10)
                addo    2, r10, r10
                mov     r8, g8
                shro    0x10, r8, g2
                addo    r8, g2, g2
                ld      (r9), r8
                shro    8, g2, g3
                addo    g2, g3, g2
                shro    2, g2, g2
                and     0xF, g2, r5
                stob    r5, (r3)
                subo    2, r3, r3
                cmpdeco 1, r13, r13
                bl      loc_4C204
                mov     r3, g0
                mov     r4, r3
                mov     g0, r4
                cmpdeco 1, r12, r12
                bl      loc_4C1A8
                ret
# ---------------------------------------------------------------------------
loc_4C268:                              # CODE XREF: send_lod_data_q_sub_norm+AC↑j
                stos    r6, (r10)
                addo    2, r10, r10
                stob    r5, (r3)
                subo    2, r3, r3
                ld      (r9), r8
                cmpdeco 1, r13, r13
                bl      loc_4C204
                mov     r3, g0
                mov     r4, r3
                mov     g0, r4
                cmpdeco 1, r12, r12
                bl      loc_4C1A8
                ret
# End of function send_lod_data_q_sub_norm
# =============== S U B R O U T I N E =======================================
send_lod_data_q_sub_anim:               # CODE XREF: send_lod_data_q:loc_4C118↑p
                ld      0x5500F4, g0 # Label from Fighting Vipers source
                cmpobe  0, g0, loc_4C2C0
                mov     0, g0
                st      g0, 0x5500F4
                lda     0x5500F8, g0
                b       loc_4A420
# ---------------------------------------------------------------------------
loc_4C2C0:                              # CODE XREF: send_lod_data_q_sub_anim+8↑j
                subo    1, 0, g8
                lda     0x55C2EC, r9
                lda     0x55C2EF, r3
                lda     0x55C2EE, r4
                ld      (r9), r8
                mov     g12, r12
loc_4C2E4:                              # CODE XREF: send_lod_data_q_sub_anim+F8↓j
                ldob    RAMBASE_START, g0
                cmpobne 0, g0, loc_4C300
                ldob    0x50008C, g0
                cmpobe  0, g0, loc_4C334
                b       loc_4C30C
# ---------------------------------------------------------------------------
loc_4C300:                              # CODE XREF: send_lod_data_q_sub_anim+50↑j
                mov     1, g0
                stob    g0, CPU_FAIL_flag
loc_4C30C:                              # CODE XREF: send_lod_data_q_sub_anim+60↑j
                mov     1, g0
                st      g0, 0x5500F4
                lda     loc_4C334, g0
                st      g0, 0x550164
                lda     0x5500F8, g0
                b       loc_4A344
# ---------------------------------------------------------------------------
loc_4C334:                              # CODE XREF: send_lod_data_q_sub_anim+5C↑j
                mov     g13, r13
loc_4C338:                              # CODE XREF: send_lod_data_q_sub_anim+E4↓j
                cmpo    r8, g8
                subo    4, r9, r9
                be      loc_4C39C
                shro    0xC, r8, g2
                or      r8, g2, r6
                stos    r6, (g11)
                addo    2, g11, g11
                mov     r8, g8
                shro    0x10, r8, g2
                addo    r8, g2, g2
                ld      (r9), r8
                shro    8, g2, g3
                addo    g2, g3, g2
                shro    2, g2, g2
                and     0xF, g2, r5
                stob    r5, (r3)
                subo    2, r3, r3
                cmpdeco 1, r13, r13
                bl      loc_4C338
                mov     r3, g0
                mov     r4, r3
                mov     g0, r4
                cmpdeco 1, r12, r12
                bl      loc_4C2E4
                ret
# ---------------------------------------------------------------------------
loc_4C39C:                              # CODE XREF: send_lod_data_q_sub_anim+A4↑j
                stos    r6, (g11)
                addo    2, g11, g11
                stob    r5, (r3)
                subo    2, r3, r3
                ld      (r9), r8
                cmpdeco 1, r13, r13
                bl      loc_4C338
                mov     r3, g0
                mov     r4, r3
                mov     g0, r4
                cmpdeco 1, r12, r12
                bl      loc_4C2E4
                ret
# End of function send_lod_data_q_sub_anim
# ---------------------------------------------------------------------------
                lda     0x55C2F8, r11 # unreachable code
                ldos    0x55C320, r12
                ldos    0x55C322, r13
                ld      0x5D0000, r9
                shlo    0xA, 1, g10
loc_4C3F4:                              # CODE XREF: ROM:0004C43C↓j
                shro    1, r12, r12
                shro    1, r13, r13
                mulo    r12, r13, r3
                cmpobe  0, r3, loc_4C440
                addo    4, r11, r11
                ld      (r11), g11
                mov     r12, g12
loc_4C410:                              # CODE XREF: ROM:0004C438↓j
                mov     g11, r10
                addo    g10, g11, g11
                mov     r13, g13
loc_4C41C:                              # CODE XREF: ROM:0004C430↓j
                ldos    (r9), g2
                addo    2, r9, r9
                stos    g2, (r10)
                addo    2, r10, r10
                cmpdeco 1, g13, g13
                bl      loc_4C41C
                cmpdeco 1, g12, g12
                bl      loc_4C410
                b       loc_4C3F4
# ---------------------------------------------------------------------------
loc_4C440:                              # CODE XREF: ROM:0004C400↑j
                ret
# =============== S U B R O U T I N E =======================================
sub_4C444:                              # CODE XREF: unp_send_tex_para_sub:loc_4B0C8↑p
                bbs     0, g8, loc_4C45C
                ld      texram_1, r9
                ld      texram_0_1, r10
                b       loc_4C46C
# ---------------------------------------------------------------------------
loc_4C45C:                              # CODE XREF: sub_4C444↑j
                ld      texram_1, r10
                ld      texram_0_1, r9
loc_4C46C:                              # CODE XREF: sub_4C444+14↑j
                lda     0x55C2F8, r11
                mov     0, r6
                mov     0, r7
                bbc     0xA, g7, loc_4C4AC
                bbc     9, g6, loc_4C498
                clrbit  0xA, g7, g7
                clrbit  9, g6, g6
                shlo    1, g7, g7
                shlo    1, g6, g6
                b       loc_4C4CC
# ---------------------------------------------------------------------------
loc_4C498:                              # CODE XREF: sub_4C444+3C↑j
                lda     0x400(g6), r3
                clrbit  0xA, g7, r4
                shlo    9, r3, r3
                addo    r4, r3, r3
                b       loc_4C4B4
# ---------------------------------------------------------------------------
loc_4C4AC:                              # CODE XREF: sub_4C444+38↑j
                shlo    9, g6, r3
                addo    g7, r3, r3
loc_4C4B4:                              # CODE XREF: sub_4C444+64↑j
                lda     (r9)[r3], r15
                st      r15, (r11)
                addo    4, r11, r11
                mov     r9, r15
                mov     r10, r9
                mov     r15, r10
loc_4C4CC:                              # CODE XREF: sub_4C444+50↑j
                mov     9, r8
                lda     0xC0000(r9), r9
                lda     0xC0000(r10), r10
loc_4C4E0:                              # CODE XREF: sub_4C444+E8↓j
                shro    1, g6, g6
                shro    1, g7, g7
                notand  g6, 1, g6
                notand  g7, 1, g7
                addo    r6, g6, r3
                addo    r7, g7, r4
                shlo    9, r3, r3
                addo    r4, r3, r3
                lda     (r9)[r3], r15
                st      r15, (r11)
                addo    4, r11, r11
                mov     r9, r15
                mov     r10, r9
                mov     r15, r10
                shlo    r8, 1, r3
                addo    r7, r3, r7
                shro    1, r3, r3
                addo    r6, r3, r6
                cmpdeco 1, r8, r8
                bl      loc_4C4E0
                ret
# End of function sub_4C444
# ---------------------------------------------------------------------------
loc_4C534:                              # CODE XREF: unp_send_tex_para_sub+304↑p
                ldob    also_mode, r15
                lda     start_ip_add, r14
                cmpobe  r14, r15, loc_4C554
                lda     start_ip_add+1, r14
                cmpobne r14, r15, loc_4C574
loc_4C554:                              # CODE XREF: ROM:0004C544↑j
                lda     0x10040E2, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "               "
# ---------------------------------------------------------------------------
loc_4C574:                              # CODE XREF: ROM:0004C550↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10000E2, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "               "
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
dsp_send_msg:                           # CODE XREF: unp_send_tex_para_sub+84↑p
                addo    4, sp, sp       # Label from Virtua Fighter 2 source
                st      g0, -4(sp)
                ldos    0x55C2F2, g0
                cmpobe  1, g0, loc_4C604
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10000E2, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aTex:           .asciz "TEX            "
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                b       loc_4C63C
# ---------------------------------------------------------------------------
loc_4C604:                              # CODE XREF: ROM:0004C5C4↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10000E2, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aT4e:           .asciz "t4e            "
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
loc_4C63C:                              # CODE XREF: ROM:0004C600↑j
                lda     0x10000EA, g9
                ldob    also_mode, r15
                lda     start_ip_add, r14
                cmpobe  r14, r15, loc_4C664
                lda     start_ip_add+1, r14
                cmpobne r14, r15, loc_4C66C
loc_4C664:                              # CODE XREF: ROM:0004C654↑j
                lda     0x10040EA, g9
loc_4C66C:                              # CODE XREF: ROM:0004C660↑j
                ld      -4(sp), g0
                subo    4, sp, sp
                shlo    5, g0, g0
                lda     aNullTex[g0], g0 # "null_tex"
                call    print_mes
                ret
# ---------------------------------------------------------------------------
                .byte 0x74,0x65,0x78,0x5F,0x6E,0x75,0x6D,0x5F,0x6F,0x66,0x5F # Unused
aNullTex:       .asciz "null_tex"    # DATA XREF: ROM:0004C67C↑o
                .fill 3, 4, 0
aTexNumOfChar:  .asciz "tex_num_of_char"
                .fill 4, 4, 0
aTexNumOfSs01:  .asciz "tex_num_of_ss_01"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs02:  .asciz "tex_num_of_ss_02"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs03:  .asciz "tex_num_of_ss_03"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs04:  .asciz "tex_num_of_ss_04"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs05:  .asciz "tex_num_of_ss_05"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs06:  .asciz "tex_num_of_ss_06"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs07:  .asciz "tex_num_of_ss_07"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs08:  .asciz "tex_num_of_ss_08"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs09:  .asciz "tex_num_of_ss_09"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs10:  .asciz "tex_num_of_ss_10"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs11:  .asciz "tex_num_of_ss_11"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs12:  .asciz "tex_num_of_ss_12"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs13:  .asciz "tex_num_of_ss_13"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs14:  .asciz "tex_num_of_ss_14"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumOfSs15:  .asciz "tex_num_of_ss_15"
                .fill 3, 1, 0
                .fill 3, 4, 0
aTexNumMax:     .asciz "tex_num_max"
                .fill 5, 4, 0
# =============== S U B R O U T I N E =======================================
sub_4C8CC:                              # CODE XREF: ROM:0005B60C↓p
                ld      texram_0, r10
                shlo    0x11, 1, r9
                mov     0, r4
                ldos    shader_fil_test[r4*2], r4
                shlo    0x10, r4, r3
                or      r4, r3, r4
                mov     r4, r5
                mov     r4, r6
                mov     r4, r7
loc_4C8F8:                              # CODE XREF: sub_4C8CC+38↓j
                stq     r4, (r10)
                addo    0x10, r10, r10
                cmpdeco 1, r9, r9
                bl      loc_4C8F8
                ret
# End of function sub_4C8CC
# ---------------------------------------------------------------------------
un_player_shader_test:                  # unreachable code
                ld      0x509010, r3
                bbs     0, r3, loc_4C924
                ld      texram_1, r9
                b       loc_4C92C
# ---------------------------------------------------------------------------
loc_4C924:                              # CODE XREF: ROM:0004C914↑j
                ld      texram_0_1, r9
loc_4C92C:                              # CODE XREF: ROM:0004C920↑j
                ld      frame_counter, r7
                and     0xF, r7, r7
                lda     0x1000CA8, g9
                mov     r7, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aFil:           .asciz "fil"
# ---------------------------------------------------------------------------
                ldos    shader_fil_test[r7*2], r7
                shlo    0xA, 1, r5
                mulo    3, r5, r5
                shro    2, r5, r5
loc_4C964:                              # CODE XREF: ROM:0004C988↓j
                shlo    9, 1, r6
loc_4C968:                              # CODE XREF: ROM:0004C974↓j
                stos    r7, (r9)
                addo    2, r9, r9
                cmpdeco 1, r6, r6
                bl      loc_4C968
                lda     0x3E8, r10
loc_4C97C:                              # CODE XREF: ROM:0004C980↓j
                cmpdeco 1, r10, r10
                bl      loc_4C97C
                cmpdeco 1, r5, r5
                bl      loc_4C964
                ret
# ---------------------------------------------------------------------------
un_draw_mmm:                            # unreachable code
                lda     0x1000A28, g9
                shlo    2, 0x19, g5
                ldl     TIMERS_START, r14
                lda     0xFFFFF, r14
                and     r14, r15, r15
                st      r15, 0x50E000
loc_4C9B8:                              # CODE XREF: ROM:0004CA0C↓j
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                mov     0, g2
                cmpdeco 1, g5, g5
                bl      loc_4C9B8
                ldl     TIMERS_START, r14
                lda     0xFFFFF, r14
                and     r14, r15, r15
                ld      0x50E000, r14
                subi    r15, r14, r15
                subo    0x12, r15, r15
                divo    0x19, r15, r15
                mov     r15, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aMmm:           .asciz "mmm"
# ---------------------------------------------------------------------------
                lda     0x3F800000, g0
                lda     0x3F800000, g1
                shlo    2, 0x19, g5
                ldl     TIMERS_START, r14
                lda     0xFFFFF, r14
                and     r14, r15, r15
                st      r15, 0x50E000
loc_4CA78:                              # CODE XREF: ROM:0004CB6C↓j
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                cmpdeco 1, g5, g5
                bl      loc_4CA78
                ldl     TIMERS_START, r14
                lda     0xFFFFF, r14
                and     r14, r15, r15
                ld      0x50E000, r14
                subi    r15, r14, r15
                subo    0x12, r15, r15
                divo    0x19, r15, r15
                mov     r15, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aMmm0:          .asciz "mmm0"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                lda     0x3F800000, g0
                lda     0x3F800000, g1
                shlo    2, 0x19, g5
                ldl     TIMERS_START, r14
                lda     0xFFFFF, r14
                and     r14, r15, r15
                st      r15, 0x50E000
loc_4CBDC:                              # CODE XREF: ROM:0004CCD0↓j
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                cmpdeco 1, g5, g5
                bl      loc_4CBDC
                ldl     TIMERS_START, r14
                lda     0xFFFFF, r14
                and     r14, r15, r15
                ld      0x50E000, r14
                subi    r15, r14, r15
                subo    0x12, r15, r15
                divo    0x19, r15, r15
                mov     r15, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aMmm1:          .asciz "mmm1"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                lda     0x3F800000, g0
                lda     0x3F800000, g1
                shlo    2, 0x19, g5
                ldl     TIMERS_START, r14
                lda     0xFFFFF, r14
                and     r14, r15, r15
                st      r15, 0x50E000
loc_4CD40:                              # CODE XREF: ROM:0004CE34↓j
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xA801515, r15
                st      r15, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                cmpdeco 1, g5, g5
                bl      loc_4CD40
                ldl     TIMERS_START, r14
                lda     0xFFFFF, r14
                and     r14, r15, r15
                ld      0x50E000, r14
                subi    r15, r14, r15
                subo    0x12, r15, r15
                divo    0x19, r15, r15
                mov     r15, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aMmm2:          .asciz "mmm2"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                lda     0x3F800000, g0
                lda     0x3F800000, g1
                shlo    2, 0x19, g5
                ldl     TIMERS_START, r14
                lda     0xFFFFF, r14
                and     r14, r15, r15
                st      r15, 0x50E000
loc_4CEA4:                              # CODE XREF: ROM:0004CF98↓j
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      g1, (g11)[g12*1]
                st      g0, (g11)[g12*1]
                ld      (g11)[g12*1], g1
                cmpdeco 1, g5, g5
                bl      loc_4CEA4
                ldl     TIMERS_START, r14
                lda     0xFFFFF, r14
                and     r14, r15, r15
                ld      0x50E000, r14
                subi    r15, r14, r15
                subo    0x12, r15, r15
                divo    0x19, r15, r15
                mov     r15, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aMmm3:          .asciz "mmm3"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ret
# =============== S U B R O U T I N E =======================================
sub_4CFDC:                              # CODE XREF: sub_4CFDC+14↓j
                lda     5000, r7
loc_4CFE4:                              # CODE XREF: sub_4CFDC+C↓j
                cmpdeco 1, r7, r7
                bl      loc_4CFE4
                cmpdeco 1, g0, g0
                bl      sub_4CFDC
                ret
# End of function sub_4CFDC
# ---------------------------------------------------------------------------
un_draw_line:
                shlo    8, 1, g6
                mov     0, g7
                mov     0, g8
                call    sub_4C444
                ld      0x55C2F8, g7
                mov     g7, g8
                shlo    6, 1, g6
                lda     IO_PORTS, r10
                mov     5, r3
                stob    r3, 0x40(r10)   # IO_PORTS+0x40
loc_4D028:                              # CODE XREF: ROM:0004D02C↓j
                ldob    0x40(r10), r3
                cmpobne 0, r3, loc_4D028
                mov     0x1E, g0
                call    sub_4CFDC
                shlo    9, 1, r9
                mov     0, r8
loc_4D040:                              # CODE XREF: ROM:0004D0F0↓j
                mov     4, r3
                stob    r3, 0x40(r10)
loc_4D048:                              # CODE XREF: ROM:0004D04C↓j
                ldob    0x40(r10), r3
                cmpobne 0, r3, loc_4D048
                and     7, r8, g0
                cmpobl  1, g0, loc_4D0E8
                ldob    0x44(r10), r3
                ldob    0x46(r10), r4
                shlo    8, r4, r4
                or      r3, r4, r3
                addo    4, sp, sp
                st      g0, -4(sp)
                addo    4, sp, sp
                st      g1, -4(sp)
                ld      0x508070, g9
                addo    1, g9, g9
                st      g9, 0x508070
                mov     1, g0
                remo    g0, g9, g9
                mov     1, g0
                divo    g0, g9, g1
                mulo    9, g1, g1
                remo    g0, g9, g0
                shli    7, g0, g0
                lda     0x1000CD0(g0)[g1*2], g9
                ld      -4(sp), g1
                subo    4, sp, sp
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     r3, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aLine:          .asciz "line"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                call    sub_4D0F8
loc_4D0E8:                              # CODE XREF: ROM:0004D054↑j
                addo    1, r8, r8
                cmpdeco 1, r9, r9
                bl      loc_4D040
                ret
# =============== S U B R O U T I N E =======================================
sub_4D0F8:                              # CODE XREF: ROM:0004D0E4↑p
                lda     IO_PORTS, r10
                lda     0x100(r10), r7  # IO_PORTS+0x100
                lda     0x50E000, r8
                shlo    7, 1, r9
loc_4D110:                              # CODE XREF: sub_4D0F8+2C↓j
                ldob    (r7), r3
                addo    2, r7, r7
                stob    r3, (r8)
                addo    1, r8, r8
                cmpdeco 1, r9, r9
                bl      loc_4D110
                lda     0x50E000, r8
                addo    0x1F, 1, r9
loc_4D134:                              # CODE XREF: sub_4D0F8+134↓j
                ld      (r8), r3
                addo    4, r8, r8
                shro    0x18, r3, r4
                shro    0x10, r3, r5
                and     7, r4, r4
                and     7, r5, r5
                shlo    3, r4, r4
                or      r4, r5, r6
                shro    8, r3, r4
                shro    0, r3, r5
                and     7, r4, r4
                and     7, r5, r5
                shlo    3, r4, r4
                or      r4, r5, r7
                shro    3, r3, r5
                and     0x1F, r5, r5
                addo    r6, r5, g0
                addo    r7, r5, g1
                mulo    5, r5, g2
                subo    r6, g2, g2
                subo    r7, g2, g2
                shro    2, g2, g2
                mulo    3, g1, r4
                mulo    2, g0, r5
                addo    r4, r5, r4
                addo    g2, r4, r4
                divo    6, r4, r4
                shro    1, r4, r4
                and     0xF, r4, r4
                shlo    4, r4, r5
                or      r4, r5, r4
                shlo    8, r4, r5
                or      r4, r5, r4
                stos    r4, 0x0(g8)
                shro    1, g0, r4
                and     0xF, r4, r4
                shlo    4, r4, r5
                or      r4, r5, r4
                shlo    8, r4, r5
                or      r4, r5, r4
                stos    r4, 0x200(g8)
                shro    1, g1, r4
                and     0xF, r4, r4
                shlo    4, r4, r5
                or      r4, r5, r4
                shlo    8, r4, r5
                or      r4, r5, r4
                stos    r4, 0x400(g8)
                shro    1, g2, r4
                and     0xF, r4, r4
                shlo    4, r4, r5
                or      r4, r5, r4
                shlo    8, r4, r5
                or      r4, r5, r4
                stos    r4, 0x600(g8)
                lda     0x800(g8), g8
                cmpdeco 1, g6, g6
                bl      loc_4D228
                addo    4, g7, g7
                mov     g7, g8
                shlo    6, 1, g6
loc_4D228:                              # CODE XREF: sub_4D0F8+120↑j
                cmpdeco 1, r9, r9
                bl      loc_4D134
                ret
# End of function sub_4D0F8
# =============== S U B R O U T I N E =======================================
sub_4D234:                              # CODE XREF: ROM:00006AB4↑p
                mov     0, r4
                st      r4, 0x59E014
                st      r4, 0x59E018
                shlo    0x19, 5, r15    # r15 = 0xA000000
                st      r15, 0x59F278
                mov     0, r4
                st      r4, 0x59E000
                st      r4, 0x59E004
                st      r4, 0x59E008
                st      r4, 0x59E00C
                st      r4, 0x59E010
                call    sub_4E384
                ret
# End of function sub_4D234
# =============== S U B R O U T I N E =======================================
sub_4D288:                              # CODE XREF: VsyncScr+7C↑p
                ld      debug_flag, r10
                bbc     2, r10, loc_4D584
                bbc     7, r10, loc_4D2B4
                mov     0, r15
                st      r15, 0x59E03C
                mov     0, r15
                stib    r15, 0x59E039
                b       loc_4D584
# ---------------------------------------------------------------------------
loc_4D2B4:                              # CODE XREF: sub_4D288+C↑j
                ld      INTERUPT_FLAGS_MOMENTARY, r9
                ld      INTERUPT_FLAGS_HELD, r8
                ldob    0x59E039, r3
                cmpobe  0, r3, loc_4D2DC
                subo    1, r3, r3
                stob    r3, 0x59E039
loc_4D2DC:                              # CODE XREF: sub_4D288+44↑j
                ld      0x59E03C, g3
                cmpobne 0, g3, loc_4D334
                bbc     5, r9, loc_4D354
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x8150A04
                .long 0
# ---------------------------------------------------------------------------
                st      g3, 0x59E03C
                lda     loc_4E8F0, r15
                st      r15, 0x24(g3)
                lda     debug_menu_list_count, r15
                st      r15, 0x40(g3)
                mov     0, r15
                stib    r15, 0x44(g3)
                lda     0xFF, r15
                stib    r15, 0xF(g3)
                call    sub_4D820
                b       loc_4D584
# ---------------------------------------------------------------------------
loc_4D334:                              # CODE XREF: sub_4D288+5C↑j
                bbc     5, r8, loc_4D340
                call    debug_window_setup
                b       loc_4D584
# ---------------------------------------------------------------------------
loc_4D340:                              # CODE XREF: sub_4D288:loc_4D334↑j
                call    sub_4DB58
                mov     0, r15
                st      r15, 0x59E03C
                b       loc_4D584
# ---------------------------------------------------------------------------
loc_4D354:                              # CODE XREF: sub_4D288+60↑j
                ld      0x59E010, g3
                bbc     0x10, r9, loc_4D394
                ldob    0x59E039, r3
                mov     0xC, r4
                stob    r4, 0x59E039
                cmpobe  0, r3, loc_4D394
                cmpobe  0, g3, loc_4D384
                ld      0x18(g3), g3
                b       loc_4D38C
# ---------------------------------------------------------------------------
loc_4D384:                              # CODE XREF: sub_4D288+F0↑j
                ld      0x59E000, g3
loc_4D38C:                              # CODE XREF: sub_4D288+F8↑j
                call    sub_4DCA0
                b       loc_4D584
# ---------------------------------------------------------------------------
loc_4D394:                              # CODE XREF: sub_4D288+D4↑j
                cmpobe  0, g3, loc_4D584
                bbc     0x12, r9, loc_4D3A4
                call    sub_4DB58
                b       loc_4D584
# ---------------------------------------------------------------------------
loc_4D3A4:                              # CODE XREF: sub_4D288+110↑j
                bbc     0x11, r9, loc_4D3B0
                call    sub_4DC94
                b       loc_4D584
# ---------------------------------------------------------------------------
loc_4D3B0:                              # CODE XREF: sub_4D288:loc_4D3A4↑j
                bbc     0x10, r8, loc_4D55C
                shlo    8, 1, r4
                ldob    0x59E031, r7
                bbc     0xD, r8, loc_4D3C8
                subi    r4, r7, r7
loc_4D3C8:                              # CODE XREF: sub_4D288+138↑j
                bbc     0xC, r8, loc_4D3D0
                addi    r4, r7, r7
loc_4D3D0:                              # CODE XREF: sub_4D288:loc_4D3C8↑j
                stob    r7, 0x59E031
                ldob    0x59E030, r6
                bbc     0xF, r8, loc_4D3E8
                subi    r4, r6, r6
loc_4D3E8:                              # CODE XREF: sub_4D288+158↑j
                bbc     0xE, r8, loc_4D3F0
                addi    r4, r6, r6
loc_4D3F0:                              # CODE XREF: sub_4D288:loc_4D3E8↑j
                stob    r6, 0x59E030
                shri    8, r6, r6
                shri    8, r7, r7
                ldob    4(g3), r10
                ldob    5(g3), r11
                ldob    6(g3), r4
                ldob    7(g3), r5
                addi    r6, r10, r6
                cmpibl  0, r6, loc_4D420
                mov     0, r6
                b       loc_4D430
# ---------------------------------------------------------------------------
loc_4D420:                              # CODE XREF: sub_4D288+18C↑j
                addo    0x1F, 0x1F, r3
                subi    r4, r3, r3
                cmpibge r3, r6, loc_4D430
                mov     r3, r6
loc_4D430:                              # CODE XREF: sub_4D288+194↑j
                cmpobe  r6, r10, loc_4D4A4
                stob    r6, 4(g3)
                bl      loc_4D46C
                stob    r10, 0x59E032
                stob    r11, 0x59E034
                subo    1, r6, r12
                stob    r12, 0x59E033
                lda     -1(r11)[r5], r13
                stob    r13, 0x59E035
                b       loc_4D534
# ---------------------------------------------------------------------------
loc_4D46C:                              # CODE XREF: sub_4D288+1B0↑j
                lda     (r6)[r4], r12
                stob    r12, 0x59E032
                stob    r11, 0x59E034
                lda     -1(r10)[r4], r14
                stob    r14, 0x59E033
                lda     -1(r11)[r5], r15
                stob    r15, 0x59E035
                b       loc_4D534
# ---------------------------------------------------------------------------
loc_4D4A4:                              # CODE XREF: sub_4D288:loc_4D430↑j
                addo    r7, r11, r7
                cmpibl  0, r7, loc_4D4B4
                mov     0, r7
                b       loc_4D4C4
# ---------------------------------------------------------------------------
loc_4D4B4:                              # CODE XREF: sub_4D288+220↑j
                addo    0x1F, 0x11, r3
                subi    r5, r3, r3
                cmpibge r3, r7, loc_4D4C4
                mov     r3, r7
loc_4D4C4:                              # CODE XREF: sub_4D288+228↑j
                cmpobe  r7, r11, loc_4D584
                stob    r7, 5(g3)
                bl      loc_4D500
                stob    r10, 0x59E032
                stob    r11, 0x59E034
                lda     -1(r10)[r4], r12
                stob    r12, 0x59E033
                subo    1, r7, r13
                stob    r13, 0x59E035
                b       loc_4D534
# ---------------------------------------------------------------------------
loc_4D500:                              # CODE XREF: sub_4D288+244↑j
                stob    r10, 0x59E032
                lda     (r7)[r5], r13
                stob    r13, 0x59E034
                lda     -1(r10)[r4], r14
                stob    r14, 0x59E033
                lda     -1(r11)[r5], r15
                stob    r15, 0x59E035
loc_4D534:                              # CODE XREF: sub_4D288+1E0↑j
                call    sub_4E2D4
                call    sub_4E1F4
                call    sub_4E09C
                call    sub_4DCCC
                ld      0x59E008, r15
                setbit  0, r15, r15
                st      r15, 0x59E008
                b       loc_4D584
# ---------------------------------------------------------------------------
loc_4D55C:                              # CODE XREF: sub_4D288:loc_4D3B0↑j
                ld      0x28(g3), r3
                cmpobe  0, r3, loc_4D578
                ldq     0x2C(g3), g4
                ld      0x3C(g3), g8
                callx   (r3)
                stq     g4, 0x2C(g3)
                st      g8, 0x3C(g3)
loc_4D578:                              # CODE XREF: sub_4D288+2D8↑j
                mov     0, r15
                st      r15, 0x59E018
loc_4D584:                              # CODE XREF: sub_4D288+8↑j
                ld      0x59E000, g3
                b       loc_4D5C0
# ---------------------------------------------------------------------------
loc_4D590:                              # CODE XREF: sub_4D288:loc_4D5C0↓j
                ld      0x24(g3), r3
                cmpobe  0, r3, loc_4D5BC
                ldq     0x2C(g3), g4
                ld      0x3C(g3), g8
                callx   (r3)
                stq     g4, 0x2C(g3)
                st      g8, 0x3C(g3)
                ld      0x0(g3), r3
                clrbit  0, r3, r3
                clrbit  1, r3, r3
                st      r3, 0x0(g3)     # Seems to reset 0x5603A0 to 0
loc_4D5BC:                              # CODE XREF: sub_4D288+30C↑j
                ld      0x18(g3), g3
loc_4D5C0:                              # CODE XREF: sub_4D288+304↑j
                cmpobne 0, g3, loc_4D590
                ld      0x59E008, r9
                bbc     2, r9, loc_4D5F0
                clrbit  2, r9, r9
                st      r9, 0x59E008
                ld      0x59E000, g3
                call    sub_4DCA0
                ld      0x59E008, r9
loc_4D5F0:                              # CODE XREF: sub_4D288+344↑j
                bbc     4, r9, loc_4D62C
                clrbit  0, r9, r9
                clrbit  4, r9, r9
                st      r9, 0x59E008
                ld      0x59E000, g3
                mov     0, g0
                b       loc_4D624
# ---------------------------------------------------------------------------
loc_4D614:                              # CODE XREF: sub_4D288:loc_4D624↓j
                call    sub_4DCCC
                ld      0xE(g3), r4
                setbit  r4, g0, g0
                ld      0x18(g3), g3
loc_4D624:                              # CODE XREF: sub_4D288+388↑j
                cmpobne 0, g3, loc_4D614
                b       loc_4D660
# ---------------------------------------------------------------------------
loc_4D62C:                              # CODE XREF: sub_4D288:loc_4D5F0↑j
                bbc     0, r9, loc_4D660
                clrbit  0, r9, r9
                st      r9, 0x59E008
                ld      0x59E000, g3
                mov     0, g0
                b       loc_4D65C
# ---------------------------------------------------------------------------
loc_4D64C:                              # CODE XREF: sub_4D288:loc_4D65C↓j
                call    sub_4DDB0
                ld      0xE(g3), r4
                setbit  r4, g0, g0
                ld      0x18(g3), g3
loc_4D65C:                              # CODE XREF: sub_4D288+3C0↑j
                cmpobne 0, g3, loc_4D64C
loc_4D660:                              # CODE XREF: sub_4D288+3A0↑j
                ld      0x59E008, r9
                bbc     1, r9, loc_4D67C
                clrbit  1, r9, r9
                st      r9, 0x59E008
                call    sub_4E3C4
loc_4D67C:                              # CODE XREF: sub_4D288+3E0↑j
                ret
# End of function sub_4D288
# =============== S U B R O U T I N E =======================================
# The 8 bytes following this address are flags for the debug window:
setup_debug_menu_window:                # CODE XREF: ROM:un_replay_info_disp_menu↑p
                mov     r14, g0
                call    dbg_menu_variable_init
                bx      8(r14)          # if scroll_test2 we return to 0x493F4
# End of function setup_debug_menu_window
# =============== S U B R O U T I N E =======================================
dbg_menu_variable_init:                # CODE XREF: setup_debug_menu_window+4↑p
                mov     g0, r11         # For SCROLL_TEST2: g0 = 0x493EC; r11 = 0x493EC
                ldob    (r11), r8       # For SCROLL_TEST2: r8 = 0x03
                ldob    1(r11), r9      # For SCROLL_TEST2: r9 = 0x03
                ldob    2(r11), r6      # For SCROLL_TEST2: r6 = 0x20
                ldob    3(r11), r7      # For SCROLL_TEST2: r7 = 0x24
                addo    4, r6, r12      # For SCROLL_TEST2: if r6 = 0x20, r12 = 0x24
                addo    4, r7, r13      # For SCROLL_TEST2: if r7 = 0x24, r13 = 0x28
                mulo    r12, r13, r5    # For SCROLL_TEST2: (r12 = 0x24) * (r13 = 0x28) = 0x5A0
                lda     0x140[r5*2], r4 # For SCROLL_TEST2: ((r5= 0x5A0) * 2) + 0x140 = 0xC80
                and     r4, 3, r15      # For SCROLL_TEST2: if r4 = 0xC80, AND with 3 = 0  (FALSE)
                subo    r15, 4, r15     # For SCROLL_TEST2: 4 - (r15 = 0) = 4
                and     3, r15, r15     # For SCROLL_TEST2: if r15 = 4 AND 3 = 0
                addo    r15, r4, r4     # For SCROLL_TEST2: if r15 = 0 and r4 = 0xC80, r4 = 0xC80
                ldos    4(r11), r3      # For SCROLL_TEST2: r3 = 0x00
                addo    r3, r4, g0      # For SCROLL_TEST2: if (r3 = 0) + (r4 = 0xC80), g0 = 0xC80
                call    lda_free_r7     # For SCROLL_TEST2: Sets g0 to 0x5603A0
                mov     g0, g3          # For SCROLL_TEST2: If g0 = 0x5603A0, r3 = 0x5603A0
                lda     (g3)[r4], r11   # For SCROLL_TEST2: r11 = 0x561020
                st      r11, 0x40(g3)   # store r11 at 0x5603E0
                stob    r8, 4(g3)
                stob    r9, 5(g3)
                stob    r12, 6(g3)
                stob    r13, 7(g3)
                mov     2, r3
                stob    r3, 8(g3)
                stob    r3, 9(g3)
                stob    r6, 0xA(g3)     # byte at 0x5603AA
                stob    r7, 0xB(g3)     # byte at 0x5603AB
                mov     0, r3
                stob    r3, 0xC(g3)
                stob    r3, 0xD(g3)
                stob    r3, 0x10(g3)
                stob    r3, 0x11(g3)
                stob    r3, 0x14(g3)
                stob    r3, 0x15(g3)
                st      r3, 0x24(g3)
                st      r3, 0x28(g3)
                setbit  0, r3, r3
                st      r3, 0x0(g3)
                mov     1, r3
                stob    r3, 0xF(g3)
                subo    1, 0, r3
                stib    r3, 0x15(g3)
                shlo    0xF, 1, r3
                stos    r3, 0x12(g3)
                stq     g4, 0x2C(g3)
                st      g8, 0x3C(g3)
                addo    2, r6, r6
                addo    2, r7, r7
                lda     0x140(g3), r10
                lda     0x8208, r12
                lda     0x8209, r13
                lda     0x820A, r14
                mov     0, r9
                b       loc_4D790
# ---------------------------------------------------------------------------
loc_4D778:                              # CODE XREF: dbg_menu_variable_init+12C↓j
                lda     0x820B, r12
                lda     loc_8020, r13
                lda     loc_820C, r14
loc_4D790:                              # CODE XREF: dbg_menu_variable_init+E8↑j
                stos    r12, (r10)
                mov     1, r8
loc_4D798:                              # CODE XREF: dbg_menu_variable_init+114↓j
                stos    r13, (r10)[r8*2]
                cmpinci r6, r8, r8      # if r6 = 22 and r8 = 1, r8 = 2
                bg      loc_4D798
                stos    r14, (r10)[r8*2]
                lda     2(r10)[r8*2], r10 # if r10 = 0x5604E0 and r8 = 0x23, r10 = 0x560528
                cmpinci r7, r9, r9
                bl      loc_4D7D8
                bg      loc_4D778
                lda     0x820D, r12
                lda     0x820E, r13
                lda     0x820F, r14
                b       loc_4D790
# ---------------------------------------------------------------------------
loc_4D7D8:                              # CODE XREF: dbg_menu_variable_init+128↑j
                ld      0x59E018, r11
                cmpobe  0, r11, loc_4D81C
                lda     loc_8080, r5
                ldob    6(g3), r15
                mulo    1, r15, r15
                addo    1, r15, r15
                lda     0x140(g3)[r15*2], r10 # if g3 = 0x5603A0 and r15 = 0x25, 0x5603A0+0x140+0x4A=0x56052A
loc_4D800:                              # CODE XREF: dbg_menu_variable_init+18C↓j
                ldob    (r11), r3
                cmpobe  0, r3, loc_4D81C
                or      r5, r3, r3
                stos    r3, (r10)
                addo    1, r11, r11
                addo    2, r10, r10
                b       loc_4D800
# ---------------------------------------------------------------------------
loc_4D81C:                              # CODE XREF: dbg_menu_variable_init+154↑j
                ret                     # If scroll_test2, we return to 0x4D688
# End of function dbg_menu_variable_init
# =============== S U B R O U T I N E =======================================
sub_4D820:                              # CODE XREF: ROM:0003A67C↑p
                ld      0x59E00C, r3
                spanbit r3, r4          # if r3 = 0x80000000 (0x10000000000000000000000000000000), r4 = 0x1E or bit 30 (0 based index)
                stob    r4, 0xE(g3)
                setbit  r4, r3, r3
                st      r3, 0x59E00C
                ldob    0xF(g3), r10
                mov     0, r11
                lda     0x59DFE8, r6
                b       loc_4D85C
# ---------------------------------------------------------------------------
loc_4D850:                              # CODE XREF: sub_4D820+48↓j
                ld      0xE(r7), r3
                setbit  r3, r11, r11
                mov     r7, r6
loc_4D85C:                              # CODE XREF: sub_4D820+2C↑j
                ld      0x18(r6), r7    # 0x59DFE8+0x18 = 0x59E000
                cmpobe  0, r7, loc_4D884
                ldob    0xF(r7), r3
                cmpobg  r3, r10, loc_4D850
                st      r7, 0x18(g3)
                ld      0x1C(r7), r3
                st      r3, 0x1C(g3)
                st      g3, 0x1C(r7)
                st      g3, 0x18(r6)
                b       loc_4D8A0
# ---------------------------------------------------------------------------
loc_4D884:                              # CODE XREF: sub_4D820+40↑j
                st      r7, 0x18(g3)
                ld      0x59E004, r3
                st      r3, 0x1C(g3)
                st      g3, 0x59E004
                st      g3, 0x18(r6)
loc_4D8A0:                              # CODE XREF: sub_4D820+60↑j
                mov     r11, g0
                call    sub_4DCCC
                call    sub_4E0C4
                ret
# End of function sub_4D820
# =============== S U B R O U T I N E =======================================
sub_4D8B0:                              # CODE XREF: ROM:000402BC↑p
                ldib    0xC(g3), r8
                ldib    0xD(g3), r9
                ldob    0xA(g3), r6
                ldob    0xB(g3), r7
                cmpibge r9, r7, loc_4D9A0
                ldob    4(g3), r4
                ldob    5(g3), r5
                ldob    8(g3), r3
                addo    r3, r4, r4
                ldob    9(g3), r3
                addo    r3, r5, r5
                addo    r9, r5, r5
                shli    6, r5, r11
                lda     0x59F400(r11)[r4], r11
                shli    7, r5, g9
                lda     0x1002000(g9)[r4], g9
                addo    r4, g9, g9
                ldob    9(g3), r10
                ldob    6(g3), r15
                addo    r9, r10, r10
                mulo    r10, r15, r15
                ldob    8(g3), r10
                addo    0, r15, r15
                addo    r10, r15, r15
                lda     0x140(g3)[r15*2], r10
                ldob    0xE(g3), r4
                ldos    0x12(g3), r5
loc_4D928:                              # CODE XREF: sub_4D8B0+A4↓j
                ldib    (g0), r3
                addi    1, g0, g0
                cmpobe  0, r3, loc_4D9A0
                cmpobe  0xA, r3, loc_4D95C
                cmpobe  0xD, r3, loc_4D980
                xor     r5, r3, r3
                stis    r3, (r10)[r8*2]
                ldob    (r11)[r8], r15
                cmpobne r4, r15, loc_4D950
                stis    r3, (g9)[r8*2]
loc_4D950:                              # CODE XREF: sub_4D8B0+98↑j
                addo    1, r8, r8
                cmpibl  r8, r6, loc_4D928
                b       loc_4D9A0
# ---------------------------------------------------------------------------
loc_4D95C:                              # CODE XREF: sub_4D8B0+84↑j
                addo    1, r9, r9
                stib    r9, 0xD(g3)
                cmpibge r9, r7, loc_4D9A0
                ldob    6(g3), r3
                lda     0x80(g9), g9
                lda     0x40(r11), r11
                lda     (r10)[r3*2], r10
                mov     0, r8
                b       loc_4D928
# ---------------------------------------------------------------------------
loc_4D980:                              # CODE XREF: sub_4D8B0+88↑j
                mov     0, r12
loc_4D984:                              # CODE XREF: sub_4D8B0+E4↓j
                ldob    (g0)[r12], r3
                cmpobe  0xA, r3, loc_4D998
                cmpobe  0, r3, loc_4D998
                addo    1, r12, r12
                b       loc_4D984
# ---------------------------------------------------------------------------
loc_4D998:                              # CODE XREF: sub_4D8B0+D8↑j
                subo    r12, r6, r8
                b       loc_4D928
# ---------------------------------------------------------------------------
loc_4D9A0:                              # CODE XREF: sub_4D8B0+10↑j
                ret
# End of function sub_4D8B0
# =============== S U B R O U T I N E =======================================
uk_texture_data_thing:                  # CODE XREF: ROM:000411D4↑p
                ldib    0xC(g3), r8     # byte at 0x5603AC
                ldib    0xD(g3), r9     # byte at 0x5603AD
                ldob    0xA(g3), r6     # byte at 0x5603AA
                ldob    0xB(g3), r7     # byte at 0x5603AB
                cmpibge r9, r7, loc_4D9A0
                subo    r8, r6, r6
                cmpible r6, g1, loc_4D9C4
                mov     g1, r6
loc_4D9C4:                              # CODE XREF: uk_texture_data_thing+18↑j
                subo    r9, r7, r7
                cmpible r7, g2, loc_4D9D0
                mov     g2, r7
loc_4D9D0:                              # CODE XREF: uk_texture_data_thing+24↑j
                ldob    4(g3), r13
                addi    r13, r8, r4
                ldob    5(g3), r13
                addi    r13, r9, r5
                ldob    8(g3), r3
                addo    r3, r4, r4
                ldob    9(g3), r3
                addo    r3, r5, r5
                shli    6, r5, r11
                lda     0x59F400(r11)[r4], r11 # if r11 = 0x200 and r4 = 0x5, r11 = 0x59F605
                shli    7, r5, g9       # if r5 = 8, g9 = 0x400
                lda     0x1002000(g9)[r4], g9 # 0x1002000 + 0x400 = 0x1002400
                addo    r4, g9, g9
                ldob    9(g3), r10
                ldob    6(g3), r15
                addo    r9, r10, r10
                mulo    r10, r15, r15
                ldob    8(g3), r10
                addo    r8, r15, r15
                addo    r10, r15, r15
                lda     0x140(g3)[r15*2], r10
                ldob    0xE(g3), r4
                ldos    0x12(g3), r5
loc_4DA38:                              # CODE XREF: uk_texture_data_thing+D0↓j
                mov     0, r12
loc_4DA3C:                              # CODE XREF: uk_texture_data_thing+B4↓j
                ldos    (g0)[r12*2], r3
                xor     r5, r3, r3
                stos    r3, (r10)[r12*2]
                ldob    (r11)[r12], r15
                cmpobne r4, r15, loc_4DA54
                stis    r3, (g9)[r12*2] # This is where a tile seems to get drawn onto the screen
loc_4DA54:                              # CODE XREF: uk_texture_data_thing+A8↑j
                addo    1, r12, r12
                cmpibl  r12, r6, loc_4DA3C
                ldob    6(g3), r3
                lda     (g0)[g1*2], g0
                lda     (r10)[r3*2], r10
                lda     0x80(g9), g9
                lda     0x40(r11), r11
                cmpdeco 1, r7, r7
                bl      loc_4DA38
                ret
# End of function uk_texture_data_thing
# =============== S U B R O U T I N E =======================================
sub_4DA7C:                              # CODE XREF: sub_4DB58↓p
                call    sub_4DB24
# End of function sub_4DA7C
# =============== S U B R O U T I N E =======================================
sub_4DA80:                              # CODE XREF: sub_4DBA4+3C↓p
                ld      0x59E00C, r3
                ldob    0xE(g3), r4
                clrbit  r4, r3, r3
                st      r3, 0x59E00C
                ldob    4(g3), r4
                ldob    5(g3), r5
                ldob    6(g3), r6
                ldob    7(g3), r7
                stob    r4, 0x59E032
                stob    r5, 0x59E034
                lda     -1(r4)[r6], r6
                lda     -1(r5)[r7], r7
                stob    r6, 0x59E033
                stob    r7, 0x59E035
                call    sub_4E2D4
                call    sub_4E1F4
                ld      0x59E008, r15
                setbit  0, r15, r15
                st      r15, 0x59E008
                ld      0x59E010, r3
                cmpobne r3, g3, loc_4DB20
                ld      0x59E008, r15
                setbit  2, r15, r15
                st      r15, 0x59E008
                mov     0, r15
                st      r15, 0x59E010
loc_4DB20:                              # CODE XREF: sub_4DA80+7C↑j
                ret
# End of function sub_4DA80
# =============== S U B R O U T I N E =======================================
sub_4DB24:                              # CODE XREF: sub_4DA7C↑p
                ld      0x1C(g3), r7
                ld      0x18(g3), r6
                cmpobe  0, r7, loc_4DB38
                st      r6, 0x18(r7)
                b       loc_4DB40
# ---------------------------------------------------------------------------
loc_4DB38:                              # CODE XREF: sub_4DB24+8↑j
                st      r6, 0x59E000
loc_4DB40:                              # CODE XREF: sub_4DB24+10↑j
                cmpobe  0, r6, loc_4DB4C
                st      r7, 0x1C(r6)
                b       loc_4DB54
# ---------------------------------------------------------------------------
loc_4DB4C:                              # CODE XREF: sub_4DB24:loc_4DB40↑j
                st      r7, 0x59E004
loc_4DB54:                              # CODE XREF: sub_4DB24+24↑j
                ret
# End of function sub_4DB24
# =============== S U B R O U T I N E =======================================
sub_4DB58:                              # CODE XREF: sub_4D288:loc_4D340↑p
                call    sub_4DA7C
                ldob    0xF(g3), r3
                lda     0xFE, r13
                cmpobne r13, r3, loc_4DB7C
                ld      0x59E008, r15
                clrbit  3, r15, r15
                st      r15, 0x59E008
loc_4DB7C:                              # CODE XREF: sub_4DB58+C↑j
                mov     g3, g0
                call    sub_4EC78
                ret
# End of function sub_4DB58
# ---------------------------------------------------------------------------
                ld      0x59E004, g3
loc_4DB90:                              # CODE XREF: ROM:0004DB9C↓j
                cmpobe  0, g3, loc_4DBA0
                call    sub_4DB58
                ld      0x1C(g3), g3
                b       loc_4DB90
# ---------------------------------------------------------------------------
loc_4DBA0:                              # CODE XREF: ROM:loc_4DB90↑j
                b       sub_4D234
# =============== S U B R O U T I N E =======================================
sub_4DBA4:                              # CODE XREF: sub_3FDB4:loc_3FDE0↑p
                ld      0x59E004, g3
loc_4DBAC:                              # CODE XREF: sub_4DBA4+18↓j
                cmpobe  0, g3, loc_4DBC0
                ldob    0xF(g3), r3
                cmpobe  1, r3, loc_4DBD0
                ld      0x1C(g3), g3
                b       loc_4DBAC
# ---------------------------------------------------------------------------
loc_4DBC0:                              # CODE XREF: sub_4DBA4:loc_4DBAC↑j
                mov     0, r3
                st      r3, 0x59E014
                b       loc_4DC48
# ---------------------------------------------------------------------------
loc_4DBD0:                              # CODE XREF: sub_4DBA4+10↑j
                st      g3, 0x59E014
loc_4DBD8:                              # CODE XREF: sub_4DBA4+44↓j
                ldob    0xF(g3), r3
                cmpobne 1, r3, loc_4DC18
                call    sub_4DA80
                ld      0x1C(g3), g3
                cmpobne 0, g3, loc_4DBD8
                ld      0x59E014, r3
                ld      0x18(r3), r5
                st      r5, 0x59E000
                cmpobe  0, r5, loc_4DC0C
                st      g3, 0x1C(r5)
                b       loc_4DC48
# ---------------------------------------------------------------------------
loc_4DC0C:                              # CODE XREF: sub_4DBA4+5C↑j
                st      g3, 0x59E004
                b       loc_4DC48
# ---------------------------------------------------------------------------
loc_4DC18:                              # CODE XREF: sub_4DBA4+38↑j
                ld      0x59E014, r3
                ld      0x18(r3), r5
                ld      0x18(g3), r4
                mov     0, r3
                st      r5, 0x18(g3)
                st      r3, 0x1C(r4)
                cmpobe  0, r5, loc_4DC40
                st      g3, 0x1C(r5)
                b       loc_4DC48
# ---------------------------------------------------------------------------
loc_4DC40:                              # CODE XREF: sub_4DBA4+90↑j
                st      g3, 0x59E004
loc_4DC48:                              # CODE XREF: sub_4DBA4+28↑j
                mov     0, g3
                call    sub_4DCA0
                ld      0x59E008, r3
                clrbit  2, r3, r3
                setbit  4, r3, r3
                st      r3, 0x59E008
                ret
# End of function sub_4DBA4
# =============== S U B R O U T I N E =======================================
sub_4DC6C:                              # CODE XREF: sub_3FDB4+20↑p
                ld      0x59E014, g3
loc_4DC74:                              # CODE XREF: sub_4DC6C+18↓j
                cmpobe  0, g3, loc_4DC88
                ld      0x1C(g3), r3
                call    sub_4D820
                mov     r3, g3
                b       loc_4DC74
# ---------------------------------------------------------------------------
loc_4DC88:                              # CODE XREF: sub_4DC6C:loc_4DC74↑j
                st      g3, 0x59E014
                ret
# End of function sub_4DC6C
# =============== S U B R O U T I N E =======================================
sub_4DC94:                              # CODE XREF: sub_4D288+120↑p
                call    sub_4DB24
                call    sub_4D820
                ret
# End of function sub_4DC94
# =============== S U B R O U T I N E =======================================
sub_4DCA0:                              # CODE XREF: ROM:0003A680↑p
                mov     g3, r3
                ld      0x59E010, g3
                st      r3, 0x59E010
                cmpobe  0, g3, loc_4DCBC
                call    sub_4E0C4
loc_4DCBC:                              # CODE XREF: sub_4DCA0+14↑j
                mov     r3, g3
                cmpobe  0, g3, loc_4DCC8
                call    sub_4E0C4
loc_4DCC8:                              # CODE XREF: sub_4DCA0+20↑j
                ret
# End of function sub_4DCA0
# =============== S U B R O U T I N E =======================================
sub_4DCCC:                              # CODE XREF: sub_4D288+2B8↑p
                ldob    4(g3), r3
                ldob    5(g3), g9
                shli    6, g9, r11
                lda     0x59F400(r11)[r3], r11
                ldob    0xE(g3), r5
                shli    7, g9, g9
                lda     0x1002000(g9)[r3], g9
                addo    r3, g9, g9
                lda     0x140(g3), r10
                ldob    6(g3), r6
                ldob    7(g3), r7
                subo    1, r6, r6
                subo    1, r7, r7
                mov     0, r9
loc_4DD0C:                              # CODE XREF: sub_4DCCC+70↓j
                mov     0, r8
loc_4DD10:                              # CODE XREF: sub_4DCCC+5C↓j
                ldob    (r11)[r8], r3
                bbs     r3, g0, loc_4DD24
                ldos    (r10)[r8*2], r3
                stos    r3, (g9)[r8*2]
                stob    r5, (r11)[r8]
loc_4DD24:                              # CODE XREF: sub_4DCCC+48↑j
                cmpinci r6, r8, r8
                bg      loc_4DD10
                lda     (r10)[r8*2], r10
                lda     0x80(g9), g9
                lda     0x40(r11), r11
                cmpinci r7, r9, r9
                bg      loc_4DD0C
                call    sub_4E244
                ret
# End of function sub_4DCCC
# ---------------------------------------------------------------------------
                mov     g0, r4          # unreachable code
                ld      0x59E008, r3
                bbs     3, r3, loc_4DDAC
                setbit  3, r3, r3
                st      r3, 0x59E008
                balx    setup_debug_menu_window, r14 # The 8 bytes following this address are flags for the debug window:
# ---------------------------------------------------------------------------
                .long 0x2181512
                .long 0
# ---------------------------------------------------------------------------
                lda     0xFE, r15
                stib    r15, 0xF(g3)
                call    sub_4D820
                mov     0, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                mov     r4, g0
                call    sub_4D8B0
                ld      debug_flag, r15
                setbit  3, r15, r15
                st      r15, debug_flag
loc_4DDAC:                              # CODE XREF: ROM:0004DD54↑j
                ret
# =============== S U B R O U T I N E =======================================
sub_4DDB0:                              # CODE XREF: sub_4D288:loc_4D64C↑p
                ldob    4(g3), r3
                ldob    5(g3), r4
                ldob    0xE(g3), r5
                ldob    6(g3), r6
                ldob    7(g3), r7
                ldob    0x59E033, r13
                cmpobl  r13, r3, loc_4DEAC
                lda     -1(r3)[r6], r8
                ldob    0x59E032, r12
                cmpobl  r8, r12, loc_4DEAC
                ldob    0x59E035, r15
                cmpobl  r15, r4, loc_4DEAC
                lda     -1(r4)[r7], r9
                ldob    0x59E034, r14
                cmpobl  r9, r14, loc_4DEAC
                mov     r3, r6
                cmpibge r3, r12, loc_4DE10
                mov     r12, r6
loc_4DE10:                              # CODE XREF: sub_4DDB0+58↑j
                cmpible r8, r13, loc_4DE18
                mov     r13, r8
loc_4DE18:                              # CODE XREF: sub_4DDB0:loc_4DE10↑j
                mov     r4, r7
                cmpibge r4, r14, loc_4DE24
                mov     r14, r7
loc_4DE24:                              # CODE XREF: sub_4DDB0+6C↑j
                cmpible r9, r15, loc_4DE2C
                mov     r15, r9
loc_4DE2C:                              # CODE XREF: sub_4DDB0:loc_4DE24↑j
                shli    6, r7, r11
                lda     0x59F400(r11)[r6], r11
                shli    7, r7, g9
                lda     0x1002000(g9)[r6], g9
                addo    r6, g9, g9
                subo    r3, r6, r3
                subo    r4, r7, r4
                ldob    6(g3), r15
                mulo    r4, r15, r15
                addo    r3, r15, r15
                lda     0x140(g3)[r15*2], r10
                subo    r6, r8, r6
                subo    r7, r9, r7
                ldob    6(g3), r4
                mov     0, r9
loc_4DE74:                              # CODE XREF: sub_4DDB0+F4↓j
                mov     0, r8
loc_4DE78:                              # CODE XREF: sub_4DDB0+E0↓j
                ldob    (r11)[r8], r3
                bbs     r3, g0, loc_4DE8C
                ldos    (r10)[r8*2], r3
                stos    r3, (g9)[r8*2]
                stob    r5, (r11)[r8]
loc_4DE8C:                              # CODE XREF: sub_4DDB0+CC↑j
                cmpinci r6, r8, r8
                bg      loc_4DE78
                lda     0x80(g9), g9
                lda     0x40(r11), r11
                lda     (r10)[r4*2], r10
                cmpinci r7, r9, r9
                bg      loc_4DE74
                call    sub_4E244
loc_4DEAC:                              # CODE XREF: sub_4DDB0+1C↑j
                ret
# End of function sub_4DDB0
# ---------------------------------------------------------------------------
                mov     r14, r10        # unreachable code
                lda     TEXTURE_BUFFER, g1
                mov     0, g2
                call    sub_4EF24
                b       loc_4DEF4
# ---------------------------------------------------------------------------
                mov     r14, r10        # unreachable code
                lda     TEXTURE_BUFFER, g1
                mov     4, g2
                call    sub_4EF24
                b       loc_4DEF4
# ---------------------------------------------------------------------------
                cvtri   g0, g0          # unreachable code
                mov     r14, r10
                lda     TEXTURE_BUFFER, g1
                call    loc_4EEB4
loc_4DEF4:                              # CODE XREF: ROM:0004DEC4↑j
                subo    g0, g1, g1
                lda     0x503300, r7
                mov     0, r8
loc_4DF04:                              # CODE XREF: ROM:0004DF14↓j
                ldob    (r10)[r8], r3
                cmpobe  0, r3, loc_4DF18
                stob    r3, (r7)[r8]
                addo    1, r8, r8
                b       loc_4DF04
# ---------------------------------------------------------------------------
loc_4DF18:                              # CODE XREF: ROM:0004DF08↑j
                lda     1(r10)[r8], r10
                addo    0x1F, 1, r3
                ldob    0xA(g3), r6
                ldob    0xC(g3), r4
                subo    r4, r6, r6
                subo    g1, r6, r5
loc_4DF34:                              # CODE XREF: ROM:0004DF40↓j
                cmpibge r8, r5, loc_4DF44
                stob    r3, (r7)[r8]
                addo    1, r8, r8
                b       loc_4DF34
# ---------------------------------------------------------------------------
loc_4DF44:                              # CODE XREF: ROM:loc_4DF34↑j
                subo    r5, g0, g0
                subo    1, r6, r6
loc_4DF4C:                              # CODE XREF: ROM:0004DF58↓j
                ldob    (g0)[r5], r3
                stob    r3, (r7)[r5]
                cmpinci r6, r5, r5
                bg      loc_4DF4C
                mov     0, r3
                stob    r3, (r7)[r5]
                mov     r7, g0
                call    sub_4D8B0
                ldob    0xD(g3), r14
                addi    1, r14, r15
                stob    r15, 0xD(g3)
                and     r10, 3, r15
                subo    r15, 4, r15
                and     3, r15, r15
                addo    r15, r10, r10
                bx      (r10)
# =============== S U B R O U T I N E =======================================
sub_4DF8C:                              # CODE XREF: ROM:00040244↑p
                mov     r14, g0
                call    sub_4D8B0
                and     g0, 3, r15
                subo    r15, 4, r15
                and     3, r15, r15
                addo    r15, g0, g0
                bx      (g0)
# End of function sub_4DF8C
# ---------------------------------------------------------------------------
loc_4DFA8:                              # CODE XREF: ROM:000440E4↑p
                mov     g0, r11
                mov     g1, r10
                ld      0x0(g3), r15
                bbc     0, r15, loc_4E028
                mov     0, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                mov     0, r8
loc_4DFCC:                              # CODE XREF: ROM:0004E01C↓j
                ld      (r10)[r8*4], r4
                cmpobe  0, r4, loc_4E018
                bbs     r8, r11, loc_4DFE0
                lda     byte_4F38D, r4
loc_4DFE0:                              # CODE XREF: ROM:0004DFD4↑j
                lda     TEXTURE_BUFFER, g1
                st      r8, 0x0(sp)
                st      r4, 4(sp)
                mov     2, r15
                balx    sub_4ED24, r14
# ---------------------------------------------------------------------------
aBit2d20s:      .asciz "bit%2d:%20s"
# ---------------------------------------------------------------------------
                call    sub_4D8B0
                ldob    0xD(g3), r14
                addi    1, r14, r15
                stob    r15, 0xD(g3)
loc_4E018:                              # CODE XREF: ROM:0004DFD0↑j
                cmpinco 0x1F, r8, r8
                bg      loc_4DFCC
                st      r11, 0x40(g3)
                ret
# ---------------------------------------------------------------------------
loc_4E028:                              # CODE XREF: ROM:0004DFB4↑j
                ld      0x40(g3), r9
                xor     r11, r9, r9
                mov     6, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                mov     0, r8
loc_4E044:                              # CODE XREF: ROM:0004E090↓j
                ld      (r10)[r8*4], r4
                cmpobe  0, r4, loc_4E08C
                bbc     r8, r9, loc_4E080
                bbs     r8, r11, loc_4E05C
                lda     byte_4F38D, r4
loc_4E05C:                              # CODE XREF: ROM:0004E050↑j
                lda     TEXTURE_BUFFER, g1
                st      r4, 0x0(sp)
                mov     1, r15
                balx    sub_4ED24, r14
# ---------------------------------------------------------------------------
a20s:           .asciz "%20s"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                call    sub_4D8B0
loc_4E080:                              # CODE XREF: ROM:0004E04C↑j
                ldob    0xD(g3), r14
                addi    1, r14, r15
                stob    r15, 0xD(g3)
loc_4E08C:                              # CODE XREF: ROM:0004E048↑j
                cmpinco 0x1F, r8, r8
                bg      loc_4E044
                st      r11, 0x40(g3)
                ret
# =============== S U B R O U T I N E =======================================
sub_4E09C:                              # CODE XREF: sub_4D288+2B4↑p
                ld      0x59E000, r3
                mov     0, g0
                b       loc_4E0BC
# ---------------------------------------------------------------------------
loc_4E0AC:                              # CODE XREF: sub_4E09C:loc_4E0BC↓j
                cmpobe  g3, r3, loc_4E0C0
                ld      0xE(r3), r4
                setbit  r4, g0, g0
                ld      0x18(r3), r3
loc_4E0BC:                              # CODE XREF: sub_4E09C+C↑j
                cmpobne 0, r3, loc_4E0AC
loc_4E0C0:                              # CODE XREF: sub_4E09C:loc_4E0AC↑j
                ret
# End of function sub_4E09C
# =============== S U B R O U T I N E =======================================
sub_4E0C4:                              # CODE XREF: sub_4D820+88↑p
                ldob    4(g3), r4
                ldob    5(g3), r5
                shli    6, r5, r11
                lda     0x59F400(r11)[r4], r11
                shli    7, r5, g9
                lda     0x1002000(g9)[r4], g9
                addo    r4, g9, g9
                lda     0x140(g3), r10
                ldob    6(g3), r6
                subo    2, r6, r7
                ldob    0xE(g3), r4
                ld      0x59E010, r3
                mov     0, r5
                cmpobne r3, g3, loc_4E10C
                subo    8, 0, r5
loc_4E10C:                              # CODE XREF: sub_4E0C4+40↑j
                lda     0x8208(r5), r12
                lda     0x8209(r5), r13
                lda     0x820A(r5), r14
                balx    sub_4E1B4, g0
                lda     (r10)[r6*2], r10
                lda     0x80(g9), g9
                lda     0x40(r11), r11
                lda     0x820B(r5), r12
                lda     0x820C(r5), r14
                ldob    7(g3), r9
                subo    2, r9, r9
loc_4E150:                              # CODE XREF: sub_4E0C4+C8↓j
                ldob    (r11), r3
                stos    r12, (r10)
                cmpobne r3, r4, loc_4E160
                stis    r12, (g9)
loc_4E160:                              # CODE XREF: sub_4E0C4+94↑j
                ldob    -1(r11)[r6], r3
                stos    r14, -2(r10)[r6*2]
                cmpobne r3, r4, loc_4E17C
                stis    r14, -2(g9)[r6*2]
loc_4E17C:                              # CODE XREF: sub_4E0C4+AC↑j
                lda     (r10)[r6*2], r10
                lda     0x80(g9), g9
                lda     0x40(r11), r11
                cmpdeco 1, r9, r9
                bl      loc_4E150
                lda     0x820D(r5), r12
                lda     0x820E(r5), r13
                lda     0x820F(r5), r14
                balx    sub_4E1B4, g0
                ret
# End of function sub_4E0C4
# =============== S U B R O U T I N E =======================================
sub_4E1B4:                              # CODE XREF: sub_4E0C4+60↑p
                ldob    (r11), r3
                stos    r12, (r10)
                cmpobne r3, r4, loc_4E1C4
                stis    r12, (g9)
loc_4E1C4:                              # CODE XREF: sub_4E1B4+8↑j
                mov     1, r8
loc_4E1C8:                              # CODE XREF: sub_4E1B4+28↓j
                ldob    (r11)[r8], r3
                stos    r13, (r10)[r8*2]
                cmpobne r3, r4, loc_4E1D8
                stis    r13, (g9)[r8*2]
loc_4E1D8:                              # CODE XREF: sub_4E1B4+1C↑j
                cmpinco r7, r8, r8
                bg      loc_4E1C8
                ldob    (r11)[r8], r3
                stos    r14, (r10)[r8*2]
                cmpobne r3, r4, loc_4E1F0
                stis    r14, (g9)[r8*2]
loc_4E1F0:                              # CODE XREF: sub_4E1B4+34↑j
                bx      (g0)
# End of function sub_4E1B4
# =============== S U B R O U T I N E =======================================
sub_4E1F4:                              # CODE XREF: sub_4D288+2B0↑p
                ldob    0x59E032, r10
                ldob    0x59E034, r9
                ldob    0x59E033, r6
                ldob    0x59E035, r7
                shli    6, r9, r3
                lda     0x59F400(r3), r11
                mov     0, r3
loc_4E224:                              # CODE XREF: sub_4E1F4+48↓j
                mov     r10, r8
loc_4E228:                              # CODE XREF: sub_4E1F4+3C↓j
                stob    r3, (r11)[r8]
                cmpinco r6, r8, r8
                bg      loc_4E228
                lda     0x40(r11), r11
                cmpinco r7, r9, r9
                bg      loc_4E224
                ret
# End of function sub_4E1F4
# =============== S U B R O U T I N E =======================================
sub_4E244:                              # CODE XREF: sub_4DCCC+74↑p
                ld      0x59E008, r15
                setbit  1, r15, r15
                st      r15, 0x59E008
                ldob    4(g3), r6
                ldob    5(g3), r7
                ldob    6(g3), r8
                ldob    7(g3), r9
                mov     1, r10
                addo    0x1F, 1, r4
                shlo    r8, r10, r10
                subo    1, r10, r10
                shlo    r6, r10, r10
                subi    r4, r6, r6
                cmpible 0, r6, loc_4E298
                addi    r6, r8, r8
                mov     0, r6
                cmpibl  0, r8, loc_4E298
                mov     0, r11
                b       loc_4E2A8
# ---------------------------------------------------------------------------
loc_4E298:                              # CODE XREF: sub_4E244+3C↑j
                mov     1, r11
                shlo    r8, r11, r11
                subo    1, r11, r11
                shlo    r6, r11, r11
loc_4E2A8:                              # CODE XREF: sub_4E244+50↑j
                lda     0x59F280, r6
                lda     -1(r7)[r9], r9
loc_4E2B8:                              # CODE XREF: sub_4E244+88↓j
                ldl     (r6)[r7*8], r4
                or      r10, r4, r4
                or      r11, r5, r5
                stl     r4, (r6)[r7*8]
                cmpinco r9, r7, r7
                bg      loc_4E2B8
                ret
# End of function sub_4E244
# =============== S U B R O U T I N E =======================================
sub_4E2D4:                              # CODE XREF: sub_4D288:loc_4D534↑p
                ld      0x59E008, r15
                setbit  1, r15, r15
                st      r15, 0x59E008
                ldob    0x59E032, r6
                ldob    0x59E034, r7
                ldob    0x59E033, r8
                ldob    0x59E035, r9
                subo    r6, r8, r8
                subo    r7, r9, r9
                addo    1, r8, r8
                addo    1, r9, r9
                mov     1, r10
                addo    0x1F, 1, r4
                shlo    r8, r10, r10
                subo    1, r10, r10
                shlo    r6, r10, r10
                subi    r4, r6, r6
                cmpible 0, r6, loc_4E348
                addi    r6, r8, r8
                mov     0, r6
                cmpibl  0, r8, loc_4E348
                mov     0, r11
                b       loc_4E358
# ---------------------------------------------------------------------------
loc_4E348:                              # CODE XREF: sub_4E2D4+5C↑j
                mov     1, r11
                shlo    r8, r11, r11
                subo    1, r11, r11
                shlo    r6, r11, r11
loc_4E358:                              # CODE XREF: sub_4E2D4+70↑j
                lda     0x59F280, r6
                lda     -1(r7)[r9], r9
loc_4E368:                              # CODE XREF: sub_4E2D4+A8↓j
                ldl     (r6)[r7*8], r4
                andnot  r10, r4, r4
                andnot  r11, r5, r5
                stl     r4, (r6)[r7*8]
                cmpinco r9, r7, r7
                bg      loc_4E368
                ret
# End of function sub_4E2D4
# =============== S U B R O U T I N E =======================================
sub_4E384:                              # CODE XREF: sub_4D234+4C↑p
                ld      0x59E008, r15
                setbit  1, r15, r15
                st      r15, 0x59E008
                mov     0, r4
                mov     0, r5
                mov     0, r6
                mov     0, r7
                lda     0x59F280, r11
                lda     0xD7, r8
loc_4E3B4:                              # CODE XREF: sub_4E384+38↓j
                stq     r4, (r11)[r8*16]
                cmpdeci 0, r8, r8
                bl      loc_4E3B4
                ret
# End of function sub_4E384
# =============== S U B R O U T I N E =======================================
sub_4E3C4:                              # CODE XREF: sub_4D288+3F0↑p
                lda     0x59F280, r10
                lda     0x100C000, r11
                lda     0xFF, r5
                shlo    7, 3, r13
                mov     0, r12
loc_4E3E0:                              # CODE XREF: sub_4E3C4+150↓j
                ld      (r10)[r12*1], r6
                and     r5, r6, r3
                ldob    byte_4F0A8(r3), r4
                shlo    8, r4, r8
                shro    8, r6, r6
                and     r5, r6, r3
                ldob    byte_4F0A8(r3), r4
                or      r4, r8, r8
                shro    8, r6, r6
                and     r5, r6, r3
                ldob    byte_4F0A8(r3), r4
                shlo    0x18, r4, r4
                or      r4, r8, r8
                shro    8, r6, r6
                and     r5, r6, r3
                ldob    byte_4F0A8(r3), r4
                shlo    0x10, r4, r4
                or      r4, r8, r8
                st      r8, (r11)[r12*8]
                st      r8, 8(r11)[r12*8]
                st      r8, 0x10(r11)[r12*8]
                st      r8, 0x18(r11)[r12*8]
                st      r8, 0x20(r11)[r12*8]
                st      r8, 0x28(r11)[r12*8]
                st      r8, 0x30(r11)[r12*8]
                st      r8, 0x38(r11)[r12*8]
                ld      4(r10)[r12*1], r6
                and     r5, r6, r3
                ldob    byte_4F0A8(r3), r4
                shlo    8, r4, r8
                shro    8, r6, r6
                and     r5, r6, r3
                ldob    byte_4F0A8(r3), r4
                or      r4, r8, r8
                shro    8, r6, r6
                and     r5, r6, r3
                ldob    byte_4F0A8(r3), r4
                shlo    0x18, r4, r4
                or      r4, r8, r8
                shro    8, r6, r6
                and     r5, r6, r3
                ldob    byte_4F0A8(r3), r4
                shlo    0x10, r4, r4
                or      r4, r8, r8
                st      r8, 4(r11)[r12*8]
                st      r8, 0xC(r11)[r12*8]
                st      r8, 0x14(r11)[r12*8]
                st      r8, 0x1C(r11)[r12*8]
                st      r8, 0x24(r11)[r12*8]
                st      r8, 0x2C(r11)[r12*8]
                st      r8, 0x34(r11)[r12*8]
                st      r8, 0x3C(r11)[r12*8]
                addo    8, r12, r12
                cmpobg  r13, r12, loc_4E3E0
                ret
# End of function sub_4E3C4
# ---------------------------------------------------------------------------
                ld      0x40(g3), r10   # unreachable code
                mov     2, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                ld      (r10), r8
                mov     1, r9
loc_4E538:                              # CODE XREF: ROM:0004E554↓j
                ld      (r10)[r9*4], g0
                addo    4, g0, g0
                call    sub_4D8B0
                ldob    0xD(g3), r14
                addi    1, r14, r15
                stob    r15, 0xD(g3)
                cmpinco r8, r9, r9
                bg      loc_4E538
                mov     0, r15
                stib    r15, 0x44(g3)
                mov     0, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                balx    sub_4DF8C, r14
# ---------------------------------------------------------------------------
                .long 0x1C
# ---------------------------------------------------------------------------
                ret
# =============== S U B R O U T I N E =======================================
debug_window_setup:                     # CODE XREF: ROM:0003A8CC↑p
                ld      0x40(g3), r11
                ldob    0x14(g3), r9
                ld      (r11), r8
                ld      INTERUPT_FLAGS_MOMENTARY, r6
                ld      INTERUPT_FLAGS_HELD, r7
                bbc     10, r7, loc_4E5A4 # P1 Block
                mov     r7, r6
loc_4E5A4:                              # CODE XREF: debug_window_setup+1C↑j
                bbs     12, r6, loc_4E5DC # P1 Down
                bbc     13, r6, loc_4E618 # P1 Up
                cmpibge 0, r9, loc_4E8EC # return
                ldob    0x10(g3), r5
loc_4E5B4:                              # CODE XREF: debug_window_setup+50↓j
                subo    1, r9, r9
                cmpibe  0, r9, loc_4E5D4
                cmpibl  r9, r5, loc_4E5D4
                ld      4(r11)[r9*4], r3
                ld      0x0(r3), r3
                bbs     8, r3, loc_4E5D4
                bbc     9, r3, loc_4E5B4
loc_4E5D4:                              # CODE XREF: debug_window_setup+38↑j
                stob    r9, 0x14(g3)
                b       loc_4E8EC       # return
# ---------------------------------------------------------------------------
loc_4E5DC:                              # CODE XREF: debug_window_setup:loc_4E5A4↑j
                subo    1, r8, r4
                cmpibge r9, r4, loc_4E8EC # return
                ldob    0x10(g3), r13
                ldob    0xB(g3), r14
                addi    r13, r14, r5
loc_4E5F0:                              # CODE XREF: debug_window_setup+8C↓j
                addo    1, r9, r9
                cmpibe  r9, r4, loc_4E610
                cmpibge r9, r5, loc_4E610
                ld      4(r11)[r9*4], r3
                ld      0x0(r3), r3
                bbs     8, r3, loc_4E610
                bbc     9, r3, loc_4E5F0
loc_4E610:                              # CODE XREF: debug_window_setup+74↑j
                stob    r9, 0x14(g3)
                b       loc_4E8EC       # return
# ---------------------------------------------------------------------------
loc_4E618:                              # CODE XREF: debug_window_setup+28↑j
                ld      4(r11)[r9*4], r10
                ld      0x0(r10), r11
                bbs     8, r11, loc_4E630
                bbc     9, r11, loc_4E8EC # return
                b       loc_4E844
# ---------------------------------------------------------------------------
loc_4E630:                              # CODE XREF: debug_window_setup+A4↑j
                lda     0xFF000010, r14 # IAC Message Port
                lda     purge_instruction_cache_iac, r15
                synmovq r14, r15        # Send an IAC to purge the instruction cache
                ldl     4(r10), r12
                lda     instruction_buffer, r14
                stl     r12, (r14)
                callx   (r14)
                mov     g0, r5
                bbc     0x1E, r11, loc_4E66C
                ldob    0xE(r10), r3
                shro    r3, g0, g0
                and     1, g0, g0
loc_4E66C:                              # CODE XREF: debug_window_setup+DC↑j
                shro    0xC, r11, r9
                and     0xF, r9, r9
                mov     1, r12
                cmpobne 3, r9, loc_4E6A8
                lda     0x3DCCCCCD, r12
                ldob    0xD(r10), r3
                mov     r3, r15
                lda     0x3F800000, r14
loc_4E694:                              # CODE XREF: debug_window_setup+120↓j
                cmpibge 0, r15, loc_4E6A4
                mulr    r12, r14, r14
                subo    1, r15, r15
                b       loc_4E694
# ---------------------------------------------------------------------------
loc_4E6A4:                              # CODE XREF: debug_window_setup:loc_4E694↑j
                mov     r14, r12
loc_4E6A8:                              # CODE XREF: debug_window_setup+F8↑j
                bbc     8, r6, loc_4E754
                cmpobe  3, r9, loc_4E700
                subo    r12, g0, g0
                bbc     0, r11, loc_4E7FC
                mov     g0, r4
                lda     0xFF000010, r14 # IAC Message Port
                lda     purge_instruction_cache_iac, r15
                synmovq r14, r15
                and     0, r11, r3
                ldob    byte_4F1A8(r3), r3
                ldl     0x10(r10)[r3*4], r14
                lda     instruction_buffer, r13
                stl     r14, (r13)
                callx   (r13)
                cmpible r4, g0, loc_4E7FC
                mov     r4, g0
                b       loc_4E7FC
# ---------------------------------------------------------------------------
loc_4E700:                              # CODE XREF: debug_window_setup+12C↑j
                subr    r12, g0, g0
                bbc     0, r11, loc_4E7FC
                mov     g0, r4
                lda     0xFF000010, r14 # IAC Message Port
                lda     purge_instruction_cache_iac, r15
                synmovq r14, r15
                and     0, r11, r3
                ldob    byte_4F1A8(r3), r3
                ldl     0x10(r10)[r3*4], r14
                lda     instruction_buffer, r13
                stl     r14, (r13)
                callx   (r13)
                cmpr    r4, g0
                ble     loc_4E7FC
                mov     r4, g0
                b       loc_4E7FC
# ---------------------------------------------------------------------------
loc_4E754:                              # CODE XREF: debug_window_setup:loc_4E6A8↑j
                bbc     9, r6, loc_4E8EC # return
                cmpobe  3, r9, loc_4E7AC
                addo    r12, g0, g0
                bbc     2, r11, loc_4E7FC
                mov     g0, r4
                lda     0xFF000010, r14 # IAC Message Port
                lda     purge_instruction_cache_iac, r15
                synmovq r14, r15
                and     3, r11, r3
                ldob    byte_4F1A8(r3), r3
                ldl     0x10(r10)[r3*4], r14
                lda     instruction_buffer, r13
                stl     r14, (r13)
                callx   (r13)
                cmpibge r4, g0, loc_4E7FC
                mov     r4, g0
                b       loc_4E7FC
# ---------------------------------------------------------------------------
loc_4E7AC:                              # CODE XREF: debug_window_setup+1D8↑j
                addr    r12, g0, g0
                bbc     2, r11, loc_4E7FC
                mov     g0, r4
                lda     0xFF000010, r14 # IAC Message Port
                lda     purge_instruction_cache_iac, r15
                synmovq r14, r15
                and     3, r11, r3
                ldob    byte_4F1A8(r3), r3
                ldl     0x10(r10)[r3*4], r14
                lda     instruction_buffer, r13
                stl     r14, (r13)
                callx   (r13)
                cmpr    r4, g0
                bge     loc_4E7FC
                mov     r4, g0
loc_4E7FC:                              # CODE XREF: debug_window_setup+134↑j
                bbc     0x1E, r11, loc_4E80C
                ldob    0xE(r10), r3
                chkbit  0, g0
                alterbit r3, r5, g0
loc_4E80C:                              # CODE XREF: debug_window_setup:loc_4E7FC↑j
                lda     0xFF000010, r14 # IAC Message Port
                lda     purge_instruction_cache_iac, r15
                synmovq r14, r15
                ldl     4(r10), r12
                setbit  0x19, r12, r12
                lda     instruction_buffer, r14
                stl     r12, (r14)
                callx   (r14)
                bbc     9, r11, loc_4E8EC # return
                cmpobe  g0, r5, loc_4E8EC # return
                b       loc_4E870
# ---------------------------------------------------------------------------
loc_4E844:                              # CODE XREF: debug_window_setup+AC↑j
                ld      INTERUPT_FLAGS_MOMENTARY, r6
                ld      0x59E03C, r3
                cmpobe  r3, g3, loc_4E860
                bbc     8, r6, loc_4E8EC # return
                b       loc_4E864
# ---------------------------------------------------------------------------
loc_4E860:                              # CODE XREF: debug_window_setup+2D4↑j
                bbc     4, r6, loc_4E8EC # return
loc_4E864:                              # CODE XREF: debug_window_setup+2DC↑j
                bbs     0x1F, r11, loc_4E870
                ldl     4(r10), r12
                b       loc_4E884
# ---------------------------------------------------------------------------
loc_4E870:                              # CODE XREF: debug_window_setup+2C0↑j
                and     0x1F, r11, r3
                ldob    byte_4F1A8(r3), r3
                ldl     0x10(r10)[r3*4], r12
loc_4E884:                              # CODE XREF: debug_window_setup+2EC↑j
                lda     0xFF000010, r14 # IAC Message Port
                lda     purge_instruction_cache_iac, r15
                synmovq r14, r15
                lda     instruction_buffer, r14
                stl     r12, (r14)
                callx   (r14)
                lda     0xFF, r13
                and     r13, r11, r3
                ldob    byte_4F1A8(r3), r3
                lda     0x10(r10)[r3*4], r3
                st      r3, 0x59E018
                mov     g3, r3
                callx   (g0)
                mov     r3, g3
                bbc     0xA, r11, loc_4E8EC # return
                call    sub_4DB58
                mov     0, r15
                st      r15, 0x59E03C
                b       loc_4E8EC       # return
# ---------------------------------------------------------------------------
loc_4E8EC:                              # CODE XREF: debug_window_setup+2C↑j
                ret                     # return
# End of function debug_window_setup
# ---------------------------------------------------------------------------
loc_4E8F0:                              # CODE XREF: ROM:0003A6B8↑j
                ld      0x40(g3), r10
                ld      (r10), r8
                ldob    0x10(g3), r9
                ldob    0xB(g3), r7
                ldob    0x14(g3), r6
                ldob    0x15(g3), r11
                mov     r9, g0
                cmpobe  r6, r11, loc_4E980
                subo    r9, r6, r5
                subo    r9, r11, r4
                cmpibg  0, r5, loc_4E92C
                cmpibl  r5, r7, loc_4E948
                subo    r7, r6, r9
                addo    1, r9, r9
                b       loc_4E930
# ---------------------------------------------------------------------------
loc_4E92C:                              # CODE XREF: ROM:0004E918↑j
                mov     r6, r9
loc_4E930:                              # CODE XREF: ROM:0004E928↑j
                cmpobe  g0, r9, loc_4E940
                ld      0x0(g3), r15
                setbit  1, r15, r15
                st      r15, 0x0(g3)
loc_4E940:                              # CODE XREF: ROM:loc_4E930↑j
                stob    r9, 0x10(g3)
                subo    r9, r6, r5
loc_4E948:                              # CODE XREF: ROM:0004E91C↑j
                mov     0, r15
                stib    r15, 0xC(g3)
                lda     0xFF, r3
                cmpobe  r3, r11, loc_4E96C
                cmpobe  r4, r5, loc_4E96C
                stob    r4, 0xD(g3)
                balx    sub_4DF8C, r14
# ---------------------------------------------------------------------------
                .long 0x20
# ---------------------------------------------------------------------------
loc_4E96C:                              # CODE XREF: ROM:0004E954↑j
                stob    r5, 0xD(g3)
                balx    sub_4DF8C, r14
# ---------------------------------------------------------------------------
                .long 0x1C
# ---------------------------------------------------------------------------
                stob    r6, 0x15(g3)
loc_4E980:                              # CODE XREF: ROM:0004E90C↑j
                subo    1, 0, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                ld      frame_counter, r3
                lda     short_32, g0
                cmpobe  0, r9, loc_4E9AC
                lda     short_30, g0
loc_4E9AC:                              # CODE XREF: ROM:0004E9A0↑j
                call    sub_4D8B0
                subo    1, r7, r4
                stob    r4, 0xD(g3)
                addo    r9, r7, r4
                lda     short_32, g0
                cmpobge r4, r8, loc_4E9D0
                lda     short_31, g0
loc_4E9D0:                              # CODE XREF: ROM:0004E9C4↑j
                call    sub_4D8B0
                addo    r9, r7, r7
                cmpible r8, r7, loc_4E9E0
                mov     r7, r8
loc_4E9E0:                              # CODE XREF: ROM:0004E9D8↑j
                addo    1, r9, r9
                mov     1, r15
                stib    r15, 0xC(g3)
                mov     0, r15
                stib    r15, 0xD(g3)
                mov     0, r6
loc_4E9F8:                              # CODE XREF: ROM:0004EA18↓j
                ld      (r10)[r9*4], g0
                mov     r6, g1
                call    sub_4EA20
                addo    1, r6, r6
                ldob    0xD(g3), r14
                addi    1, r14, r15
                stob    r15, 0xD(g3)
                cmpinco r8, r9, r9
                bg      loc_4E9F8
                ret
# =============== S U B R O U T I N E =======================================
sub_4EA20:                              # CODE XREF: ROM:0004EA00↑p
                mov     g0, r11
                mov     g1, r6
                ld      0x0(r11), r10
                bbs     8, r10, loc_4EA50
                bbs     31, r10, loc_4EA50
                ld      0x0(g3), r3
                bbs     0, r3, loc_4EA40
                bbc     1, r3, loc_4EBAC
loc_4EA40:                              # CODE XREF: sub_4EA20+18↑j
                lda     TEXTURE_BUFFER, g1
                mov     g1, g0
                b       loc_4EB08
# ---------------------------------------------------------------------------
loc_4EA50:                              # CODE XREF: sub_4EA20+C↑j
                lda     0xFF000010, r14 # IAC Message Port
                lda     purge_instruction_cache_iac, r15
                synmovq r14, r15
                ldl     4(r11), r12
                lda     instruction_buffer, r14
                stl     r12, (r14)
                callx   (r14)
                bbc     0x1E, r10, loc_4EA88
                ldob    0xE(r11), r3
                shro    r3, g0, g0
                and     1, g0, g0
loc_4EA88:                              # CODE XREF: sub_4EA20+58↑j
                ld      0x0(g3), r3
                bbs     0, r3, loc_4EAA0
                bbs     1, r3, loc_4EAA0
                ld      0x50(g3)[r6*4], r3
                cmpobe  g0, r3, loc_4EBAC
loc_4EAA0:                              # CODE XREF: sub_4EA20+6C↑j
                st      g0, 0x50(g3)[r6*4]
                lda     TEXTURE_BUFFER, g1
                shro    0x10, r10, r3
                and     3, r3, r3
                ldos    0xC(r11), g2
                cmpobe  3, r3, loc_4EAD0
                ld      off_4F338[r3*4], r4
                callx   (r4)
                b       loc_4EB08
# ---------------------------------------------------------------------------
loc_4EAD0:                              # CODE XREF: sub_4EA20+9C↑j
                mov     g0, r4
                and     0xF, r10, r3
                ldob    byte_4F1A8(r3), r3
                ld      0x10(r11)[r3*4], g1
                shro    0x1A, r10, r3
                and     0xF, r3, r3
                callx   loc_4F2A8[r3*8] # Interesting array of callx routines to read/set globals
                ld      (g0)[r4*4], g0
                lda     TEXTURE_BUFFER, g1
                call    sub_4F054
loc_4EB08:                              # CODE XREF: sub_4EA20+2C↑j
                mov     g0, r12
                subo    g0, g1, g1
                lda     0x503300, g0
                lda     0xFF, r13
                and     r13, r10, r3
                ldob    byte_4F1A8(r3), r3
                lda     0x10(r11)[r3*4], r5
                mov     0, r8
loc_4EB34:                              # CODE XREF: sub_4EA20+124↓j
                ldob    (r5)[r8], r3
                cmpobe  0, r3, loc_4EB48
                stob    r3, (g0)[r8]
                addo    1, r8, r8
                b       loc_4EB34
# ---------------------------------------------------------------------------
loc_4EB48:                              # CODE XREF: sub_4EA20+118↑j
                addo    0x1F, 1, r3
                ldob    0xA(g3), r6
                ldob    0xC(g3), r4
                subo    r4, r6, r6
                subo    g1, r6, r5
loc_4EB5C:                              # CODE XREF: sub_4EA20+148↓j
                cmpibge r8, r5, loc_4EB6C
                stob    r3, (g0)[r8]
                addo    1, r8, r8
                b       loc_4EB5C
# ---------------------------------------------------------------------------
loc_4EB6C:                              # CODE XREF: sub_4EA20:loc_4EB5C↑j
                mov     0, r3
                stob    r3, (g0)[r8]
                call    sub_4D8B0
                bbs     8, r10, loc_4EB80
                bbc     0x1F, r10, loc_4EBAC
loc_4EB80:                              # CODE XREF: sub_4EA20+158↑j
                mov     r12, g0
                addo    r4, r5, r3
                stob    r3, 0xC(g3)
                ldos    0x12(g3), r12
                bbc     8, r10, loc_4EBA0
                shlo    7, 1, r3
                xor     r12, r3, r3
                stos    r3, 0x12(g3)
loc_4EBA0:                              # CODE XREF: sub_4EA20+170↑j
                call    sub_4D8B0
                stob    r4, 0xC(g3)
                stos    r12, 0x12(g3)
loc_4EBAC:                              # CODE XREF: sub_4EA20+1C↑j
                ret
# End of function sub_4EA20
# =============== S U B R O U T I N E =======================================
setup_not_use_and_free:                 # CODE XREF: ROM:00006AB0↑p
                lda     NOT_USE_VAL, r15
                st      r15, not_use
                mov     0, r15
                st      r15, free
                mov     1, r15
                st      r15, not_free   # Guessing this is "not_free"
                ret
# End of function setup_not_use_and_free
# =============== S U B R O U T I N E =======================================
lda_free_r7:                            # CODE XREF: dbg_menu_variable_init+40↑p
                lda     free, r7        # r7 = 0x500608
loc_4EBE4:                              # CODE XREF: lda_free_r7+1C↓j
                mov     r7, r6          # now r6 = 0x500608 also
                ld      (r6), r7        # if free = 0, r7 = 0
                cmpobe  0, r7, loc_4EC50
                ld      -4(r7), r3
                cmpobg  g0, r3, loc_4EBE4
                be      loc_4EC38
                subo    g0, r3, r5
                subo    4, r5, r5
                cmpobge 4, r5, loc_4EBE4
                lda     4(r7)[g0], r8
                st      r8, (r6)
                ld      (r7), r9
                st      r5, -4(r8)
                st      r9, (r8)
                st      g0, -4(r7)
                mov     r7, g0
                ret
# ---------------------------------------------------------------------------
loc_4EC38:                              # CODE XREF: lda_free_r7+20↑j
                ld      (r7), r8
                st      r8, (r6)
                st      g0, -4(r7)
                mov     r7, g0
                ret
# ---------------------------------------------------------------------------
loc_4EC50:                              # CODE XREF: lda_free_r7+10↑j
                ld      not_use, r3
                lda     4(r3), r4
                st      g0, -4(r4)
                lda     (r4)[g0], r5
                st      r5, not_use
                mov     r4, g0
                ret
# End of function lda_free_r7
# =============== S U B R O U T I N E =======================================
sub_4EC78:                              # CODE XREF: sub_4DB58+28↑p
                ld      -4(g0), r10
                lda     (g0)[r10], r11
                lda     free, r7
                mov     r7, r6
loc_4EC90:                              # CODE XREF: sub_4EC78+28↓j
                mov     r6, r5
                mov     r7, r6
                ld      (r6), r7
                cmpobe  0, r7, loc_4ECA4
                cmpobg  g0, r7, loc_4EC90
loc_4ECA4:                              # CODE XREF: sub_4EC78+24↑j
                ld      -4(r6), r3
                lda     4(r6)[r3], r4
                cmpobe  g0, r4, loc_4ECC0
                st      g0, (r6)
                b       loc_4ECD4
# ---------------------------------------------------------------------------
loc_4ECC0:                              # CODE XREF: sub_4EC78+3C↑j
                subo    r6, r11, r10
                mov     r6, g0
                st      r10, -4(g0)
                mov     r5, r6
loc_4ECD4:                              # CODE XREF: sub_4EC78+44↑j
                ld      not_use, r4
                cmpobne r11, r4, loc_4ECF4
                subo    4, g0, r3
                st      r3, not_use
                mov     0, r7
                st      r7, (r6)
loc_4ECF4:                              # CODE XREF: sub_4EC78+64↑j
                cmpobe  0, r7, loc_4ED1C
                subo    4, r7, r4
                cmpobne r11, r4, loc_4ED1C
                ld      -4(r7), r3
                lda     4(r3)[r10], r10
                st      r10, -4(g0)
                ld      (r7), r7
loc_4ED1C:                              # CODE XREF: sub_4EC78:loc_4ECF4↑j
                st      r7, (g0)
                ret
# End of function sub_4EC78
# =============== S U B R O U T I N E =======================================
sub_4ED24:                              # CODE XREF: ROM:00000ABC↑p
                mov     sp, g2          # save sp to g2
                lda     (sp)[r15*4], sp # move the stack ahead by some number of bytes
                mov     g2, r15         # move the old stack pointer to r15
                mov     r14, g0         # save r14 to g0 (or arg0)
                call    sub_4ED40       # call
                mov     r15, sp         # restore the stack pointer from r15 to sp
                bx      (g2)            # g2 may be a function pointer
# End of function sub_4ED24
# =============== S U B R O U T I N E =======================================
sub_4ED40:                              # CODE XREF: sub_4ED24+10↑p
                mov     g0, r10
                mov     g1, r11
                mov     g2, r9
                addo    0x1F, 6, r6
loc_4ED50:                              # CODE XREF: sub_4ED40+24↓j
                ldob    (r10), r3
                addo    1, r10, r10
                cmpobe  r3, r6, loc_4ED84
                stob    r3, (g1)
                addo    1, g1, g1
                cmpobne 0, r3, loc_4ED50
                and     r10, 3, r15
                subo    r15, 4, r15
                and     3, r15, r15
                addo    r15, r10, r10
                mov     r10, g2
                mov     r11, g0
                ret
# ---------------------------------------------------------------------------
loc_4ED84:                              # CODE XREF: sub_4ED40+18↑j
                mov     g1, r5
                mov     r10, g1
                mov     0, g2
                ldob    (g1), r3
                addo    0x1F, 0x11, r13
                cmpobne r13, r3, loc_4EDA4
                addo    1, g1, g1
                shlo    0x18, r3, g2
loc_4EDA4:                              # CODE XREF: sub_4ED40+58↑j
                call    sub_4F344
                bbc     0x1F, g0, loc_4EDB0
                mov     0, g0
loc_4EDB0:                              # CODE XREF: sub_4ED40+68↑j
                or      g0, g2, g2
                ldob    (g1), r3
                addo    0x1F, 0xF, r13
                cmpobne r13, r3, loc_4EDD8
                addo    1, g1, g1
                call    sub_4F344
                bbc     0x1F, g0, loc_4EDD0
                mov     0, g0
loc_4EDD0:                              # CODE XREF: sub_4ED40+88↑j
                shlo    8, g0, g0
                or      g0, g2, g2
loc_4EDD8:                              # CODE XREF: sub_4ED40+7C↑j
                mov     g1, r10
                mov     r5, g1
                ldob    (r10), r3
                addo    1, r10, r10
                ld      (r9), g0
                addo    4, r9, r9
                shlo    2, 0x19, r13
                cmpobe  r13, r3, loc_4EE14
                shlo    3, 0xF, r13
                cmpobe  r13, r3, loc_4EE1C
                lda     0x66, r13
                cmpobe  r13, r3, loc_4EE24
                lda     0x73, r13
                cmpobe  r13, r3, loc_4EE2C
                b       loc_4ED50
# ---------------------------------------------------------------------------
loc_4EE14:                              # CODE XREF: sub_4ED40+B4↑j
                call    sub_4EE34
                b       loc_4ED50
# ---------------------------------------------------------------------------
loc_4EE1C:                              # CODE XREF: sub_4ED40+BC↑j
                call    sub_4EF24
                b       loc_4ED50
# ---------------------------------------------------------------------------
loc_4EE24:                              # CODE XREF: sub_4ED40+C4↑j
                call    sub_4EFAC
                b       loc_4ED50
# ---------------------------------------------------------------------------
loc_4EE2C:                              # CODE XREF: sub_4ED40+CC↑j
                call    sub_4F054
                b       loc_4ED50
# End of function sub_4ED40
# =============== S U B R O U T I N E =======================================
sub_4EE34:                              # CODE XREF: sub_4ED40:loc_4EE14↑p
                and     0x1F, g2, r11
                cmpobe  0, r11, loc_4EEB4
                shro    0x18, g2, r10
                cmpobne 0, r10, loc_4EE48
                addo    0x1F, 1, r10
loc_4EE48:                              # CODE XREF: sub_4EE34+C↑j
                mov     g0, r6
                mov     g1, r9
                mov     g1, g0
                lda     (g1)[r11], g1
                mov     0, r3
                stob    r3, (g1)
                subo    1, r11, r11
                cmpible 0, r6, loc_4EE7C
                subi    r6, 0, r6
                addo    0x1F, 0xE, r3
                stob    r3, (r9)
                addo    1, r9, r9
                subo    1, r11, r11
loc_4EE7C:                              # CODE XREF: sub_4EE34+30↑j
                addo    0x1F, 0x11, r5
loc_4EE80:                              # CODE XREF: sub_4EE34+68↓j
                mov     0, r7
                ediv    0xA, r6, r6
                addo    r5, r6, r6
                stob    r6, (r9)[r11]
                cmpobe  0, r7, loc_4EEA8
                mov     r7, r6
                cmpdeci 0, r11, r11
                bl      loc_4EE80
                ret
# ---------------------------------------------------------------------------
loc_4EEA4:                              # CODE XREF: sub_4EE34+78↓j
                stob    r10, (r9)[r11]
loc_4EEA8:                              # CODE XREF: sub_4EE34+5C↑j
                cmpdeci 0, r11, r11
                bl      loc_4EEA4
                ret
# ---------------------------------------------------------------------------
loc_4EEB4:                              # CODE XREF: ROM:0004DEF0↑p
                mov     g0, r6
                lda     0x505000, r9
                cmpible 0, r6, loc_4EEC8
                subi    r6, 0, r6
loc_4EEC8:                              # CODE XREF: sub_4EE34+8C↑j
                addo    0x1F, 0x11, r5
                subo    1, 0, r11
loc_4EED0:                              # CODE XREF: sub_4EE34+B4↓j
                mov     0, r7
                ediv    0xA, r6, r6
                addo    1, r11, r11
                addo    r5, r6, r6
                stob    r6, (r9)[r11]
                mov     r7, r6
                cmpobne 0, r6, loc_4EED0
                cmpible 0, g0, loc_4EEFC
                addo    1, r11, r11
                addo    0x1F, 0xE, r3
                stob    r3, (r9)[r11]
loc_4EEFC:                              # CODE XREF: sub_4EE34+B8↑j
                mov     g1, g0
loc_4EF00:                              # CODE XREF: sub_4EE34+DC↓j
                ldob    (r9)[r11], r3
                stob    r3, (g1)
                addo    1, g1, g1
                cmpdeci 0, r11, r11
                bl      loc_4EF00
                mov     0, r3
                stob    r3, (g1)
                ret
# End of function sub_4EE34
# ---------------------------------------------------------------------------
                mov     0, g2
# =============== S U B R O U T I N E =======================================
sub_4EF24:                              # CODE XREF: ROM:00041094↑p
                and     0x1F, g2, r11
                cmpobne 0, r11, loc_4EF3C
                scanbit g0, r3
                bno     loc_4EF38
                shro    2, r3, r11
loc_4EF38:                              # CODE XREF: sub_4EF24+C↑j
                addo    1, r11, r11
loc_4EF3C:                              # CODE XREF: sub_4EF24+4↑j
                shro    0x18, g2, r10
                cmpobne 0, r10, loc_4EF48
                addo    0x1F, 1, r10
loc_4EF48:                              # CODE XREF: sub_4EF24+1C↑j
                mov     g0, r6
                mov     g1, r9
                mov     g1, g0
                lda     (g1)[r11], g1
                mov     0, r3
                stob    r3, (g1)
                subo    1, r11, r11
                addo    0x1F, 0x11, r5
loc_4EF68:                              # CODE XREF: sub_4EF24+60↓j
                and     0xF, r6, r3
                ldob    a0123456789abcd(r3), r4 # "0123456789ABCDEF"
                stob    r4, (r9)[r11]
                shro    4, r6, r6
                cmpobe  0, r6, loc_4EF90
                cmpdeci 0, r11, r11
                bl      loc_4EF68
                ret
# ---------------------------------------------------------------------------
loc_4EF8C:                              # CODE XREF: sub_4EF24+70↓j
                stob    r10, (r9)[r11]
loc_4EF90:                              # CODE XREF: sub_4EF24+58↑j
                cmpdeci 0, r11, r11
                bl      loc_4EF8C
                ret
# End of function sub_4EF24
# ---------------------------------------------------------------------------
a0123456789abcd:.ascii "0123456789ABCDEF" # DATA XREF: sub_4EF24+48↑r
# =============== S U B R O U T I N E =======================================
sub_4EFAC:                              # CODE XREF: sub_4ED40:loc_4EE24↑p
                and     0x1F, g2, r11
                shro    8, g2, r8
                and     0x1F, r8, r8
                lda     0xFF000000, r13
                and     r13, g2, r10
                mov     g1, r9
                mov     0xA, r3
                mov     r8, r15
                mov     1, r14
loc_4EFD4:                              # CODE XREF: sub_4EFAC+34↓j
                cmpibge 0, r15, loc_4EFE4
                muli    r3, r14, r14
                subo    1, r15, r15
                b       loc_4EFD4
# ---------------------------------------------------------------------------
loc_4EFE4:                              # CODE XREF: sub_4EFAC:loc_4EFD4↑j
                mov     r14, r5
                cvtir   r5, r3
                mulr    r3, g0, r6
                cvtri   r6, r6
                mov     0, r4
                cmpible 0, r6, loc_4F014
                subi    r6, 0, r6
                addo    0x1F, 0xE, r4
                stob    r4, (g1)
                addo    1, g1, g1
                cmpobe  0, r11, loc_4F014
                subo    1, r11, r11
loc_4F014:                              # CODE XREF: sub_4EFAC+4C↑j
                mov     0, r7
                ediv    r5, r6, r6
                mov     r7, g0
                mov     r11, g2
                or      r10, g2, g2
                call    sub_4EE34
                addo    0x1F, 0xF, r3
                stob    r3, (g1)
                addo    1, g1, g1
                mov     r6, g0
                mov     r8, g2
                shlo    0x1C, 3, r13
                or      r13, g2, g2
                call    sub_4EE34
                mov     r9, g0
                ret
# End of function sub_4EFAC
# =============== S U B R O U T I N E =======================================
sub_4F054:                              # CODE XREF: sub_4EA20+E4↑p
                and     0x1F, g2, r11
                shro    0x18, g2, r10
                cmpobne 0, r10, loc_4F064
                addo    0x1F, 1, r10
loc_4F064:                              # CODE XREF: sub_4F054+8↑j
                mov     0, r7
loc_4F068:                              # CODE XREF: sub_4F054+24↓j
                ldob    (g0)[r7], r3    # String 0x941AA "ec_ifb_emode" gets read here
                cmpobe  0, r3, loc_4F084
                stob    r3, (g1)[r7]
                addo    1, r7, r7
                cmpobe  0, r11, loc_4F068
                cmpibl  r7, r11, loc_4F068
                b       loc_4F094
# ---------------------------------------------------------------------------
loc_4F084:                              # CODE XREF: sub_4F054+18↑j
                cmpobe  0, r11, loc_4F094
loc_4F088:                              # CODE XREF: sub_4F054+3C↓j
                stob    r10, (g1)[r7]
                addo    1, r7, r7
                cmpibl  r7, r11, loc_4F088
loc_4F094:                              # CODE XREF: sub_4F054+2C↑j
                mov     g1, g0
                lda     (g1)[r7], g1
                mov     0, r3
                stob    r3, (g1)
                ret
# End of function sub_4F054
# ---------------------------------------------------------------------------
byte_4F0A8:     .byte 0                 # DATA XREF: sub_4E3C4+24↑r
                .byte 0x80
                .byte 0x40
                .byte 0xC0
                .byte 0x20
                .byte 0xA0
                .byte 0x60
                .byte 0xE0
                .byte 0x10
                .byte 0x90
                .byte 0x50
                .byte 0xD0
                .byte 0x30
                .byte 0xB0
                .byte 0x70
                .byte 0xF0
                .byte 8
                .byte 0x88
                .byte 0x48
                .byte 0xC8
                .byte 0x28
                .byte 0xA8
                .byte 0x68
                .byte 0xE8
                .byte 0x18
                .byte 0x98
                .byte 0x58
                .byte 0xD8
                .byte 0x38
                .byte 0xB8
                .byte 0x78
                .byte 0xF8
                .byte 4
                .byte 0x84
                .byte 0x44
                .byte 0xC4
                .byte 0x24
                .byte 0xA4
                .byte 0x64
                .byte 0xE4
                .byte 0x14
                .byte 0x94
                .byte 0x54
                .byte 0xD4
                .byte 0x34
                .byte 0xB4
                .byte 0x74
                .byte 0xF4
                .byte 0xC
                .byte 0x8C
                .byte 0x4C
                .byte 0xCC
                .byte 0x2C
                .byte 0xAC
                .byte 0x6C
                .byte 0xEC
                .byte 0x1C
                .byte 0x9C
                .byte 0x5C
                .byte 0xDC
                .byte 0x3C
                .byte 0xBC
                .byte 0x7C
                .byte 0xFC
                .byte 2
                .byte 0x82
                .byte 0x42
                .byte 0xC2
                .byte 0x22
                .byte 0xA2
                .byte 0x62
                .byte 0xE2
                .byte 0x12
                .byte 0x92
                .byte 0x52
                .byte 0xD2
                .byte 0x32
                .byte 0xB2
                .byte 0x72
                .byte 0xF2
                .byte 0xA
                .byte 0x8A
                .byte 0x4A
                .byte 0xCA
                .byte 0x2A
                .byte 0xAA
                .byte 0x6A
                .byte 0xEA
                .byte 0x1A
                .byte 0x9A
                .byte 0x5A
                .byte 0xDA
                .byte 0x3A
                .byte 0xBA
                .byte 0x7A
                .byte 0xFA
                .byte 6
                .byte 0x86
                .byte 0x46
                .byte 0xC6
                .byte 0x26
                .byte 0xA6
                .byte 0x66
                .byte 0xE6
                .byte 0x16
                .byte 0x96
                .byte 0x56
                .byte 0xD6
                .byte 0x36
                .byte 0xB6
                .byte 0x76
                .byte 0xF6
                .byte 0xE
                .byte 0x8E
                .byte 0x4E
                .byte 0xCE
                .byte 0x2E
                .byte 0xAE
                .byte 0x6E
                .byte 0xEE
                .byte 0x1E
                .byte 0x9E
                .byte 0x5E
                .byte 0xDE
                .byte 0x3E
                .byte 0xBE
                .byte 0x7E
                .byte 0xFE
                .byte 1
                .byte 0x81
                .byte 0x41
                .byte 0xC1
                .byte 0x21
                .byte 0xA1
                .byte 0x61
                .byte 0xE1
                .byte 0x11
                .byte 0x91
                .byte 0x51
                .byte 0xD1
                .byte 0x31
                .byte 0xB1
                .byte 0x71
                .byte 0xF1
                .byte 9
                .byte 0x89
                .byte 0x49
                .byte 0xC9
                .byte 0x29
                .byte 0xA9
                .byte 0x69
                .byte 0xE9
                .byte 0x19
                .byte 0x99
                .byte 0x59
                .byte 0xD9
                .byte 0x39
                .byte 0xB9
                .byte 0x79
                .byte 0xF9
                .byte 5
                .byte 0x85
                .byte 0x45
                .byte 0xC5
                .byte 0x25
                .byte 0xA5
                .byte 0x65
                .byte 0xE5
                .byte 0x15
                .byte 0x95
                .byte 0x55
                .byte 0xD5
                .byte 0x35
                .byte 0xB5
                .byte 0x75
                .byte 0xF5
                .byte 0xD
                .byte 0x8D
                .byte 0x4D
                .byte 0xCD
                .byte 0x2D
                .byte 0xAD
                .byte 0x6D
                .byte 0xED
                .byte 0x1D
                .byte 0x9D
                .byte 0x5D
                .byte 0xDD
                .byte 0x3D
                .byte 0xBD
                .byte 0x7D
                .byte 0xFD
                .byte 3
                .byte 0x83
                .byte 0x43
                .byte 0xC3
                .byte 0x23
                .byte 0xA3
                .byte 0x63
                .byte 0xE3
                .byte 0x13
                .byte 0x93
                .byte 0x53
                .byte 0xD3
                .byte 0x33
                .byte 0xB3
                .byte 0x73
                .byte 0xF3
                .byte 0xB
                .byte 0x8B
                .byte 0x4B
                .byte 0xCB
                .byte 0x2B
                .byte 0xAB
                .byte 0x6B
                .byte 0xEB
                .byte 0x1B
                .byte 0x9B
                .byte 0x5B
                .byte 0xDB
                .byte 0x3B
                .byte 0xBB
                .byte 0x7B
                .byte 0xFB
                .byte 7
                .byte 0x87
                .byte 0x47
                .byte 0xC7
                .byte 0x27
                .byte 0xA7
                .byte 0x67
                .byte 0xE7
                .byte 0x17
                .byte 0x97
                .byte 0x57
                .byte 0xD7
                .byte 0x37
                .byte 0xB7
                .byte 0x77
                .byte 0xF7
                .byte 0xF
                .byte 0x8F
                .byte 0x4F
                .byte 0xCF
                .byte 0x2F
                .byte 0xAF
                .byte 0x6F
                .byte 0xEF
                .byte 0x1F
                .byte 0x9F
                .byte 0x5F
                .byte 0xDF
                .byte 0x3F
                .byte 0xBF
                .byte 0x7F
                .byte 0xFF
byte_4F1A8:     .byte 0                 # DATA XREF: debug_window_setup+154↑r
                .byte 1
                .byte 1
                .byte 2
                .byte 1
                .byte 2
                .byte 2
                .byte 3
                .byte 1
                .byte 2
                .byte 2
                .byte 3
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 1
                .byte 2
                .byte 2
                .byte 3
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 1
                .byte 2
                .byte 2
                .byte 3
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 1
                .byte 2
                .byte 2
                .byte 3
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 5
                .byte 6
                .byte 6
                .byte 7
                .byte 1
                .byte 2
                .byte 2
                .byte 3
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 5
                .byte 6
                .byte 6
                .byte 7
                .byte 2
                .byte 3
                .byte 3
                .byte 4
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 5
                .byte 6
                .byte 6
                .byte 7
                .byte 3
                .byte 4
                .byte 4
                .byte 5
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 5
                .byte 6
                .byte 6
                .byte 7
                .byte 4
                .byte 5
                .byte 5
                .byte 6
                .byte 5
                .byte 6
                .byte 6
                .byte 7
                .byte 5
                .byte 6
                .byte 6
                .byte 7
                .byte 6
                .byte 7
                .byte 7
                .byte 8
# ---------------------------------------------------------------------------
loc_4F2A8:                              # DATA XREF: sub_4EA20+D0↑r
                ld      (g1), g0        # Interesting array of callx routines to read/set globals
                ret
# ---------------------------------------------------------------------------
                ldob    (g1), g0
                ret
# ---------------------------------------------------------------------------
                ldos    (g1), g0
                ret
# ---------------------------------------------------------------------------
                ld      (g1), g0
                ret
# ---------------------------------------------------------------------------
                ld      (g1), g0
                ret
# ---------------------------------------------------------------------------
                ldib    (g1), g0
                ret
# ---------------------------------------------------------------------------
                ldis    (g1), g0
                ret
# ---------------------------------------------------------------------------
                ld      (g1), g0
                ret
# ---------------------------------------------------------------------------
                ld      (g1), g0
                ret
# ---------------------------------------------------------------------------
                mov     g1, g0
                ret
# ---------------------------------------------------------------------------
                st      g0, (g1)
                ret
# ---------------------------------------------------------------------------
                stob    g0, (g1)
                ret
# ---------------------------------------------------------------------------
                stos    g0, (g1)
                ret
# ---------------------------------------------------------------------------
                st      g0, (g1)
                ret
# ---------------------------------------------------------------------------
                st      g0, (g1)
                ret
# ---------------------------------------------------------------------------
                stib    g0, (g1)
                ret
# ---------------------------------------------------------------------------
                stis    g0, (g1)
                ret
# ---------------------------------------------------------------------------
                st      g0, (g1)
                ret
# ---------------------------------------------------------------------------
off_4F338:      .long sub_4EE34         # DATA XREF: sub_4EA20+A0↑r
                .long sub_4EF24
                .long sub_4EFAC
# =============== S U B R O U T I N E =======================================
sub_4F344:                              # CODE XREF: sub_4ED40:loc_4EDA4↑p
                mov     g1, r11
                addo    0x1F, 0x11, r9
                mov     0, g0
loc_4F350:                              # CODE XREF: sub_4F344+28↓j
                ldob    (g1), r3
                dmovt   r3, r3          # ewwww, move and test decimal... good ol' BCD...
                bo      loc_4F370
                mulo    0xA, g0, g0
                subo    r9, r3, r3
                addo    r3, g0, g0
                addo    1, g1, g1
                b       loc_4F350
# ---------------------------------------------------------------------------
loc_4F370:                              # CODE XREF: sub_4F344+14↑j
                cmpobne g1, r11, loc_4F378
                subo    1, 0, g0
loc_4F378:                              # CODE XREF: sub_4F344:loc_4F370↑j
                ret
# End of function sub_4F344
# ---------------------------------------------------------------------------
a1234567890:    .asciz "1234567890"
short_30:       .short 30               # DATA XREF: ROM:0004E9A4↑o
short_31:       .short 31               # DATA XREF: ROM:0004E9C8↑o
short_32:       .short 32               # DATA XREF: ROM:0004E998↑o
byte_4F38D:     .fill 3, 1, 0           # DATA XREF: ROM:0004DFD8↑o
# ---------------------------------------------------------------------------
fa_sampling:                            # DATA XREF: ROM:0008EFDC↓o
                ret
# =============== S U B R O U T I N E =======================================
name_init:                              # CODE XREF: ROM:00010848↑p
                lda     0x202020, r15 # Label from official source
                st      r15, name_entry_related
                mov     0, r15
                stib    r15, 0x50007E
                mov     2, r15
                stib    r15, 0x50007F
                mov     0, r15
                stib    r15, 0x500081
                ld      0x500070, r7
                mov     0xE, r8
                stib    r8, 0x500080
                muli    0x10, r8, r15
                lda     RANKING_DATA(r15), g4
                ldob    gameprogram, r3 # bit 0 clear = Player 1
                ld      fa_rob0[r3*4], g7
                ldob    0x1B1(g7), r3
                ldob    byte_DC0E4[r3], r3
                and     7, r3, r3
                ldl     BEST_TIME_EACH_CHAR[r3*8], r4
                cmpobg  r7, r4, e_c_ex
                stob    r3, scroll_stage_num+1
                st      r7, BEST_TIME_EACH_CHAR[r3*8]
                mov     9, r15
                stib    r15, 0x500081
                addo    0x1F, 0xD, g1
                stob    g1, 0x500095
e_c_ex:                                 # CODE XREF: name_init+7C↑j
                ld      0x0(g4), r3     # Label from Fighting Vipers source
                cmpobge r7, r3, loc_4F528
                ldob    0x500081, r15
                setbit  0, r15, r15
                stob    r15, 0x500081
loc_4F458:                              # CODE XREF: name_init+E4↓j
                mov     g4, g5
                lda     -0x10(g4), g4
                ld      0x0(g4), r3
                cmpobge r7, r3, loc_4F480
                ldq     (g4), r12
                stq     r12, (g5)
                subi    1, r8, r8
                cmpibl  0, r8, loc_4F458
                mov     g4, g5
loc_4F480:                              # CODE XREF: name_init+D4↑j
                stib    r8, 0x500080
                st      r7, 0x0(g5)
                ldis    0x50006E, r15
                stis    r15, 8(g5)
                ldob    0x50008D, r4
                ldob    0x50008E, r5
                cmpobe  0, r4, loc_4F4BC
                lda     (r5)[r5*4], r5
                lda     (r5)[r5*4], r5
                shlo    2, r5, r5
                divo    r4, r5, r4
loc_4F4BC:                              # CODE XREF: name_init+114↑j
                stob    r4, 0xB(g5)
                lda     0x202020, r15
                st      r15, 4(g5)
                ldob    gameprogram, r3 # bit 0 clear = Player 1
                ld      fa_rob0[r3*4], g7
                ldob    0x1B1(g7), r3
                ldob    byte_DC0E4[r3], r3
                stob    r3, 0xA(g5)
                ld      0x1230(g7), r4
                ld      0x1234(g7), r5
                cmpobe  0, r4, loc_4F510
                lda     (r5)[r5*4], r5
                lda     (r5)[r5*4], r5
                shlo    2, r5, r5
                divo    r4, r5, r4
loc_4F510:                              # CODE XREF: name_init+168↑j
                stob    r4, 0xC(g5)
                mov     r8, g0
                addo    0x1F, 0xD, g1
                stob    g1, 0x500095
                call    sub_50A48
loc_4F528:                              # CODE XREF: name_init+AC↑j
                ret
# End of function name_init
# =============== S U B R O U T I N E =======================================
nameentry_init:                         # DATA XREF: ROM:00010908↑o
                lda     0xAE1015, g0    # Label from official source
                call    sound_request_u
                mov     4, g0
                call    _Scroll_Initialize
                lda     floats_1_to_9, r14
                lda     0x40(g13), r13
                mov     9, r12
loc_4F550:                              # CODE XREF: nameentry_init+38↓j
                ld      (r14), r15
                st      r15, (r13)
                addo    4, r14, r14
                addo    4, r13, r13
                cmpdeco 1, r12, r12
                bl      loc_4F550
                mov     0, r15
                stis    r15, 0x80(g13)
                ld      fa_camera, r3
                lda     displacement, r15
                stib    r15, 0x40(r3)
                mov     0, r15
                st      r15, 0x84(g13)
                mov     0, r15
                st      r15, 0x88(g13)
                mov     0, r15
                st      r15, 0x8C(g13)
                mov     0, r15
                st      r15, 0x90(g13)
                mov     0, r15
                st      r15, 0x94(g13)
                lda     0xFE00, r15
                stis    r15, VECTER_Y
                lda     loc_E100, r15
                stis    r15, VECTER_X
                lda     displacement, r15
                st      r15, 0xA0(g13)
                lda     0x3F800000, r15
                st      r15, 0xA4(g13)
                lda     displacement, r15
                st      r15, 0xA8(g13)
                lda     0x3EA3D70A, r15
                st      r15, 0xAC(g13)
                lda     0xBF6B851F, r15
                st      r15, 0xB0(g13)
                lda     0x3FEF5C29, r15
                st      r15, 0xB4(g13)
                mov     0, r15
                stis    r15, 0x98(g13)
                lda     displacement, r15
                st      r15, 0xB8(g13)
                lda     0x3F800000, r15
                st      r15, 0xBC(g13)
                lda     displacement, r15
                st      r15, 0xC0(g13)
                lda     0x3F570A3D, r15
                st      r15, 0xC4(g13)
                lda     0xBF6B851F, r15
                st      r15, 0xC8(g13)
                lda     0x3FEF5C29, r15
                st      r15, 0xCC(g13)
                mov     0, r15
                stis    r15, 0x9A(g13)
                lda     displacement, r15
                st      r15, 0xD0(g13)
                lda     0x3F800000, r15
                st      r15, 0xD4(g13)
                lda     displacement, r15
                st      r15, 0xD8(g13)
                lda     0x3FAE147B, r15
                st      r15, 0xDC(g13)
                lda     0xBF6B851F, r15
                st      r15, 0xE0(g13)
                lda     0x3FEF5C29, r15
                st      r15, 0xE4(g13)
                mov     0, r15
                stis    r15, 0x9C(g13)
                lda     0x3F8CCCCD, r15
                st      r15, 0xE8(g13)
                lda     0xC0451EB8, r15
                st      r15, 0xEC(g13)
                lda     0x40A51EB8, r15
                st      r15, 0xF0(g13)
                lda     0x4021EB85, r15
                st      r15, 0xF4(g13)
                lda     0xC0451EB8, r15
                st      r15, 0xF8(g13)
                lda     0x40A51EB8, r15
                st      r15, 0xFC(g13)
                lda     0x407EB852, r15
                st      r15, 0x100(g13)
                lda     0xC0451EB8, r15
                st      r15, 0x104(g13)
                lda     0x40A51EB8, r15
                st      r15, 0x108(g13)
                lda     name_entry, r15
                st      r15, 0xC(g13)
                ret
# End of function nameentry_init
# =============== S U B R O U T I N E =======================================
name_entry:                             # DATA XREF: nameentry_init+1FC↑o
                ld      debug_flag, r15 # Label from official source
                bbs     5, r15, loc_4F8D0
                ld      fa_camera, r3
                lda     displacement, r15
                stib    r15, 0x40(r3)
                call    sub_4FBDC
                ldos    frame_counter, r3
                shro    3, r3, r3
                and     1, r3, r3
                cmpobe  0, r3, _nega
_posi:                                  # Label from Fighting Vipers source (code differs slightly)
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3352(r3), r3
                cmpobne 0, r3, loc_4F790
                lda     0x1000094, g9
                b       loc_4F798
# ---------------------------------------------------------------------------
loc_4F790:                              # CODE XREF: name_entry+48↑j
                lda     0x100008C, g9
loc_4F798:                              # CODE XREF: name_entry+54↑j
                b       _nega_posi_ex
# ---------------------------------------------------------------------------
_nega:                                  # CODE XREF: name_entry+34↑j
                ld      add_BACKUP_RAM_TO_RAM, r3 # Label from Fighting Vipers source
                ldob    0x3352(r3), r3
                cmpobne 0, r3, loc_4F7BC
                lda     0x1000094, g9
                b       _nega_posi_ex
# ---------------------------------------------------------------------------
loc_4F7BC:                              # CODE XREF: name_entry+74↑j
                lda     0x100008C, g9
_nega_posi_ex:                          # CODE XREF: name_entry:loc_4F798↑j
                ldob    0x50007F, g4 # Label from Fighting Vipers source
                ldob    0x50007E, g5
                ldos    0x50B00E, g6
                call    name_time_disp
                ld      CTRL_TIMER, r3
                cmpibg  0, r3, ne_entry
                mov     g4, r9
                call    name_entry_input
                cmpobe  0, g0, loc_4F8A8
                mov     0, g6
                cmpobe  0, g4, loc_4F870
                cmpobe  1, g4, loc_4F89C
                cmpobe  3, g5, loc_4F8A8
                ldob    Alphabet[g4], g0
                stob    g0, name_entry_related(g5)
                lda     0x84(g13), r13
                mulo    0x18, g4, r14
                ld      NameEntryInputModelList(r14), r14
                st      r14, (r13)[g5*4]
                ld      fa_rob1, r3
                ldob    0x1B1(r3), r4
                ld      float_9_86_per_character[r4*4], r4 # float 9.8607989e-32 (per character)
                st      r4, 0x198(r3)
                ld      fa_rob0, r3
                ldob    0x1B1(r3), r4
                ld      float_3_94_per_character[r4*4], r4 # float 3.94432e-31 (per character)
                st      r4, 0x198(r3)
                call    sub_4FBB4
                addo    1, g5, g5
                cmpobne 3, g5, loc_4F8B0
                mov     1, g4
                b       loc_4F8B0
# ---------------------------------------------------------------------------
loc_4F870:                              # CODE XREF: name_entry+C4↑j
                cmpobe  0, g5, loc_4F8A8
                addo    0x1F, 1, g0
                call    sub_4FBB4
                subo    1, g5, g5
                addo    0x1F, 1, r3
                stob    r3, 0x500078(g5)
                lda     0x84(g13), r13
                mov     0, r15
                st      r15, (r13)[g5*4]
                b       loc_4F8B0
# ---------------------------------------------------------------------------
loc_4F89C:                              # CODE XREF: name_entry+C8↑j
                addo    0x1F, 1, g0
                call    sub_4FBB4
                b       ne_entry
# ---------------------------------------------------------------------------
loc_4F8A8:                              # CODE XREF: name_entry+BC↑j
                cmpobe  r9, g4, loc_4F8B0
                mov     0, g6
loc_4F8B0:                              # CODE XREF: name_entry+12C↑j
                call    sub_4FBA0
                addo    1, g6, g6
                stob    g4, 0x50007F
                stob    g5, 0x50007E
                stos    g6, 0x50B00E
loc_4F8D0:                              # CODE XREF: name_entry+8↑j
                ret
# ---------------------------------------------------------------------------
ne_entry:                               # CODE XREF: name_entry+B0↑j
                ldis    val_1p_energy_max, r15 # Label from official source
                stis    r15, energy_max
                lda     0x1000270, g9
                mov     4, g0
                mov     3, g1
                call    clr_pattern_s
                call    illegal_name_check
                ldob    0x500081, r3
                bbc     3, r3, ne_ex
                ld      name_entry_related, r10
                ldob    scroll_stage_num+1, r3
                st      r10, aIku_1[r3*8] # "IKU"
ne_ex:                                  # CODE XREF: name_entry+1CC↑j
                ldib    0x500080, r9 # Label from Sonic the Fighters
                muli    0x10, r9, r9
                ld      name_entry_related, r10
                st      r10, aKat_0(r9) # "KAT"
                mov     0, r15
                stib    r15, 0x50007E
                lda     0x1000000, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                lda     0x10000A0, g9
                lda     77, g0          # RANKING texture
                call    dsp_pattern_new
                call    _uk_draw_challenger_comes
                mov     5, r3
                ldob    0x500080, r8
                divo    r3, r8, r4
                stob    r4, 0x500094
                call    rank_cont
                remo    r3, r8, r5
                shlo    2, r5, r6
                addo    0x11, r6, r6
                stob    r6, 0x500084
                shlo    6, 5, r15
                st      r15, CTRL_TIMER
                mov     0, r15
                setbit  1, r15, r15
                stob    r15, 0x500081
                ld      fa_camera, r3
                ld      0x0(r3), r15
                clrbit  7, r15, r15
                st      r15, 0x0(r3)
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                lda     0x1001400, g9
                shlo    6, 1, g0
                mov     8, g1
                call    clr_pattern_s
                ret
# End of function name_entry
# =============== S U B R O U T I N E =======================================
name_entry_rankdisp:                    # CODE XREF: ROM:00010C90↑p
                ldob    0x500081, r3 # Label from official source
                bbs     3, r3, each_char_top_disp
                ldob    0x500080, r8
                ldob    0x500084, r6
                ldos    frame_counter, r3
                cmpobl  0xF, r8, each_char_top_disp
                shro    3, r3, r3
                and     1, r3, r3
                cmpobe  0, r3, loc_4FA48
                lda     0x1000008, g9
                shlo    7, r6, r15
                addo    r15, g9, g9
                addo    0x1F, 0x1F, g0
                mov     3, g1
                call    clr_pattern_s
                b       loc_4FA54
# ---------------------------------------------------------------------------
loc_4FA48:                              # CODE XREF: name_entry_rankdisp+30↑j
                mov     r8, g0
                mov     r6, g1
                call    sub_50A48
loc_4FA54:                              # CODE XREF: name_entry_rankdisp+50↑j
                ld      CTRL_TIMER, r3
                cmpible 0, r3, loc_4FA80
                mov     r8, g0
                mov     r6, g1
                call    sub_50A48
                ldob    0x500081, r14
                setbit  2, r14, r15
                stob    r15, 0x500081
loc_4FA80:                              # CODE XREF: name_entry_rankdisp+68↑j
                ret
# ---------------------------------------------------------------------------
each_char_top_disp:                     # CODE XREF: name_entry_rankdisp+8↑j
                ldob    0x500081, r14 # Label from official source
                setbit  2, r14, r15
                stob    r15, 0x500081
                ret
# End of function name_entry_rankdisp
# =============== S U B R O U T I N E =======================================
illegal_name_check:                     # CODE XREF: name_entry+1C0↑p
                ld      name_entry_related, r3 # Label from official source
                mov     7, r4
loc_4FAA8:                              # CODE XREF: illegal_name_check+2C↓j
                ld      illegal_names[r4*4], r5
                ld      (r5), r5
                ld      illegal_names_replacement[r4*4], r6
                ld      (r6), r6
                cmpobe  r3, r5, loc_4FAD0
                cmpdeci 0, r4, r4
                bl      loc_4FAA8
                b       loc_4FAD8
# ---------------------------------------------------------------------------
loc_4FAD0:                              # CODE XREF: illegal_name_check+24↑j
                st      r6, name_entry_related
loc_4FAD8:                              # CODE XREF: illegal_name_check+30↑j
                ret
# End of function illegal_name_check
# =============== S U B R O U T I N E =======================================
name_entry_input:                       # CODE XREF: name_entry+B8↑p
                mov     8, r11          # Label from official source
                ldob    gameprogram, r14 # bit 0 clear = Player 1
                cmpobe  0, r14, ne_start
                mov     16, r11
ne_start:                               # CODE XREF: name_entry_input+C↑j
                ld      INTERUPT_FLAGS_MOMENTARY, r3 # Label from official source
                ld      INTERUPT_FLAGS_HELD, r4
                addi    7, r11, r10
                bbc     r10, r3, loc_4FB14
                mov     0, r15
                st      r15, 0x94(g13)
                subi    1, g4, g4
loc_4FB14:                              # CODE XREF: name_entry_input+28↑j
                addi    6, r11, r10
                bbc     r10, r3, loc_4FB28
                mov     0, r15
                st      r15, 0x94(g13)
                addi    1, g4, g4
loc_4FB28:                              # CODE XREF: name_entry_input+3C↑j
                mov     0x1F, r4
                cmpobne 3, g5, loc_4FB34
                mov     1, r4
loc_4FB34:                              # CODE XREF: name_entry_input+50↑j
                and     r4, g4, g4
ne_shot_chk:                            # Label from official source
                mov     0, g0
                addi    0, r11, r10
                bbc     r10, r3, loc_4FB50
                mov     0, r15
                st      r15, 0x94(g13)
                mov     1, g0
loc_4FB50:                              # CODE XREF: name_entry_input+64↑j
                ret
# End of function name_entry_input
# =============== S U B R O U T I N E =======================================
name_time_disp:                         # CODE XREF: name_entry+A4↑p
                ld      CTRL_TIMER, r9  # Label from official source
                cmpibge 0, r9, loc_4FB9C
                shri    6, r9, r9
                lda     0x1000270, g9
                mov     4, g0
                mov     3, g1
                call    clr_pattern_s
                lda     0x1000270, g9
                divo    0xA, r9, g0
                cmpo    0, g0
                call    dsp_num_2x3
                remo    0xA, r9, g0
                lda     0x1000274, g9
                call    dsp_num_2x3
loc_4FB9C:                              # CODE XREF: name_time_disp+8↑j
                ret
# End of function name_time_disp
# =============== S U B R O U T I N E =======================================
sub_4FBA0:                              # CODE XREF: name_entry:loc_4F8B0↑p
                ldob    Alphabet[g4], g0
                cmpobg  16, g6, sub_4FBB4
                bbc     4, g6, sub_4FBB4
                lda     0x5F, g0
# End of function sub_4FBA0
# =============== S U B R O U T I N E =======================================
sub_4FBB4:                              # CODE XREF: name_entry+124↑p
                lda     0x20[g5*2], r4
                ldob    0x500095, r5
                shli    7, r5, g9
                lda     TILE_DATA_START(g9)[r4], g9
                addo    r4, g9, g9
                call    dsp_char_2x3
                ret
# End of function sub_4FBB4
# =============== S U B R O U T I N E =======================================
sub_4FBDC:                              # CODE XREF: name_entry+20↑p
                lda     0x40(g13), r10
                mov     9, r5
loc_4FBE4:                              # CODE XREF: sub_4FBDC+30↓j
                ld      (r10), r3
                lda     0x3E99999A, r13
                subr    r13, r3, r3
                st      r3, (r10)
                bbc     0x1F, r3, loc_4FC04
                mov     0, r3
                st      r3, (r10)
loc_4FC04:                              # CODE XREF: sub_4FBDC+1C↑j
                addo    4, r10, r10
                cmpdeco 1, r5, r5
                bl      loc_4FBE4
                shlo    9, 1, r13
                ldos    0x80(g13), r14
                addi    r13, r14, r15
                stos    r15, 0x80(g13)
                shlo    8, 1, r13
                ldos    0x82(g13), r14
                addi    r13, r14, r15
                stos    r15, 0x82(g13)
                ld      0x94(g13), r14
                addi    1, r14, r15
                st      r15, 0x94(g13)
                shlo    7, 5, r13
                ld      0x94(g13), r14
                cmpobne r13, r14, loc_4FC60
                ld      fa_rob1, r3
                ldob    0x1B1(r3), r4
                ld      CHAR_LOSE_POSES[r4*4], r15
                st      r15, 0x198(r3)
loc_4FC60:                              # CODE XREF: sub_4FBDC+68↑j
                ld      fa_rob0, r3
                lda     0xAE00, r15
                stis    r15, 0x26(r3)
                lda     0x2D805B5B, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(r3), r15
                st      r15, (g11)[g12*1]
                ld      0x80(r3), r15
                st      r15, (g11)[g12*1]
                ld      0x88(r3), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r6
                lda     loc_12E00, r15
                stis    r15, 0x26(r3)
                ld      0x804(r3), r15
                bbs     0x14, r15, loc_4FCC0
                lda     0xAE00, r15
                stis    r15, 0x26(r3)
loc_4FCC0:                              # CODE XREF: sub_4FBDC+D4↑j
                mov     0, r5
                stt     r4, 0x18(r3)
                shlo    2, 0x19, r15
                stis    r15, 0x1AC(r3)
                ld      fa_rob1, r3
                movt    0, r4
                lda     0x40000000, r4
                stt     r4, 0x18(r3)
                shlo    0xE, 1, r15
                stis    r15, 0x26(r3)
                shlo    2, 0x19, r15
                stis    r15, 0x1AC(r3)
                mov     0x1E, r9
                ld      0x84(g13), r14
                cmpobe  0, r14, loc_4FD54
                ldos    0x98(g13), r14
                cmpoble r9, r14, loc_4FD18
                ldos    0x98(g13), r14
                addi    1, r14, r15
                stos    r15, 0x98(g13)
loc_4FD18:                              # CODE XREF: sub_4FBDC+12C↑j
                ld      0x88(g13), r14
                cmpobe  0, r14, loc_4FD5C
                ldos    0x9A(g13), r14
                cmpoble r9, r14, loc_4FD34
                ldos    0x9A(g13), r14
                addi    1, r14, r15
                stos    r15, 0x9A(g13)
loc_4FD34:                              # CODE XREF: sub_4FBDC+148↑j
                ld      0x8C(g13), r14
                cmpobe  0, r14, loc_4FD64
                ldos    0x9C(g13), r14
                cmpoble r9, r14, loc_4FD6C
                ldos    0x9C(g13), r14
                addi    1, r14, r15
                stos    r15, 0x9C(g13)
                b       loc_4FD6C
# ---------------------------------------------------------------------------
loc_4FD54:                              # CODE XREF: sub_4FBDC+124↑j
                mov     0, r15
loc_4FD58:                              # DATA XREF: RAMBASE:0059C190↓o
                stis    r15, 0x98(g13)
loc_4FD5C:                              # CODE XREF: sub_4FBDC+140↑j
                mov     0, r15
                stis    r15, 0x9A(g13)
loc_4FD64:                              # CODE XREF: sub_4FBDC+15C↑j
                mov     0, r15
                stis    r15, 0x9C(g13)
loc_4FD6C:                              # CODE XREF: sub_4FBDC+164↑j
                ret
# End of function sub_4FBDC
# =============== S U B R O U T I N E =======================================
begin_name_entry:                       # CODE XREF: ROM:000222A4↑p
                lda     NameEntry_model_list, r12
                ld      mod_fa_nameentry, r3
                ld      0x0(r3), r15
                bbc     0x1F, r15, loc_50698
                lda     0x40(r3), r7
                ldis    0x80(r3), g6
loc_4FD90:                              # CODE XREF: begin_name_entry+120↓j
                ld      (r12), r3
                subo    1, 0, r13
                cmpobe  r13, r3, loc_4FE94
                ldt     4(r12), r4
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                ld      (r7), r3
                addr    r3, r5, r5
                lda     0x3DCCCCCD, r3
                lda     0x12002424, r15
                st      r15, (g11)[g12*1]
                st      g6, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                addr    r3, r5, r5
                movt    0, r8
                lda     0xBED70A3D, r8
                lda     0xBE2E147B, r9
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                shlo    0xB, 0x1D, r3
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x40000000, r15
                st      r15, (g11)[g12*1]
                lda     0x40000000, r15
                st      r15, (g11)[g12*1]
                lda     0x40000000, r15
                st      r15, (g11)[g12*1]
                ld      (r12), r3
                mov     0, g1
                lda     (r3), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                addi    0x18, r12, r12
                addo    4, r7, r7
                lda     0x1C71, r13
                addi    r13, g6, g6
                b       loc_4FD90
# ---------------------------------------------------------------------------
loc_4FE94:                              # CODE XREF: begin_name_entry+28↑j
                ld      mod_fa_nameentry, r3
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                ldt     0xA0(r3), r4
                ldt     0xAC(r3), r8
                subr    r4, r8, r8
                subr    r5, r9, r9
                subr    r6, r10, r10
                mov     0x1E, r7
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                ldos    0x98(r3), r11
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                divr    r7, r11, r11
                mulr    r11, r8, r8
                mulr    r11, r9, r9
                mulr    r11, r10, r10
                addr    r8, r4, r4
                addr    r9, r5, r5
                addr    r10, r6, r6
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                ld      0x84(r3), r7
                lda     0x802000, g2
                mov     0, g1
                lda     (r7), g0
                call    set_obj_thd
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                ldt     0xB8(r3), r4
                ldt     0xC4(r3), r8
                subr    r4, r8, r8
                subr    r5, r9, r9
                subr    r6, r10, r10
                mov     0x1E, r7
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                ldos    0x9A(r3), r11
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                divr    r7, r11, r11
                mulr    r11, r8, r8
                mulr    r11, r9, r9
                mulr    r11, r10, r10
                addr    r8, r4, r4
                addr    r9, r5, r5
                addr    r10, r6, r6
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                ld      0x88(r3), r7
                lda     0x802000, g2
                mov     0, g1
                lda     (r7), g0
                call    set_obj_thd
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                ldt     0xD0(r3), r4
                ldt     0xDC(r3), r8
                subr    r4, r8, r8
                subr    r5, r9, r9
                subr    r6, r10, r10
                mov     0x1E, r7
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                ldos    0x9C(r3), r11
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                divr    r7, r11, r11
                mulr    r11, r8, r8
                mulr    r11, r9, r9
                mulr    r11, r10, r10
                addr    r8, r4, r4
                addr    r9, r5, r5
                addr    r10, r6, r6
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                ld      0x8C(r3), r7
                lda     0x802000, g2
                mov     0, g1
                lda     (r7), g0
                call    set_obj_thd
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3FCE147B, r8
                lda     0xC070A3D7, r9
                lda     0x40C28F5C, r10
                ldt     0xE8(r3), r8
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    0xE, 1, r4
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                shlo    0xE, 1, r4
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                mov     0, r7
                ldob    0x50007E, r14
                cmpobne 0, r14, loc_50220
                ld      frame_counter, r15
                bbc     0, r15, loc_50220
                lda     GEO_PROGRAM_START, g2
                mov     0, g1
                lda     (r7), g0
                call    set_obj_thd
                b       loc_50234
# ---------------------------------------------------------------------------
loc_50220:                              # CODE XREF: begin_name_entry+488↑j
                lda     0x802000, g2
                mov     0, g1
                lda     (r7), g0
                call    set_obj_thd
loc_50234:                              # CODE XREF: begin_name_entry+4AC↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4037AE14, r8
                lda     0xC070A3D7, r9
                lda     0x40C28F5C, r10
                ldt     0xF4(r3), r8
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    0xE, 1, r4
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                shlo    0xE, 1, r4
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                mov     0, r7
                ldob    0x50007E, r14
                cmpobne 1, r14, loc_50318
                ld      frame_counter, r15
                bbc     0, r15, loc_50318
                lda     0x804000, g2
                mov     0, g1
                lda     (r7), g0
                call    set_obj_thd
                b       loc_5032C
# ---------------------------------------------------------------------------
loc_50318:                              # CODE XREF: begin_name_entry+580↑j
                lda     0x802000, g2
                mov     0, g1
                lda     (r7), g0
                call    set_obj_thd
loc_5032C:                              # CODE XREF: begin_name_entry+5A4↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15
                st      r15, (g11)[g12*1]
                lda     0x4085C28F, r8
                lda     0xC070A3D7, r9
                lda     0x40C28F5C, r10
                ldt     0x100(r3), r8
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                shlo    0xE, 1, r4
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                shlo    0xE, 1, r4
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                mov     0, r7
                ldob    0x50007E, r14
                cmpobne 2, r14, loc_50410
                ld      frame_counter, r15
                bbc     0, r15, loc_50410
                lda     0x804000, g2
loc_50400:                              # DATA XREF: MAIN_DATA:02CD0BF0↓o
                mov     0, g1
                lda     (r7), g0
                call    set_obj_thd
                b       loc_50424
# ---------------------------------------------------------------------------
loc_50410:                              # CODE XREF: begin_name_entry+678↑j
                lda     0x802000, g2
                mov     0, g1
                lda     (r7), g0
                call    set_obj_thd
loc_50424:                              # CODE XREF: begin_name_entry+69C↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_50478
                st      r13, 0x0(r15)
                b       loc_50484
# ---------------------------------------------------------------------------
loc_50478:                              # CODE XREF: begin_name_entry+6FC↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_50484:                              # CODE XREF: begin_name_entry+704↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x430C0000, r15
                st      r15, (g11)[g12*1]
                ldis    0x82(r3), r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                shlo    0xE, 1, r3
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     2, g0           # The blue and yellow checkerboard object
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501864, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_50590
                st      r13, 0x0(r15)
                b       loc_5059C
# ---------------------------------------------------------------------------
loc_50590:                              # CODE XREF: begin_name_entry+814↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_5059C:                              # CODE XREF: begin_name_entry+81C↑j
                ld      fa_rob0, g7
                ldob    0x50007F, r3
                mulo    0x18, r3, r3
                ld      NameEntryInputModelList(r3), r4
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                mov     9, r3
                lda     0x1B803737, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mulo    0xC, r3, r15
                st      r15, (g11)[g12*1]
                shlo    0xE, 3, r3
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, r3
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r15
                st      r15, (g11)[g12*1]
                lda     0x40C00000, r15
                st      r15, (g11)[g12*1]
                lda     0x801000, g2
                mov     0, g1
                lda     (r4), g0
                call    set_obj_thd
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x501864, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
loc_50698:                              # CODE XREF: begin_name_entry+14↑j
                ret
# End of function begin_name_entry
# =============== S U B R O U T I N E =======================================
rank_init:                              # CODE XREF: ROM:0000372C↑p
                lda     RANKING_DATA, r3 # Label from official FV source
                lda     INIT_RANKING_DATA, r4
                mov     0, r5
                mov     0, r6
                mov     0, r8
                mov     0, r10
                mov     0, r14
                lda     511, r15        # Start counter r15 at 511
rank_ram_clear_loop:                    # CODE XREF: rank_init+30↓j
                stob    r14, (r3)[r15]  # Label from official FV source
                cmpdeco 0, r15, r15
                bl      rank_ram_clear_loop
                lda     BEST_TIME_EACH_CHAR, r11
                mov     8, r14
each_char_time_init_lp:                 # CODE XREF: rank_init+58↓j
                subo    1, 0, r12       # Label from official FV source
                lda     0x202020, r13
                stl     r12, (r11)
                addo    8, r11, r11
                cmpdeco 1, r14, r14
                bl      each_char_time_init_lp
rank_init_loop:                         # CODE XREF: rank_init+B4↓j
                muli    0x10, r10, r9   # Label from official FV source
                ld      DEFAULT_RANKING_ENTRIES[r10*4], r11 # "KAT"
                st      r11, 4(r3)[r9*1]
                ld      (r4)[r8*1], r6
                st      r6, displacement(r3)[r9*1]
                ldob    6(r4)[r8], r7
                stob    r7, 0xA(r3)[r9]
                and     7, r7, r7
                ld      BEST_TIME_EACH_CHAR[r7*8], r12
                cmpobge r6, r12, each_top_int_skp
                st      r6, BEST_TIME_EACH_CHAR[r7*8]
                st      r11, aIku_1[r7*8] # "IKU"
each_top_int_skp:                       # CODE XREF: rank_init+98↑j
                cmpinco 0xE, r10, r10   # Label from official FV source
                addo    0xC, r8, r8
                bg      rank_init_loop
                mov     0, r3
                st      r3, 0x1D03A6C
                st      r3, 0x59CA6C
                st      r3, 0x1D03A70
                st      r3, 0x59CA70
                st      r3, 0x1D03A74
                st      r3, 0x59CA74
                ret
# End of function rank_init
# =============== S U B R O U T I N E =======================================
rank_cont:                              # CODE XREF: ADV_CPU_BATTLE_DSP+64↑p
                ld      0x508060, r15 # Label from Fighting Vipers source
                bbc     28, r15, draw_ranking_data # un_alt_ranking_data would go here
                ret
# ---------------------------------------------------------------------------
draw_ranking_data:                      # CODE XREF: rank_cont+8↑j
                lda     0x1000880, g9
                addo    0x1F, 0x1F, g0
                mov     0x13, g1
                call    clr_pattern_s
                mov     5, r3
                mov     r3, r4
                ldob    0x500094, r5
                mulo    r4, r5, r10
loc_507C4:                              # CODE XREF: rank_cont+50↓j
                subo    r3, r4, r8
                shli    2, r8, r8
                addi    0x11, r8, r6
                bal     sub_50A58
                subo    1, r3, r3
                addo    1, r10, r10
                cmpobl  0, r3, loc_507C4
                ret
# End of function rank_cont
# ---------------------------------------------------------------------------
char_vic_rank_cont:                     # Label from Fighting Vipers source
                lda     0x1000700, g9 # unreachable code
                addo    0x1F, 0x1F, g0
                mov     0x17, g1
                call    clr_pattern_s
                mov     8, r3
                mov     r3, r4
                mov     0, r10
loc_50804:                              # CODE XREF: ROM:00050820↓j
                subo    r3, r4, r8
                and     3, r8, r8
                mulo    7, r8, r8
                addi    8, r8, r6
                bal     char_vic_rank_disp_one_line_sub
                subo    1, r3, r3
                addo    1, r10, r10
                cmpobl  0, r3, loc_50804
                ret
# =============== S U B R O U T I N E =======================================
char_vic_rank_disp_one_line_sub:        # CODE XREF: ROM:00050814↑p
                cmpobge 3, r10, loc_50890 # Label from Fighting Vipers source
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldos    0x3A50(r15)[r10*2], r11 # BACKUP_RAM_START+0x3A50
                mov     r11, g0
                addo    3, r6, r5
                lda     0x1000058, g9
                shlo    7, r5, r15
                addo    r15, g9, g9
                call    print_dec_2x3
                lda     aWin, g0        # " WIN"
                cmpobge 1, r11, loc_5086C
                lda     aWins, g0       # " WINS"
loc_5086C:                              # CODE XREF: char_vic_rank_disp_one_line_sub+38↑j
                call    dsp_mes_2x3
                ld      BookkeepingCharList[r10*4], g0
                lda     0x1000044, g9
                shlo    7, r6, r15
                addo    r15, g9, g9
                call    dsp_mes_2x3
                bx      (g14)
# ---------------------------------------------------------------------------
loc_50890:                              # CODE XREF: char_vic_rank_disp_one_line_sub↑j
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldos    0x3A50(r15)[r10*2], r11 # BACKUP_RAM_START+0x3A50
                mov     r11, g0
                addo    3, r6, r5
                lda     0x1000020, g9
                shlo    7, r5, r15
                addo    r15, g9, g9
                call    print_dec_2x3
                lda     aWin, g0        # " WIN"
                cmpobge 1, r11, loc_508D0
                lda     aWins, g0       # " WINS"
loc_508D0:                              # CODE XREF: char_vic_rank_disp_one_line_sub+9C↑j
                call    dsp_mes_2x3
                ld      BookkeepingCharList[r10*4], g0
                lda     0x1000004, g9
                shlo    7, r6, r15
                addo    r15, g9, g9
                call    dsp_mes_2x3
                bx      (g14)
# End of function char_vic_rank_disp_one_line_sub
# =============== S U B R O U T I N E =======================================
char_rank_cont:                         # CODE XREF: ADV_CPU_BATTLE_DSP+F0↑p
                lda     0x1000700, g9   # Label from Fighting Vipers source
                addo    0x1F, 0x1F, g0
                mov     0x17, g1
                call    clr_pattern_s
                mov     8, r3
                mov     r3, r4
loc_50910:                              # DATA XREF: RAMBASE:0059C1A0↓o
                mov     0, r10
loc_50914:                              # CODE XREF: char_rank_cont+3C↓j
                subo    r3, r4, r8
                and     3, r8, r8
                mulo    7, r8, r8
                addi    8, r8, r6
                bal     char_rank_disp_one_line_sub
                subo    1, r3, r3
                addo    1, r10, r10
                cmpobl  0, r3, loc_50914
                ret
# End of function char_rank_cont
# =============== S U B R O U T I N E =======================================
char_rank_disp_one_line_sub:            # CODE XREF: char_rank_cont+30↑p
                shlo    3, r10, r15     # Label from Fighting Vipers source
                lda     BEST_TIME_EACH_CHAR(r15), r7
                cmpobge 3, r10, loc_509C8
                ld      (r7), g0
                addo    3, r6, r5
                lda     0x1000064, g9
                shlo    7, r5, r15
                addo    r15, g9, g9
                call    totaltime_dsp
                ld      4(r7), r11
                lda     0xFF, r13
                and     r13, r11, g0
                addo    3, r6, r5
                lda     0x100006C, g9
                shlo    7, r5, r15
                addo    r15, g9, g9
                call    dsp_char_2x3
                shri    8, r11, g0
                lda     0xFF, r13
                and     r13, g0, g0
                call    dsp_char_2x3
                shri    0x10, r11, g0
                lda     0xFF, r13
                and     r13, g0, g0
                call    dsp_char_2x3
                ld      BookkeepingCharList[r10*4], g0
                lda     0x1000044, g9
                shlo    7, r6, r15
                addo    r15, g9, g9
                call    dsp_mes_2x3
                bx      (g14)
# ---------------------------------------------------------------------------
loc_509C8:                              # CODE XREF: char_rank_disp_one_line_sub+C↑j
                ld      (r7), g0
                addo    3, r6, r5
                lda     0x1000024, g9
                shlo    7, r5, r15
                addo    r15, g9, g9
                call    totaltime_dsp
                ld      4(r7), r11
                lda     0xFF, r13
                and     r13, r11, g0
                addo    3, r6, r5
                lda     0x100002C, g9
                shlo    7, r5, r15
                addo    r15, g9, g9
                call    dsp_char_2x3
                shri    8, r11, g0
                lda     0xFF, r13
                and     r13, g0, g0
                call    dsp_char_2x3
                shri    0x10, r11, g0
                lda     0xFF, r13
                and     r13, g0, g0
                call    dsp_char_2x3
                ld      BookkeepingCharList[r10*4], g0
                lda     0x1000004, g9
                shlo    7, r6, r15
                addo    r15, g9, g9
                call    dsp_mes_2x3
                bx      (g14)
# End of function char_rank_disp_one_line_sub
# =============== S U B R O U T I N E =======================================
sub_50A48:                              # CODE XREF: name_init+190↑p
                mov     g0, r10
                mov     g1, r6
                bal     sub_50A58
                ret
# End of function sub_50A48
# =============== S U B R O U T I N E =======================================
sub_50A58:                              # CODE XREF: rank_cont+44↑p
                mulo    0x10, r10, r15
                lda     RANKING_DATA(r15), r7
                addo    1, r10, r5
                divo    0xA, r5, g0
                cmpobe  0, g0, loc_50A84
                lda     0x1000008, g9
                shlo    7, r6, r15
                addo    r15, g9, g9
                call    dsp_num_2x3
loc_50A84:                              # CODE XREF: sub_50A58+14↑j
                lda     0x100000C, g9
                shlo    7, r6, r15
                addo    r15, g9, g9
                remo    0xA, r5, g0
                call    dsp_num_2x3
                ld      0x0(r7), g0
                lda     0x1000034, g9
                shlo    7, r6, r15
                addo    r15, g9, g9
                call    totaltime_dsp
                ld      4(r7), r11
                lda     0xFF, r13
                and     r13, r11, g0
                lda     0x1000040, g9
                shlo    7, r6, r15
                addo    r15, g9, g9
                call    dsp_char_2x3
                shri    8, r11, g0
                lda     0xFF, r13
                and     r13, g0, g0
                call    dsp_char_2x3
                shri    0x10, r11, g0
                lda     0xFF, r13
                and     r13, g0, g0
                call    dsp_char_2x3
                ldib    0xA(r7), r11
                ld      BookkeepingCharList[r11*4], g0
                lda     0x1000054, g9
                shlo    7, r6, r15
                addo    r15, g9, g9
                call    dsp_mes_2x3
                bx      (g14)
# End of function sub_50A58
# ---------------------------------------------------------------------------
                ldos    game_timer, r3  # unreachable code
                shlo    8, 3, r13
                cmpobne r13, r3, loc_50B38
                mov     0, r15
                stib    r15, 0x500094
                call    rank_cont
loc_50B38:                              # CODE XREF: ROM:00050B24↑j
                shlo    9, 1, r13
                cmpobne r13, r3, loc_50B50
                mov     1, r15
                stib    r15, 0x500094
                call    rank_cont
loc_50B50:                              # CODE XREF: ROM:00050B3C↑j
                shlo    8, 1, r13
                cmpobne r13, r3, loc_50B68
                mov     2, r15
                stib    r15, 0x500094
                call    rank_cont
loc_50B68:                              # CODE XREF: ROM:00050B54↑j
                cmpobne 0, r3, loc_50B80
                lda     0x1000700, g9
                addo    0x1F, 0x1F, g0
                mov     0x1E, g1
                call    clr_pattern_s
loc_50B80:                              # CODE XREF: ROM:loc_50B68↑j
                ret
# =============== S U B R O U T I N E =======================================
_uk_draw_challenger_comes:              # CODE XREF: name_entry+234↑p
                lda     0x1000500, g9
                lda     78, g0
                call    dsp_pattern_new
                ret
# End of function _uk_draw_challenger_comes
# =============== S U B R O U T I N E =======================================
set_after_check:                        # CODE XREF: ROUND_DSP+11B4↑p
                ld      0x500070, r3 # Label from official source
                ldos    game_timer, r4
                ldos    0x50006E, r5
                ldob    time, r6
                ld      not_scr_bg_move, r15
                bbc     4, r15, loc_50BC8
                mov     15, r6
loc_50BC8:                              # CODE XREF: set_after_check+28↑j
                shlo    6, r6, r6
                subo    r4, r6, r6
                shlo    2, 0x19, r13
                mulo    r13, r6, r6
                shro    6, r6, r6
                ld      0x500434, r14
                addi    r6, r14, r15
                st      r15, 0x500434
                ldob    gameprogram, r14 # bit 0 clear = Player 1
                cmpobl  1, r14, loc_50CBC # if gameprogram is less than 1 branch
                ldob    STAGE_ID, r14
                cmpobe  10, r14, loc_50CBC # if STAGE_ID is Eggman boss or greater branch
                addo    r6, r3, r7
                lda     360000, r14
                cmpoble r14, r3, loc_50C20
                st      r7, 0x500070
loc_50C20:                              # CODE XREF: set_after_check+7C↑j
                ldob    0x50004D, r14
                cmpobe  2, r14, loc_50CBC # return
                ldob    gameprogram, r14 # bit 0 clear = Player 1
                cmpobe  1, r14, loc_50C7C # if gameprogram is 1 or greater branch
                ldib    0x50008D, r15
                lda     1(r15), r15     # increment 0x50008D
                stib    r15, 0x50008D
                ldob    0x50004D, r14
                cmpobne 0, r14, loc_50CBC # return
                ldib    0x50008E, r15
                lda     1(r15), r15     # increment 0x50008E
                stib    r15, 0x50008E
                cmpobg  r6, r5, loc_50CBC # return
                stos    r6, 0x50006E
                b       loc_50CBC       # return
# ---------------------------------------------------------------------------
loc_50C7C:                              # CODE XREF: set_after_check+9C↑j
                ldib    0x50008D, r15
                lda     1(r15), r15     # increment 0x50008D
                stib    r15, 0x50008D
                ldob    0x50004D, r14
                cmpobne 1, r14, loc_50CBC # return
                ldib    0x50008E, r15
                lda     1(r15), r15     # increment 0x50008E
                stib    r15, 0x50008E
                cmpobg  r6, r5, loc_50CBC # return
                stos    r6, 0x50006E
loc_50CBC:                              # CODE XREF: set_after_check+60↑j
                ret                     # return
# End of function set_after_check
# ---------------------------------------------------------------------------
                ld      fa_camera, r3   # unreachable code
                lda     displacement, r15
                stib    r15, 0x40(r3)   # set cam_mode = 0
                ldt     0x18(r3), r4    # r4 = mod_fa_camera_xpos
                stt     r4, 0x500130 # store camera xyz
                mov     0, r4
                mov     0, r5
                mov     0, r6
                mov     0, r7
                stq     r4, 0x50011C
                stob    r4, 0x50012C
                ret
# =============== S U B R O U T I N E =======================================
_uk_un_overhead_camera_view:
                ld      debug_flag, r15 # unreachable code
                bbs     5, r15, loc_50E5C # return
                ld      fa_camera, r12
                ld      0x500128, r14
                cmpobl  0, r14, loc_50D88
                ldob    0x50012C, r3
                ldob    byte_97E78, r4
                cmpobe  r3, r4, loc_50E38
                cmpobg  r3, r4, loc_50E5C # return
                addo    1, r3, r15
                stob    r15, 0x50012C
                shlo    4, r3, r3
                lda     dword_97DF8, r4
                addo    r3, r4, r3
                ldq     (r3), r4
loc_50D5C:                              # CODE XREF: _uk_un_overhead_camera_view+154↓j
                ldt     0x18(r12), r8
                subr    r8, r4, r4
                subr    r9, r5, r5
                subr    r10, r6, r6
                cvtir   r7, r11
                divr    r11, r4, r4
                divr    r11, r5, r5
                divr    r11, r6, r6
                stq     r4, 0x50011C
                b       loc_50D94
# ---------------------------------------------------------------------------
loc_50D88:                              # CODE XREF: _uk_un_overhead_camera_view+1C↑j
                ldq     0x50011C, r4
                ldt     0x18(r12), r8
loc_50D94:                              # CODE XREF: _uk_un_overhead_camera_view+80↑j
                addr    r4, r8, r8
                addr    r5, r9, r9
                addr    r6, r10, r10
                subo    1, r7, r7
                stt     r8, 0x18(r12)
                ld      mod_fa_play, r11
                ldt     0x50(r11), r4
                lda     0x16002C2C, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                subr    r9, r5, r3
                divr    r11, r3, r3
                lda     0x13002626, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ldis    (g11)[g12*1], r3
                shlo    0xD, 1, r15
                cmpibl  r3, r15, loc_50E04
                mov     r15, r3
loc_50E04:                              # CODE XREF: _uk_un_overhead_camera_view+F8↑j
                stos    r3, 0x24(r12)
                lda     0x17802F2F, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                ld      (g11)[g12*1], r11
                stos    r11, 0x26(r12)
                st      r7, 0x500128
                b       loc_50E5C       # return
# ---------------------------------------------------------------------------
loc_50E38:                              # CODE XREF: _uk_un_overhead_camera_view+30↑j
                ldt     0x500130, r4
                shlo    8, 1, r7
                ldob    0x50012C, r3
                addo    1, r3, r15
                stob    r15, 0x50012C
                b       loc_50D5C
# ---------------------------------------------------------------------------
loc_50E5C:                              # CODE XREF: _uk_un_overhead_camera_view+8↑j
                ret                     # return
# End of function _uk_un_overhead_camera_view
# =============== S U B R O U T I N E =======================================
un_move_camera_a_bit:
                lda     0x43F00000, r15 # Unreachable code. (Forces characters to Sonic and tails and moves the camera a bit. Not sure what it's supposed to do)
                st      r15, focus_dist_x
                lda     0x43F00000, r15
                st      r15, focus_dist_y
                lda     dword_98F1C, r3
                st      r3, 0x5001C8
                lda     dword_98D78, r3
                st      r3, 0x5001CC
                lda     dword_9900C, r3
                st      r3, 0x5001D0
                lda     dword_98E94, r3
                st      r3, 0x5001D4
                lda     dword_99684, r3
                st      r3, 0x5003E0
                lda     dword_9981C, r3
                st      r3, 0x5003DC
                lda     dword_98554, r3
                st      r3, 0x500470
                lda     dword_98548, r3
                st      r3, 0x50047C
                ld      0x5001C8, g0
                ld      fa_rob0, g7
                call    sub_51BD4
                st      g0, 0x5001C8
                ld      0x5001CC, g0
                ld      fa_rob1, g7
                call    sub_51BD4
                st      g0, 0x5001CC
                lda     dword_3F48, r15
                st      r15, 0x550004
                lda     loc_4E20, r15
                st      r15, 0x550008
                ret
# End of function un_move_camera_a_bit
# ---------------------------------------------------------------------------
                lda     dword_51318, r3 # unreachable code
                ldl     0x0(r3), r4
                stl     r4, 0x501480
                ldl     8(r3), r4
                stl     r4, 0x5014A0
                ldl     0x10(r3), r4
                stl     r4, 0x5014C0
                ldl     0x18(r3), r4
                stl     r4, 0x5014E0
                mov     0, r3
                stos    r3, 0x500476
                ret
# ---------------------------------------------------------------------------
                lda     dword_51318, r3 # unreachable code
                movt    0, r4
                stl     r4, 0x501480
                stl     r4, 0x5014A0
                stl     r4, 0x5014C0
                stl     r4, 0x5014E0
                mov     0, r3
                stos    r3, 0x500474
                stos    r3, 0x500476
                ret
# ---------------------------------------------------------------------------
loc_50FE8:                              # DATA XREF: ROM:00098564↓o
                ld      debug_flag, r15 # unreachable code
                bbs     5, r15, loc_5105C # return
                lda     0x501480, r3
                ldos    6(r3), r4
                subo    2, r4, r4
                cmpobge 0, r4, loc_5105C # return
                stos    r4, 6(r3)
                lda     0x5014A0, r3
                ldos    2(r3), r4
                subo    2, r4, r4
                cmpobge 0, r4, loc_5105C # return
                stos    r4, 2(r3)
                lda     0x5014C0, r3
                ldos    6(r3), r4
                addo    2, r4, r4
                shlo    4, 0x1F, r5
                cmpoble r5, r4, loc_5105C # return
                stos    r4, 6(r3)
                lda     0x5014E0, r3
                ldos    2(r3), r4
                addo    2, r4, r4
                shlo    4, 0x1F, r5
                cmpoble r5, r4, loc_5105C # return
                stos    r4, 2(r3)
loc_5105C:                              # CODE XREF: ROM:00050FF0↑j
                ret                     # return
# ---------------------------------------------------------------------------
loc_51060:                              # DATA XREF: ROM:0009858C↓o
                ld      debug_flag, r15 # unreachable code
                bbs     5, r15, loc_510DC
                lda     0x501480, r3
                ldos    6(r3), r4
                addo    2, r4, r4
                shlo    3, 0x1F, r5
                cmpobl  r5, r4, loc_510DC
                stos    r4, 6(r3)
                lda     0x5014A0, r3
                ldos    2(r3), r4
                addo    2, r4, r4
                shlo    3, 0x1F, r5
                cmpobl  r5, r4, loc_510DC
                stos    r4, 2(r3)
                lda     0x5014C0, r3
                ldos    6(r3), r4
                subo    2, r4, r4
                lda     0xF7, r5
                cmpobg  r5, r4, loc_510DC
                stos    r4, 6(r3)
                lda     0x5014E0, r3
                ldos    2(r3), r4
                subo    2, r4, r4
                lda     0xF7, r5
                cmpobg  r5, r4, loc_510DC
                stos    r4, 2(r3)
loc_510DC:                              # CODE XREF: ROM:00051068↑j
                ret
# ---------------------------------------------------------------------------
                ld      0x500470, r3 # unreachable code
                ld      4(r3), r3
                ldos    0x500474, r7
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                ldt     check_word2(r3), r4
                lda     0x3C23D70A, r8
                mulr    r8, r7, r8
                addr    r8, r4, r4
                lda     0x3FA147AE, r8
                cmpr    r8, r4
                bge     loc_51134
                movr    r8, r4
loc_51134:                              # CODE XREF: ROM:0005112C↑j
                lda     0x3CA3D70A, r9
                mulr    r9, r7, r9
                subr    r9, r6, r6
                lda     0x3FA66666, r9
                cmpr    r9, r6
                ble     loc_51158
                movr    r9, r6
loc_51158:                              # CODE XREF: ROM:00051150↑j
                stt     r4, 0x500480
                ret
# ---------------------------------------------------------------------------
                ld      0x500470, r3 # unreachable code
                ld      4(r3), r3
                ldos    0x500474, r7
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     displacement32(r3), r3
                ldt     check_word2(r3), r4
                lda     0x3CA3D70A, r8
                mulr    r8, r7, r8
                subr    r8, r4, r4
                lda     0x3F87AE14, r8
                cmpr    r8, r4
                ble     loc_511C0
                movr    r8, r4
loc_511C0:                              # CODE XREF: ROM:000511B8↑j
                lda     0x3CA3D70A, r9
                mulr    r9, r7, r9
                subr    r9, r6, r6
                lda     0x3F8CCCCD, r9
                cmpr    r9, r6
                ble     loc_511E4
                movr    r9, r6
loc_511E4:                              # CODE XREF: ROM:000511DC↑j
                stt     r4, 0x50048C
                ret
# ---------------------------------------------------------------------------
                ld      0x500470, r3 # unreachable code
                ld      4(r3), r3
                ldos    0x500474, r7
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     displacement32, r4
                mulo    2, r4, r4
                lda     (r3)[r4], r3
                ldt     check_word2(r3), r4
                lda     0x3C23D70A, r8
                mulr    r8, r7, r8
                addr    r8, r4, r4
                lda     0x40800000, r8
                cmpr    r8, r4
                bge     loc_51254
                movr    r8, r4
loc_51254:                              # CODE XREF: ROM:0005124C↑j
                lda     0x3CA3D70A, r9
                mulr    r9, r7, r9
                subr    r9, r6, r6
                lda     0x3FAE147B, r9
                cmpr    r9, r6
                ble     loc_51278
                movr    r9, r6
loc_51278:                              # CODE XREF: ROM:00051270↑j
                stt     r4, 0x500480
                ret
# ---------------------------------------------------------------------------
                ld      0x500470, r3 # unreachable code
                ld      4(r3), r3
                ldos    0x500474, r7
                lda     0xB801717, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     displacement32, r4
                mulo    3, r4, r4
                lda     (r3)[r4], r3
                ldt     check_word2(r3), r4
                lda     0x3D23D70A, r8
                mulr    r8, r7, r8
                subr    r8, r4, r4
                lda     0x40866666, r8
                cmpr    r8, r4
                ble     loc_512E8
                movr    r8, r4
loc_512E8:                              # CODE XREF: ROM:000512E0↑j
                lda     0x3CA3D70A, r9
                mulr    r9, r7, r9
                subr    r9, r6, r6
                lda     0x3FCCCCCD, r9
                cmpr    r9, r6
                ble     loc_5130C
                movr    r9, r6
loc_5130C:                              # CODE XREF: ROM:00051304↑j
                stt     r4, 0x50048C
                ret
# ---------------------------------------------------------------------------
dword_51318:    .long 0x180             # DATA XREF: ROM:00050F5C↑o
                .long 0x790000
                .long 0x7C0180
                .long 0xF40000
                .long 0xF80180
                .long 0x1700000
                .long 0x1740180
                .long 0x1ED0000
# =============== S U B R O U T I N E =======================================
un_alters_background_layers:
                ld      0x500470, r3 # unreachable code
                ld      0x5003E4, r12
                ld      4(r3), r3
                ldos    0x500476, r11
                shlo    7, r11, r9
                stos    r9, VECTER_Y
                lda     0x501480, g0
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                ldt     (displacement2)(r3), r4
                ld      0x500470, r7
                ldos    8(r7), r9
                cmpoble r9, r12, loc_513D4
                ld      0xA(r7), r9
                ld      0x0(r9), r9
                ldos    0x500474, r7
                mulo    0xC, r7, r7
                ldt     0x0(r9)[r7*1], r8
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                b       loc_513DC
# ---------------------------------------------------------------------------
loc_513D4:                              # CODE XREF: un_alters_background_layers+6C↑j
                ldt     check_word2(r3), r4
loc_513DC:                              # CODE XREF: un_alters_background_layers+98↑j
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3F800000, r7
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ldos    (start_ip_add+2)(r3), r4
                ldos    check_word1(r3), r5
                shlo    7, r11, r9
                addo    r9, r5, r5
                ldos    (check_word1+2)(r3), r6
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ldos    displacement(r3), r7
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_514CC
                st      r13, 0x0(r15)
loc_514C8:                              # DATA XREF: RAMBASE:0059C1B0↓o
                b       loc_514D8
# ---------------------------------------------------------------------------
loc_514CC:                              # CODE XREF: un_alters_background_layers+188↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_514D8:                              # CODE XREF: un_alters_background_layers:loc_514C8↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     displacement32(r3), r3
                lda     0x5014A0, g0
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                ldt     (displacement2)(r3), r4
                ld      0x500470, r7
                ldos    8(r7), r9
                cmpoble r9, r12, loc_51580
                ld      0xA(r7), r9
                ld      4(r9), r9
                ldos    0x500474, r7
                mulo    0xC, r7, r7
                ldt     (r9)[r7*1], r8
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                b       loc_51588
# ---------------------------------------------------------------------------
loc_51580:                              # CODE XREF: un_alters_background_layers+21C↑j
                ldt     check_word2(r3), r4
loc_51588:                              # CODE XREF: un_alters_background_layers+244↑j
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3F800000, r7
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ldos    (start_ip_add+2)(r3), r4
                ldos    check_word1(r3), r5
                shlo    7, r11, r9
                subo    r9, r5, r5
                ldos    (check_word1+2)(r3), r6
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ldos    displacement(r3), r7
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501844, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_51678
                st      r13, 0x0(r15)
                b       loc_51684
# ---------------------------------------------------------------------------
loc_51678:                              # CODE XREF: un_alters_background_layers+334↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_51684:                              # CODE XREF: un_alters_background_layers+33C↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501844, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     displacement32(r3), r3
                lda     0x5014C0, g0
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                ldt     (displacement2)(r3), r4
                ld      0x500470, r7
                ldos    8(r7), r9
                cmpoble r9, r12, loc_5172C
                ld      0xA(r7), r9
                ld      8(r9), r9
                ldos    0x500474, r7
                mulo    0xC, r7, r7
                ldt     (r9)[r7*1], r8
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                b       loc_51734
# ---------------------------------------------------------------------------
loc_5172C:                              # CODE XREF: un_alters_background_layers+3C8↑j
                ldt     check_word2(r3), r4
loc_51734:                              # CODE XREF: un_alters_background_layers+3F0↑j
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3F800000, r7
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ldos    (start_ip_add+2)(r3), r4
                ldos    check_word1(r3), r5
                shlo    7, r11, r9
                addo    r9, r5, r5
                ldos    (check_word1+2)(r3), r6
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ldos    displacement(r3), r7
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50184C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_51824
                st      r13, 0x0(r15)
                b       loc_51830
# ---------------------------------------------------------------------------
loc_51824:                              # CODE XREF: un_alters_background_layers+4E0↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_51830:                              # CODE XREF: un_alters_background_layers+4E8↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x50184C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                lda     displacement32(r3), r3
                lda     0x5014E0, g0
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                ldt     (displacement2)(r3), r4
                ld      0x500470, r7
                ldos    8(r7), r9
                cmpoble r9, r12, loc_518D8
                ld      0xA(r7), r9
                ld      0xC(r9), r9
                ldos    0x500474, r7
                mulo    0xC, r7, r7
                ldt     (r9)[r7*1], r8
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                b       loc_518E0
# ---------------------------------------------------------------------------
loc_518D8:                              # CODE XREF: un_alters_background_layers+574↑j
                ldt     check_word2(r3), r4
loc_518E0:                              # CODE XREF: un_alters_background_layers+59C↑j
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3F800000, r7
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ldos    (start_ip_add+2)(r3), r4
                ldos    check_word1(r3), r5
                shlo    7, r11, r9
                subo    r9, r5, r5
                ldos    (check_word1+2)(r3), r6
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ldos    displacement(r3), r7
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_519D0
                st      r13, 0x0(r15)
                b       loc_519DC
# ---------------------------------------------------------------------------
loc_519D0:                              # CODE XREF: un_alters_background_layers+68C↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_519DC:                              # CODE XREF: un_alters_background_layers+694↑j
                ld      buffer_ptr, r15
                st      r15, 0x1008(g10)
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x500470, r3
                ldos    8(r3), r9
                cmpobge r9, r12, loc_51A28
                addo    1, r11, r11
                stos    r11, 0x500476
loc_51A28:                              # CODE XREF: un_alters_background_layers+6E0↑j
                ld      debug_flag, r15
                bbs     5, r15, loc_51A48
                ldos    0x500474, r3
                addo    1, r3, r3
                stos    r3, 0x500474
loc_51A48:                              # CODE XREF: un_alters_background_layers+6F8↑j
                ret
# End of function un_alters_background_layers
# =============== S U B R O U T I N E =======================================
un_character_name_graphics:
                ld      0x5003E4, r4 # unreachable code
                ld      0x50047C, r3 # r3 = 0
                ldos    0x0(r3), r5     # r5 = 0
                cmpobne r4, r5, loc_51AA8 # does not branch
                ldos    2(r3), r5       # r5 = 0 still
                cmpobe  0, r5, loc_51A98 # does branch!
                mov     0, r15
                stis    r15, scrB_H_page
                mov     0, r15
                stis    r15, scrB_V_page
                lda     0x1004000, g9
                lda     201, g0         # Sonic and Tails sideways texture
                call    dsp_pattern_low
                b       loc_51A9C
# ---------------------------------------------------------------------------
loc_51A98:                              # CODE XREF: un_character_name_graphics+1C↑j
                call    scr_bg_int
loc_51A9C:                              # CODE XREF: un_character_name_graphics+48↑j
                lda     4(r3), r3
                st      r3, 0x50047C
loc_51AA8:                              # CODE XREF: un_character_name_graphics+14↑j
                ret                     # return
# End of function un_character_name_graphics
# =============== S U B R O U T I N E =======================================
adv_movie_cont_fv:
                ld      0x5003E4, r4 # Label from Fighting Vipers source
                ld      0x5001C8, g0
                ldos    0xE(g0), r3
                cmpobne r3, r4, loc_51AD8
                ld      fa_rob0, g7
                call    sub_51BD4
                st      g0, 0x5001C8
loc_51AD8:                              # CODE XREF: adv_movie_cont_fv+14↑j
                ld      0x5001D0, g0
                ldos    4(g0), r3
                cmpobne r3, r4, loc_51AFC
                ld      fa_rob0, g7
                call    adv_set_mot
                st      g0, 0x5001D0
loc_51AFC:                              # CODE XREF: adv_movie_cont_fv+38↑j
                ld      0x5001CC, g0
                ldos    0xE(g0), r3
                cmpobne r3, r4, loc_51B20
                ld      fa_rob1, g7
                call    sub_51BD4
                st      g0, 0x5001CC
loc_51B20:                              # CODE XREF: adv_movie_cont_fv+5C↑j
                ld      0x5001D4, g0
                ldos    4(g0), r3
                cmpobne r3, r4, loc_51B44
                ld      fa_rob1, g7
                call    adv_set_mot
                st      g0, 0x5001D4
loc_51B44:                              # CODE XREF: adv_movie_cont_fv+80↑j
                ld      0x5003E0, g1
                cmpobe  0, g1, loc_51B5C
                ldos    4(g1), r3
                cmpobl  r3, r4, loc_51B5C
                call    adv_name_set
loc_51B5C:                              # CODE XREF: adv_movie_cont_fv+A0↑j
                ld      0x5001E0, g1
                cmpobe  0, g1, loc_51B7C
                ld      0x5003E4, r4
                ldos    0x0(g1), r3
                cmpobne r3, r4, loc_51B7C
                call    adv_special_command
loc_51B7C:                              # CODE XREF: adv_movie_cont_fv+B8↑j
                lda     0x447A0000, r3
                ld      fa_rob0, r4
                ld      fa_rob1, r5
                mov     0, r7
                ld      0x18(r4), r6
                cmpr    r3, r6
                bne     loc_51BB4
                ld      0x0(r5), r6
                setbit  0x17, r6, r6
                mov     1, r7
                st      r6, 0x0(r5)
loc_51BB4:                              # CODE XREF: adv_movie_cont_fv+F4↑j
                ld      0x18(r5), r6
                cmpr    r3, r6
                bne     loc_51BD0
                ld      0x0(r4), r6
                setbit  0x17, r6, r6
                mov     1, r7
                st      r6, 0x0(r4)
loc_51BD0:                              # CODE XREF: adv_movie_cont_fv+110↑j
                ret
# End of function adv_movie_cont_fv
# =============== S U B R O U T I N E =======================================
sub_51BD4:                              # CODE XREF: un_move_camera_a_bit+B0↑p
                movq    0, r4
                stq     r4, 0x1F00(g7)
                stq     r4, 0x1F10(g7)
                stq     r4, 0x1F4C(g7)
                stq     r4, 0x1F20(g7)
                stq     r4, 0x1F30(g7)
                stq     r4, 0x1F60(g7)
                ldob    4(g7), r3
                cmpobe  1, r3, loc_51C58
                ldob    POLYGON_DISP, r4
                setbit  1, r4, r4
                stob    r4, POLYGON_DISP
                mov     1, r4
                ld      fa_rob0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                b       loc_51C9C
# ---------------------------------------------------------------------------
loc_51C58:                              # CODE XREF: sub_51BD4+38↑j
                ldob    POLYGON_DISP, r4
                setbit  2, r4, r4
                stob    r4, POLYGON_DISP
                mov     1, r4
                ld      fa_rob1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
loc_51C9C:                              # CODE XREF: sub_51BD4+80↑j
                ldob    0x10(g0), r3
                cmpobe  0x1F, r3, loc_51E1C
                ldos    0xC(g0), r6
                stob    r3, 0x1B0(g7)
                stob    r3, 0x1B1(g7)
                stos    r6, 0x26(g7)
                ldt     0x0(g0), r4
                stt     r4, 0x18(g7)
                call    sub_81038
                lda     displacement, r3
                cmpr    r3, r5
                be      loc_51CE0
                mov     1, r3
                stob    r3, 0x1F84(g7)
                b       loc_51CEC
# ---------------------------------------------------------------------------
loc_51CE0:                              # CODE XREF: sub_51BD4+F8↑j
                mov     0, r3
                stob    r3, 0x1F84(g7)
loc_51CEC:                              # CODE XREF: sub_51BD4+108↑j
                lda     action_init, r3
                st      r3, 0xC(g7)
                mov     0, r3
                stob    r3, 0x2A(g7)
                stos    r3, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                ld      0x0(g7), r7
                ldob    0x11(g0), r3
                clrbit  0x17, r7, r7
                cmpobe  0, r3, loc_51D30
                setbit  0x17, r7, r7
loc_51D30:                              # CODE XREF: sub_51BD4+154↑j
                ldob    0x12(g0), r3
                clrbit  0x16, r7, r7
                cmpobe  0, r3, loc_51D40
                setbit  0x16, r7, r7
loc_51D40:                              # CODE XREF: sub_51BD4+164↑j
                setbit  0x14, r7, r7
                st      r7, 0x0(g7)
                ldob    4(g7), r3
                cmpobe  1, r3, loc_51D8C
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ldob    POLYGON_DISP, r4
                clrbit  1, r4, r4
                stob    r4, POLYGON_DISP
                b       loc_51DC4
# ---------------------------------------------------------------------------
loc_51D8C:                              # CODE XREF: sub_51BD4+178↑j
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ldob    POLYGON_DISP, r4
                clrbit  2, r4, r4
                stob    r4, POLYGON_DISP
loc_51DC4:                              # CODE XREF: sub_51BD4+1B4↑j
                and     6, r4, r4
                cmpobne 0, r4, loc_51E14
                mov     1, r4
                ld      mod_fa_effect, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     fa_effect, r5
                st      r5, 0xC(r3)
                mov     1, r4
                ld      mod_fa_tobi, r3 # Projectile (tobi = flight)
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     fa_tobi, r5     # Projectile (tobi = flight)
                st      r5, 0xC(r3)
loc_51E14:                              # CODE XREF: sub_51BD4+1F4↑j
                lda     0x14(g0), g0
                ret
# ---------------------------------------------------------------------------
loc_51E1C:                              # CODE XREF: sub_51BD4+CC↑j
                lda     0x14(g0), g0
                mov     1, r4
                ld      mod_fa_effect, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_tobi, r3 # Projectile (tobi = flight)
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                ret
# End of function sub_51BD4
# =============== S U B R O U T I N E =======================================
adv_set_mot:                            # CODE XREF: adv_movie_cont_fv+44↑p
                ld      0x0(g0), r3     # Label from Fighting Vipers source
                cmpobe  0, r3, loc_51E78
                st      r3, 0x198(g7)
                ldob    6(g0), r3
                ld      0x0(g7), r4
                setbit  0x1A, r4, r4
                cmpobe  0, r3, loc_51E74
                clrbit  0x1A, r4, r4
loc_51E74:                              # CODE XREF: adv_set_mot+18↑j
                st      r4, 0x0(g7)
loc_51E78:                              # CODE XREF: adv_set_mot+4↑j
                lda     8(g0), g0
                ret
# End of function adv_set_mot
# =============== S U B R O U T I N E =======================================
adv_special_command:                    # CODE XREF: adv_movie_cont_fv+CC↑p
                ldob    7(g1), r4       # Label from Fighting Vipers source
                ld      adv_special_command_list[r4*4], r3
                bx      (r3)
# End of function adv_special_command
# =============== S U B R O U T I N E =======================================
adv_special_command2:                   # DATA XREF: ROM:00099680↓o
                ldob    0x50040F, r3
                cmpobne 0, r3, loc_51EB8
                ld      INTERUPT_FLAGS_HELD, r5
                bbs     4, r5, write_1_to_50040F
                bbc     5, r5, loc_51EE0
write_1_to_50040F:                      # CODE XREF: adv_special_command2+14↑j
                mov     1, r5
                stob    r5, 0x50040F
loc_51EB8:                              # CODE XREF: adv_special_command2+8↑j
                ldob    4(g1), r3
                ldob    5(g1), r5
                shli    1, r3, r15
                shli    7, r5, r14
                addi    r14, r15, r15
                lda     TILE_DATA_START, r14
                addo    r14, r15, g9
                ldos    2(g1), g0
                call    dsp_pattern_new
loc_51EE0:                              # CODE XREF: adv_special_command2+18↑j
                lda     8(g1), g1
                st      g1, 0x5001E0
                ret
# End of function adv_special_command2
# =============== S U B R O U T I N E =======================================
adv_special_command1:                   # DATA XREF: ROM:adv_special_command_list↓o
                lda     8(g1), g1
                st      g1, 0x5001E0
                lda     0x1000500, g9
                shlo    6, 1, g0
                mov     0x1A, g1
                call    clr_pattern_s
                ret
# End of function adv_special_command1
# =============== S U B R O U T I N E =======================================
adv_name_set:                           # CODE XREF: adv_movie_cont_fv+AC↑p
                ldos    8(g1), r5       # Label from Fighting Vipers source
                cmpibe  0, r5, loc_51F2C # Branch if adv_fade_cnt = 0
                ld      off_51FB8[r5*4], r5
                callx   (r5)
                b       loc_51F58
# ---------------------------------------------------------------------------
loc_51F2C:                              # CODE XREF: adv_name_set+4↑j
                mov     0, r15
                st      r15, adv_fade_cnt
                lda     0x100A000, r3
                ldos    (r3), r4
                clrbit  0xF, r4, r4
                stos    r4, (r3)
                ldos    8(r3), r4
                clrbit  0xE, r4, r4
                stos    r4, 8(r3)
loc_51F58:                              # CODE XREF: adv_name_set+14↑j
                ldob    6(g1), r3
                ldob    7(g1), r5
                shli    1, r3, r15
                shli    7, r5, r14
                addi    r14, r15, r15
                lda     TILE_DATA_START, r14
                addo    r14, r15, g9
                ld      0x0(g1), g0
                cmpobe  0, g0, loc_51F84
                call    dsp_pattern_new
loc_51F84:                              # CODE XREF: adv_name_set+68↑j
                ldos    4(g1), r5
                ld      0x5003E4, r4
                cmpobne r4, r5, loc_51FB4
                lda     0xC(g1), g1
                st      g1, 0x5003E0
                lda     0x1000500, g9
                addo    0x1F, 0x1D, g0
                mov     8, g1
                call    clr_pattern_s
loc_51FB4:                              # CODE XREF: adv_name_set+7C↑j
                ret
# End of function adv_name_set
# ---------------------------------------------------------------------------
off_51FB8:      .long adv_fade_in0      # DATA XREF: adv_name_set+8↑r
                .long adv_fade_in0      # adv_fade_cnt = 1
                .long adv_fade_in5      # adv_fade_cnt = 2
                .long adv_fade_in3      # adv_fade_cnt = 3
                .long adv_fade_in6      # adv_fade_cnt = 4
                .long adv_fade_in4      # adv_fade_cnt = 5
                .long adv_fade_in1      # adv_fade_cnt = 6
                .long adv_fade_in2      # adv_fade_cnt = 7
                .long loc_524E0         # adv_fade_cnt = 8
# ---------------------------------------------------------------------------
adv_fade_in0:                           # DATA XREF: ROM:off_51FB8↑o
                ld      adv_fade_cnt, r3 # Label from Fighting Vipers source
                and     0xF, r3, r3
                ld      adv_fade_in0_list[r3*4], r8
                lda     0x100A000, r3
                ldos    (r3), r4
                setbit  0xF, r4, r4
                stos    r4, (r3)
                ldos    8(r3), r4
                setbit  0xE, r4, r4
                stos    r4, 8(r3)
                ld      adv_fade_cnt, r7
                cmpobl  0xF, r7, loc_52050
                addo    1, r7, r15
                st      r15, adv_fade_cnt
                lda     0x1008000, r5
                shlo    5, 5, r13
                addi    r13, r5, r5
                addo    0x1F, 0x1D, r4
loc_5203C:                              # CODE XREF: ROM:0005204C↓j
                stis    r8, (r5)
                addo    2, r5, r5
                subi    r8, 0, r8
                cmpdeco 1, r4, r4
                bl      loc_5203C
loc_52050:                              # CODE XREF: ROM:00052018↑j
                ret
# ---------------------------------------------------------------------------
adv_fade_in1:                           # DATA XREF: ROM:00051FD0↑o
                ld      adv_fade_cnt, r3 # Label from Fighting Vipers source
                ld      adv_fade_in1_list[r3*4], r8
                lda     0x100A000, r3
                ldos    (r3), r4
                setbit  0xF, r4, r4
                stos    r4, (r3)
                ldos    8(r3), r4
                setbit  0xE, r4, r4
loc_52080:                              # DATA XREF: RAMBASE:0059C1C0↓o
                stos    r4, 8(r3)
                ld      adv_fade_cnt, r7
                mov     0x1B, r4
                cmpobl  r4, r7, loc_520E4
                addo    1, r7, r15
                st      r15, adv_fade_cnt
                lda     0x1008000, r5
                shlo    5, 5, r13
                addi    r13, r5, r5
                mov     6, r4
loc_520B4:                              # CODE XREF: ROM:000520E0↓j
                stis    r8, (r5)
                stis    r8, 2(r5)
                stis    r8, 4(r5)
                stis    r8, 6(r5)
                stis    r8, 8(r5)
                stis    r8, 0xA(r5)
                stis    r8, 0xC(r5)
                stis    r8, 0xE(r5)
                addo    0x10, r5, r5
                subi    r8, 0, r8
                cmpdeco 1, r4, r4
                bl      loc_520B4
loc_520E4:                              # CODE XREF: ROM:00052090↑j
                ret
# ---------------------------------------------------------------------------
adv_fade_in2:                           # DATA XREF: ROM:00051FD4↑o
                lda     0x100A000, r3   # Label from Fighting Vipers source
                mov     0, r4
                stos    r4, (r3)
                stos    r4, 8(r3)
                lda     0x100C000, r5
                shlo    7, 5, r4
                addo    r4, r5, r5
                ld      adv_fade_cnt, r7
                cmpobl  0xF, r7, loc_521AC
                addo    1, r7, r7
                st      r7, adv_fade_cnt
                ld      adv_fade_cnt, r3
                cmpobe  1, r3, loc_52154
                cmpobl  7, r3, loc_52148
                lda     0xCCCCCCCC, r8
                lda     0x33333333, r10
                b       loc_52160
# ---------------------------------------------------------------------------
loc_52148:                              # CODE XREF: ROM:00052130↑j
                mov     0, r8
                mov     0, r10
                b       loc_52160
# ---------------------------------------------------------------------------
loc_52154:                              # CODE XREF: ROM:0005212C↑j
                subo    1, 0, r8
                subo    1, 0, r10
                b       loc_52194
# ---------------------------------------------------------------------------
loc_52160:                              # CODE XREF: ROM:00052144↑j
                ld      adv_fade_cnt, r7
                and     7, r7, r7
                shlo    3, r7, r7
                addo    r7, r5, r5
                shlo    7, 1, r9
                mov     3, r4
loc_5217C:                              # CODE XREF: ROM:0005218C↓j
                st      r8, 4(r5)
                st      r10, 0x44(r5)
                addo    r9, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_5217C
                b       loc_521AC
# ---------------------------------------------------------------------------
loc_52194:                              # CODE XREF: ROM:0005215C↑j
                mov     8, r9
                addo    0x1F, 0x11, r4
loc_5219C:                              # CODE XREF: ROM:000521A8↓j
                st      r8, 4(r5)
                addo    r9, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_5219C
loc_521AC:                              # CODE XREF: ROM:00052114↑j
                ret
# ---------------------------------------------------------------------------
adv_fade_in3:                           # DATA XREF: ROM:00051FC4↑o
                ld      adv_fade_cnt, r3 # Label from Fighting Vipers source
                ld      adv_fade_in3_list[r3*4], r8
                lda     0x100A000, r3
                ldos    (r3), r4
                setbit  0xF, r4, r4
                stos    r4, (r3)
                ldos    8(r3), r4
                setbit  0xE, r4, r4
                stos    r4, 8(r3)
                ld      adv_fade_cnt, r7
                mov     0x16, r4
                cmpobl  r4, r7, loc_52284
                addo    1, r7, r15
                st      r15, adv_fade_cnt
                lda     0x1008000, r5
                shlo    5, 5, r13
                addi    r13, r5, r5
                mov     8, r4
                mov     5, r10
loc_52214:                              # CODE XREF: ROM:00052280↓j
                cmpibl  0xF, r7, loc_5221C
                stis    r8, (r5)
loc_5221C:                              # CODE XREF: ROM:loc_52214↑j
                addi    r10, r8, r9
                cmpibl  0x10, r7, loc_52228
                stis    r9, 2(r5)
loc_52228:                              # CODE XREF: ROM:00052220↑j
                addi    r10, r9, r9
                cmpibl  0x11, r7, loc_52234
                stis    r9, 4(r5)
loc_52234:                              # CODE XREF: ROM:0005222C↑j
                addi    r10, r9, r9
                cmpibl  0x12, r7, loc_52240
                stis    r9, 6(r5)
loc_52240:                              # CODE XREF: ROM:00052238↑j
                addi    r10, r9, r9
                cmpibl  0x13, r7, loc_5224C
                stis    r9, 8(r5)
loc_5224C:                              # CODE XREF: ROM:00052244↑j
                addi    r10, r9, r9
                cmpibl  0x14, r7, loc_52258
                stis    r9, 0xA(r5)
loc_52258:                              # CODE XREF: ROM:00052250↑j
                addi    r10, r9, r9
                cmpibl  0x15, r7, loc_52264
                stis    r9, 0xC(r5)
loc_52264:                              # CODE XREF: ROM:0005225C↑j
                addi    r10, r9, r9
                cmpibl  0x16, r7, loc_5227C
                stis    r9, 0xE(r5)
                addo    0x10, r5, r5
                subi    r8, 0, r8
                subi    r10, 0, r10
loc_5227C:                              # CODE XREF: ROM:00052268↑j
                cmpdeco 1, r4, r4
                bl      loc_52214
loc_52284:                              # CODE XREF: ROM:000521EC↑j
                ret
# ---------------------------------------------------------------------------
adv_fade_in4:                           # DATA XREF: ROM:00051FCC↑o
                lda     0x100A000, r3 # Label from Fighting Vipers source
                mov     0, r4
                stos    r4, (r3)
                stos    r4, 8(r3)
                lda     0x100C000, r5
                shlo    9, 1, r4
                addo    r4, r5, r5
                ld      adv_fade_cnt, r7
                cmpobl  0xF, r7, loc_5234C
                addo    1, r7, r7
                st      r7, adv_fade_cnt
                ld      adv_fade_cnt, r3
                cmpobe  1, r3, loc_522F4
                cmpobl  7, r3, loc_522E8
                lda     0xF0F0F0F0, r8
                lda     0xF0F0F0F, r10
                b       loc_52300
# ---------------------------------------------------------------------------
loc_522E8:                              # CODE XREF: ROM:000522D0↑j
                mov     0, r8
                mov     0, r10
                b       loc_52300
# ---------------------------------------------------------------------------
loc_522F4:                              # CODE XREF: ROM:000522CC↑j
                subo    1, 0, r8
                subo    1, 0, r10
                b       loc_52334
# ---------------------------------------------------------------------------
loc_52300:                              # CODE XREF: ROM:000522E4↑j
                ld      adv_fade_cnt, r7
                and     7, r7, r7
                shlo    3, r7, r7
                addo    r7, r5, r5
                shlo    7, 1, r9
                mov     5, r4
loc_5231C:                              # CODE XREF: ROM:0005232C↓j
                st      r8, 0x0(r5)
                st      r10, 0x40(r5)
                addo    r9, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_5231C
                b       loc_5234C
# ---------------------------------------------------------------------------
loc_52334:                              # CODE XREF: ROM:000522FC↑j
                mov     8, r9
                addo    0x1F, 1, r4
loc_5233C:                              # CODE XREF: ROM:00052348↓j
                st      r8, 0x0(r5)
                addo    r9, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_5233C
loc_5234C:                              # CODE XREF: ROM:000522B4↑j
                ret
# ---------------------------------------------------------------------------
adv_fade_in5:                           # DATA XREF: ROM:00051FC0↑o
                lda     0x100A000, r3 # Label from Fighting Vipers source
                mov     0, r4
                stos    r4, (r3)
                stos    r4, 8(r3)
                lda     0x100C000, r5
                shlo    9, 1, r4
                addo    r4, r5, r5
                ld      adv_fade_cnt, r7
                cmpobl  0xF, r7, loc_52414
                addo    1, r7, r7
                st      r7, adv_fade_cnt
                ld      adv_fade_cnt, r3
                cmpobe  1, r3, loc_523BC
                cmpobl  7, r3, loc_523B0
                lda     0xAAAAAAAA, r8
                lda     0x55555555, r10
                b       loc_523C8
# ---------------------------------------------------------------------------
loc_523B0:                              # CODE XREF: ROM:00052398↑j
                mov     0, r8
                mov     0, r10
                b       loc_523C8
# ---------------------------------------------------------------------------
loc_523BC:                              # CODE XREF: ROM:00052394↑j
                subo    1, 0, r8
                subo    1, 0, r10
                b       loc_523FC
# ---------------------------------------------------------------------------
loc_523C8:                              # CODE XREF: ROM:000523AC↑j
                ld      adv_fade_cnt, r7
                and     7, r7, r7
                shlo    3, r7, r7
                addo    r7, r5, r5
                shlo    7, 1, r9
                mov     4, r4
loc_523E4:                              # CODE XREF: ROM:000523F4↓j
                st      r8, 4(r5)
                st      r10, 0x44(r5)
                addo    r9, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_523E4
                b       loc_52414
# ---------------------------------------------------------------------------
loc_523FC:                              # CODE XREF: ROM:000523C4↑j
                mov     8, r9
                addo    0x1F, 9, r4
loc_52404:                              # CODE XREF: ROM:00052410↓j
                st      r8, 4(r5)
                addo    r9, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_52404
loc_52414:                              # CODE XREF: ROM:0005237C↑j
                ret
# ---------------------------------------------------------------------------
adv_fade_in6:                           # DATA XREF: ROM:00051FC8↑o
                ld      adv_fade_cnt, r3 # Label from Fighting Vipers source
                lda     0x9849C, r8
loc_52428:                              # CODE XREF: ROM:000524DC↓j
                lda     0x100A000, r3
                mov     0, r4
                stos    r4, (r3)
                stos    r4, 8(r3)
                lda     0x100C000, r5
                shlo    7, 5, r4
                addo    r4, r5, r5
                ld      adv_fade_cnt, r7
                mov     0x18, r9
                cmpobl  r9, r7, loc_524C8
                and     7, r7, r7
                shlo    3, r7, r7
                addo    r7, r5, r5
                shlo    6, 1, r9
                mov     5, r4
                ld      adv_fade_cnt, r7
loc_52478:                              # CODE XREF: ROM:000524B0↓j
                cmpibl  0x10, r7, loc_524A4
                ld      (r8)[r7*4], r10
                st      r10, 4(r5)
                st      r10, 0xC(r5)
                st      r10, 0x14(r5)
                st      r10, 0x1C(r5)
                st      r10, 0x24(r5)
                st      r10, 0x2C(r5)
                st      r10, 0x34(r5)
                st      r10, 0x3C(r5)
                cmpibe  0, r7, loc_524A8
loc_524A4:                              # CODE XREF: ROM:loc_52478↑j
                subi    1, r7, r7
loc_524A8:                              # CODE XREF: ROM:000524A0↑j
                addo    r9, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_52478
                ld      adv_fade_cnt, r7
                addo    1, r7, r15
                st      r15, adv_fade_cnt
loc_524C8:                              # CODE XREF: ROM:00052458↑j
                ret
# ---------------------------------------------------------------------------
adv_fade_in7:                           # Label from Fighting Vipers source
                ld      adv_fade_cnt, r3
                lda     word_984E0, r8
                b       loc_52428
# ---------------------------------------------------------------------------
loc_524E0:                              # DATA XREF: ROM:00051FD8↑o
                ld      adv_fade_cnt, r3
                and     0xF, r3, r3
                cmpobe  0, r4, loc_524F4
                b       loc_52540
# ---------------------------------------------------------------------------
loc_524F4:                              # CODE XREF: ROM:000524EC↑j
                mov     0, r8
                lda     0x100A000, r3
                ldos    (r3), r4
                setbit  0xF, r4, r4
                stos    r4, (r3)
                ldos    8(r3), r4
                setbit  0xE, r4, r4
                stos    r4, 8(r3)
                ld      adv_fade_cnt, r7
                lda     0x1008000, r5
                shlo    7, 3, r4
loc_5252C:                              # CODE XREF: ROM:00052538↓j
                stis    r8, (r5)
                addo    2, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_5252C
                b       loc_5257C
# ---------------------------------------------------------------------------
loc_52540:                              # CODE XREF: ROM:000524F0↑j
                subo    1, 0, r8
                lda     0x100A000, r3
                mov     0, r4
                stos    r4, (r3)
                stos    r4, 8(r3)
                lda     0x100C000, r5
                shlo    7, 1, r9
                shlo    4, 0x17, r4
loc_52568:                              # CODE XREF: ROM:00052578↓j
                st      r8, 0x0(r5)
                st      r8, 4(r5)
                addo    r9, r5, r5
                cmpdeco 1, r4, r4
                bl      loc_52568
loc_5257C:                              # CODE XREF: ROM:0005253C↑j
                cmpobl  2, r7, loc_5258C
                addo    1, r7, r15
                st      r15, adv_fade_cnt
loc_5258C:                              # CODE XREF: ROM:loc_5257C↑j
                ret
# ---------------------------------------------------------------------------
                ld      not_scr_bg_move, r15 # unreachable code
                setbit  0xE, r15, r15
                st      r15, not_scr_bg_move
                mov     0, r15
                stis    r15, 0x100A000
                mov     0, r15
                stis    r15, 0x100A008
                mov     0, r4
                lda     0x1002000, r8
                shlo    0xA, 3, r10
loc_525CC:                              # CODE XREF: ROM:000525D8↓j
                stis    r4, (r8)
                addo    2, r8, r8
                cmpdeco 1, r10, r10
                bl      loc_525CC
                ret
# =============== S U B R O U T I N E =======================================
prep_adv_movie:                         # CODE XREF: ADV_MOVIE_INT+1BC↑p
                lda     0x438C0000, r15
                st      r15, focus_dist_x
                lda     0x438C0000, r15
                st      r15, focus_dist_y
                mov     0, r15
                stis    r15, scrB_H_page
                mov     0, r15
                stis    r15, scrB_V_page
                mov     0, g0
                shlo    0xF, 1, g1      # g1 = 0x8000
                lda     CG_DATA_START, g2
                call    change_bg_color # Adds 0x4000 to g1 for color code
                call    bg_col_set
                lda     142, g0
                call    _Scroll_Initialize
                shlo    3, 0x15, g0
                call    _Scroll_Initialize
                lda     adv_movie_deathegg_init, r15
                st      r15, adv_movie_cont_ex
                lda     adv_movie_deathegg_disp, r15
                st      r15, adv_movie_disp_ex
                ld      0x5004C8, r15
                setbit  0x1F, r15, r15
                st      r15, 0x5004C8
                ret
# End of function prep_adv_movie
# =============== S U B R O U T I N E =======================================
adv_movie_cont:                         # CODE XREF: ADV_MOVIE_INT:ADV_MOVIE_DSP↑p
                ld      debug_flag, r15 # Label from official source
                chkbit  5, r15          # If branched, attract mode is blank
                bo      loc_56834       # return
                ldos    am_cntr, r3     # animation counter
                addo    1, r3, r3
                stos    r3, am_cntr     # animation counter
                ldos    am_num, r4      # animation number
                ld      0x5004C8, r5
                ld      adv_movie_cont_ex, r4
                bx      (r4)
# ---------------------------------------------------------------------------
adv_movie_disp:                         # CODE XREF: camera_init+A48↑p
                ld      adv_movie_disp_ex, r4 # Label from official source
                bx      (r4)
# ---------------------------------------------------------------------------
adv_movie_deathegg_init:                # DATA XREF: prep_adv_movie+60↑o
                mov     10, g0          # Label from official source
                call    _Scroll_Initialize
                ld      fa_camera, r3
                ld      0x0(r3), r15
                clrbit  1, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                clrbit  2, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                setbit  0x11, r15, r15
                st      r15, 0x0(r3)
                lda     0xF100, r15
                stis    r15, VECTER_X
                lda     0xAB00, r15
                stis    r15, VECTER_Y
                lda     0x3F666666, r15
                st      r15, BRIGHT
                lda     displacement, r4
                lda     displacement, r5
                lda     0xC1400000, r6
                ld      fa_camera, r7
                stt     r4, 0x18(r7)
                mov     0, r15
                stis    r15, 0x24(r7)
                mov     0, r15
                stis    r15, 0x26(r7)
                mov     0, r15
                stis    r15, am_cntr    # animation counter
                mov     0, r15
                stis    r15, am_num     # animation number
                mov     0, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  31, r15, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  1, r15, r15
                st      r15, 0x5004C8
                lda     adv_movie_deathegg, r15
                st      r15, adv_movie_cont_ex
                lda     adv_movie_deathegg_disp, r15
                st      r15, adv_movie_disp_ex
adv_movie_deathegg:                     # DATA XREF: adv_movie_cont+130↑o
                ldos    am_num, r3      # Label from official source
                cmpobne 1, r3, loc_52BB8
                ldos    am_cntr, r4     # animation counter
                mov     0, r5
                ldos    word_97262[r5*2], r5 # r5 = 0x80
                subo    r5, r4, r4      # r4 = 1
                cmpobe  2, r4, loc_52890
                shlo    6, 1, r13       # r13 = 40
                cmpoble r13, r4, animate_rocket_metal
                ld      0x5004C8, r15 # r15 = 12
                bbc     4, r15, loc_52874
                ld      fa_rob0, r7
                mov     0xE, r15
                stib    r15, 0x1B1(r7)
                mov     0xE, r15
                stib    r15, 0x1B0(r7)
                lda     0xC0400000, r4
                lda     0xBF99999A, r5
                lda     0x40400000, r6
                stt     r4, 0x18(r7)
                shlo    0xC, 9, r15
                stis    r15, 0x26(r7)
                ld      0x0(r7), r15
                clrbit  0x11, r15, r15
                st      r15, 0x0(r7)
                call    sub_5A784
                ld      fa_camera, r10
                ld      0x0(r10), r15
                setbit  1, r15, r15
                st      r15, 0x0(r10)
                ld      0x0(r10), r15
                setbit  0x1C, r15, r15
                st      r15, 0x0(r10)
                b       loc_52BB8
# ---------------------------------------------------------------------------
loc_52874:                              # CODE XREF: adv_movie_cont+188↑j
                ld      fa_rob0, r7
                ldos    0x26(r7), r4
                shlo    7, 1, r5
                addo    r4, r5, r4
                stos    r4, 0x26(r7)
                b       loc_52BB8
# ---------------------------------------------------------------------------
loc_52890:                              # CODE XREF: adv_movie_cont+174↑j
                ld      fa_rob0, r7
                shlo    6, 5, r15
                st      r15, 0x198(r7)
                ld      0x0(r7), r15
                setbit  0x13, r15, r15
                st      r15, 0x0(r7)
                ld      fa_camera, r10
                lda     0x41200000, r4
                lda     0x3F800000, r5
                lda     displacement, r6
                stt     r4, 0x41C(r10)
                b       loc_52BB8
# ---------------------------------------------------------------------------
animate_rocket_metal:                   # CODE XREF: adv_movie_cont+17C↑j
                ld      fa_camera, r7
                ld      0x0(r7), r15
                clrbit  1, r15, r15
                st      r15, 0x0(r7)
                shlo    6, 1, r5
                subo    r5, r4, r4
                cmpoble 0x1F, r4, loc_529E8
                ld      rocket_metal_transform_anim[r4*4], r7
                ld      fa_rob0, g7
                ldos    0x26(g7), r4
                shlo    7, 1, r5
                addo    r4, r5, r4
                stos    r4, 0x26(g7)
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501864, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_52968
                st      r13, 0x0(r15)
                b       loc_52974
# ---------------------------------------------------------------------------
loc_52968:                              # CODE XREF: adv_movie_cont+2E4↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_52974:                              # CODE XREF: adv_movie_cont+2EC↑j
                lda     0x1B803737, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mulo    0xC, 1, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x501864, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_52BB8
# ---------------------------------------------------------------------------
loc_529E8:                              # CODE XREF: adv_movie_cont+278↑j
                ld      fa_rob0, g7
                and     7, r4, r5
                ld      rocket_metal_intro_jet_exhaust[r5*4], r8
                ld      rocket_metal_intro_regular_exhaust[r5*4], r9
                shlo    3, 0xB, r13
                cmpobl  r13, r4, loc_52A70
                shlo    3, 0xB, r13
                cmpobe  r13, r4, loc_52A48
                subo    0x1F, r4, r4
                cvtir   r4, r4
                lda     0x3C75C28F, r5
                mulr    r4, r5, r4
                ld      0x18(g7), r5
                addr    r4, r5, r5
                st      r5, 0x18(g7)
                ldos    0x26(g7), r5
                shlo    9, 1, r6
                subo    r6, r5, r5
                stos    r5, 0x26(g7)
                b       loc_52AD0
# ---------------------------------------------------------------------------
loc_52A48:                              # CODE XREF: adv_movie_cont+398↑j
                lda     0x40200000, r4
                lda     displacement, r5
                lda     0xBF800000, r6
                stt     r4, 0x18(g7)
                shlo    0xD, 1, r15
                stis    r15, 0x26(g7)
                b       loc_52AD0
# ---------------------------------------------------------------------------
loc_52A70:                              # CODE XREF: adv_movie_cont+390↑j
                ldos    0x26(g7), r7
                shlo    5, 3, r6
                subo    r6, r7, r7
                stos    r7, 0x26(g7)
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                lda     0x3F800000, r6
                mulr    r4, r6, r4
                mulr    r5, r6, r5
                ld      0x18(g7), r6
                ld      0x20(g7), r7
                subr    r5, r6, r5
                addr    r4, r7, r4
                st      r5, 0x18(g7)
                st      r4, 0x20(g7)
loc_52AD0:                              # CODE XREF: adv_movie_cont+3CC↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501864, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_52B24
                st      r13, 0x0(r15)
                b       loc_52B30
# ---------------------------------------------------------------------------
loc_52B24:                              # CODE XREF: adv_movie_cont+4A0↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_52B30:                              # CODE XREF: adv_movie_cont+4A8↑j
                lda     0x1B803737, r15
                st      r15, (g11)[g12*1]
                ldob    4(g7), r15
                st      r15, (g11)[g12*1]
                mulo    0xC, 1, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     3399, g0        # Rocket Metal fully transformed into a rocket object
                call    set_obj
                mov     0, g1
                lda     (r8), g0
                call    set_obj
                mov     0, g1
                lda     (r9), g0
                call    set_obj
                lda     0x501864, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_52BB8:                              # CODE XREF: adv_movie_cont+158↑j
                ldos    am_num, r3      # animation number
                ldos    am_cntr, r14    # animation counter
                cmpobne 2, r14, loc_52BFC
                lda     142, g0
                call    _Scroll_Initialize
                lda     0x1004000, g9
                lda     390, g0         # Outer space texture
                call    dsp_pattern_low
                lda     0x100407C, g9
                lda     390, g0         # Outer space texture
                call    dsp_pattern_low
                call    am_upper7_black
                call    draw_bottom_black_mask
loc_52BFC:                              # CODE XREF: adv_movie_cont+550↑j
                cmpobe  1, r3, loc_52C04
                b       loc_52C60
# ---------------------------------------------------------------------------
loc_52C04:                              # CODE XREF: adv_movie_cont:loc_52BFC↑j
                ld      0x5004C8, r15
                bbc     4, r15, loc_52C44
                lda     0xBF800000, r4
                lda     0x3F000000, r5
                lda     0xC0333333, r6
                ld      fa_camera, r7
                stt     r4, 0x18(r7)
                mov     0, r15
loc_52C38:                              # DATA XREF: RAMBASE:0059C1D0↓o
                stis    r15, 0x24(r7)
                mov     0, r15
                stis    r15, 0x26(r7)
loc_52C44:                              # CODE XREF: adv_movie_cont+594↑j
                ld      fa_camera, r7
                ld      0x18(r7), r4
                lda     0x3B656042, r5
                addr    r4, r5, r4
                st      r4, 0x18(r7)
loc_52C60:                              # CODE XREF: adv_movie_cont+588↑j
                ld      0x5004C8, r15
                clrbit  4, r15, r15
                st      r15, 0x5004C8
                ldos    am_cntr, r4     # animation counter
                ldos    word_97262[r3*2], r5
                cmpobne r4, r5, loc_52CBC
                addo    1, r3, r3
                stos    r3, am_num      # animation number
                ld      0x5004C8, r15
                setbit  4, r15, r15
                st      r15, 0x5004C8
                cmpobne 2, r3, loc_52CBC
                lda     adv_movie_egg_init, r15
                st      r15, adv_movie_cont_ex
loc_52CBC:                              # CODE XREF: adv_movie_cont+60C↑j
                shlo    4, 7, r3
                shlo    4, 0x11, r4
                mov     1, r5
                bal     sub_56B80
                b       loc_56834       # return
# ---------------------------------------------------------------------------
adv_movie_deathegg_disp:                # DATA XREF: prep_adv_movie+70↑o
                ldos    am_num, r14     # Label from official source
                cmpo    2, r14
                be      loc_56834       # return
                ldos    am_cntr, r4     # animation counter
                mov     0x10, r6
                mulo    r4, r6, r6
                shlo    2, r4, r4
                lda     0xFC00, r5
                addo    r4, r5, r4
                addo    0x1F, 1, r5
                mulo    r4, r5, r5
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50184C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_52D5C
                st      r13, 0x0(r15)
                b       loc_52D68
# ---------------------------------------------------------------------------
loc_52D5C:                              # CODE XREF: adv_movie_cont+6D8↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_52D68:                              # CODE XREF: adv_movie_cont+6E0↑j
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     0, g1
                lda     3545, g0        # Smaller Death Egg 2
                call    set_obj
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0xBF800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F000000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     3351, g0        # Small Death Egg 2 spike
                call    set_obj
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0xBF800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     3351, g0        # Small Death Egg 2 spike
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x2AAA, r7
                shlo    0xD, 1, r8
                shlo    0xE, 1, r9
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 orbs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r8, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 orbs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 orbs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r8, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 orbs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 orbs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r8, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 orbs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x50184C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_56834       # return
# ---------------------------------------------------------------------------
adv_movie_egg_init:                     # DATA XREF: adv_movie_cont+634↑o
                lda     0x1008800, r14 # Label from official source
                mov     0, r15
                shlo    9, 1, r13
loc_5321C:                              # CODE XREF: adv_movie_cont+BB0↓j
                stis    r15, (r14)
                addo    2, r14, r14
                cmpdeco 1, r13, r13
                bl      loc_5321C
                mov     0, g0
                shlo    0xF, 1, g1
                lda     CG_DATA_START, g2
                call    change_bg_color # Adds 0x4000 to g1 for color code
                call    bg_col_set
                mov     10, g0
                call    _Scroll_Initialize
                ld      fa_rob0, r3
                ld      fa_rob1, r7
                mov     8, r4
                mov     0xD, r5
                stob    r4, 0x1B0(r3)
                stob    r5, 0x1B0(r7)
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_5329C
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_5329C:                              # CODE XREF: adv_movie_cont+C10↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7)
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     displacement, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     displacement, r15
                st      r15, 0x20(g7)
                mov     0, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_533E0
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_533E0:                              # CODE XREF: adv_movie_cont+D54↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     0x40D00000, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     0xC0200000, r15
                st      r15, 0x20(g7)
                shlo    0xD, 1, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      fa_camera, r3
                ld      0x0(r3), r15
                setbit  1, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                setbit  2, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                setbit  0x11, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                clrbit  0x1C, r15, r15
                st      r15, 0x0(r3)
                shlo    0xC, 0xF, r15
                stis    r15, VECTER_X
                shlo    0xF, 1, r15
                stis    r15, VECTER_Y
                lda     0x40000000, r15
                st      r15, BRIGHT
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                lda     dword_97398, r15
                st      r15, 4(r7)
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69EC0
                ld      -4(sp), g13
                subo    4, sp, sp
                lda     0xAE113D, g0    # sd_computer_1
                call    check_same_sound
                call    sound_request_u
                mov     0x10, r15
                st      r15, movie_flags
                addo    0x1F, 9, r15
                st      r15, 0x5004D8
                shlo    6, 1, r15
                st      r15, 0x5004DC
                mov     0, r15
                stis    r15, am_cntr    # animation counter
                mov     0, r15
                stis    r15, am_num     # animation number
                mov     0, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  0x1F, r15, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  0, r15, r15
                st      r15, 0x5004C8
                lda     adv_movie_egg, r15
                st      r15, adv_movie_cont_ex
                lda     adv_movie_egg_disp, r15
                st      r15, adv_movie_disp_ex
adv_movie_egg:                          # DATA XREF: adv_movie_cont+F94↑o
                ldos    am_num, r3      # Label from official source
                ldos    am_cntr, r14    # animation counter
                cmpobne 2, r14, loc_53660
                mov     0, g0
                mov     0, g1
                lda     CG_DATA_START, g2
                call    change_bg_color # Adds 0x4000 to g1 for color code
                call    bg_col_set
                call    am_upper7_black
                call    draw_bottom_black_mask
loc_53660:                              # CODE XREF: adv_movie_cont+FC4↑j
                ld      add_BACKUP_RAM_TO_RAM, r7
                ldob    0x3352(r7), r7
                cmpobne 0, r7, loc_53694
                cmpobne 2, r3, loc_53694
                ld      0x5004C8, r15
                bbc     4, r15, loc_53694
                lda     0x10014A4, g9
                shlo    4, 0x17, g0     # (368) "REVENGE OF DR. EGGMAN" Japanese Subtitle
                call    dsp_pattern_new
loc_53694:                              # CODE XREF: adv_movie_cont+FF8↑j
                cmpobe  1, r3, loc_536D0
                ldos    am_cntr, r14    # animation counter
                cmpobne 2, r14, loc_53700
                ld      fa_rob0, r7
                ld      0x0(r7), r15
                setbit  0x13, r15, r15
                st      r15, 0x0(r7)
                ld      0x0(r7), r15
                clrbit  0x1A, r15, r15
                st      r15, 0x0(r7)
                lda     0x1A6, r15
                st      r15, 0x198(r7)
                b       loc_53700
# ---------------------------------------------------------------------------
loc_536D0:                              # CODE XREF: adv_movie_cont:loc_53694↑j
                ldos    am_cntr, r4     # animation counter
                mov     0, r5
                ldos    word_97266[r5*2], r5
                subo    r5, r4, r4
                shlo    7, 1, r13
                cmpobne r13, r4, loc_53700
                ld      fa_rob0, r7
                lda     0x1A7, r15
                st      r15, 0x198(r7)
loc_53700:                              # CODE XREF: adv_movie_cont+1028↑j
                ld      off_97364[r3*4], r4
                bx      (r4)
# ---------------------------------------------------------------------------
loc_5370C:                              # DATA XREF: ROM:off_97364↓o
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69F60
                ld      -4(sp), g13
                subo    4, sp, sp
                ldt     0x5C(r7), r8
                ld      fa_camera, r7
                stt     r8, 0x18(r7)
                xor     r4, r4, r4
                mov     r4, r6
                lda     0x402CCCCD, r5
                cmpr    r5, r9
                bge     loc_53764
                mov     r9, r5
loc_53764:                              # CODE XREF: adv_movie_cont+10E4↑j
                subr    r8, r4, r12
                subr    r10, r6, r13
                notbit  0x1F, r12, r12
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x26(r15)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                subr    r9, r5, r13
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x24(r15)
                b       loc_538CC
# ---------------------------------------------------------------------------
loc_537D8:                              # DATA XREF: ROM:00097368↓o
                lda     displacement, r4
                lda     0x40900000, r5
                lda     0xC0C00000, r6
loc_537F0:                              # DATA XREF: RAMBASE:0059C1E0↓o
                ld      fa_camera, r7
                stt     r4, 0x18(r7)
                mov     0, r15
                stis    r15, 0x24(r7)
                mov     0, r15
                stis    r15, 0x26(r7)
                b       loc_538CC
# ---------------------------------------------------------------------------
loc_53810:                              # DATA XREF: ROM:0009736C↓o
                ld      0x5004C8, r15
                bbc     4, r15, loc_538CC
                lda     0xBF99999A, r4
                lda     0x3FD9999A, r5
                lda     0x3FE66666, r6
                ld      fa_camera, r7
                stt     r4, 0x18(r7)
                lda     displacement, r8
                lda     0x40000000, r9
                lda     displacement, r10
                subr    r4, r8, r12
                subr    r6, r10, r13
                notbit  0x1F, r12, r12
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x26(r15)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                subr    r5, r9, r13
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x24(r15)
                b       loc_538CC
# ---------------------------------------------------------------------------
loc_538CC:                              # CODE XREF: adv_movie_cont+115C↑j
                ldos    am_cntr, r5     # animation counter
                shlo    0xB, 1, r4
                mulo    r5, r4, r4
                lda     0x40000000, r5
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                mulr    r4, r5, r4
                ld      fa_camera, r7
                lda     displacement, r8
                lda     0x40C00000, r9
                lda     0x40C00000, r10
                addr    r4, r9, r9
                stt     r8, 0x41C(r7)
                ldos    am_cntr, r6     # animation counter
                shlo    8, 0x13, r4
                shlo    8, 5, r5
                mulo    r6, r4, r4
                mulo    r6, r5, r5
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                lda     0x40000000, r6
                addr    r6, r4, r4
                addr    r4, r5, r4
                st      r4, BRIGHT
                shlo    0xC, 0xF, r15
                stis    r15, VECTER_X
                shlo    0xF, 1, r15
                stis    r15, VECTER_Y
                ld      0x5004C8, r15
                clrbit  4, r15, r15
                st      r15, 0x5004C8
                ldos    am_cntr, r4     # animation counter
                ldos    word_97266[r3*2], r5
                cmpobne r4, r5, loc_539F0
                addo    1, r3, r3
                stos    r3, am_num      # animation number
                ld      0x5004C8, r15
                setbit  4, r15, r15
                st      r15, 0x5004C8
                cmpobne 3, r3, loc_539F0
                lda     adv_movie_snc_init, r15
                st      r15, adv_movie_cont_ex
loc_539F0:                              # CODE XREF: adv_movie_cont+1340↑j
                b       loc_56834       # return
# ---------------------------------------------------------------------------
adv_movie_egg_disp:                     # DATA XREF: adv_movie_cont+FA4↑o
                lda     win_down, g0    # Label from official source
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     3333, g0        # Inside of Eggmans Lab
                call    set_obj
                ld      movie_flags, r4
                cmpobne 0, r4, loc_53A30
                mov     0, g1
                lda     3770, g0        # Viewscreen
                call    set_obj
loc_53A30:                              # CODE XREF: adv_movie_cont+13A8↑j
                ld      0x5004D8, r4
                cmpobne 0, r4, loc_53A5C
                ldos    am_cntr, r5     # animation counter
                and     3, r5, r5
                ld      eggman_lab_viewscreens[r5*4], r5
                mov     0, g1
                lda     (r5), g0
                call    set_obj
loc_53A5C:                              # CODE XREF: adv_movie_cont+13C0↑j
                ld      0x5004DC, r4
                cmpobne 0, r4, loc_53A74
                mov     0, g1
                lda     3771, g0
                call    set_obj
loc_53A74:                              # CODE XREF: adv_movie_cont+13EC↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ldos    am_num, r14     # animation number
                cmpo    1, r14
                bne     loc_56834       # return
                lda     0x3F800000, r15
                st      r15, BRIGHT
                ld      movie_flags, r7
                cmpobe  0, r7, loc_53AD0
                subo    1, r7, r7
                st      r7, movie_flags
                cmpobl  0x10, r7, loc_53C7C
                lda     word_978FC, g0
                call    set_window      # g0 = two shorts
                bal     amed_open_window
                b       loc_53C7C
# ---------------------------------------------------------------------------
loc_53AD0:                              # CODE XREF: adv_movie_cont+1430↑j
                lda     0x3F333333, r4
                lda     0x3F000000, r5
                lda     0x41200000, r6
                ldos    am_cntr, r7     # animation counter
                and     0x1F, r7, r11
                cvtir   r11, r7
                lda     0xBD8F5C29, r8
                lda     0xBD851EB8, r9
                lda     0x3F800000, r10
                mulr    r7, r8, r8
                mulr    r7, r9, r9
                mulr    r7, r10, r10
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                shlo    0xD, 7, r8
                shlo    0xD, 3, r9
                lda     word_978FC, g0
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                mov     0, g1
                lda     2681, g0        # Low Poly Egg Robo
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                addo    0x1F, 1, r7
                addo    r7, r11, r7
                cvtir   r7, r7
                lda     0xBD8F5C29, r8
                lda     0xBD851EB8, r9
                lda     0x3F800000, r10
                mulr    r7, r8, r8
                mulr    r7, r9, r9
                mulr    r7, r10, r10
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                shlo    0xD, 7, r8
                shlo    0xD, 3, r9
                lda     word_978FC, g0
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                mov     0, g1
                lda     2681, g0        # Low Poly Egg Robo
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_53C7C:                              # CODE XREF: adv_movie_cont+1440↑j
                ld      0x5004D8, r7
                cmpobe  0, r7, loc_53CAC
                subo    1, r7, r7
                st      r7, 0x5004D8
                cmpobl  0x10, r7, loc_53F20
                lda     word_97914, g0
                call    set_window      # g0 = two shorts
                bal     amed_open_window
                b       loc_53F20
# ---------------------------------------------------------------------------
loc_53CAC:                              # CODE XREF: adv_movie_cont+160C↑j
                lda     word_97914, g0
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ldos    am_cntr, r4     # animation counter
                and     0x1F, r4, r4
                bbc     4, r4, loc_53CD8
                subo    r4, 0x1F, r4
loc_53CD8:                              # CODE XREF: adv_movie_cont+1658↑j
                shlo    8, 1, r5
                mulo    r4, r5, r4
                lda     0x4700, r5
                shlo    0xE, 3, r6
                addo    r4, r5, r4
                addo    r4, r6, r5
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0xC00F5C29, r15
                st      r15, (g11)[g12*1]
                lda     0xC033D70A, r15
                st      r15, (g11)[g12*1]
                lda     0x412C51EC, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     0, g1
                lda     3851, g0        # Dark low poly Egg Robo with arms up
                call    set_obj
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x3F9EB852, r15
                st      r15, (g11)[g12*1]
                lda     0xC033D70A, r15
                st      r15, (g11)[g12*1]
                lda     0x41A628F6, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     3853, g0        # Dark low poly Egg Robo with arms down
                call    set_obj
                ldos    am_cntr, r4     # animation counter
                addo    8, r4, r4
                and     0x1F, r4, r4
                bbc     4, r4, loc_53DBC
                subo    r4, 0x1F, r4
loc_53DBC:                              # CODE XREF: adv_movie_cont+173C↑j
                shlo    8, 1, r5
                mulo    r4, r5, r4
                shlo    0xC, 7, r5
                shlo    0xC, 3, r6
                addo    r4, r5, r4
                addo    r4, r6, r5
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x402147AE, r15
                st      r15, (g11)[g12*1]
                lda     0xC033D70A, r15
                st      r15, (g11)[g12*1]
                lda     0x414D1EB8, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     0, g1
                lda     3852, g0        # Dark low poly Egg Robo crouching
                call    set_obj
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0xBFC28F5C, r15
                st      r15, (g11)[g12*1]
                lda     0xC033D70A, r15
                st      r15, (g11)[g12*1]
                lda     0x41B68F5C, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     3852, g0        # Dark low poly Egg Robo crouching
                call    set_obj
                ldos    am_cntr, r4     # animation counter
                mov     0, r5
                ldos    word_97266[r5*2], r5
                subo    r5, r4, r4
                addo    0x1F, 9, r5
                subo    r5, r4, r4
                cvtir   r4, r4
                lda     0xBCA3D70A, r5
                mulr    r4, r5, r4
                lda     0x3F99999A, r5
                addr    r4, r5, r4
                shlo    0xF, 1, r8
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x41380000, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                mov     0, g1
                lda     3853, g0        # Dark low poly Egg Robo with arms down
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_53F20:                              # CODE XREF: adv_movie_cont+161C↑j
                ld      0x5004DC, r7
                cmpobe  0, r7, loc_53F50
                subo    1, r7, r7
                st      r7, 0x5004DC
                cmpobl  0x10, r7, loc_5416C
                lda     word_9792C, g0
                call    set_window      # g0 = two shorts
                bal     amed_open_window
                b       loc_5416C
# ---------------------------------------------------------------------------
loc_53F50:                              # CODE XREF: adv_movie_cont+18B0↑j
                shlo    0xC, 0xF, r8
                shlo    0xC, 7, r9
                lda     word_9792C, g0
                call    set_window      # g0 = two shorts
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xBF733333, r15
                st      r15, (g11)[g12*1]
                lda     0x40A00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                mov     0, g1
                lda     223, g0         # Low poly Egg Robo upper half body
                call    set_obj
                ldos    am_cntr, r4     # animation counter
                mov     0, r5
                ldos    word_97266[r5*2], r5
                subo    r5, r4, r4
                shlo    6, 1, r5
                subo    r5, r4, r4
                bbs     6, r4, loc_540AC
                shlo    0xA, 1, r5
                mulo    r4, r5, r4
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x46400000, r5
                mulr    r4, r5, r4
                cvtri   r4, r4
                shlo    0xC, 0xB, r5
                addo    r4, r5, r4
                shlo    0xE, 3, r8
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xBE4CCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x40A00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                mov     0, g1
                lda     2895, g0        # Low poly Egg Robo Head
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_5416C
# ---------------------------------------------------------------------------
loc_540AC:                              # CODE XREF: adv_movie_cont+1980↑j
                lda     0x3F, r5
                and     r4, r5, r4
                addo    0x1F, 0x11, r13
                cmpobl  r13, r4, loc_540DC
                cmpobge 0x10, r4, loc_540E0
                subo    0x10, r4, r4
                shlo    0xB, 1, r5
                shlo    0xC, 0xB, r6
                mulo    r4, r5, r4
                addo    r4, r6, r9
                mov     0xA, r4
                b       loc_540EC
# ---------------------------------------------------------------------------
loc_540DC:                              # CODE XREF: adv_movie_cont+1A40↑j
                subo    r4, r5, r4
loc_540E0:                              # CODE XREF: adv_movie_cont+1A44↑j
                shlo    0xC, 0xB, r9
                cmpobge 0xA, r4, loc_540EC
                mov     0xA, r4
loc_540EC:                              # CODE XREF: adv_movie_cont+1A60↑j
                ld      egg_robo_head_rising_anim[r4*4], r4
                shlo    0xE, 3, r8
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xBE4CCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x40A00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                mov     0, g1
                lda     (r4), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_5416C:                              # CODE XREF: adv_movie_cont+18C0↑j
                b       loc_56834       # return
# ---------------------------------------------------------------------------
amed_open_window:                       # CODE XREF: adv_movie_cont+1450↑p
                lda     displacement, r4 # Label from official source
                lda     0x3E6147AE, r5
                lda     0x40200000, r6
                cvtir   r7, r7
                mulr    r5, r7, r5
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     3769, g0        # Giant square
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                bx      (g14)
# ---------------------------------------------------------------------------
adv_movie_snc_init:                     # DATA XREF: adv_movie_cont+1368↑o
                lda     loc_F0C0, g0    # Label from official source
                mov     0, g1
                lda     CG_DATA_START, g2
                call    change_bg_color # Adds 0x4000 to g1 for color code
                call    bg_col_set
                call    am_upper7_black
                call    draw_bottom_black_mask
                lda     0x1001480, g9
                shlo    6, 1, g0
                mov     4, g1
                call    clr_pattern_s
                ld      fa_rob0, r3
                ld      fa_rob1, r7
                mov     0, r4
                mov     1, r5
                stob    r4, 0x1B0(r3)
                stob    r5, 0x1B0(r7)
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_54264
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_54264:                              # CODE XREF: adv_movie_cont+1BD8↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7)
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     0xC1400000, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     0xC1C80000, r15
                st      r15, 0x20(g7)
                shlo    0xF, 1, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_543A8
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_543A8:                              # CODE XREF: adv_movie_cont+1D1C↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     0xC1133333, r15
                st      r15, 0x18(g7)
                lda     displacement, r15
                st      r15, 0x1C(g7)
                lda     0xC1E00000, r15
                st      r15, 0x20(g7)
                shlo    0xC, 5, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      fa_camera, r3
                ld      0x0(r3), r15
                clrbit  1, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                clrbit  2, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                clrbit  0x11, r15, r15
                st      r15, 0x0(r3)
                shlo    0xC, 0xF, r15
                stis    r15, VECTER_X
                lda     loc_A400, r15
                stis    r15, VECTER_Y
                lda     0x3F800000, r15
                st      r15, BRIGHT
                lda     0xAE1405, g0    # sd_computer_1_off
                call    check_same_sound
                call    sound_request_u
                mov     0, r15
                st      r15, movie_flags
                mov     0, r15
                stis    r15, am_cntr    # animation counter
                mov     0, r15
                stis    r15, am_num     # animation number
                mov     0, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  0x1F, r15, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  1, r15, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  6, r15, r15
                st      r15, 0x5004C8
                lda     adv_movie_snc, r15
                st      r15, adv_movie_cont_ex
                lda     adv_movie_snc_disp, r15
                st      r15, adv_movie_disp_ex
adv_movie_snc:                          # DATA XREF: adv_movie_cont+1F18↑o
                ldos    am_num, r3      # Label from official source
                ld      add_BACKUP_RAM_TO_RAM, r7
                ldob    0x3352(r7), r7
                cmpobne 0, r7, ams_scr_ex
                cmpobe  3, r3, japanese_sub_single_seater
                cmpobe  4, r3, japanese_sub_8_emeralds
                b       ams_scr_ex
# ---------------------------------------------------------------------------
japanese_sub_single_seater:             # CODE XREF: adv_movie_cont+1F54↑j
                ld      0x5004C8, r15
                bbc     4, r15, ams_scr_ex
                lda     0x10014A4, g9
                lda     371, g0         # Single Seater Japanese Caption
                call    dsp_pattern_new
                b       ams_scr_ex
# ---------------------------------------------------------------------------
japanese_sub_8_emeralds:                # CODE XREF: adv_movie_cont+1F58↑j
                ld      0x5004C8, r15
                bbc     4, r15, ams_scr_ex
                lda     0x1001492, g9
                lda     370, g0         # Get 8 Emeralds Japanese Caption
                call    dsp_pattern_new
                b       ams_scr_ex
# ---------------------------------------------------------------------------
ams_scr_ex:                             # CODE XREF: adv_movie_cont+1F50↑j
                ld      off_97370[r3*4], r4 # Label from official source
                bx      (r4)
# ---------------------------------------------------------------------------
ams_rob1:                               # DATA XREF: ROM:00097374↓o
                ld      0x5004C8, r15 # Label from official source
                bbc     4, r15, ams_rob1_go
                ld      fa_rob0, r7
                ld      fa_rob1, r11
                ld      0x0(r7), r15
                clrbit  0x1A, r15, r15
                st      r15, 0x0(r7)
                ld      0x0(r11), r15
                clrbit  0x1A, r15, r15
                st      r15, 0x0(r11)
                ld      0x0(r11), r15
                setbit  0x13, r15, r15
                st      r15, 0x0(r11)
                lda     0x185, r15
                st      r15, 0x198(r7)
                lda     0x1AA, r15
                st      r15, 0x198(r11)
                ld      fa_camera, r7
                ld      0x0(r7), r15
                setbit  1, r15, r15
                st      r15, 0x0(r7)
                ld      0x0(r7), r15
                setbit  2, r15, r15
                st      r15, 0x0(r7)
                lda     0xC1266666, r8
                lda     0x40C00000, r9
                lda     0xC1F9999A, r10
                stt     r8, 0x41C(r7)
                b       loc_5481C
# ---------------------------------------------------------------------------
ams_rob1_go:                            # CODE XREF: adv_movie_cont+1FB4↑j
                ldos    am_cntr, r4     # Label from official source
                mov     0, r5
                ldos    adv_anm_timers_tails_lab[r5*2], r5
                subo    r5, r4, r4
                addo    0x1F, 0x1D, r5
                subo    r5, r4, r4
                bbs     0x1F, r4, loc_5481C
                cmpobl  0x1F, r4, loc_5481C
                cvtir   r4, r11
                lda     0xC1266666, r4
                lda     0x40C00000, r5
                lda     0xC1F9999A, r6
                ld      fa_rob0, r7
                ldt     0x20C(r7), r8
                lda     0x42000000, r12
                subr    r4, r8, r13
                subr    r5, r9, r14
                subr    r6, r10, r15
                divr    r12, r13, r13
                divr    r12, r14, r14
                divr    r12, r15, r15
                mulr    r11, r13, r13
                mulr    r11, r14, r14
                mulr    r11, r15, r15
                addr    r4, r13, r4
                addr    r5, r14, r5
                addr    r6, r15, r6
                ld      fa_camera, r7
                stt     r4, 0x41C(r7)
                b       loc_5481C
# ---------------------------------------------------------------------------
loc_5474C:                              # DATA XREF: ROM:00097378↓o
                ldos    am_cntr, r4     # animation counter
                mov     1, r5
                ldos    adv_anm_timers_tails_lab[r5*2], r5
                shlo    5, 3, r6
                addo    r5, r6, r5
                subo    r5, r4, r4
                bbs     0x1F, r4, loc_5481C
                cmpobl  0x1F, r4, loc_5481C
                cmpobne 0, r4, loc_547A0
                ld      fa_rob0, r7
                ld      fa_rob1, r11
                ld      0x0(r7), r15
                setbit  0x13, r15, r15
                st      r15, 0x0(r7)
                ld      0x0(r11), r15
                clrbit  0x13, r15, r15
                st      r15, 0x0(r11)
loc_547A0:                              # CODE XREF: adv_movie_cont+20FC↑j
                cvtir   r4, r11
                lda     0xC1266666, r4
                lda     0x40C00000, r5
                lda     0xC1F9999A, r6
                lda     0x421CCCCD, r8
                lda     0x420A0000, r9
                lda     0x40D9999A, r10
                lda     0x42000000, r12
                subr    r4, r8, r13
                subr    r5, r9, r14
                subr    r6, r10, r15
                divr    r12, r13, r13
                divr    r12, r14, r14
                divr    r12, r15, r15
                mulr    r11, r13, r13
                mulr    r11, r14, r14
                mulr    r11, r15, r15
                addr    r4, r13, r4
                addr    r5, r14, r5
                addr    r6, r15, r6
                ld      fa_camera, r7
                stt     r4, 0x41C(r7)
                b       loc_5481C
# ---------------------------------------------------------------------------
loc_5481C:                              # CODE XREF: adv_movie_cont+2038↑j
                ld      adv_camera_data[r3*4], r4
                bx      (r4)
# ---------------------------------------------------------------------------
loc_54828:                              # DATA XREF: ROM:adv_camera_data↓o
                ldos    am_cntr, r7     # animation counter
                cvtir   r7, r7
                lda     0xBE19999A, r8
                mulr    r7, r8, r7
                lda     0xC32A0000, r4
                lda     0x40000000, r5
                lda     0x41200000, r6
                addr    r6, r7, r6
                ld      fa_camera, r7
                stt     r4, 0x18(r7)
                shlo    9, 5, r15
                stis    r15, 0x24(r7)
                shlo    0xE, 3, r15
                stis    r15, 0x26(r7)
                b       adv_anm_tails_lab_timer_stuff
# ---------------------------------------------------------------------------
loc_5487C:                              # DATA XREF: ROM:00097388↓o
                ld      0x5004C8, r15
                bbc     4, r15, loc_548C0
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                lda     camera_data_adv_tails_looks_at_sonic, r15
                st      r15, 4(r7)
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69EC0
                ld      -4(sp), g13
                subo    4, sp, sp
loc_548C0:                              # CODE XREF: adv_movie_cont+220C↑j
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69F60
                ld      -4(sp), g13
                subo    4, sp, sp
                ldt     0x5C(r7), r8
                ld      fa_camera, r7
                stt     r8, 0x18(r7)
                mov     0, r15
                stis    r15, 0x24(r7)
                shlo    0xF, 1, r15
                stis    r15, 0x26(r7)
                b       adv_anm_tails_lab_timer_stuff
# ---------------------------------------------------------------------------
loc_54910:                              # DATA XREF: ROM:0009738C↓o
                ld      0x5004C8, r15
                bbc     4, r15, loc_54954
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                lda     dword_97428, r15
                st      r15, 4(r7)
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69EC0
                ld      -4(sp), g13
                subo    4, sp, sp
loc_54954:                              # CODE XREF: adv_movie_cont+22A0↑j
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69F60
                ld      -4(sp), g13
                subo    4, sp, sp
                ldt     0x5C(r7), r8
                ld      fa_camera, r7
                stt     r8, 0x18(r7)
                ldos    am_cntr, r4     # animation counter
                mov     1, r5
                ldos    adv_anm_timers_tails_lab[r5*2], r5
                subo    r5, r4, r4
                lda     0x3F, r13
                cmpobl  r13, r4, loc_54A94
                cmpobl  0x1F, r4, loc_54B84
                cvtir   r4, r11
                ld      fa_rob0, r7
                ldt     0x20C(r7), r8
                lda     0xC12E6666, r4
                lda     0x40066666, r5
                lda     0xC1F9999A, r6
                lda     0x42000000, r12
                subr    r4, r8, r13
                subr    r5, r9, r14
                subr    r6, r10, r15
                divr    r12, r13, r13
                divr    r12, r14, r14
                divr    r12, r15, r15
                mulr    r11, r13, r13
                mulr    r11, r14, r14
                mulr    r11, r15, r15
                addr    r4, r13, r4
                addr    r5, r14, r5
                addr    r6, r15, r6
                ld      fa_camera, r7
                ldt     0x18(r7), r8
                subr    r8, r4, r12
                subr    r10, r6, r13
                notbit  0x1F, r12, r12
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x26(r15)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                subr    r9, r5, r13
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x24(r15)
                b       adv_anm_tails_lab_timer_stuff
# ---------------------------------------------------------------------------
loc_54A94:                              # CODE XREF: adv_movie_cont+2334↑j
                shlo    4, 5, r5
                subo    r5, r4, r4
                bbs     0x1F, r4, loc_54B84
                cmpobl  0x1F, r4, loc_54C10
                cvtir   r4, r11
                ld      fa_rob0, r7
                ldt     0x20C(r7), r4
                lda     0xC149999A, r8
                lda     0x40133333, r9
                lda     0xC1D8CCCD, r10
                lda     0x42000000, r12
                subr    r4, r8, r13
                subr    r5, r9, r14
                subr    r6, r10, r15
                divr    r12, r13, r13
                divr    r12, r14, r14
                divr    r12, r15, r15
                mulr    r11, r13, r13
                mulr    r11, r14, r14
                mulr    r11, r15, r15
                addr    r4, r13, r4
                addr    r5, r14, r5
                addr    r6, r15, r6
                ld      fa_camera, r7
                ldt     0x18(r7), r8
                subr    r8, r4, r12
                subr    r10, r6, r13
                notbit  0x1F, r12, r12
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x26(r15)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                subr    r9, r5, r13
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x24(r15)
                b       adv_anm_tails_lab_timer_stuff
# ---------------------------------------------------------------------------
loc_54B84:                              # CODE XREF: adv_movie_cont+2338↑j
                ld      fa_rob0, r7
                ldt     0x20C(r7), r4
                ld      fa_camera, r7
                ldt     0x18(r7), r8
                subr    r8, r4, r12
                subr    r10, r6, r13
                notbit  0x1F, r12, r12
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x26(r15)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                subr    r9, r5, r13
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x24(r15)
                b       adv_anm_tails_lab_timer_stuff
# ---------------------------------------------------------------------------
loc_54C10:                              # CODE XREF: adv_movie_cont+2428↑j
                lda     0xC149999A, r4
                lda     0x40133333, r5
                lda     0xC1D8CCCD, r6
                ld      fa_camera, r7
                ldt     0x18(r7), r8
                subr    r8, r4, r12
                subr    r10, r6, r13
                notbit  0x1F, r12, r12
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x26(r15)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                subr    r9, r5, r13
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x24(r15)
                b       adv_anm_tails_lab_timer_stuff
# ---------------------------------------------------------------------------
loc_54CA8:                              # DATA XREF: ROM:00097390↓o
                ld      0x5004C8, r15
                bbc     4, r15, loc_54CE8
                lda     0x418B3333, r4
                lda     0x41E00000, r5
                lda     0x40F00000, r6
                ld      fa_camera, r7
                stt     r4, 0x18(r7)
                mov     0, r15
                stis    r15, 0x24(r7)
                shlo    0xC, 0xB, r15
                stis    r15, 0x26(r7)
loc_54CE8:                              # CODE XREF: adv_movie_cont+2638↑j
                ld      fa_camera, r7
                ld      0x1C(r7), r8
                lda     0x3CF5C28F, r9
                addr    r8, r9, r8
                st      r8, 0x1C(r7)
                b       adv_anm_tails_lab_timer_stuff
# ---------------------------------------------------------------------------
loc_54D08:                              # DATA XREF: ROM:00097394↓o
                ld      0x5004C8, r15
                bbc     4, r15, loc_54D4C
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                lda     camera_data_adv_get_8_emeralds, r15
                st      r15, 4(r7)
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69EC0
                ld      -4(sp), g13
                subo    4, sp, sp
loc_54D4C:                              # CODE XREF: adv_movie_cont+2698↑j
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69F60
                ld      -4(sp), g13
                subo    4, sp, sp
                ldt     0x5C(r7), r8
                ld      fa_camera, r7
                stt     r8, 0x18(r7)
                ldos    am_cntr, r4     # animation counter
                mov     3, r5
                ldos    adv_anm_timers_tails_lab[r5*2], r5
                subo    r5, r4, r4
                shlo    4, 5, r13
                cmpobl  r13, r4, adv_anm_tails_lab_timer_stuff
                cvtir   r4, r11
                lda     0x41ACCCCD, r4
                lda     0x41A1999A, r5
                lda     0xC05EB852, r6
                lda     0x40E9999A, r8
                lda     0x40547AE1, r9
                lda     0xC18D999A, r10
                ld      fa_camera, r7
                lda     0x42A00000, r12
                subr    r4, r8, r13
                subr    r5, r9, r14
                subr    r6, r10, r15
                divr    r12, r13, r13
                divr    r12, r14, r14
                divr    r12, r15, r15
                mulr    r11, r13, r13
                mulr    r11, r14, r14
                mulr    r11, r15, r15
                addr    r4, r13, r4
                addr    r5, r14, r5
                addr    r6, r15, r6
                ldt     0x18(r7), r8
                subr    r8, r4, r12
                subr    r10, r6, r13
                notbit  0x1F, r12, r12
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x26(r15)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                subr    r9, r5, r13
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x24(r15)
                b       adv_anm_tails_lab_timer_stuff
# ---------------------------------------------------------------------------
adv_anm_tails_lab_timer_stuff:          # CODE XREF: adv_movie_cont+2200↑j
                cmpobe  0, r3, loc_54EF4
                ldos    am_cntr, r4     # animation counter
                mov     0, r5
                ldos    adv_anm_timers_tails_lab[r5*2], r5
                subo    r5, r4, r4
                lda     0xFF, r5
                and     r5, r4, r4
                divo    0x1E, r4, r4
                cmpobge 3, r4, adv_anm_tails_lab_rng
                mov     3, r4
adv_anm_tails_lab_rng:                  # CODE XREF: adv_movie_cont+2844↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                call    rand            # Let's try to figure out what's going on here...
                                        #
                                        #
                and     7, g0, g0
                cmpobne 0, g0, loc_54EE0
                mov     4, r4
loc_54EE0:                              # CODE XREF: adv_movie_cont+2860↑j
                ld      -4(sp), g0      # Restores previous g0 value before calling rand
                subo    4, sp, sp
                st      r4, movie_flags
loc_54EF4:                              # CODE XREF: adv_movie_cont:adv_anm_tails_lab_timer_stuff↑j
                cmpobne 1, r3, loc_54F14
                ld      0x5004C8, r15
                bbc     4, r15, loc_54F14
                lda     adv_movie_snc_disp2, r15
                st      r15, adv_movie_disp_ex
loc_54F14:                              # CODE XREF: adv_movie_cont:loc_54EF4↑j
                ld      0x5004C8, r15
                clrbit  4, r15, r15
                st      r15, 0x5004C8
                ldos    am_cntr, r4     # animation counter
                ldos    adv_anm_timers_tails_lab[r3*2], r5
                cmpobne r4, r5, loc_54F70
                addo    1, r3, r3
                stos    r3, am_num      # animation number
                ld      0x5004C8, r15
                setbit  4, r15, r15
                st      r15, 0x5004C8
                cmpobne 5, r3, loc_54F70
                lda     adv_movie_chaos_init, r15
                st      r15, adv_movie_cont_ex
loc_54F70:                              # CODE XREF: adv_movie_cont+28C0↑j
                b       loc_56834       # return
# ---------------------------------------------------------------------------
adv_movie_snc_disp:                     # DATA XREF: adv_movie_cont+1F28↑o
                ldos    am_cntr, r3     # Label from official source
                shlo    8, 1, r4
                mulo    r3, r4, r4
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_54FD8
                st      r13, 0x0(r15)
                b       loc_54FE4
# ---------------------------------------------------------------------------
loc_54FD8:                              # CODE XREF: adv_movie_cont+2954↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_54FE4:                              # CODE XREF: adv_movie_cont+295C↑j
                ld      0x501A44, r3
                lda     (r3), g2
                mov     0, g1
                lda     74, g0
                call    set_obj_thd
                mov     0, g1
                lda     224, g0         # Water and ground around Tails lab
                call    set_obj
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ld      0x2008(g10), r15
loc_5504C:                              # DATA XREF: MAIN_DATA:02676728↓o
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501844, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_5508C
                st      r13, 0x0(r15)
                b       loc_55098
# ---------------------------------------------------------------------------
loc_5508C:                              # CODE XREF: adv_movie_cont+2A08↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_55098:                              # CODE XREF: adv_movie_cont+2A10↑j
                mov     0, g1
                lda     78, g0          # Area immediately under Tails lab
                call    set_obj
                lda     0x501844, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                shlo    0xE, 1, r4
                ldos    am_cntr, r5     # animation counter
                shlo    8, 1, r6
                mulo    r5, r6, r5
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_5513C
                st      r13, 0x0(r15)
                b       loc_55148
# ---------------------------------------------------------------------------
loc_5513C:                              # CODE XREF: adv_movie_cont+2AB8↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_55148:                              # CODE XREF: adv_movie_cont+2AC0↑j
                mov     0, g1
                lda     3798, g0
                call    set_obj
                mov     0, g1
                lda     3489, g0        # Tails lab hangar walls
                call    set_obj
                mov     0, g1
                lda     3490, g0        # Tails lab hangar door
                call    set_obj
                mov     0, g1
                lda     3491, g0        # Tails lab hangar door
                call    set_obj
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0xC2700000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0xC2140000, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     0, g1
                lda     2945, g0        # Tails plane
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0xC1600000, r15
                st      r15, (g11)[g12*1]
                lda     0x428F999A, r15
                st      r15, (g11)[g12*1]
                lda     0xC18970A4, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     80, g0          # Tails lab satellite dish
                call    set_obj
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_56834       # return
# ---------------------------------------------------------------------------
adv_movie_snc_disp2:                    # DATA XREF: adv_movie_cont+288C↑o
                lda     0x800101, r15 # Label from official source
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xC0000000, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50184C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_552F8
                st      r13, 0x0(r15)
                b       loc_55304
# ---------------------------------------------------------------------------
loc_552F8:                              # CODE XREF: adv_movie_cont+2C74↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_55304:                              # CODE XREF: adv_movie_cont+2C7C↑j
                mov     0, g1
                lda     3473, g0
                call    set_obj
                mov     0, g1
                lda     3490, g0
                call    set_obj
                mov     0, g1
                lda     3491, g0
                call    set_obj
                mov     0, g1
                lda     227, g0
                call    set_obj
                lda     0x50184C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ld      movie_flags, r4
                ld      tails_display_screen[r4*4], r4
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_553C8
                st      r13, 0x0(r15)
                b       loc_553D4
# ---------------------------------------------------------------------------
loc_553C8:                              # CODE XREF: adv_movie_cont+2D44↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_553D4:                              # CODE XREF: adv_movie_cont+2D4C↑j
                mov     0, g1
                lda     (r4), g0        # Renders tails screen
                call    set_obj
                mov     0, g1
                lda     2817, g0        # ON AIR sign
                call    set_obj
                mov     0, g1
                lda     3482, g0        # Tails Lab control panel with monitor
                call    set_obj
                mov     0, g1
                lda     3481, g0        # Chaos Emerald Machine
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x41B80000, r15
                st      r15, (g11)[g12*1]
                lda     0x41BCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     230, g0         # Lunar Rocket
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x410F78D5, r15
                st      r15, (g11)[g12*1]
                lda     0x403851EC, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     231, g0         # Lunar Rocket dome
                call    set_obj
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_56834       # return
# ---------------------------------------------------------------------------
adv_movie_chaos_init:                   # DATA XREF: adv_movie_cont+28E8↑o
                mov     0xA, g0         # Label from official source
                call    _Scroll_Initialize
                lda     0x1004380, g9
                lda     357, g0         # Character portriat background
                call    dsp_pattern_new
                ld      add_BACKUP_RAM_TO_RAM, r7
                ldob    0x3352(r7), r7  # BACKUP_RAM_TO_RAM+0x3352
                cmpobne 0, r7, loc_55518 # If country_val not Japan, branch
                lda     0x1001480, g9
                shlo    6, 1, g0
                mov     4, g1
                call    clr_pattern_s
                lda     0x100149E, g9
                lda     367, g0         # Japanese Who Will Save the World caption
                call    dsp_pattern_new
loc_55518:                              # CODE XREF: adv_movie_cont+2E78↑j
                ld      fa_camera, r3
                ld      0x0(r3), r15
                clrbit  1, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                clrbit  2, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                setbit  0x11, r15, r15
                st      r15, 0x0(r3)
                shlo    0xD, 7, r15
                stis    r15, VECTER_X
                shlo    0xE, 3, r15
                stis    r15, VECTER_Y
                lda     0x3F800000, r15
                st      r15, BRIGHT
                call    amcd_rnd_make
                mov     0, r15
                st      r15, 0x5004DC
                mov     0, r15
                stis    r15, am_cntr    # animation counter
                mov     0, r15
                stis    r15, am_num     # animation number
                mov     0, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  0x1F, r15, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  2, r15, r15
                st      r15, 0x5004C8
                lda     adv_movie_chaos, r15
                st      r15, adv_movie_cont_ex
                lda     adv_movie_chaos_disp, r15
                st      r15, adv_movie_disp_ex
adv_movie_chaos:                        # DATA XREF: adv_movie_cont+2F50↑o
                ldos    am_num, r3      # Label from official source
                ld      0x5004C8, r15
                clrbit  4, r15, r15
                st      r15, 0x5004C8
                ldos    am_cntr, r4     # animation counter
                ldos    adv_anm_chaos_emerald_display[r3*2], r5
                cmpobne r4, r5, loc_5564C
                addo    1, r3, r3
                stos    r3, am_num      # animation number
                ld      0x5004C8, r15
                setbit  4, r15, r15
                st      r15, 0x5004C8
                cmpobne 2, r3, loc_5564C
                lda     adv_movie_tornado_init, r15
                st      r15, adv_movie_cont_ex
loc_5564C:                              # CODE XREF: adv_movie_cont+2F9C↑j
                b       loc_56834       # return
# ---------------------------------------------------------------------------
adv_movie_chaos_disp:                   # DATA XREF: adv_movie_cont+2F60↑o
                ldos    am_num, r3      # Label from official source
                cmpobne 0, r3, loc_556D0
                shlo    5, 3, r4
                ldos    am_cntr, r5     # animation counter
                cmpobg  r4, r5, loc_556D0
                subo    r4, r5, r4
                and     3, r4, r5
                cmpobne 0, r5, loc_556D0
                shro    2, r4, r4
                ldob    movie_flags(r4), r4
                ld      0x5004DC, r15
                setbit  r4, r15, r15
                st      r15, 0x5004DC
                mov     2, r7
                ldos    _uk_textures[r4*4], r6 # TO-DO: Figure this out
                ldos    _uk_textures(r7)[r4*4], r7
                ld      dword_977FC[r4*4], g0
                shli    1, r6, r15
                shli    7, r7, r14
                addi    r14, r15, r15
                lda     TILE_DATA_START, r14
                addo    r14, r15, g9
                call    dsp_pattern_new
loc_556D0:                              # CODE XREF: adv_movie_cont+2FE0↑j
                mov     0, r7
                ld      0x5004DC, r11
loc_556DC:                              # CODE XREF: adv_movie_cont+3230↓j
                ld      off_9781C[r7*4], r4 # TO-DO: Figure this out
                lda     (r4), g0
                call    set_window      # g0 = two shorts
                chkbit  r7, r11
                be      loc_557B8
                and     3, r7, r4
                shlo    0xC, 1, r5
                mulo    r4, r5, r4
                ldos    am_cntr, r6     # animation counter
                shlo    8, 1, r5
                mulo    r5, r6, r5
                bbs     0, r6, loc_55720
                ld      Chaos_Emerald_Object_List[r7*4], r6
                b       loc_5572C
# ---------------------------------------------------------------------------
loc_55720:                              # CODE XREF: adv_movie_cont+3098↑j
                addo    8, r7, r6
                ld      Chaos_Emerald_Object_List[r6*4], r6
loc_5572C:                              # CODE XREF: adv_movie_cont+30A4↑j
                lda     displacement, r8
                lda     displacement, r9
                lda     0x40400000, r10
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     (r6), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_558A4
# ---------------------------------------------------------------------------
loc_557B8:                              # CODE XREF: adv_movie_cont+3078↑j
                ldos    am_cntr, r5     # animation counter
                lda     sub_FFF0, r6
                mulo    r5, r6, r5
                mov     2, r4
                ldos    word_977BC(r4)[r7*4], r8
                addo    r5, r8, r5
                ldos    word_977BC[r7*4], r4
                addo    0x10, r7, r6
                ld      Chaos_Emerald_Object_List[r6*4], r6
                lda     displacement, r8
                lda     0xBF4CCCCD, r9
                lda     0x40800000, r10
                mov     0xC, r12
                mulo    r7, r12, r12
                ldt     flt_9775C[r12*1], r12
                addr    r8, r12, r8
                addr    r9, r13, r9
                addr    r10, r14, r10
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                lda     0x1800303, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     0, g1
                lda     (r6), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_558A4:                              # CODE XREF: adv_movie_cont+313C↑j
                addo    1, r7, r7
                cmpobge 7, r7, loc_556DC
                b       loc_56834       # return
# ---------------------------------------------------------------------------
amcd_rnd_make:                          # CODE XREF: adv_movie_cont+2EF4↑p
                mov     0, r4           # Label from official source
loc_558B4:                              # CODE XREF: adv_movie_cont+3250↓j
                cmpo    8, r4
                ble     loc_558CC
                stob    r4, movie_flags(r4)
                addo    1, r4, r4
                b       loc_558B4
# ---------------------------------------------------------------------------
loc_558CC:                              # CODE XREF: adv_movie_cont+3240↑j
                mov     0, r4
                mov     8, r5
                addo    4, sp, sp
                st      g0, -4(sp)
loc_558E0:                              # CODE XREF: adv_movie_cont+32A8↓j
                cmpo    8, r4
                ble     loc_55924
                call    rand            # Random value stored to g0
                divo    r5, g0, r6
                mulo    r5, r6, r6
                subo    r6, g0, r6
                ldob    movie_flags(r4), r7
                ldob    movie_flags(r4)[r6], r8
                stob    r8, movie_flags(r4)
                stob    r7, movie_flags(r4)[r6]
                addo    1, r4, r4
                subo    1, r5, r5
                b       loc_558E0
# ---------------------------------------------------------------------------
loc_55924:                              # CODE XREF: adv_movie_cont+326C↑j
                ld      -4(sp), g0
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
adv_movie_tornado_init:                 # DATA XREF: adv_movie_cont+2FC4↑o
                mov     0, g0           # Label from official source
                shlo    0xF, 1, g1
                lda     CG_DATA_START, g2
                call    change_bg_color # Adds 0x4000 to g1 for color code
                call    bg_col_set
                lda     0x1000400, g9
                shlo    6, 1, g0
                mov     30, g1
                call    clr_pattern_s
                lda     178, g0
                call    _Scroll_Initialize
                lda     174, g0
                call    _Scroll_Initialize
                shlo    4, 0xB, g0
                call    _Scroll_Initialize
                lda     142, g0
                call    _Scroll_Initialize
                mov     10, g0
                call    _Scroll_Initialize
                call    am_upper7_black
                call    draw_bottom_black_mask
                lda     0x1001480, g9
                shlo    6, 1, g0
                mov     4, g1
                call    clr_pattern_s
                shlo    0xA, 1, r3
                st      r3, 0x500528
                lda     0x1008000, r14
                mov     0, r15
                shlo    9, 1, r13
loc_559C0:                              # CODE XREF: adv_movie_cont+3354↓j
                stis    r15, (r14)
                addo    2, r14, r14
                cmpdeco 1, r13, r13
                bl      loc_559C0
                lda     0x1008800, r14
                mov     0, r15
                shlo    9, 1, r13
loc_559E0:                              # CODE XREF: adv_movie_cont+3374↓j
                stis    r15, (r14)
                addo    2, r14, r14
                cmpdeco 1, r13, r13
                bl      loc_559E0
                ld      fa_rob0, r3
                ld      fa_rob1, r7
                mov     0, r4
                mov     1, r5
                stob    r4, 0x1B0(r3)   # Player 1 is Sonic
                stob    r5, 0x1B0(r7)   # Player 2 is Tails
                ld      fa_rob0, g7
                mov     0, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_55A40
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_55A40:                              # CODE XREF: adv_movie_cont+33B4↑j
                lda     array_of_floats, r15
                st      r15, 0x1D00(g7)
                lda     0x50A284, r15
                st      r15, 0x1D04(g7)
                lda     0x50A288, r15
                st      r15, 0x1D08(g7)
                lda     0x506000, r15
                st      r15, 0x1D0C(g7)
                lda     0x506400, r15
                st      r15, 0x1D10(g7)
                lda     0x506480, r15
                st      r15, 0x1D14(g7)
                lda     0x506580, r15
                st      r15, 0x1D18(g7)
                lda     0x506680, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066C0, r15
                st      r15, 0x1D20(g7)
                lda     0xBF947AE1, r15
                st      r15, 0x18(g7)
                lda     0x3FE66666, r15
                st      r15, 0x1C(g7)
                lda     0x3FC00000, r15
                st      r15, 0x20(g7)
                mov     0, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  31, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      fa_rob1, g7
                mov     1, r3
                stob    r3, 4(g7)
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_55B84
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_55B84:                              # CODE XREF: adv_movie_cont+34F8↑j
                lda     cb_r_1, r15
                st      r15, 0x1D00(g7)
                lda     cb_mul_R, r15   # cb = collission ball
                st      r15, 0x1D04(g7)
                lda     0x50A310, r15
                st      r15, 0x1D08(g7)
                lda     pos_00_x, r15
                st      r15, 0x1D0C(g7)
                lda     0x506440, r15
                st      r15, 0x1D10(g7)
                lda     0x506500, r15
                st      r15, 0x1D14(g7)
                lda     0x506600, r15
                st      r15, 0x1D18(g7)
                lda     0x5066A0, r15
                st      r15, 0x1D1C(g7)
                lda     0x5066D0, r15
                st      r15, 0x1D20(g7)
                lda     0x3E2E147B, r15
                st      r15, 0x18(g7)
                lda     0xBF2E147B, r15
                st      r15, 0x1C(g7)
                lda     0xBECCCCCD, r15
                st      r15, 0x20(g7)
                mov     0, r15
                stis    r15, 0x26(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                mov     0, r15
                stib    r15, 0x2A(g7)
                mov     0, r15
                stis    r15, 0x624(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  31, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  31, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      fa_camera, r3
                ld      0x0(r3), r15
                setbit  1, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                setbit  2, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                setbit  0x11, r15, r15
                st      r15, 0x0(r3)
                shlo    0xD, 7, r15
                stis    r15, VECTER_X
                shlo    0xC, 7, r15
                stis    r15, VECTER_Y
                lda     0x40000000, r15
                st      r15, BRIGHT
                lda     0xC1200000, r4
                lda     0x40A00000, r5
                lda     0xC3FA0000, r6
                stt     r4, movie_flags
                stt     r4, 0x5004E0
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                lda     dword_97458, r15
                st      r15, 4(r7)
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69EC0
                ld      -4(sp), g13
                subo    4, sp, sp
                lda     0xAE1124, g0    # sd_plane_2a
                call    check_same_sound
                call    sound_request_u
                mov     0, r15
                stis    r15, am_cntr    # animation counter
                mov     0, r15
                stis    r15, am_num     # animation number
                mov     0, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  0x1F, r15, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  3, r15, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  5, r15, r15
                st      r15, 0x5004C8
                lda     adv_movie_tornado, r15
                st      r15, adv_movie_cont_ex
                lda     adv_movie_tornado_disp, r15
                st      r15, adv_movie_disp_ex
adv_movie_tornado:                      # DATA XREF: adv_movie_cont+3744↑o
                ldos    am_num, r3      # Label from official source
                ldos    am_cntr, r14    # animation counter
                cmpobne 2, r14, amt_scroll_ex
                lda     loc_F0C0, g0
                mov     0, g1
                lda     CG_DATA_START, g2
                call    change_bg_color # Adds 0x4000 to g1 for color code
                call    bg_col_set
amt_scroll_ex:                          # CODE XREF: adv_movie_cont+3774↑j
                ldos    am_cntr, r14    # Label from official source
                cmpobe  3, r14, amt_rob_kaomuke
                ldos    am_cntr, r14    # animation counter
                cmpobne 2, r14, amt_rob_ex
                ld      fa_rob0, r7
                ld      fa_rob1, r10
                ld      0x0(r7), r15
                clrbit  0x1A, r15, r15
                st      r15, 0x0(r7)
                ld      0x0(r7), r15
                setbit  6, r15, r15
                st      r15, 0x0(r7)
                ld      0x0(r10), r15
                clrbit  0x1A, r15, r15
                st      r15, 0x0(r10)
                lda     0x1A9, r15
                st      r15, 0x198(r7)
                lda     0x1AC, r15
                st      r15, 0x198(r10)
                b       amt_rob_ex
# ---------------------------------------------------------------------------
amt_rob_kaomuke:                        # CODE XREF: adv_movie_cont+379C↑j
                ld      fa_rob0, r7     # Label from official source
                ld      fa_camera, r10
                ld      0x0(r7), r15
                setbit  0x13, r15, r15
                st      r15, 0x0(r7)
                lda     displacement, r4
                lda     0x41200000, r5
                lda     0x447A0000, r6
                stt     r4, 0x41C(r10)
amt_rob_ex:                             # CODE XREF: adv_movie_cont+37A8↑j
                lda     displacement, r7 # Label from official source
                lda     0x3F800000, r8
                cmpobg  2, r3, loc_55EC0
                lda     0x40400000, r8
loc_55EC0:                              # CODE XREF: adv_movie_cont+383C↑j
                ldos    am_cntr, r4     # animation counter
                shlo    6, 3, r5
                subo    r5, r4, r4
                bbs     0x1F, r4, amt_position_go
                shlo    2, 0x19, r13
                cmpobge r13, r4, loc_55EE0
                shlo    2, 0x19, r4
loc_55EE0:                              # CODE XREF: adv_movie_cont+3860↑j
                cvtir   r4, r4
                lda     0x3C23D70A, r7
                mulr    r4, r7, r7
amt_position_go:                        # CODE XREF: adv_movie_cont+3858↑j
                ldt     movie_flags, r4 # Label from official source
                addr    r6, r8, r6
                addr    r5, r7, r5
                stt     r4, movie_flags
                cmpobe  2, r3, amt_camera2
                cmpobe  3, r3, amt_camera2
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69F60
                ld      -4(sp), g13
                subo    4, sp, sp
                ldt     movie_flags, r4
                ldt     0x5C(r7), r8
                ldos    0x0(r7), r11
                addr    r4, r8, r8
                addr    r5, r9, r9
                addr    r6, r10, r10
                ld      fa_rob0, r7
                ldt     0x1F4(r7), r4
                lda     0x3E99999A, r11
                addr    r5, r11, r5
                subr    r8, r4, r12
                subr    r10, r6, r13
                notbit  0x1F, r12, r12
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x26(r15)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                subr    r9, r5, r13
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x24(r15)
                ld      fa_camera, r7
                stt     r8, 0x18(r7)
                b       amt_camera_ex
# ---------------------------------------------------------------------------
amt_camera2:                            # CODE XREF: adv_movie_cont+3890↑j
                ldos    am_cntr, r4     # Label from official source
                mov     1, r5
                ldos    adv_anm_tornado[r5*2], r5
                subo    r5, r4, r4
                lda     0x3F, r13
                cmpobl  r13, r4, amt_camera2_ex
                shlo    6, 1, r5
                subo    r4, r5, r4
                cvtir   r4, r4
                lda     0x3C800000, r6
                lda     0x3F23D70A, r5
                mulr    r4, r6, r6
                ld      fa_camera, r7
                ldt     0x18(r7), r8
                addr    r5, r9, r9
                addr    r6, r10, r10
                stt     r8, 0x18(r7)
                ldos    0x24(r7), r4
                shlo    7, 1, r5
                addo    r4, r5, r4
                stos    r4, 0x24(r7)
                b       amt_camera_ex
# ---------------------------------------------------------------------------
amt_camera2_ex:                         # CODE XREF: adv_movie_cont+3994↑j
                ld      fa_camera, r7   # Label from official source
                ld      0x1C(r7), r4
                lda     0x3F23D70A, r5
                addr    r4, r5, r4
                st      r4, 0x1C(r7)
                ldos    0x24(r7), r4
                shlo    7, 1, r5
                addo    r4, r5, r4
                stos    r4, 0x24(r7)
amt_camera_ex:                          # CODE XREF: adv_movie_cont+3974↑j
                cmpobne 1, r3, amt_sound_ex # Label from official source
                shlo    5, 5, r13
                ldos    am_cntr, r14    # animation counter
                cmpobe  r13, r14, play_sd_plane_2
                lda     0xB4, r13
                ldos    am_cntr, r14    # animation counter
                cmpobe  r13, r14, play_sd_plane_2a_off
                b       amt_sound_ex
# ---------------------------------------------------------------------------
play_sd_plane_2:                        # CODE XREF: adv_movie_cont+3A20↑j
                lda     0xAE113F, g0    # sd_plane_2
                call    check_same_sound
                call    sound_request_u
                b       amt_sound_ex
# ---------------------------------------------------------------------------
play_sd_plane_2a_off:                   # CODE XREF: adv_movie_cont+3A30↑j
                lda     0xAE1401, g0    # sd_plane_2a_off
                call    check_same_sound
                call    sound_request_u
amt_sound_ex:                           # CODE XREF: adv_movie_cont:amt_camera_ex↑j
                ld      0x5004C8, r15 # Label from official source
                clrbit  4, r15, r15
                st      r15, 0x5004C8
                ldos    am_cntr, r4     # animation counter
                ldos    adv_anm_tornado[r3*2], r5
                cmpobne r4, r5, amt_ex
                addo    1, r3, r3
                stos    r3, am_num      # animation number
                ld      0x5004C8, r15
                setbit  4, r15, r15
                st      r15, 0x5004C8
                cmpobne 4, r3, amt_ex
amt_ex:                                 # CODE XREF: adv_movie_cont+3A80↑j
                lda     340, r5         # Label from official source
                cmpobne r4, r5, amt_next_00
                lda     0x1004000, g9
                shlo    6, 1, g0
                shlo    6, 1, g1
                call    clr_pattern_s
                lda     0x1006000, g9
                shlo    6, 1, g0
                shlo    6, 1, g1
                call    clr_pattern_s
                lda     0x1000000, g9
                shlo    6, 1, g0
                shlo    6, 1, g1
                call    clr_pattern_s
                mov     0, r4
                st      r4, adv_stf_logo_0
                shlo    0xA, 1, r4      # r4 = 0x400
                st      r4, adv_stf_logo_400
                shlo    0xF, 1, r15     # r15 = 0x8000
                stis    r15, 0x100A000
                shlo    0xE, 1, r15     # r15 = 0x4000
                stis    r15, 0x100A008
                lda     0x1002190, g9
                lda     513, g0         # Sonic the Fighters logo
                call    dsp_pattern_new
                lda     0x10014DE, g9
                lda     525, g0         # SEGA 1996 logo
                call    dsp_pattern_new
                lda     142, g0
                call    _Scroll_Initialize
amt_next_00:                            # CODE XREF: adv_movie_cont+3AAC↑j
                lda     430, r5         # Label from official source
                cmpobne r4, r5, amt_next_01
                mov     0, r6
                shlo    6, 1, r7
loc_561CC:                              # CODE XREF: adv_movie_cont+3B70↓j
                lda     0x1006000, g9
                shlo    1, r6, r15
                addo    r15, g9, g9
                lda     517, g0         # Blue sky behind STF logo
                call    dsp_pattern_new
                addo    1, r6, r6
                cmpobl  r6, r7, loc_561CC
amt_next_01:                            # CODE XREF: adv_movie_cont+3B48↑j
                lda     493, r5         # Label from official source
                cmpobne r4, r5, amt_next_001
                mov     0, r6
                shlo    6, 1, r7
loc_561FC:                              # CODE XREF: adv_movie_cont+3BA0↓j
                lda     0x1004000, g9
                shlo    1, r6, r15
                addo    r15, g9, g9
                lda     518, g0         # Black sky behind STF logo
                call    dsp_pattern_new
                addo    1, r6, r6
                cmpobl  r6, r7, loc_561FC
amt_next_001:                           # CODE XREF: adv_movie_cont+3B78↑j
                lda     556, r5         # Label from official source
                cmpobne r4, r5, amt_next_002
                lda     0x1006000, g9
                lda     390, g0         # Outer space texture
                call    dsp_pattern_new
amt_next_002:                           # CODE XREF: adv_movie_cont+3BA8↑j
                lda     619, r5         # Label from official source
                cmpobne r4, r5, amt_next_003
                lda     0x1004000, g9
                lda     390, g0         # Outer space texture
                call    dsp_pattern_new
amt_next_003:                           # CODE XREF: adv_movie_cont+3BC0↑j
                lda     430, r5         # Label from official source
                cmpobl  r4, r5, amt_next_02
                mov     8, r3
                bal     scrolling_bg_for_stf_logo
amt_next_02:                            # CODE XREF: adv_movie_cont+3BD8↑j
                lda     340, r5         # Label from official source
                cmpobl  r4, r5, amt_next_004
                lda     405, r5
                cmpobge r4, r5, amt_next_005
                mov     0x18, r3
                shlo    4, 9, r4
                mov     8, r5
                bal     scrambles_textures
amt_next_005:                           # CODE XREF: adv_movie_cont+3BF0↑j
                lda     0x195, r5       # Label from official source
                cmpobge r4, r5, amt_next_004
                mov     0x1A, r3
                lda     0x91, r4
                mov     8, r5
                bal     scrambles_textures2
amt_next_004:                           # CODE XREF: adv_movie_cont+3BE8↑j
                lda     0x1A7, r5       # Label from official source
                cmpobne r4, r5, amt_next_006
                lda     0x1008000, r14
                mov     0, r15
                shlo    9, 1, r13
loc_562AC:                              # CODE XREF: adv_movie_cont+3C40↓j
                stis    r15, (r14)
                addo    2, r14, r14
                cmpdeco 1, r13, r13
                bl      loc_562AC
                lda     0x1000190, g9
                lda     513, g0         # Static Sonic the Fighters title logo (not moving)
                call    dsp_pattern_new
amt_next_006:                           # CODE XREF: adv_movie_cont+3C20↑j
                b       loc_56834       # Label from official source
# ---------------------------------------------------------------------------
adv_movie_tornado_disp:                 # DATA XREF: adv_movie_cont+3754↑o
                ldos    am_num, r3      # Label from official source
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                shlo    0xF, 1, r4
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_56330
                st      r13, 0x0(r15)
                b       loc_5633C
# ---------------------------------------------------------------------------
loc_56330:                              # CODE XREF: adv_movie_cont+3CAC↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_5633C:                              # CODE XREF: adv_movie_cont+3CB4↑j
                ld      0x501A48, r3
                lda     (r3), g2
                mov     0, g1
                lda     948, g0         # Water that Tails and Sonic fly over
                call    set_obj_thd
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     0, g1
                lda     947, g0         # Islands that Tails and Sonic fly over
                call    set_obj
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r4, 0, r15
                st      r15, (g11)[g12*1]
                ld      0x501A48, r3
                lda     (r3), g2
                mov     0, g1
                lda     948, g0         # Water that Tails and Sonic fly over
                call    set_obj_thd
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ldos    am_num, r3      # animation number
                cmpoble 2, r3, loc_563F4
                ldt     movie_flags, r4
                bal     loc_56420
                b       loc_5640C
# ---------------------------------------------------------------------------
loc_563F4:                              # CODE XREF: adv_movie_cont+3D68↑j
                xor     r4, r4, r4
                mov     r4, r5
                mov     r4, r6
                bal     loc_56420
                ldt     movie_flags, r4
loc_5640C:                              # CODE XREF: adv_movie_cont+3D78↑j
                bal     loc_5654C
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_56834       # return
# ---------------------------------------------------------------------------
loc_56420:                              # CODE XREF: adv_movie_cont+3D74↑p
                mov     0, r7
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_5646C
                st      r13, 0x0(r15)
                b       loc_56478
# ---------------------------------------------------------------------------
loc_5646C:                              # CODE XREF: adv_movie_cont+3DE8↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_56478:                              # CODE XREF: adv_movie_cont+3DF0↑j
                ldos    am_cntr, r8     # animation counter
                mov     2, r9
                mulo    r8, r9, r8
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
loc_564C4:                              # CODE XREF: adv_movie_cont+3E84↓j
                shlo    0xC, 1, r8
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                bbs     0, r7, loc_564EC
                mov     0, g1
                lda     950, g0         # Background Cloud Texture 2
                call    set_obj
                b       loc_564F8
# ---------------------------------------------------------------------------
loc_564EC:                              # CODE XREF: adv_movie_cont+3E60↑j
                mov     0, g1
                lda     949, g0         # Background Cloud Texture 1
                call    set_obj
loc_564F8:                              # CODE XREF: adv_movie_cont+3E70↑j
                addo    1, r7, r7
                bbc     4, r7, loc_564C4
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                bx      (g14)
# ---------------------------------------------------------------------------
loc_5654C:                              # CODE XREF: adv_movie_cont:loc_5640C↑p
                lda     0xBF9C28F6, r8
                lda     0x3FF9999A, r9
                lda     0x3FC00000, r10
                ld      fa_rob0, r7
                addr    r4, r8, r8
                addr    r5, r9, r9
                addr    r6, r10, r10
                stt     r8, 0x18(r7)
                lda     0x3E2E147B, r8
                lda     0xBF2E147B, r9
                lda     0xBECCCCCD, r10
                ld      fa_rob1, r7
                addr    r4, r8, r8
                addr    r5, r9, r9
                addr    r6, r10, r10
                stt     r8, 0x18(r7)
                ldt     0x5004E0, r4
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501854, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_565FC
                st      r13, 0x0(r15)
                b       loc_56608
# ---------------------------------------------------------------------------
loc_565FC:                              # CODE XREF: adv_movie_cont+3F78↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_56608:                              # CODE XREF: adv_movie_cont+3F80↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x34006868, r15
                st      r15, (g11)[g12*1]
                lda     0x3D00, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     247, g0         # Tails plane shadow
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x501854, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50186C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_566E0
                st      r13, 0x0(r15)
                b       loc_566EC
# ---------------------------------------------------------------------------
loc_566E0:                              # CODE XREF: adv_movie_cont+405C↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_566EC:                              # CODE XREF: adv_movie_cont+4064↑j
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3F99999A, r15
                st      r15, (g11)[g12*1]
                lda     0x3F99999A, r15
                st      r15, (g11)[g12*1]
                lda     0x3F99999A, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     2945, g0        # Load Tails plane for intro
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x406CCCCD, r15
                st      r15, (g11)[g12*1]
                ldos    am_cntr, r4     # animation counter
                shlo    0xB, 3, r5
                mulo    r4, r5, r5
                bbs     0, r4, loc_567A4
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     2943, g0        # Tails plane propeller static
                call    set_obj
                b       loc_567C4
# ---------------------------------------------------------------------------
loc_567A4:                              # CODE XREF: adv_movie_cont+4108↑j
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                subi    r5, 0, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     2944, g0        # Tails plane propeller moving
                call    set_obj
loc_567C4:                              # CODE XREF: adv_movie_cont+4128↑j
                lda     0x50186C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ld      movie_flags, r15
                st      r15, 0x5004E0
                ld      0x5004D8, r15
                st      r15, 0x5004E4
                ld      0x5004DC, r15
                st      r15, 0x5004E8
                bx      (g14)
# ---------------------------------------------------------------------------
loc_56834:                              # CODE XREF: adv_movie_cont+C↑j
                ret                     # return
# End of function adv_movie_cont
# =============== S U B R O U T I N E =======================================
am_upper7_black:                        # CODE XREF: MEZASE_DEATHEGG_MASK_INT+74↑p
                mov     1, r3           # Label from official source
                ld      texture_palette_offsets[r3*4], r3
                ldos    0xC(r3), r4
                setbit  0xF, r4, r4
                lda     CG_DATA_START, r8
                shlo    6, 7, r10
loc_56858:                              # CODE XREF: am_upper7_black+2C↓j
                stis    r4, (r8)
                addo    2, r8, r8
                cmpdeco 1, r10, r10
                bl      loc_56858
                lda     0x10040A4, g9
                lda     373, g0         # SONIC THE FIGHTERS white text with black background
                call    dsp_pattern_new
                ret
# End of function am_upper7_black
# =============== S U B R O U T I N E =======================================
draw_bottom_black_mask:                 # CODE XREF: MEZASE_DEATHEGG_MASK_INT+78↑p
                mov     1, r3
                ld      texture_palette_offsets[r3*4], r3
                ldos    0xC(r3), r4
                setbit  0xF, r4, r4
                lda     CG_DATA_START, r8
                lda     0x1480, r5
                addo    r5, r8, r8
                shlo    6, 7, r10
loc_568A8:                              # CODE XREF: draw_bottom_black_mask+38↓j
                stis    r4, (r8)
                addo    2, r8, r8
                cmpdeco 1, r10, r10
                bl      loc_568A8
                ret
# End of function draw_bottom_black_mask
# =============== S U B R O U T I N E =======================================
adv_movie_draw_text:                    # CODE XREF: ADV_MOVIE_INT+1C4↑p
                ld      0x5004C8, r3
                and     0xF, r3, r3
                scanbit r3, r3
                bno     loc_56B1C
                cmpobe  0, r3, loc_568E0
                cmpobe  1, r3, loc_569C4
                cmpobe  2, r3, loc_56A70
                b       loc_56B1C
# ---------------------------------------------------------------------------
loc_568E0:                              # CODE XREF: adv_movie_draw_text+14↑j
                ldos    am_cntr, r3     # animation counter
                lda     0x114, r4
                subo    r4, r3, r3
                bbs     0x1F, r3, loc_56B1C
                shlo    6, 1, r4
                divo    r4, r3, r5
                mulo    r4, r5, r4
                subo    r4, r3, r4
                cmpobne 0, r4, loc_569B8
                cmpobe  0, r5, loc_5691C
                cmpobe  1, r5, loc_56958
                cmpobe  2, r5, loc_56988
                cmpobe  3, r5, loc_569A0
                b       loc_56B1C
# ---------------------------------------------------------------------------
loc_5691C:                              # CODE XREF: adv_movie_draw_text+4C↑j
                shlo    0xA, 1, r15
                st      r15, 0x5004EC
                lda     0x1002380, g9
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3352(r3), r3  # country_val
                cmpobe  0, r3, loc_5694C # If country_val is Japan branch
                lda     362, g0         # REVENGE texture en
                b       loc_56950
# ---------------------------------------------------------------------------
loc_5694C:                              # CODE XREF: adv_movie_draw_text+84↑j
                lda     360, g0         # REVENGE texture jp
loc_56950:                              # CODE XREF: adv_movie_draw_text+8C↑j
                call    dsp_pattern_new
                b       loc_569B8
# ---------------------------------------------------------------------------
loc_56958:                              # CODE XREF: adv_movie_draw_text+50↑j
                lda     0x1000380, g9
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3352(r3), r3
                cmpobe  0, r3, loc_5697C # If country_val is Japan branch
                lda     363, g0         # ROBOTONIC (Tex offset 0x29B2960)
                b       loc_56980
# ---------------------------------------------------------------------------
loc_5697C:                              # CODE XREF: adv_movie_draw_text+B4↑j
                lda     361, g0         # EGGMAN
loc_56980:                              # CODE XREF: adv_movie_draw_text+BC↑j
                call    dsp_pattern_new
                b       loc_569B8
# ---------------------------------------------------------------------------
loc_56988:                              # CODE XREF: adv_movie_draw_text+54↑j
                lda     0x1002380, g9
                shlo    6, 1, g0
                mov     6, g1
                call    clr_pattern_s
                b       loc_569B8
# ---------------------------------------------------------------------------
loc_569A0:                              # CODE XREF: adv_movie_draw_text+58↑j
                lda     0x1000380, g9
                shlo    6, 1, g0
                mov     6, g1
                call    clr_pattern_s
                b       loc_569B8
# ---------------------------------------------------------------------------
loc_569B8:                              # CODE XREF: adv_movie_draw_text+48↑j
                mov     8, r10
                bal     sub_56B20
                b       loc_56B1C
# ---------------------------------------------------------------------------
loc_569C4:                              # CODE XREF: adv_movie_draw_text+18↑j
                ldos    am_cntr, r3     # animation counter
                lda     0x23F, r4
                subo    r4, r3, r3
                bbs     0x1F, r3, loc_56B1C
                shlo    6, 1, r4
                divo    r4, r3, r5
                mulo    r4, r5, r4
                subo    r4, r3, r4
                cmpobne 0, r4, loc_56A64
                cmpobe  0, r5, draw_GET_8_EMERALD
                cmpobe  1, r5, draw_S
                cmpobe  2, r5, loc_56A34
                cmpobe  3, r5, loc_56A4C
                b       loc_56B1C
# ---------------------------------------------------------------------------
draw_GET_8_EMERALD:                     # CODE XREF: adv_movie_draw_text+130↑j
                shlo    0xA, 1, r15
                st      r15, 0x5004EC
                lda     0x1002380, g9
                lda     386, g0         # GET 8 EMERALD
                call    dsp_pattern_new
                b       loc_56A64
# ---------------------------------------------------------------------------
draw_S:                                 # CODE XREF: adv_movie_draw_text+134↑j
                lda     0x1000380, g9
                lda     387, g0         # S!
                call    dsp_pattern_new
                b       loc_56A64
# ---------------------------------------------------------------------------
loc_56A34:                              # CODE XREF: adv_movie_draw_text+138↑j
                lda     0x1002380, g9
                shlo    6, 1, g0
                mov     6, g1
                call    clr_pattern_s
                b       loc_56A64
# ---------------------------------------------------------------------------
loc_56A4C:                              # CODE XREF: adv_movie_draw_text+13C↑j
                lda     0x1000380, g9
                shlo    6, 1, g0
                mov     6, g1
                call    clr_pattern_s
                b       loc_56A64
# ---------------------------------------------------------------------------
loc_56A64:                              # CODE XREF: adv_movie_draw_text+12C↑j
                mov     8, r10
                bal     sub_56B20
                b       loc_56B1C
# ---------------------------------------------------------------------------
loc_56A70:                              # CODE XREF: adv_movie_draw_text+1C↑j
                ldos    am_cntr, r3     # animation counter
                addo    0x1F, 1, r4
                subo    r4, r3, r3
                bbs     0x1F, r3, loc_56B1C
                shlo    6, 1, r4
                divo    r4, r3, r5
                mulo    r4, r5, r4
                subo    r4, r3, r4
                cmpobne 0, r4, loc_56B10
                cmpobe  0, r5, draw_who_will_save
                cmpobe  1, r5, draw_the_world
                cmpobe  2, r5, loc_56AE0
                cmpobe  3, r5, loc_56AF8
                b       loc_56B1C
# ---------------------------------------------------------------------------
draw_who_will_save:                     # CODE XREF: adv_movie_draw_text+1DC↑j
                shlo    0xA, 1, r15
                st      r15, 0x5004EC
                lda     0x1002380, g9
                lda     358, g0         # WHO WILL SAVE
                call    dsp_pattern_new
                b       loc_56B10
# ---------------------------------------------------------------------------
draw_the_world:                         # CODE XREF: adv_movie_draw_text+1E0↑j
                lda     0x1000380, g9
                lda     359, g0         # THE WORLD
                call    dsp_pattern_new
                b       loc_56B10
# ---------------------------------------------------------------------------
loc_56AE0:                              # CODE XREF: adv_movie_draw_text+1E4↑j
                lda     0x1002380, g9
                shlo    6, 1, g0
                mov     6, g1
                call    clr_pattern_s
                b       loc_56B10
# ---------------------------------------------------------------------------
loc_56AF8:                              # CODE XREF: adv_movie_draw_text+1E8↑j
                lda     0x1000380, g9
                shlo    6, 1, g0
                mov     6, g1
                call    clr_pattern_s
                b       loc_56B10
# ---------------------------------------------------------------------------
loc_56B10:                              # CODE XREF: adv_movie_draw_text+1D8↑j
                mov     8, r10
                bal     sub_56B20
                b       loc_56B1C
# ---------------------------------------------------------------------------
loc_56B1C:                              # CODE XREF: adv_movie_draw_text+10↑j
                ret
# End of function adv_movie_draw_text
# =============== S U B R O U T I N E =======================================
sub_56B20:                              # CODE XREF: adv_movie_draw_text+100↑p
                shlo    0xF, 1, r15
                stis    r15, 0x100A000
                shlo    0xE, 1, r15
                stis    r15, 0x100A008
                lda     0x1008000, r4
                shlo    4, 7, r5
                addo    0x1F, 0x11, r9
                addo    r4, r5, r6
                ld      0x5004EC, r3
                subi    1, r3, r3
                cmpible 0, r3, loc_56B60
                shlo    0xA, 1, r3
loc_56B60:                              # CODE XREF: sub_56B20+38↑j
                st      r3, 0x5004EC
                mulo    r10, r3, r3
loc_56B6C:                              # CODE XREF: sub_56B20+58↓j
                stos    r3, (r6)
                addo    2, r6, r6
                cmpdeco 1, r9, r9
                bl      loc_56B6C
                bx      (g14)
# End of function sub_56B20
# =============== S U B R O U T I N E =======================================
sub_56B80:                              # CODE XREF: adv_movie_cont+650↑p
                shlo    0xF, 1, r15
                stis    r15, scrB_H_page
                lda     0x1008800, r6
                addo    r6, r3, r7
                ldos    am_cntr, r8     # animation counter
                mulo    r8, r5, r5
loc_56BA4:                              # CODE XREF: sub_56B80+30↓j
                stos    r5, (r7)
                addo    2, r7, r7
                cmpdeco 1, r4, r4
                bl      loc_56BA4
                bx      (g14)
# End of function sub_56B80
# =============== S U B R O U T I N E =======================================
scrambles_textures:                     # CODE XREF: adv_movie_cont+3C00↑p
                shlo    0xF, 1, r15
                stis    r15, 0x100A000
                shlo    0xE, 1, r15
                stis    r15, 0x100A008
                lda     0x1008000, r6
                addo    r6, r3, r7
                ld      adv_stf_logo_0, r8
                addo    1, r8, r8
                shlo    0xA, 1, r9
                cmpoble r8, r9, loc_56BF4
                mov     0, r8
loc_56BF4:                              # CODE XREF: scrambles_textures+34↑j
                st      r8, adv_stf_logo_0
                mulo    r8, r5, r5
loc_56C00:                              # CODE XREF: scrambles_textures+54↓j
                stos    r5, (r7)
                addo    4, r7, r7
                cmpdeco 1, r4, r4
                bl      loc_56C00
                bx      (g14)
# End of function scrambles_textures
# =============== S U B R O U T I N E =======================================
scrambles_textures2:                    # CODE XREF: adv_movie_cont+3C18↑p
                shlo    0xF, 1, r15
                stis    r15, 0x100A000
                shlo    0xE, 1, r15
                stis    r15, 0x100A008
                lda     0x1008000, r6
                addo    r6, r3, r7
                ld      adv_stf_logo_400, r8
                subi    1, r8, r8
                cmpible 0, r8, loc_56C4C
                shlo    0xA, 1, r8
loc_56C4C:                              # CODE XREF: scrambles_textures2+30↑j
                st      r8, adv_stf_logo_400
                mulo    r8, r5, r5
loc_56C58:                              # CODE XREF: scrambles_textures2+50↓j
                stos    r5, (r7)
                addo    4, r7, r7
                cmpdeco 1, r4, r4
                bl      loc_56C58
                bx      (g14)
# End of function scrambles_textures2
# =============== S U B R O U T I N E =======================================
scrolling_bg_for_stf_logo:              # CODE XREF: adv_movie_cont+3BE0↑p
                shlo    0xD, 1, r15
                stis    r15, scrB_V_page
                lda     scrB_V_page, r4
                ld      0x500528, r5
                subo    1, r5, r5
                subo    1, 0, r6
                cmpibne r6, r5, loc_56C98
                shlo    0xA, 1, r5
loc_56C98:                              # CODE XREF: scrolling_bg_for_stf_logo+24↑j
                st      r5, 0x500528
                mulo    r5, r3, r3
                shlo    0xD, 1, r7
                addo    r7, r3, r3
                stos    r3, (r4)
                bx      (g14)
# End of function scrolling_bg_for_stf_logo
# ---------------------------------------------------------------------------
un_56C14_alt:                           # unreachable code
                shlo    0xF, 1, r15
                stis    r15, 0x100A000
                shlo    0xE, 1, r15
                stis    r15, 0x100A008
                lda     0x1008000, r3
                shlo    9, 1, r4
                mov     0, r5
                shlo    8, 3, r7
loc_56CE0:                              # CODE XREF: ROM:00056CEC↓j
                addo    r3, r5, r6
                stos    r4, (r6)
                addo    4, r5, r5
                cmpobne r7, r5, loc_56CE0
                ret
# ---------------------------------------------------------------------------
un_56C14_alt_1:                         # unreachable code
                shlo    0xF, 1, r15
                stis    r15, 0x100A000
                shlo    0xE, 1, r15
                stis    r15, 0x100A008
                lda     0x1008000, r3
                ld      0x500534, r4
                shlo    7, 1, r10
                addo    r10, r4, r4
                st      r4, 0x500534
                ld      adv_stf_logo_0, r5
                shlo    6, 3, r8
                ld      0x500538, r9
                lda     displacement, r12
                cmpr    r12, r9
                be      loc_56D64
                lda     0x40000000, r11
                subr    r11, r9, r9
                st      r9, 0x500538
loc_56D64:                              # CODE XREF: ROM:00056D4C↑j
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                mulr    r9, r7, r7
                cvtri   r7, r7
                subi    r7, 0, r7
                addo    r3, r5, r6
                stos    r7, (r6)
                addo    4, r5, r5
                addo    r10, r4, r4
                cmpdeco 1, r8, r8
                bl      loc_56D64
                ret
# =============== S U B R O U T I N E =======================================
sub_56DA0:                              # CODE XREF: MEZASE_DEATHEGG_INT+20↑p
                ld      fa_camera, r3
                lda     displacement, r15
                stib    r15, 0x40(r3)
                lda     loc_56E38, r15  # Prepare loc_56E38 for execution at 0x56E28
                st      r15, adv_movie_cont_ex
                lda     loc_575C0, r15  # Prepare loc_575C0 for execution at 0x56E34
                st      r15, adv_movie_disp_ex
                ld      0x5004C8, r15
                setbit  0x1F, r15, r15
                st      r15, 0x5004C8
                ret
# End of function sub_56DA0
# =============== S U B R O U T I N E =======================================
sub_56DEC:                              # CODE XREF: MEZASE_DEATHEGG_INT:MEZASE_DEATHEGG_DSP↑p
                ld      debug_flag, r15
                chkbit  5, r15
                bo      mezase_deathegg_ex # mezase = "go toward"
                ldos    am_cntr, r3     # animation counter
                addo    1, r3, r3
                stos    r3, am_cntr     # animation counter
                ldos    am_num, r4      # animation number
                ld      0x5004C8, r5
                ld      adv_movie_cont_ex, r4
                bx      (r4)
# ---------------------------------------------------------------------------
loc_56E2C:                              # CODE XREF: camera_init+A5C↑p
                ld      adv_movie_disp_ex, r4
                bx      (r4)
# ---------------------------------------------------------------------------
loc_56E38:                              # DATA XREF: sub_56DA0+14↑o
                shlo    0xC, 0xF, r15
                stis    r15, VECTER_X
                lda     loc_A400, r15
                stis    r15, VECTER_Y
                lda     0x3F800000, r15
                st      r15, BRIGHT
                ldob    winner, r14
                cmpobe  1, r14, loc_56E7C
                ld      fa_rob0, r7
                b       loc_56E84
# ---------------------------------------------------------------------------
loc_56E7C:                              # CODE XREF: sub_56DEC+80↑j
                ld      fa_rob1, r7
loc_56E84:                              # CODE XREF: sub_56DEC+8C↑j
                ld      0x0(r7), r15
                clrbit  0x11, r15, r15
                st      r15, 0x0(r7)
                ld      0x0(r7), r15
                setbit  0x17, r15, r15
                st      r15, 0x0(r7)
                shlo    0xF, 1, r15
                stis    r15, 0x26(r7)
                lda     0x1DE, r15
                st      r15, 0x198(r7)
                ld      fa_camera, r7
                lda     0x3B4(r7), r7
                lda     dword_97284, r15
                st      r15, 4(r7)
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69EC0
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      mod_fa_burni, r7 # Cloning cutscene
                lda     0x8C(r7), r7
                lda     dword_972A4, r15
                st      r15, 4(r7)
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69EC0
                ld      -4(sp), g13
                subo    4, sp, sp
                lda     0xAE1347, g0    # sd_shatter_3
                call    check_same_sound
                call    sound_request_u
                lda     0xAE1348, g0    # sd_torocco_2
                call    check_same_sound
                call    sound_request_u
                mov     0, r15
                st      r15, 0x5004E0
                mov     0, r15
                st      r15, finish_wall_flag
                mov     0, r15
                stis    r15, am_cntr    # animation counter
                mov     0, r15
                stis    r15, am_num     # animation number
                mov     0, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  0x1F, r15, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  0, r15, r15
                st      r15, 0x5004C8
                lda     loc_56FC0, r15
                st      r15, adv_movie_cont_ex
                lda     loc_575C0, r15
                st      r15, adv_movie_disp_ex
loc_56FC0:                              # DATA XREF: sub_56DEC+1B4↑o
                ldos    am_num, r3      # animation number
                ldos    am_cntr, r14    # animation counter
                cmpobne 2, r14, loc_56FF8
                lda     loc_F0C0, g0
                mov     0, g1
                lda     CG_DATA_START, g2
                call    change_bg_color # Adds 0x4000 to g1 for color code
                call    bg_col_set
                call    am_upper7_black
                call    draw_bottom_black_mask
loc_56FF8:                              # CODE XREF: sub_56DEC+1E4↑j
                cmpobne 1, r3, loc_57038
                ld      0x5004C8, r15
                bbc     4, r15, loc_57038
                lda     0xAE1421, g0    # sd_torocco_2_off
                call    check_same_sound
                call    sound_request_u
                lda     0xAE1255, g0    # sd_US04_15_01
                call    check_same_sound
                call    sound_request_u
                lda     0xAE1250, g0    # sd_US04_11_01
                call    check_same_sound
                call    sound_request_u
loc_57038:                              # CODE XREF: sub_56DEC:loc_56FF8↑j
                cmpobe  1, r3, loc_5707C
                cmpobe  2, r3, loc_57118
                ld      mod_fa_burni, r7 # Cloning cutscene
                lda     0x8C(r7), r7
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69F60
                ld      -4(sp), g13
                subo    4, sp, sp
                ldt     0x5C(r7), r4
                stt     r4, movie_flags
                b       loc_57194
# ---------------------------------------------------------------------------
loc_5707C:                              # CODE XREF: sub_56DEC:loc_57038↑j
                ldos    am_cntr, r4     # animation counter
                mov     0, r5
                ldos    word_9725A[r5*2], r5
                subo    r5, r4, r4
                cvtir   r4, r4
                lda     0x3C23D70A, r5
                mulr    r4, r5, r4
                addo    4, sp, sp
                st      g0, -4(sp)
                call    rand            # Random value stored to g0
                lda     0xFFFF, r5
                and     r5, g0, r5
                ld      -4(sp), g0
                subo    4, sp, sp
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                mulr    r4, r6, r10
                mulr    r4, r5, r4
                lda     0xC2FE0000, r8
                xor     r9, r9, r9
                addr    r4, r8, r8
                stt     r8, movie_flags
                b       loc_57194
# ---------------------------------------------------------------------------
loc_57118:                              # CODE XREF: sub_56DEC+250↑j
                ld      0x5004C8, r15
                bbc     4, r15, loc_5715C
                ld      mod_fa_burni, r7 # Cloning cutscene
                lda     0x8C(r7), r7
                lda     dword_972C4, r15
                st      r15, 4(r7)
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69EC0
                ld      -4(sp), g13
                subo    4, sp, sp
loc_5715C:                              # CODE XREF: sub_56DEC+334↑j
                ld      mod_fa_burni, r7 # Cloning cutscene
                lda     0x8C(r7), r7
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r7, g13
                call    sub_69F60
                ld      -4(sp), g13
                subo    4, sp, sp
                ldt     0x5C(r7), r4
                stt     r4, movie_flags
loc_57194:                              # CODE XREF: sub_56DEC+28C↑j
                ldob    winner, r14
                cmpobe  1, r14, loc_571AC
                ld      fa_rob0, r7
                b       loc_571B4
# ---------------------------------------------------------------------------
loc_571AC:                              # CODE XREF: sub_56DEC+3B0↑j
                ld      fa_rob1, r7
loc_571B4:                              # CODE XREF: sub_56DEC+3BC↑j
                ldt     movie_flags, r4
                lda     0xBE99999A, r8
                lda     0x4202EB85, r9
                lda     0x3FE66666, r10
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                stt     r4, 0x18(r7)
                cmpobe  0, r3, loc_57218
                ldos    am_cntr, r4     # animation counter
                mov     0, r5
                ldos    word_9725A[r5*2], r5 # r5 = 192
                subo    r5, r4, r4
                shro    2, r4, r4
                cmpobge 0x1F, r4, loc_5720C
                mov     0x1F, r4
loc_5720C:                              # CODE XREF: sub_56DEC+418↑j
                and     0x1F, r4, r4
                st      r4, 0x5004E0
loc_57218:                              # CODE XREF: sub_56DEC+3F8↑j
                cmpobe  0, r3, loc_5726C
                cmpobe  2, r3, loc_57234
                lda     0x3DCCCCCD, r15
                st      r15, 0x5004E4
                b       loc_5726C
# ---------------------------------------------------------------------------
loc_57234:                              # CODE XREF: sub_56DEC+430↑j
                ldos    am_cntr, r4     # animation counter
                mov     1, r5
                ldos    word_9725A[r5*2], r5 # r5 = 256
                subo    r5, r4, r4
                shlo    2, 0x19, r13
                cmpobl  r13, r4, loc_5726C
                cvtir   r4, r4
                lda     0x3DCCCCCD, r5
                mulr    r4, r5, r4
                st      r4, 0x5004E4
loc_5726C:                              # CODE XREF: sub_56DEC:loc_57218↑j
                cmpobne 0, r3, loc_57318
                lda     0xC31B0000, r4
                lda     0x3FC00000, r5
                lda     0xC1200000, r6
                ld      fa_camera, r7
                ldt     movie_flags, r8
                lda     0x41A876F8, r9
                stt     r4, 0x18(r7)
                subr    r4, r8, r12
                subr    r6, r10, r13
                notbit  0x1F, r12, r12
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x26(r15)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                subr    r5, r9, r13
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x24(r15)
                b       loc_573C0
# ---------------------------------------------------------------------------
loc_57318:                              # CODE XREF: sub_56DEC:loc_5726C↑j
                lda     0xC30C0000, r4
                lda     0x426D3333, r5
                lda     0x41200000, r6
                ld      fa_camera, r7
                ldt     movie_flags, r8
                lda     0x41A876F8, r11
                addr    r9, r11, r9
                stt     r4, 0x18(r7)
                subr    r4, r8, r12
                subr    r6, r10, r13
                notbit  0x1F, r12, r12
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x26(r15)
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r12
                subr    r5, r9, r13
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r12, (g11)[g12*1]
                st      r13, (g11)[g12*1]
                ld      (g11)[g12*1], r14
                ld      fa_camera, r15
                stos    r14, 0x24(r15)
loc_573C0:                              # CODE XREF: sub_56DEC+528↑j
                cmpobe  0, r3, loc_57558
                ldos    am_cntr, r7     # animation counter
                mov     0, r8
                ldos    word_9725A[r8*2], r8 # Since r8 = 0, r8 will always be 192
                subo    r8, r7, r7
                cmpobe  2, r3, loc_57400
                cvtir   r7, r8
                lda     0x41200000, r9
                lda     0x3E200000, r10
                mulr    r8, r10, r8
                addr    r8, r9, r11
                b       loc_57408
# ---------------------------------------------------------------------------
loc_57400:                              # CODE XREF: sub_56DEC+5F0↑j
                lda     0x41F00000, r11
loc_57408:                              # CODE XREF: sub_56DEC+610↑j
                mov     0x1F, r10
                and     r7, r10, r7
                ld      finish_wall_flag, r15
                setbit  r7, r15, r15
                st      r15, finish_wall_flag
                addo    0x1F, 1, r10
                mulo    r7, r10, r7
                lda     0x574008(r7), r7
                xor     r4, r4, r4
                ld      0x5004D8, r5
                lda     0x40D3E252, r6
                xor     r8, r8, r8
                lda     0xBD23D70A, r9
                mulr    r9, r11, r9
                mov     r8, r10
                stt     r4, 0x0(r7)
                stt     r8, 0xC(r7)
                st      r11, 0x1C(r7)
                ldos    am_cntr, r4     # animation counter
                and     3, r4, r4
                ld      lunar_fox_smoke_puff[r4*4], r4
                st      r4, 0x18(r7)
                ld      finish_wall_flag, r3
loc_57488:                              # CODE XREF: sub_56DEC:loc_57554↓j
                scanbit r3, r7
                bno     loc_57558
                clrbit  r7, r3, r3
                addo    0x1F, 1, r10
                mulo    r7, r10, r7
                lda     0x574008(r7), r7
                ldt     0x0(r7), r4
                ldt     0xC(r7), r8
                addr    r4, r8, r4
                addr    r5, r9, r5
                addr    r6, r10, r6
                bbc     0x1F, r5, loc_57530
                clrbit  0x1F, r9, r8
                lda     0x3FFF, r9
                shlo    0xD, 7, r10
                addo    4, sp, sp
                st      g0, -4(sp)
                call    rand            # Random value stored to g0
                and     g0, r9, r9
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    r9, r10, r9
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ld      (g11)[g12*1], r10
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                mulr    r8, r10, r10
                mulr    r8, r9, r8
                xor     r9, r9, r9
                stt     r8, 0xC(r7)
                lda     0x3DCCCCCD, r5
loc_57530:                              # CODE XREF: sub_56DEC+6CC↑j
                stt     r4, 0x0(r7)
                ld      0x10(r7), r14
                cmpobe  0, r14, loc_57540
                b       loc_57554
# ---------------------------------------------------------------------------
loc_57540:                              # CODE XREF: sub_56DEC+74C↑j
                ld      0x1C(r7), r4
                lda     0x3F828F5C, r5
                mulr    r4, r5, r4
                st      r4, 0x1C(r7)
loc_57554:                              # CODE XREF: sub_56DEC+750↑j
                b       loc_57488
# ---------------------------------------------------------------------------
loc_57558:                              # CODE XREF: sub_56DEC:loc_573C0↑j
                ldos    am_num, r3      # animation number
                ld      0x5004C8, r15
                clrbit  4, r15, r15
                st      r15, 0x5004C8
                ldos    am_cntr, r4     # animation counter
                ldos    word_9725A[r3*2], r5
                cmpobne r4, r5, loc_575BC
                addo    1, r3, r3
                stos    r3, am_num      # animation number
                ld      0x5004C8, r15
                setbit  4, r15, r15
                st      r15, 0x5004C8
                cmpobne 3, r3, loc_575BC
                lda     md_deathegg_sekkin_init, r15 # sekkin = "getting closer"
                st      r15, adv_movie_cont_ex
loc_575BC:                              # CODE XREF: sub_56DEC+798↑j
                b       mezase_deathegg_ex # mezase = "go toward"
# ---------------------------------------------------------------------------
loc_575C0:                              # DATA XREF: sub_56DA0+24↑o
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50183C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_57614
                st      r13, 0x0(r15)
                b       loc_57620
# ---------------------------------------------------------------------------
loc_57614:                              # CODE XREF: sub_56DEC+81C↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_57620:                              # CODE XREF: sub_56DEC+824↑j
                ld      0x501A44, r3
                lda     (r3), g2
                mov     0, g1
                lda     74, g0          # Tails lab water
                call    set_obj_thd
                mov     0, g1
                lda     224, g0         # Grass area surrounding Tails lab
                call    set_obj
                lda     0x50183C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501844, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_576C8
                st      r13, 0x0(r15)
                b       loc_576D4
# ---------------------------------------------------------------------------
loc_576C8:                              # CODE XREF: sub_56DEC+8D0↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_576D4:                              # CODE XREF: sub_56DEC+8D8↑j
                mov     0, g1
                lda     78, g0          # Sand around Tails lab
                call    set_obj
                lda     0x501844, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ldos    am_cntr, r3     # animation counter
                shlo    0xE, 1, r4
                shlo    8, 1, r5
                mulo    r3, r5, r5
                shlo    3, 0xF, r13
                cmpobl  r13, r3, loc_57754
                cvtir   r3, r6
                lda     0x3DCCCCCD, r7
                mulr    r6, r7, r6
                addr    r6, r6, r7
                setbit  0x1F, r6, r6
                b       loc_57764
# ---------------------------------------------------------------------------
loc_57754:                              # CODE XREF: sub_56DEC+948↑j
                lda     0xC1400000, r6
                lda     0x41C00000, r7
loc_57764:                              # CODE XREF: sub_56DEC+964↑j
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50184C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_577AC
                st      r13, 0x0(r15)
                b       loc_577B8
# ---------------------------------------------------------------------------
loc_577AC:                              # CODE XREF: sub_56DEC+9B4↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_577B8:                              # CODE XREF: sub_56DEC+9BC↑j
                mov     0, g1
                lda     3473, g0        # Inside of Tails Lab
                call    set_obj
                mov     0, g1
                lda     3798, g0        # Palmtrees surrounding Tails lab
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0xC1600000, r15
                st      r15, (g11)[g12*1]
                lda     0x428F999A, r15
                st      r15, (g11)[g12*1]
                lda     0xC18970A4, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     80, g0          # Tails lab satellite dish
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x50184C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50186C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_578C4
                st      r13, 0x0(r15)
                b       loc_578D0
# ---------------------------------------------------------------------------
loc_578C4:                              # CODE XREF: sub_56DEC+ACC↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_578D0:                              # CODE XREF: sub_56DEC+AD4↑j
                mov     0, g1
                lda     3489, g0        # Tails lab launch bay
                call    set_obj
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     3491, g0        # Tails lab launch bay door 1
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                mov     0, g1
                lda     3490, g0        # Tails lab launch bay door 2
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ldt     movie_flags, r4
                lda     0x41B80000, r8
                lda     0x41BCCCCD, r9
                subr    r8, r4, r4
                ld      0x5004E0, r7
                ld      lunar_fox_exhaust[r7*4], r7
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     227, g0         # Lunar Fox jet
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ldos    am_num, r14     # animation number
                cmpobe  0, r14, loc_579F8
                mov     0, g1
                lda     (r7), g0
                call    set_obj
loc_579F8:                              # CODE XREF: sub_56DEC+BFC↑j
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     230, g0         # Lunar Fox
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x410F78D5, r15
                st      r15, (g11)[g12*1]
                lda     0x403851EC, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     231, g0         # Lunar Fox Cockpit
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ldos    am_num, r14     # animation number
                cmpobe  0, r14, loc_57F50
                ldos    am_cntr, r3     # animation counter
                and     7, r3, r3
                ld      metal_and_lunar_fox_exhaust[r3*4], r7
                ldt     movie_flags, r4
                shlo    0xF, 1, r8
                lda     0x4022AEA7, r9
                addr    r5, r9, r5
                ld      0x5004E4, r9
                lda     0xBD001671, r10
                mulr    r9, r10, r10
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x41200000, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x41200000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0xBF12CC2F, r15
                st      r15, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0xBEA981D6, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x3F12CC2F, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3F7E42C6, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x3F12CC2F, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xBF7E42C6, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      finish_wall_flag, r3
                ldt     movie_flags, r4
                shlo    0xF, 1, r5
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      fa_camera, r4
                ldos    0x26(r4), r5
                ldos    0x24(r4), r4
                shlo    0xF, 1, r6
loc_57C38:                              # CODE XREF: sub_56DEC+EFC↓j
                scanbit r3, r7
                bno     loc_57CEC
                clrbit  r7, r3, r3
                addo    0x1F, 1, r10
                mulo    r7, r10, r7
                lda     0x574008(r7), r7
                ldt     0x0(r7), r8
                ld      0x1C(r7), r11
                ld      0x18(r7), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r6, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     0, g1
                lda     (r12), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_57C38
# ---------------------------------------------------------------------------
loc_57CEC:                              # CODE XREF: sub_56DEC+E50↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      finish_wall_flag, r3
                ldt     movie_flags, r4
                lda     0x2AAA, r5
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      fa_camera, r4
                ldos    0x26(r4), r5
                ldos    0x24(r4), r4
                lda     loc_2AA8+2, r6
loc_57D64:                              # CODE XREF: sub_56DEC+1028↓j
                scanbit r3, r7
                bno     loc_57E18
                clrbit  r7, r3, r3
                addo    0x1F, 1, r10
                mulo    r7, r10, r7
                lda     0x574008(r7), r7
                ldt     0x0(r7), r8
                ld      0x1C(r7), r11
                ld      0x18(r7), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r6, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     0, g1
                lda     (r12), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_57D64
# ---------------------------------------------------------------------------
loc_57E18:                              # CODE XREF: sub_56DEC+F7C↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      finish_wall_flag, r3
                ldt     movie_flags, r4
                lda     0xD555, r5
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      fa_camera, r4
                ldos    0x26(r4), r5
                ldos    0x24(r4), r4
                lda     loc_D554+1, r6
loc_57E90:                              # CODE XREF: sub_56DEC+1154↓j
                scanbit r3, r7
                bno     loc_57F44
                clrbit  r7, r3, r3
                addo    0x1F, 1, r10
                mulo    r7, r10, r7
                lda     0x574008(r7), r7
                ldt     0x0(r7), r8
                ld      0x1C(r7), r11
                ld      0x18(r7), r12
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                st      r11, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                subi    r6, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     0, g1
                lda     (r12), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_57E90
# ---------------------------------------------------------------------------
loc_57F44:                              # CODE XREF: sub_56DEC+10A8↑j
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_57F50:                              # CODE XREF: sub_56DEC+C90↑j
                lda     0x50186C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       mezase_deathegg_ex # mezase = "go toward"
# ---------------------------------------------------------------------------
md_deathegg_sekkin_init:                # DATA XREF: sub_56DEC+7C0↑o
                lda     142, g0         # Label from official source
                call    _Scroll_Initialize
                lda     0x1004000, g9
                lda     390, g0         # Outer space texture
                call    dsp_pattern_low
                lda     0x100407C, g9
                lda     390, g0         # Outer space texture
                call    dsp_pattern_low
                call    am_upper7_black
                call    draw_bottom_black_mask
                ld      fa_camera, r3
                ld      0x0(r3), r15
                setbit  0x11, r15, r15
                st      r15, 0x0(r3)
                lda     loc_F100, r15
                stis    r15, VECTER_X
                lda     loc_AB00, r15
                stis    r15, VECTER_Y
                lda     0x3F666666, r15
                st      r15, BRIGHT
                lda     0xAE1417, g0    # sd_US04_15_01_off
                call    check_same_sound
                call    sound_request_u
                lda     0xAE133D, g0    # sd_bomb_1
                call    check_same_sound
                call    sound_request_u
                ldob    winner, r14
                cmpobe  1, r14, loc_58048
                ld      fa_rob0, r3
                b       loc_58050
# ---------------------------------------------------------------------------
loc_58048:                              # CODE XREF: sub_56DEC+124C↑j
                ld      fa_rob1, r3
loc_58050:                              # CODE XREF: sub_56DEC+1258↑j
                ldob    0x1B1(r3), r3
                ld      lunar_fox_cutscene_player_heads[r3*4], r3 # Are these the heads inside the lunar fox
                st      r3, 0x5004E0
                mov     0, r15
                stis    r15, am_cntr    # animation counter
                mov     0, r15
                stis    r15, am_num     # animation number
                mov     0, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  0x1F, r15, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  1, r15, r15
                st      r15, 0x5004C8
                lda     md_deathegg_sekkin, r15 # sekkin = "getting closer"
                st      r15, adv_movie_cont_ex
                lda     md_deathegg_sekkin_disp, r15 # sekkin = "getting closer"
                st      r15, adv_movie_disp_ex
md_deathegg_sekkin:                     # DATA XREF: sub_56DEC+12C4↑o
                ld      debug_flag, r15 # Label from official source
                bbs     5, r15, loc_58204
                ldos    am_num, r3      # animation number
                ldos    am_cntr, r4     # animation counter
                cvtir   r4, r4
                lda     0x3DCCCCCD, r6
                mulr    r4, r6, r6
                lda     0xC1200000, r8
                addr    r6, r8, r6
                xor     r4, r4, r4
                lda     0xBD23D70A, r5
                stt     r4, movie_flags
                ldos    am_cntr, r4     # animation counter
                shlo    7, 1, r13
                cmpobl  r13, r4, loc_5817C
                cvtir   r4, r4
                lda     0xBB4CCCCD, r5
                lda     0x3E99999A, r6
                mulr    r4, r5, r4
                addr    r4, r6, r4
                ld      0x5004DC, r10
                addr    r4, r10, r10
                xor     r8, r8, r8
                xor     r9, r9, r9
                ld      fa_camera, r7
                stt     r8, 0x18(r7)
                mov     0, r15
                stis    r15, 0x24(r7)
                mov     0, r15
                stis    r15, 0x26(r7)
                b       loc_581A8
# ---------------------------------------------------------------------------
loc_5817C:                              # CODE XREF: sub_56DEC+133C↑j
                ld      fa_camera, r7
                ld      0x20(r7), r8
                lda     0x3ACC28F5, r9
                shlo    6, 3, r10
                subo    r4, r10, r10
                cvtir   r10, r10
                mulr    r9, r10, r9
                addr    r8, r9, r8
                st      r8, 0x20(r7)
loc_581A8:                              # CODE XREF: sub_56DEC+138C↑j
                ld      0x5004C8, r15
                clrbit  4, r15, r15
                st      r15, 0x5004C8
                ldos    am_cntr, r4     # animation counter
                ldos    word_97260[r3*2], r5
                cmpobne r4, r5, loc_58204
                addo    1, r3, r3
                stos    r3, am_num      # animation number
                ld      0x5004C8, r15
                setbit  4, r15, r15
                st      r15, 0x5004C8
                cmpobne 1, r3, loc_58204
                lda     md_deathegg_sekkin_init, r15 # sekkin = "getting closer"
                st      r15, adv_movie_cont_ex
loc_58204:                              # CODE XREF: sub_56DEC+12EC↑j
                shlo    4, 7, r3
                shlo    4, 0x11, r4
                mov     1, r5
                bal     sub_56B80
                b       mezase_deathegg_ex # mezase = "go toward"
# ---------------------------------------------------------------------------
md_deathegg_sekkin_disp:                # DATA XREF: sub_56DEC+12D4↑o
                ld      0x2008(g10), r15 # Label from official source
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x50184C, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_58260
                st      r13, 0x0(r15)
                b       loc_5826C
# ---------------------------------------------------------------------------
loc_58260:                              # CODE XREF: sub_56DEC+1468↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_5826C:                              # CODE XREF: sub_56DEC+1470↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x4149999A, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     3545, g0        # Main Death Egg 2 model
                call    set_obj
                ldos    am_cntr, r4     # animation counter
                shlo    7, 1, r5
                mov     0x10, r6
                mulo    r4, r5, r5
                mulo    r4, r6, r6
                lda     0x2AAA, r7
                shlo    0xD, 1, r8
                shlo    0xE, 1, r9
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0xBF800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F000000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     3351, g0        # Death Egg 2 moustache part
                call    set_obj
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0xBF800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                lda     0x3F800000, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     3351, g0        # Death Egg 2 moustache part
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 prongs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r8, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 prongs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 prongs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r8, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 prongs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 prongs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                subi    r8, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x40B00000, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                mov     0, g1
                lda     79, g0          # Small Death Egg 2 prongs
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x50184C, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                shlo    0xE, 1, r4
                shlo    0xF, 1, r5
                ldt     movie_flags, r8
                ld      0x2008(g10), r15
                st      g14, mmode
                mov     0, g14
                st      g14, 0x0(g10)
                ld      mmode, g14
                st      r15, buffer_ptr
                lda     0x501864, r15
                ld      4(r15), r14
                ld      0x2008(g10), r13
                cmpobne 0, r14, loc_587A8
                st      r13, 0x0(r15)
                b       loc_587B4
# ---------------------------------------------------------------------------
loc_587A8:                              # CODE XREF: sub_56DEC+19B0↑j
                setbit  0x1F, r13, r13
                st      r13, 0x900000(r14)
loc_587B4:                              # CODE XREF: sub_56DEC+19B8↑j
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3C23D70A, r15
                st      r15, (g11)[g12*1]
                lda     0x3C23D70A, r15
                st      r15, (g11)[g12*1]
                lda     0x3C23D70A, r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                mov     3, g0
                call    set_mmode
                mov     0, g1
                lda     230, g0         # Lunar Fox
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x410F78D5, r15
                st      r15, (g11)[g12*1]
                lda     0x403851EC, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     231, g0         # Lunar Fox Cockpit
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3FCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0xBE4CCCCD, r15
                st      r15, (g11)[g12*1]
                shlo    0xE, 1, r4
                shlo    0xF, 1, r5
                ld      0x5004E0, r6
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                subi    r4, 0, r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                mov     0, g1
                lda     (r6), g0
                call    set_obj
                mov     1, g0
                call    set_mmode
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ldos    am_cntr, r3     # animation counter
                and     7, r3, r3
                ld      metal_and_lunar_fox_exhaust[r3*4], r7
                shlo    0xE, 1, r4
                shlo    0xF, 1, r5
                ldt     movie_flags, r8
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0xBF12CC2F, r15
                st      r15, (g11)[g12*1]
                lda     0x3FE58423, r15
                st      r15, (g11)[g12*1]
                lda     0xBEA981D6, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x3F12CC2F, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3F7E42C6, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                lda     0x3F12CC2F, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0xBF7E42C6, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     (r7), g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x501864, r15
                ld      0x0(r15), r14
                ld      0x2008(g10), r13
                st      r13, 4(r15)
                setbit  0x1F, r14, r14
                st      r14, 0x0(g10)
                ld      0x2008(g10), r15
                ld      buffer_ptr, r14
                setbit  0x1F, r15, r15
                st      r15, 0x900000(r14)
                b       mezase_deathegg_ex # mezase = "go toward"
# ---------------------------------------------------------------------------
mezase_deathegg_ex:                     # CODE XREF: sub_56DEC+C↑j
                ret                     # Label from official source
# End of function sub_56DEC
# =============== S U B R O U T I N E =======================================
sub_58AA8:                              # CODE XREF: ROM:00010430↑p
                lda     0x438C0000, r15
                st      r15, focus_dist_x
                lda     0x438C0000, r15
                st      r15, focus_dist_y
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                mov     0, r15
                stis    r15, 0x100A000
                mov     0, r15
                stis    r15, 0x100A008
                lda     0x1000000, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                lda     0x1002000, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                ld      fa_camera, r3
                lda     displacement, r15
                stib    r15, 0x40(r3)
                ld      0x0(r3), r15
                setbit  1, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                setbit  2, r15, r15
                st      r15, 0x0(r3)
                xor     r4, r4, r4
                lda     0x40400000, r5
                lda     0xC0A00000, r6
                stt     r4, 0x18(r3)
                shlo    0xB, 0x1F, r15
                stis    r15, 0x24(r3)
                mov     0, r15
                stis    r15, 0x26(r3)
                mov     0, r15
                stis    r15, 0x28(r3)
                ld      fa_rob0, r3
                ld      fa_rob1, r7
                ldib    0x1B1(r3), r15
                stib    r15, movie_flags
                ldib    0x1B1(r7), r15
                stib    r15, 0x5004D8
                mov     0xC, r15
                stib    r15, 0x1B0(r3)
                mov     3, r15
                stib    r15, 0x1B0(r7)
                ld      0x0(r3), r15
                clrbit  0x11, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r7), r15
                clrbit  0x11, r15, r15
                st      r15, 0x0(r7)
                xor     r4, r4, r4
                lda     0xC1200000, r5
                mov     r4, r6
                stt     r4, 0x18(r3)
                lda     0x40000000, r4
                mov     r4, r6
                stt     r4, 0x18(r7)
                shlo    0xF, 1, r15
                stis    r15, 0x26(r3)
                shlo    0xF, 1, r15
                stis    r15, 0x26(r7)
                call    sub_5A784
                lda     0xAE113B, g0    # sd_ufo_6b
                call    check_same_sound
                call    sound_request_u
                mov     0, r15
                stis    r15, am_cntr    # animation counter
                mov     0, r15
                stis    r15, am_num     # animation number
                mov     0, r15
                st      r15, 0x5004C8
                ld      0x5004C8, r15
                setbit  0x1F, r15, r15
                st      r15, 0x5004C8
                ret
# End of function sub_58AA8
# =============== S U B R O U T I N E =======================================
metal_and_eggman_flee:                  # CODE XREF: ROM:ENDSUB_MOVIE2_DSP↑p
                ld      debug_flag, r15
                bbs     5, r15, loc_58EB0 # return
                ldos    am_num, r3      # animation number
                ldos    am_cntr, r4     # animation counter
                shlo    6, 5, r13
                ldos    am_cntr, r14    # animation counter
                cmpobe  r13, r14, loc_58CAC
                ldos    am_num, r14     # animation number
                cmpobne 2, r14, loc_58CBC
                ld      0x5004C8, r15
                bbc     4, r15, loc_58CBC
                lda     0xAE122F, g0    # sd_WB02_29_05
                call    check_same_sound
                call    sound_request_u
                lda     0xAE113C, g0    # sd_ufo_esc_1
                call    check_same_sound
                call    sound_request_u
                b       loc_58CBC
# ---------------------------------------------------------------------------
loc_58CAC:                              # CODE XREF: metal_and_eggman_flee+28↑j
                lda     0xAE1404, g0    # sd_ufo_6b_off
                call    check_same_sound
                call    sound_request_u
loc_58CBC:                              # CODE XREF: metal_and_eggman_flee+34↑j
                ld      fa_rob0, r3
                ld      fa_rob1, r7
                ldos    am_num, r14     # animation number
                cmpobe  1, r14, loc_58E00
                ldos    am_num, r14     # animation number
                cmpobe  2, r14, loc_58D3C
                ldos    am_cntr, r14    # animation counter
                cmpobne 2, r14, loc_58D20
                lda     0x1A7, r15
                st      r15, 0x198(r3)  # P1_PARTS+0x198
                ld      0x0(r3), r15
                setbit  0x13, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r7), r15
                setbit  0x13, r15, r15
                st      r15, 0x0(r7)
                ld      fa_camera, r10
                ldt     0x18(r10), r4
                stt     r4, 0x41C(r10)
loc_58D20:                              # CODE XREF: metal_and_eggman_flee+A8↑j
                ld      0x1C(r3), r4
                lda     0x3DA00000, r5
                addr    r4, r5, r4
                st      r4, 0x1C(r3)
                st      r4, 0x1C(r7)
                b       loc_58E00
# ---------------------------------------------------------------------------
loc_58D3C:                              # CODE XREF: metal_and_eggman_flee+9C↑j
                ld      0x5004C8, r15
                bbc     4, r15, loc_58D80
                ld      mod_fa_burni, r10 # Cloning cutscene
                lda     0x8C(r10), r10
                lda     dword_972E4, r15
                st      r15, 4(r10)
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r10, g13
                call    sub_69EC0
                ld      -4(sp), g13
                subo    4, sp, sp
loc_58D80:                              # CODE XREF: metal_and_eggman_flee+100↑j
                ldos    am_cntr, r4     # animation counter
                shlo    5, 7, r13
                cmpobl  r13, r4, loc_58DB8
                ldos    0x26(r3), r4    # p1_yang_0
                ldos    0x26(r7), r5
                shlo    0xA, 1, r6
                subo    r6, r4, r4
                addo    r6, r5, r5
                stos    r4, 0x26(r3)
                stos    r5, 0x26(r7)
                lda     0x3F800000, r15
                st      r15, 0x20(r7)
loc_58DB8:                              # CODE XREF: metal_and_eggman_flee+148↑j
                ld      mod_fa_burni, r10 # Cloning cutscene
                lda     0x8C(r10), r10
                addo    4, sp, sp
                st      g13, -4(sp)
                mov     r10, g13
                call    sub_69F60
                ld      -4(sp), g13
                subo    4, sp, sp
                ldt     0x5C(r10), r4
                stt     r4, 0x18(r3)    # p1_xpos
                ld      0x20(r7), r4
                lda     0x3F8CCCCD, r5
                addr    r4, r5, r4
                st      r4, 0x20(r7)
loc_58E00:                              # CODE XREF: metal_and_eggman_flee+90↑j
                ldos    am_cntr, r3     # animation counter
                addo    1, r3, r3
                stos    r3, am_cntr     # animation counter
                ldos    am_num, r3      # animation number
                ld      0x5004C8, r15
                clrbit  4, r15, r15
                st      r15, 0x5004C8
                ldos    am_cntr, r4     # animation counter
                ldos    word_97254[r3*2], r5
                cmpobne r4, r5, loc_58E7C
                addo    1, r3, r3
                stos    r3, am_num      # animation number
                ld      0x5004C8, r15
                setbit  4, r15, r15
                st      r15, 0x5004C8
                cmpobne 3, r3, loc_58E7C
                ld      0x5004C8, r15
                clrbit  0x1F, r15, r15
                st      r15, 0x5004C8
loc_58E7C:                              # CODE XREF: metal_and_eggman_flee+1FC↑j
                b       loc_58EB0       # return
# ---------------------------------------------------------------------------
loc_58E80:                              # CODE XREF: camera_init+A6C↑p
                addo    4, sp, sp
                st      g7, -4(sp)
                ld      fa_rob0, g7
                call    rob_disp
                ld      fa_rob1, g7
                call    rob_disp
                ld      -4(sp), g7
                subo    4, sp, sp
loc_58EB0:                              # CODE XREF: metal_and_eggman_flee+8↑j
                ret                     # return
# End of function metal_and_eggman_flee
# =============== S U B R O U T I N E =======================================
load_egg_game_over_environment:         # CODE XREF: OVER_DSP+20↑p
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ld      0x501A48, r3
                lda     (r3), g2
                mov     0, g1
                lda     948, g0         # big round texture model
                call    set_obj_thd
                mov     0, g1
                lda     947, g0         # 4 small islands
                call    set_obj
                ld      0x501A48, r3
                lda     (r3), g2
                mov     0, g1
                lda     948, g0         # big round texture model
                call    set_obj_thd
                mov     0, r7
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
loc_58F0C:                              # CODE XREF: load_egg_game_over_environment+90↓j
                shlo    0xC, 1, r8
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                bbs     0, r7, loc_58F34
                mov     0, g1
                lda     950, g0         # black sky thing
                call    set_obj
                b       loc_58F40
# ---------------------------------------------------------------------------
loc_58F34:                              # CODE XREF: load_egg_game_over_environment+6C↑j
                mov     0, g1
                lda     949, g0         # another black sky thing
                call    set_obj
loc_58F40:                              # CODE XREF: load_egg_game_over_environment+7C↑j
                addo    1, r7, r7
                bbc     4, r7, loc_58F0C
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      fa_camera, r3
                xor     r4, r4, r4
                lda     0x41200000, r5
                mov     r4, r6
                mov     0, r7
                ld      frame_counter, r8
                mov     8, r9
                mulo    r8, r9, r8
                stt     r4, 0x18(r3)
                stos    r7, 0x24(r3)
                stos    r8, 0x26(r3)
                ret
# End of function load_egg_game_over_environment
# ---------------------------------------------------------------------------
rom_memtest_checksum:.long 0x6400000    # DATA XREF: ROM:loc_5BF4C↓r
                .long 0x80000
                .long 0
                .long 0x8DB6
rom_memtest_text_placements:.long 0x1000610
rom_memtest_text:.long aIc7             # DATA XREF: ROM:0005BE94↓t
                .long 0x6400000
                .long 0x80000
                .long 1
                .long 0x7767
                .long 0x1000632
                .long aIc8              # "IC. 8"
                .long 0x2800000
                .long 0x400000
                .long 0
                .long 0xB097
                .long 0x1000656
                .long aIc9              # "IC. 9"
                .long 0x2800000
                .long 0x400000
                .long 1
                .long 0x665E
                .long 0x1000710
                .long aIc10             # "IC.10"
                .long 0x2000000
                .long 0x400000
                .long 0
                .long 0x5F78
                .long 0x1000732
                .long aIc11             # "IC.11"
                .long 0x2000000
                .long 0x400000
                .long 1
                .long 0x75F7
                .long 0x1000756
                .long aIc12             # "IC.12"
                .long 0
                .long 0x80000
                .long 0
program_rom_1:  .long 0xC988            # DATA XREF: calc_crc+8↓o
                .long 0x1000810
                .long aIc15             # "IC.15"
                .long 0
                .long 0x80000
                .long 1
program_rom_2:  .long 0xE4              # DATA XREF: calc_crc+10↓o
                .long 0x1000832
                .long aIc16             # "IC.16"
# =============== S U B R O U T I N E =======================================
sub_5905C:                              # CODE XREF: TEST_INT+C8↑p
                lda     0x1000080, g9
                shlo    6, 1, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                ld      mod_fa_control0, r3
                ld      0x0(r3), r15
                setbit  0, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                setbit  1, r15, r15
                st      r15, 0x0(r3)
                mov     1, r4
                ld      mod_fa_control0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_user, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     fa_user, r5     # return
                st      r5, 0xC(r3)
                mov     1, r4
                ld      mod_fa_game_disp, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     0, r15
                stis    r15, motion_set_mot_val
                mov     0, r15
                stib    r15, 0x508040
                mov     0, r15
                stib    r15, 0x508050
                ldib    mode, r15
                lda     1(r15), r15
                stib    r15, mode
                mov     0, r15
                stib    r15, material_num
                mov     0, r15
                stib    r15, 0x530001
                lda     0xEF, r15
                stib    r15, 0x530002
                lda     0x3F, r15
                stib    r15, 0x530003
                lda     0x7F, r15
                stib    r15, 0x530004
                lda     0x3F800000, r15
                st      r15, 0x530104
                mov     0, r15
                st      r15, 0x530108
                mov     0, r15
                stib    r15, 0x53010C
                mov     0, r15
                stis    r15, 0x53011C
                mov     0, r15
                stis    r15, 0x530120
                lda     displacement, r15
                st      r15, 0x530110
                lda     0x3F800000, r15
                st      r15, 0x530114
                lda     displacement, r15
                st      r15, 0x530118
                lda     0x3F800000, r15
                st      r15, 0x530130
                lda     0x3F800000, r15
                st      r15, 0x530134
                lda     0x3F800000, r15
                st      r15, 0x530138
                mov     0, r15
                stib    r15, TRANS_MAP
                lda     0xBEE66666, r15
                st      r15, 0x530140
                lda     0xBF63D70A, r15
                st      r15, 0x530144
                lda     0x3EE66666, r15
                st      r15, 0x530148
                mov     0, r15
                stib    r15, 0x500085
                subo    r3, r3, r3
                stob    r3, 0x508008
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      fa_camera, g6
                ld      INTERUPT_FLAGS_HELD_PREV_FRAME, r7
                ld      INTERUPT_FLAGS_HELD, r9
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                lda     cam_mode9, r15
                stib    r15, 0x40(g6)
                shlo    0xF, 1, r15
                stis    r15, 0x500082
                lda     0x100C000, r4
                mov     0, r5
                shlo    0xC, 1, r6
loc_592A4:                              # CODE XREF: sub_5905C+254↓j
                stos    r5, (r4)
                addo    2, r4, r4
                cmpdeco 1, r6, r6
                bl      loc_592A4
                b       loc_59338
# ---------------------------------------------------------------------------
DEBUG_TEST_MODES:                       # CODE XREF: TEST_DSP:call_DEBUG_TESTS↑p
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      fa_camera, g6
                ld      INTERUPT_FLAGS_HELD_PREV_FRAME, r7
                ld      INTERUPT_FLAGS_HELD, r9
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                shlo    0xF, 1, r15     # r15 = 0x00008000
                stis    r15, 0x500082
                bbc     5, r9, loc_59394 # Hold P2 Start
                bbc     12, r8, load_next_menu # P1 Down
                ldob    0x508008, r3
                addo    1, r3, r3
                ld      dword_59404, r4
                cmpibge r4, r3, loc_59338
                mov     0, r3
                b       loc_59338
# ---------------------------------------------------------------------------
load_next_menu:                         # CODE XREF: sub_5905C+29C↑j
                bbc     13, r8, load_previous_menu # P1 Up
                ldob    0x508008, r3
                subo    1, r3, r3
                cmpible 0, r3, loc_59338
                ld      dword_59404, r3
loc_59338:                              # CODE XREF: sub_5905C+258↑j
                mov     0, r15
                stib    r15, 0xB0(g6)
                ldob    0xDE(g6), r10
                ldob    0x500085, r5
                setbit  0, r5, r5
                stob    r5, 0x500085
                stob    r3, 0x508008
                lda     0x1000000, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                lda     debug_test_list, r4
loc_5937C:                              # CODE XREF: sub_5905C+364↓j
                ld      (r4)[r3*8], r4
                balx    (r4), g14
                shlo    0xF, 1, r15
                stis    r15, 0x500082
                ret
# ---------------------------------------------------------------------------
loc_59394:                              # CODE XREF: sub_5905C+298↑j
                xor     r9, r7, r6
                bbc     5, r6, loc_593B0
                ldob    0x500085, r5
                clrbit  0, r5, r5
                stob    r5, 0x500085
loc_593B0:                              # CODE XREF: sub_5905C+33C↑j
                ldob    0x508008, r3
                lda     debug_test_subs, r4
                b       loc_5937C
# ---------------------------------------------------------------------------
load_previous_menu:                     # CODE XREF: sub_5905C:load_next_menu↑j
                ldob    0x500085, r5
                bbc     0, r5, loc_593B0
                ret
# End of function sub_5905C
# ---------------------------------------------------------------------------
debug_test_list:.long CONTROL_TEST      # DATA XREF: sub_5905C+318↑o
debug_test_subs:.long CONTROL_TEST_sub  # DATA XREF: sub_5905C+35C↑o
                .long MOTION_SET
                .long MOTION_SET_sub
                .long CAMERA_POSITION_2
                .long CAMERA_POSITION_2_sub
                .long MATERIAL
                .long MATERIAL_sub
                .long CENTER
                .long CENTER_sub
                .long TEXTURE
                .long TEXTURE_sub
dword_59404:    .long 5                 # DATA XREF: sub_5905C+2AC↑r
# ---------------------------------------------------------------------------
CONTROL_TEST:                           # DATA XREF: ROM:debug_test_list↑o
                ld      debug_flag, r15
                bbs     9, r15, loc_5944C
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000186, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aControlTest:   .asciz "CONTROL_TEST"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
loc_5944C:                              # CODE XREF: ROM:00059410↑j
                ldob    0x508050, r14
                cmpobne 0, r14, loc_59698
                mov     1, r15
                stib    r15, 0x508050
                ld      fa_rob0, g7
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_5948C
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_5948C:                              # CODE XREF: ROM:00059478↑j
                lda     action_init, r15
                st      r15, 0xC(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ld      fa_rob1, g7
                ldib    0x1B0(g7), r15
                stib    r15, 0x1B1(g7)
                ldob    0x1B1(g7), r14
                cmpobg  0x1A, r14, loc_594FC
                ldib    0x1B1(g7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(g7)
loc_594FC:                              # CODE XREF: ROM:000594E8↑j
                lda     action_init, r15
                st      r15, 0xC(g7)
                ld      0x0(g7), r3
                lda     0xFF000000, r4
                and     r4, r3, r3
                setbit  0x1F, r3, r3
                st      r3, 0x0(g7)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                addo    4, sp, sp
                st      r3, -4(sp)
                ld      select0_flag, r15
                setbit  2, r15, r15
                st      r15, select0_flag
                ld      select1_flag, r15
                setbit  2, r15, r15
                st      r15, select1_flag
                mov     1, r15
                stib    r15, 0x500056
                ld      -4(sp), r3
                subo    4, sp, sp
                ld      mod_fa_control0, g13
                addo    4, sp, sp
                st      g14, -4(sp)
                call    control_init    # Executes once at start of char sel, once at the start of the vs screen, then once every frame of gameplay once the map is loaded.
                ld      -4(sp), g14
                subo    4, sp, sp
                b       loc_59698
# ---------------------------------------------------------------------------
CONTROL_TEST_sub:                       # DATA XREF: ROM:debug_test_subs↑o
                ld      debug_flag, r15
                bbs     9, r15, loc_59600
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000186, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aControlTest_0: .asciz "CONTROL_TEST"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                b       loc_59638
# ---------------------------------------------------------------------------
loc_59600:                              # CODE XREF: ROM:000595C0↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000186, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "            "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
loc_59638:                              # CODE XREF: ROM:000595FC↑j
                ldos    energy_max, r4
                ld      fa_rob0, r3
                stis    r4, 0x1AC(r3)
                ld      0x0(r3), r15
                clrbit  5, r15, r15
                st      r15, 0x0(r3)
                ld      fa_rob1, r3
                stis    r4, 0x1AC(r3)
                ld      0x0(r3), r15
                clrbit  5, r15, r15
                st      r15, 0x0(r3)
                ld      mod_fa_control0, g13
                ld      0xC(g13), r3
                addo    4, sp, sp
                st      g14, -4(sp)
                callx   (r3)
                ld      -4(sp), g14
                subo    4, sp, sp
loc_59698:                              # CODE XREF: ROM:00059454↑j
                bx      (g14)
# ---------------------------------------------------------------------------
MOTION_SET:                             # DATA XREF: ROM:000593DC↑o
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000186, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMotionSet:     .asciz "MOTION_SET"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ld      0x0(g7), r3
                setbit  0x17, r3, r3
                st      r3, 0x0(g7)
                b       loc_59750
# ---------------------------------------------------------------------------
MOTION_SET_sub:                         # DATA XREF: ROM:000593E0↑o
                ldos    motion_set_mot_val, r3
                bbc     12, r8, loc_59700 # P1 Down
                addi    1, r3, r3
                lda     518, r4         # 518 being the max number of motions
                cmpibge r4, r3, loc_59740
                mov     0, r3
                b       loc_59740
# ---------------------------------------------------------------------------
loc_59700:                              # CODE XREF: ROM:000596E8↑j
                bbc     13, r8, loc_59714 # P1 Up
                subi    1, r3, r3
                cmpible 0, r3, loc_59740
                lda     518, r3         # 518 being the max number of motions
                b       loc_59740
# ---------------------------------------------------------------------------
loc_59714:                              # CODE XREF: ROM:loc_59700↑j
                bbc     14, r9, loc_5972C # P1 Right (held)
                addi    1, r3, r3
                lda     518, r4         # 518 being the max number of motions
                cmpibge r4, r3, loc_59740
                mov     0, r3
                b       loc_59740
# ---------------------------------------------------------------------------
loc_5972C:                              # CODE XREF: ROM:loc_59714↑j
                bbc     15, r9, loc_59740 # P1 Left (held)
                subi    1, r3, r3
                cmpible 0, r3, loc_59740
                lda     518, r3         # 518 being the max number of motions
                b       loc_59740
# ---------------------------------------------------------------------------
loc_59740:                              # CODE XREF: ROM:000596F4↑j
                stos    r3, motion_set_mot_val
                bbc     8, r8, loc_59764
                st      r3, 0x194(g7)
loc_59750:                              # CODE XREF: ROM:000596DC↑j
                lda     0x1000298, g9
                addo    0x1F, 0x15, g0
                mov     1, g1
                call    clr_pattern_s
loc_59764:                              # CODE XREF: ROM:00059748↑j
                lda     0x1000298, g9
                addo    0x1F, 9, g0
                mov     1, g1
                call    clr_pattern_s
                lda     0x1000294, g9
                ldis    motion_set_mot_val, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100028A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMotion:        .asciz "motion:"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                lda     0x10002A2, g9
                ldos    motion_set_mot_val, r3
                ld      offset_list_motions, r4
                ld      (r4)[r3*4], g0
                call    print_mes
                ld      offset_list_motions[r3*4], r15
                ldos    (r15), r3
                lda     0x1000322, g9
                mov     r3, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aLength:        .asciz "length"
                .byte 0
# ---------------------------------------------------------------------------
                ldos    energy_max, r4
                ld      fa_rob0, r3
                ld      0x0(r3), r15
                clrbit  5, r15, r15
                st      r15, 0x0(r3)
                ld      fa_rob1, r3
                ld      0x0(r3), r15
                clrbit  5, r15, r15
                st      r15, 0x0(r3)
                bx      (g14)
# ---------------------------------------------------------------------------
CAMERA_POSITION_2:                      # DATA XREF: ROM:000593E4↑o
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000186, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCameraPosition:.asciz "CAMERA_POSITION 2   "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ld      fa_camera, r3
                mov     0, r4
                stob    r4, 0xB1(g6)
                addo    0x1F, 1, g0
                call    sub_59FB8
                lda     displacement, r4
                st      r4, 0xB4(g6)
                st      r4, 0xB8(g6)
                st      r4, 0xBC(g6)
                mov     1, r15
                stib    r15, 0xB0(g6)
                lda     displacement, r15
                stib    r15, 0x40(g6)
                ldis    0x24(g6), r15
                stis    r15, 0xD8(g6)
                ldis    0x26(g6), r15
                stis    r15, 0xDA(g6)
                ldis    0x28(g6), r15
                stis    r15, 0xDC(g6)
                ld      0xB4(g6), r15
                st      r15, 0xC0(g6)
                ld      0xB8(g6), r15
                st      r15, 0xC4(g6)
                ld      0xBC(g6), r15
                st      r15, 0xC8(g6)
                ld      0x18(g6), r15
                st      r15, 0xCC(g6)
                ld      0x1C(g6), r15
                st      r15, 0xD0(g6)
                ld      0x20(g6), r15
                st      r15, 0xD4(g6)
                b       loc_59A00
# ---------------------------------------------------------------------------
CAMERA_POSITION_2_sub:                  # DATA XREF: ROM:000593E8↑o
                ldob    0xDE(g6), r3
                clrbit  2, r3, r3
                ld      debug_flag, r15
                bbc     9, r15, loc_59948
                setbit  2, r3, r3
loc_59948:                              # CODE XREF: ROM:00059940↑j
                stob    r3, 0xDE(g6)
                ld      fa_camera, r3
                ldob    0xB1(g6), r4
                mov     0, r15
                stib    r15, 0xB0(g6)
                cmpibne 0, r4, loc_5996C
                mov     1, r15
                stib    r15, 0xB0(g6)
loc_5996C:                              # CODE XREF: ROM:00059960↑j
                bbc     4, r8, loc_59980
                addo    1, r4, r4
                cmpibge 2, r4, loc_5997C
                mov     0, r4
loc_5997C:                              # CODE XREF: ROM:00059974↑j
                stob    r4, 0xB1(g6)
loc_59980:                              # CODE XREF: ROM:loc_5996C↑j
                and     3, r4, r4
                ld      off_59990[r4*4], r4
                bx      (r4)
# ---------------------------------------------------------------------------
off_59990:      .long loc_5999C         # DATA XREF: ROM:00059984↑r
                .long loc_599B8
                .long loc_599D8
# ---------------------------------------------------------------------------
loc_5999C:                              # DATA XREF: ROM:off_59990↑o
                mov     r9, g0
                call    sub_5A29C
                mov     r9, g0
                call    sub_5AA78
                mov     r8, g0
                call    sub_5A298
                b       loc_599EC
# ---------------------------------------------------------------------------
loc_599B8:                              # DATA XREF: ROM:00059994↑o
                mov     r9, g0
                call    sub_5A29C
                call    sub_5A888
                mov     r9, g0
                call    sub_5A218
                mov     r8, g0
                call    sub_5A298
                b       loc_599EC
# ---------------------------------------------------------------------------
loc_599D8:                              # DATA XREF: ROM:00059998↑o
                mov     r9, g0
                mov     r8, g1
                call    sub_5A514
                mov     r8, g0
                call    sub_59F70
loc_599EC:                              # CODE XREF: ROM:000599B4↑j
                mov     r8, g0
                call    sub_5A0C0
                call    sub_5A100
                mov     r8, g0
                call    sub_59FB8
loc_59A00:                              # CODE XREF: ROM:0005992C↑j
                ldob    0xDE(g6), r3
                bbs     2, r3, loc_59F00
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000186, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCameraPosition_0:.asciz "CAMERA_POSITION 2   "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ldob    0xDE(g6), r3
                bbs     2, r3, loc_59F00
                lda     0x100028A, g9
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                ldob    0xB1(g6), r4
                and     3, r4, r4
                ld      off_59F18[r4*4], g0 # "FIX MODE         "
                call    print_mes
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                cmpibe  3, r4, loc_59B04
                cmpibe  2, r4, loc_59B04
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
loc_59B04:                              # CODE XREF: ROM:00059AD8↑j
                lda     0x100038A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCameraPosition_1:.asciz "CAMERA POSITION"
# ---------------------------------------------------------------------------
                ld      0x18(g6), g0
                lda     0x42C80000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
aXpos_0:        .asciz "Xpos"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      0x1C(g6), g0
                lda     0x42C80000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
aYpos_0:        .asciz "Ypos"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      0x20(g6), g0
                lda     0x42C80000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
aZpos_0:        .asciz "Zpos"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                cmpibe  0, r4, loc_59BD0
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
loc_59BD0:                              # CODE XREF: ROM:00059BA8↑j
                lda     0x100058A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aInterestedPosi:.asciz "INTERESTED POSITION"
# ---------------------------------------------------------------------------
                ld      0xB4(g6), g0
                lda     0x42C80000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
aXpos:          .asciz "Xpos"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      0xB8(g6), g0
                lda     0x42C80000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
aYpos:          .asciz "Ypos"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      0xBC(g6), g0
                lda     0x42C80000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
aZpos:          .asciz "Zpos"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                cmpibe  0, r4, loc_59CA4
                cmpibe  1, r4, loc_59CA4
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
loc_59CA4:                              # CODE XREF: ROM:00059C78↑j
                ldib    stage_num, r3
                addi    1, r3, r3
                lda     0x100080A, g9
                mov     r3, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aStageNumber:   .asciz "STAGE NUMBER"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                cmpibe  1, r4, loc_59D20
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
loc_59D20:                              # CODE XREF: ROM:00059CF8↑j
                lda     0x100090A, g9
                ld      focus_dist_x, g0
                lda     0x3F800000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
aFocusDistance: .asciz "FOCUS DISTANCE"
                .byte 0
# ---------------------------------------------------------------------------
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                cmpibe  2, r4, loc_59DA0
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
loc_59DA0:                              # CODE XREF: ROM:00059D78↑j
                lda     0x100168A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "                                                 "
                .short 0
# ---------------------------------------------------------------------------
                lda     0x100168A, g9
                ldos    motion_set_mot_val, r3
                ld      offset_list_motions, r5
                ld      (r5)[r3*4], g0
                call    print_mes
                lda     0x100170A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aNumber:        .asciz "number :"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                lda     0x100171C, g9
                mov     r3, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
                .long 0x20
# ---------------------------------------------------------------------------
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                lda     0x1000A0A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aRobotCollision:.asciz "ROBOT COLLISION : "
                .byte 0
# ---------------------------------------------------------------------------
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aRobotMode:     .asciz "ROBOT MODE      : "
                .byte 0
# ---------------------------------------------------------------------------
                lda     0x1000A2E, g9
                ldob    0xDE(g6), r3
                bbc     1, r3, loc_59EBC
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_4:          .asciz "ON "
# ---------------------------------------------------------------------------
                b       loc_59EC8
# ---------------------------------------------------------------------------
loc_59EBC:                              # CODE XREF: ROM:00059EA8↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_3:         .asciz "OFF"
# ---------------------------------------------------------------------------
loc_59EC8:                              # CODE XREF: ROM:00059EB8↑j
                bbc     0, r3, loc_59EE0
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aTwin:          .asciz "TWIN  "
                .byte 0
# ---------------------------------------------------------------------------
                b       loc_59EF0
# ---------------------------------------------------------------------------
loc_59EE0:                              # CODE XREF: ROM:loc_59EC8↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSingle:        .asciz "SINGLE"
                .byte 0
# ---------------------------------------------------------------------------
loc_59EF0:                              # CODE XREF: ROM:00059EDC↑j
                shlo    0xF, 1, r15
                stis    r15, 0x500082
                bx      (g14)
# ---------------------------------------------------------------------------
loc_59F00:                              # CODE XREF: ROM:00059A04↑j
                lda     0x1000000, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                b       loc_59EF0
# ---------------------------------------------------------------------------
off_59F18:      .long aFixMode          # DATA XREF: ROM:00059AA8↑r
                .long aAutoChaseMode    # "AUTO CHASE MODE  "
                .long aRobPositionMod   # "ROB POSITION MODE"
                .long asc_59F5E         # "                 "
aFixMode:       .asciz "FIX MODE         "
aAutoChaseMode: .asciz "AUTO CHASE MODE  "
aRobPositionMod:.asciz "ROB POSITION MODE"
asc_59F5E:      .asciz "                 "
# =============== S U B R O U T I N E =======================================
sub_59F70:                              # CODE XREF: ROM:000599E8↑p
                mov     g0, r9
                ldob    0xDE(g6), r3
                bbs     2, r3, loc_59FB4
                ldos    motion_set_mot_val, r3
                bbc     9, r9, loc_59F9C
                addi    1, r3, r3
                lda     0x206, r4
                cmpibge r4, r3, loc_59FAC
                mov     0, r3
                b       loc_59FAC
# ---------------------------------------------------------------------------
loc_59F9C:                              # CODE XREF: sub_59F70+14↑j
                bbc     8, r9, loc_59FAC
                subi    1, r3, r3
                cmpible 0, r3, loc_59FAC
                lda     0x206, r3
loc_59FAC:                              # CODE XREF: sub_59F70+20↑j
                stos    r3, motion_set_mot_val
loc_59FB4:                              # CODE XREF: sub_59F70+8↑j
                ret
# End of function sub_59F70
# =============== S U B R O U T I N E =======================================
sub_59FB8:                              # CODE XREF: ROM:000598B8↑p
                bbc     5, g0, loc_5A0BC
                ldob    0xDE(g6), r3
                bbc     0, r3, loc_5A058
                bbc     1, r3, loc_5A018
                clrbit  0, r3, r3
                clrbit  1, r3, r3
                stob    r3, 0xDE(g6)
                mov     1, r4
                ld      fa_rob1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     0, r4
                ld      mod_fa_coli, r3
loc_59FF8:                              # CODE XREF: sub_59FB8+58↓j
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                ld      8(r3), r5
                addi    r5, r3, r3
                cmpdeco 1, r4, r4
                bl      loc_59FF8
                b       loc_5A0BC
# ---------------------------------------------------------------------------
loc_5A018:                              # CODE XREF: sub_59FB8+C↑j
                setbit  1, r3, r3
                stob    r3, 0xDE(g6)
                mov     0, r4
                ld      mod_fa_coli, r3
loc_5A02C:                              # CODE XREF: sub_59FB8+98↓j
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     coli_init, r5
                st      r5, 0xC(r3)
                ld      8(r3), r5
                addi    r5, r3, r3
                cmpdeco 1, r4, r4
                bl      loc_5A02C
                b       loc_5A0BC
# ---------------------------------------------------------------------------
loc_5A058:                              # CODE XREF: sub_59FB8+8↑j
                setbit  0, r3, r3
                stob    r3, 0xDE(g6)
                mov     1, r4
                ld      fa_rob1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     action_init, r5
                st      r5, 0xC(r3)
                ld      fa_rob1, r4
                ldob    0x1B0(r4), r3
                remo    0x1A, r3, r3
                stob    r3, 0x1B1(r4)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
loc_5A0BC:                              # CODE XREF: sub_59FB8↑j
                ret
# End of function sub_59FB8
# =============== S U B R O U T I N E =======================================
sub_5A0C0:                              # CODE XREF: ROM:000599F0↑p
                bbc     0xA, g0, loc_5A0E0
                ldob    0xDE(g6), r3
                setbit  2, r3, r3
                stob    r3, 0xDE(g6)
                ldos    motion_set_mot_val, r3
                st      r3, 0x194(g7)
                b       loc_5A0FC
# ---------------------------------------------------------------------------
loc_5A0E0:                              # CODE XREF: sub_5A0C0↑j
                ldob    0xDE(g6), r3
                ldos    0x800(g7), r4
                ldos    0x1AA(g7), r5
                mov     3, r6
                cmpobne r4, r5, loc_5A0FC
                cmpobge r6, r5, loc_5A0FC
                stob    r3, 0xDE(g6)
loc_5A0FC:                              # CODE XREF: sub_5A0C0+1C↑j
                ret
# End of function sub_5A0C0
# =============== S U B R O U T I N E =======================================
sub_5A100:                              # CODE XREF: ROM:000599F4↑p
                ld      0xB4(g6), r3
                ld      0xB8(g6), r4
                ld      0xBC(g6), r5
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0x18(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      0x1C(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      0x20(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                lda     0x16802D2D, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                stos    r9, 0xD8(g6)
                notbit  0x1F, r6, r6
                lda     0x13802727, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                stos    r9, 0xDA(g6)
                ldis    0xD8(g6), r4
                ldis    0x24(g6), r5
                subi    r5, r4, r4
                shlo    0x10, r4, r15
                shri    0x10, r15, r4
                shri    2, r4, r4
                addi    r4, r5, r5
                stos    r5, 0x24(g6)
                ldis    0xDA(g6), r4
                ldis    0x26(g6), r5
                subi    r5, r4, r4
                shlo    0x10, r4, r15
                shri    0x10, r15, r4
                shri    2, r4, r4
                addi    r4, r5, r5
                stos    r5, 0x26(g6)
                ldis    0xDC(g6), r4
                ldis    0x28(g6), r5
                subi    r5, r4, r4
                shlo    0x10, r4, r15
                shri    0x10, r15, r4
                shri    2, r4, r4
                addi    r4, r5, r5
                stos    r5, 0x28(g6)
                ret
# End of function sub_5A100
# =============== S U B R O U T I N E =======================================
sub_5A218:                              # CODE XREF: ROM:000599C8↑p
                mov     g0, r9
                bbc     0x15, r9, loc_5A258
                lda     0x40000000, r13
                ld      focus_dist_x, r14
                addr    r13, r14, r15
                st      r15, focus_dist_x
                lda     0x40000000, r13
                ld      focus_dist_y, r14
                addr    r13, r14, r15
                st      r15, focus_dist_y
loc_5A258:                              # CODE XREF: sub_5A218+4↑j
                bbc     0x14, r9, loc_5A294
                lda     0x40000000, r13
                ld      focus_dist_x, r14
                subr    r13, r14, r15
                st      r15, focus_dist_x
                lda     0x40000000, r13
                ld      focus_dist_y, r14
                subr    r13, r14, r15
                st      r15, focus_dist_y
loc_5A294:                              # CODE XREF: sub_5A218:loc_5A258↑j
                ret
# End of function sub_5A218
# =============== S U B R O U T I N E =======================================
sub_5A298:                              # CODE XREF: ROM:000599B0↑p
                ret
# End of function sub_5A298
# =============== S U B R O U T I N E =======================================
sub_5A29C:                              # CODE XREF: ROM:000599A0↑p
                mov     g0, r9
                lda     0x3D4CCCCD, r3
                lda     displacement, r4
                mov     r4, r5
                mov     r4, r6
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x28(g6), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g6), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x24(g6), r15
                st      r15, (g11)[g12*1]
                bbs     0xD, r9, loc_5A4D8
                bbs     0xC, r9, loc_5A4E0
loc_5A314:                              # CODE XREF: sub_5A29C+240↓j
                bbs     0xE, r9, loc_5A4EC
                bbs     0xF, r9, loc_5A4F4
loc_5A31C:                              # CODE XREF: sub_5A29C+254↓j
                bbs     8, r9, loc_5A508
                bbs     9, r9, loc_5A500
loc_5A324:                              # CODE XREF: sub_5A29C+268↓j
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r6
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      0xCC(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xCC(g6)
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      0xD0(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xD0(g6)
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      0xD4(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xD4(g6)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0xCC(g6), r15
                st      r15, (g11)[g12*1]
                ld      0x18(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x40800000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0x18(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x18(g6)
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0xD0(g6), r15
                st      r15, (g11)[g12*1]
                ld      0x1C(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x40800000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0x1C(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x1C(g6)
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0xD4(g6), r15
                st      r15, (g11)[g12*1]
                ld      0x20(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x40800000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0x20(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x20(g6)
                ret
# ---------------------------------------------------------------------------
loc_5A4D8:                              # CODE XREF: sub_5A29C+70↑j
                mov     r3, r6
                b       loc_5A314
# ---------------------------------------------------------------------------
loc_5A4E0:                              # CODE XREF: sub_5A29C+74↑j
                mov     r3, r6
                setbit  0x1F, r6, r6
                b       loc_5A314
# ---------------------------------------------------------------------------
loc_5A4EC:                              # CODE XREF: sub_5A29C:loc_5A314↑j
                mov     r3, r4
                b       loc_5A31C
# ---------------------------------------------------------------------------
loc_5A4F4:                              # CODE XREF: sub_5A29C+7C↑j
                mov     r3, r4
                setbit  0x1F, r4, r4
                b       loc_5A31C
# ---------------------------------------------------------------------------
loc_5A500:                              # CODE XREF: sub_5A29C+84↑j
                mov     r3, r5
                b       loc_5A324
# ---------------------------------------------------------------------------
loc_5A508:                              # CODE XREF: sub_5A29C:loc_5A31C↑j
                mov     r3, r5
                setbit  0x1F, r5, r5
                b       loc_5A324
# End of function sub_5A29C
# =============== S U B R O U T I N E =======================================
sub_5A514:                              # CODE XREF: ROM:000599E0↑p
# FUNCTION CHUNK AT 0005A860 SIZE 00000028 BYTES
                mov     g0, r9
                mov     g1, r8
                lda     0x3D4CCCCD, r3
                lda     displacement, r4
                mov     r4, r5
                mov     r4, r6
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g6), r15
                st      r15, (g11)[g12*1]
                bbs     0xD, r9, loc_5A860
                bbs     0xC, r9, loc_5A868
loc_5A568:                              # CODE XREF: sub_5A514+350↓j
                bbs     0xE, r9, loc_5A874
                bbs     0xF, r9, loc_5A87C
loc_5A570:                              # CODE XREF: sub_5A514+364↓j
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r6
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      0x18(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x18(g7)
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      0x1C(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x1C(g7)
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      0x20(g7), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x20(g7)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                bbc     0x17, r9, loc_5A614
                ldis    0x26(g7), r15
                lda     0x80(r15), r15
                stis    r15, 0x26(g7)
                b       loc_5A628
# ---------------------------------------------------------------------------
loc_5A614:                              # CODE XREF: sub_5A514+EC↑j
                bbc     0x16, r9, loc_5A628
                ldis    0x26(g7), r15
                lda     0xFF80(r15), r15
                stis    r15, 0x26(g7)
loc_5A628:                              # CODE XREF: sub_5A514+FC↑j
                bbs     0x12, r9, loc_5A6BC
                ldob    0x1B0(g7), r4
                bbs     0x10, r8, loc_5A64C
                bbc     0x11, r8, loc_5A6BC
                addi    1, r4, r4
                addo    0x1F, 0x14, r5
                cmpibge r5, r4, loc_5A658
                mov     0, r4
                b       loc_5A658
# ---------------------------------------------------------------------------
loc_5A64C:                              # CODE XREF: sub_5A514+11C↑j
                subi    1, r4, r4
                cmpible 0, r4, loc_5A658
                addo    0x1F, 0x14, r4
loc_5A658:                              # CODE XREF: sub_5A514+12C↑j
                ldob    0x1B0(g8), r5
                cmpobne r5, r4, loc_5A670
                cmpobg  0x1A, r4, loc_5A66C
                subo    0x1A, r4, r4
                b       loc_5A670
# ---------------------------------------------------------------------------
loc_5A66C:                              # CODE XREF: sub_5A514+14C↑j
                addo    0x1A, r4, r4
loc_5A670:                              # CODE XREF: sub_5A514+148↑j
                stob    r4, 0x1B0(g7)
                lda     action_init, r15
                st      r15, 0xC(g7)
                lda     0x80000000, r15
                st      r15, 0x0(g7)
                ldob    0x1B0(g7), r3
                remo    0x1A, r3, r3
                stob    r3, 0x1B1(g7)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
loc_5A6BC:                              # CODE XREF: sub_5A514:loc_5A628↑j
                ldob    0xDE(g6), r3
                bbc     0, r3, loc_5A780
                bbc     0x15, r9, loc_5A6D8
                ldis    0x26(g8), r15
                lda     0x80(r15), r15
                stis    r15, 0x26(g8)
                b       loc_5A6EC
# ---------------------------------------------------------------------------
loc_5A6D8:                              # CODE XREF: sub_5A514+1B0↑j
                bbc     0x14, r9, loc_5A6EC
                ldis    0x26(g8), r15
                lda     0xFF80(r15), r15
                stis    r15, 0x26(g8)
loc_5A6EC:                              # CODE XREF: sub_5A514+1C0↑j
                bbc     0x12, r9, loc_5A780
                ldob    0x1B0(g8), r4
                bbs     0x10, r8, loc_5A710
                bbc     0x11, r8, loc_5A780
                addi    1, r4, r4
                addo    0x1F, 0x14, r5
                cmpibge r5, r4, loc_5A71C
                mov     0, r4
                b       loc_5A71C
# ---------------------------------------------------------------------------
loc_5A710:                              # CODE XREF: sub_5A514+1E0↑j
                subi    1, r4, r4
                cmpible 0, r4, loc_5A71C
                addo    0x1F, 0x14, r4
loc_5A71C:                              # CODE XREF: sub_5A514+1F0↑j
                ldob    0x1B0(g7), r5
                cmpobne r5, r4, loc_5A734
                cmpobg  0x1A, r4, loc_5A730
                subo    0x1A, r4, r4
                b       loc_5A734
# ---------------------------------------------------------------------------
loc_5A730:                              # CODE XREF: sub_5A514+210↑j
                addo    0x1A, r4, r4
loc_5A734:                              # CODE XREF: sub_5A514+20C↑j
                stob    r4, 0x1B0(g8)
                lda     action_init, r15
                st      r15, 0xC(g8)
                lda     0x80000000, r15
                st      r15, 0x0(g8)
                ldob    0x1B0(g8), r3
                remo    0x1A, r3, r3
                stob    r3, 0x1B1(g8)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
loc_5A780:                              # CODE XREF: sub_5A514+1AC↑j
                ret
# End of function sub_5A514
# =============== S U B R O U T I N E =======================================
sub_5A784:                              # CODE XREF: ROM:loc_44CF8↑p
                ld      fa_rob0, r7
                ld      fa_rob1, r8
                ldib    0x1B0(r7), r15
                stib    r15, 0x1B1(r7)
                ldob    0x1B1(r7), r14
                cmpobg  0x1A, r14, loc_5A7B4
                ldib    0x1B1(r7), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(r7)
loc_5A7B4:                              # CODE XREF: sub_5A784+1C↑j
                lda     action_init, r15
                st      r15, 0xC(r7)
                lda     0x80000000, r15
                st      r15, 0x0(r7)
                subo    1, 0, r15
                stis    r15, 0x762(r7)
                ldib    0x1B0(r8), r15
                stib    r15, 0x1B1(r8)
                ldob    0x1B1(r8), r14
                cmpobg  0x1A, r14, loc_5A7F4
                ldib    0x1B1(r8), r15
                lda     -0x1A(r15), r15
                stib    r15, 0x1B1(r8)
loc_5A7F4:                              # CODE XREF: sub_5A784+5C↑j
                lda     action_init, r15
                st      r15, 0xC(r8)
                lda     0x80000000, r15
                st      r15, 0x0(r8)
                subo    1, 0, r15
                stis    r15, 0x762(r8)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     osage_init, r5
                st      r5, 0xC(r3)
                ret
# End of function sub_5A784
# ---------------------------------------------------------------------------
# START OF FUNCTION CHUNK FOR sub_5A514
loc_5A860:                              # CODE XREF: sub_5A514+4C↑j
                mov     r3, r6
                b       loc_5A568
# ---------------------------------------------------------------------------
loc_5A868:                              # CODE XREF: sub_5A514+50↑j
                mov     r3, r6
                setbit  0x1F, r6, r6
                b       loc_5A568
# ---------------------------------------------------------------------------
loc_5A874:                              # CODE XREF: sub_5A514:loc_5A568↑j
                mov     r3, r4
                b       loc_5A570
# ---------------------------------------------------------------------------
loc_5A87C:                              # CODE XREF: sub_5A514+58↑j
                mov     r3, r4
                setbit  0x1F, r4, r4
                b       loc_5A570
# END OF FUNCTION CHUNK FOR sub_5A514
# =============== S U B R O U T I N E =======================================
sub_5A888:                              # CODE XREF: ROM:000599C0↑p
                ld      0x18(g7), r4
                ld      0x1C(g7), r5
                ld      0x20(g7), r6
                ldob    0xDE(g6), r3
                bbc     0, r3, loc_5A940
                lda     0x40000000, r10
                ld      0x18(g8), r7
                ld      0x1C(g8), r8
                ld      0x20(g8), r9
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                ld      (g11)[g12*1], r7
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                ld      (g11)[g12*1], r8
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                ld      (g11)[g12*1], r9
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r7, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r8, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r5
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r9, (g11)[g12*1]
                st      r10, (g11)[g12*1]
                ld      (g11)[g12*1], r6
loc_5A940:                              # CODE XREF: sub_5A888+10↑j
                lda     0x3F800000, r5
                st      r4, 0xC0(g6)
                st      r5, 0xC4(g6)
                st      r6, 0xC8(g6)
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0xC0(g6), r15
                st      r15, (g11)[g12*1]
                ld      0xB4(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x40800000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0xB4(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xB4(g6)
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0xC4(g6), r15
                st      r15, (g11)[g12*1]
                ld      0xB8(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x40800000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0xB8(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xB8(g6)
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0xC8(g6), r15
                st      r15, (g11)[g12*1]
                ld      0xBC(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x40800000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0xBC(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xBC(g6)
                ret
# End of function sub_5A888
# =============== S U B R O U T I N E =======================================
sub_5AA78:                              # CODE XREF: ROM:000599A8↑p
                mov     g0, r9
                lda     0x3D4CCCCD, r3
                lda     displacement, r4
                mov     r4, r5
                mov     r4, r6
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x5000A0A, r15
                st      r15, (g11)[g12*1]
                ldis    0x28(g6), r15
                st      r15, (g11)[g12*1]
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0x26(g6), r15
                st      r15, (g11)[g12*1]
                lda     0x4000808, r15
                st      r15, (g11)[g12*1]
                ldis    0x24(g6), r15
                st      r15, (g11)[g12*1]
                bbs     0x15, r9, loc_5ACB4
                bbs     0x14, r9, loc_5ACBC
loc_5AAF0:                              # CODE XREF: sub_5AA78+240↓j
                bbs     0x16, r9, loc_5ACC8
                bbs     0x17, r9, loc_5ACD0
loc_5AAF8:                              # CODE XREF: sub_5AA78+254↓j
                bbs     0x10, r9, loc_5ACE4
                bbs     0x11, r9, loc_5ACDC
loc_5AB00:                              # CODE XREF: sub_5AA78+268↓j
                lda     0x14802929, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                ld      (g11)[g12*1], r5
                ld      (g11)[g12*1], r6
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                ld      0xC0(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xC0(g6)
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                ld      0xC4(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xC4(g6)
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      0xC8(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xC8(g6)
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0xC0(g6), r15
                st      r15, (g11)[g12*1]
                ld      0xB4(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x40800000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0xB4(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xB4(g6)
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0xC4(g6), r15
                st      r15, (g11)[g12*1]
                ld      0xB8(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x40800000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0xB8(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xB8(g6)
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0xC8(g6), r15
                st      r15, (g11)[g12*1]
                ld      0xBC(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0xB001616, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                lda     0x40800000, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r3
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      0xBC(g6), r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0xBC(g6)
                ret
# ---------------------------------------------------------------------------
loc_5ACB4:                              # CODE XREF: sub_5AA78+70↑j
                mov     r3, r6
                b       loc_5AAF0
# ---------------------------------------------------------------------------
loc_5ACBC:                              # CODE XREF: sub_5AA78+74↑j
                mov     r3, r6
                setbit  0x1F, r6, r6
                b       loc_5AAF0
# ---------------------------------------------------------------------------
loc_5ACC8:                              # CODE XREF: sub_5AA78:loc_5AAF0↑j
                mov     r3, r4
                b       loc_5AAF8
# ---------------------------------------------------------------------------
loc_5ACD0:                              # CODE XREF: sub_5AA78+7C↑j
                mov     r3, r4
                setbit  0x1F, r4, r4
                b       loc_5AAF8
# ---------------------------------------------------------------------------
loc_5ACDC:                              # CODE XREF: sub_5AA78+84↑j
                mov     r3, r5
                b       loc_5AB00
# ---------------------------------------------------------------------------
loc_5ACE4:                              # CODE XREF: sub_5AA78:loc_5AAF8↑j
                mov     r3, r5
                setbit  0x1F, r5, r5
                b       loc_5AB00
# End of function sub_5AA78
# =============== S U B R O U T I N E =======================================
sub_5ACF0:                              # CODE XREF: camera_init+1680↑p
                ld      fa_camera, r3
                ldob    0xB0(r3), r4
                cmpobne 1, r4, loc_5AE58
                ld      debug_flag, r15
                bbs     9, r15, loc_5AE58
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                ld      0xB4(r3), r15
                st      r15, (g11)[g12*1]
                ld      0xB8(r3), r15
                st      r15, (g11)[g12*1]
                ld      0xBC(r3), r15
                st      r15, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                ldos    0xB2(r3), r4
                shlo    9, 1, r13
                addi    r13, r4, r4
                stos    r4, 0xB2(r3)
                lda     0x4800909, r15
                st      r15, (g11)[g12*1]
                ldis    0xB2(r3), r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     5, g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                b       loc_5AE58
# ---------------------------------------------------------------------------
                lda     0xBEFFF2E5, r4
                lda     0x40C00000, r6
                ld      0xB4(r3), r5
                clrbit  0x1F, r5, r5
                cmpor   r6, r5
                bl      loc_5AE58
                ld      0xBC(r3), r5
                clrbit  0x1F, r5, r5
                cmpor   r6, r5
                bl      loc_5AE58
                lda     0x38D1B717, r4
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                ld      0xB4(r3), r5
                ld      0xBC(r3), r6
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                lda     displacement, r15
                st      r15, (g11)[g12*1]
                lda     0x3DCCCCCD, r15
                st      r15, (g11)[g12*1]
                mov     0, g1
                lda     4, g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
loc_5AE58:                              # CODE XREF: sub_5ACF0+C↑j
                ret
# End of function sub_5ACF0
# ---------------------------------------------------------------------------
CENTER:                                 # DATA XREF: ROM:000593F4↑o
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000186, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCenter:        .asciz "CENTER"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                b       loc_5AEB0
# ---------------------------------------------------------------------------
CENTER_sub:                             # DATA XREF: ROM:000593F8↑o
                ldis    win_eye0_y, r3
                bbc     0xC, r9, loc_5AEA0
                subi    1, r3, r3
loc_5AEA0:                              # CODE XREF: ROM:0005AE98↑j
                bbc     0xD, r9, loc_5AEA8
                addo    1, r3, r3
loc_5AEA8:                              # CODE XREF: ROM:loc_5AEA0↑j
                stis    r3, win_eye0_y
loc_5AEB0:                              # CODE XREF: ROM:0005AE8C↑j
                lda     0x100028A, g9
                ldis    win_eye0_y, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aYofs:          .asciz "yofs"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                bx      (g14)
# ---------------------------------------------------------------------------
MATERIAL:                               # DATA XREF: ROM:000593EC↑o
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000186, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMaterial_0:    .asciz "MATERIAL"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                b       loc_5B33C
# ---------------------------------------------------------------------------
MATERIAL_sub:                           # DATA XREF: ROM:000593F0↑o
                bbs     0xD, r9, loc_5AF44
                bbs     0xC, r9, loc_5AF80
                bbs     0xE, r9, loc_5AFBC
                bbs     0xF, r9, loc_5AFF8
                bbs     0xA, r9, loc_5B034
                bbs     0x12, r9, loc_5B070
                lda     0x100028A, g9
                mov     8, g0
                mov     1, g1
                call    clr_pattern_s
                bbs     9, r8, loc_5B0AC
                bbs     8, r8, loc_5B0C4
                b       loc_5B33C
# ---------------------------------------------------------------------------
loc_5AF44:                              # CODE XREF: ROM:MATERIAL_sub↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100028A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMirror_1:      .asciz "MIRROR  "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     1, r3
                b       loc_5B0E0
# ---------------------------------------------------------------------------
loc_5AF80:                              # CODE XREF: ROM:0005AF10↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100028A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSpeculer_0:    .asciz "SPECULER"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     2, r3
                b       loc_5B0E0
# ---------------------------------------------------------------------------
loc_5AFBC:                              # CODE XREF: ROM:0005AF14↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100028A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aAnbient:       .asciz "ANBIENT "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     3, r3
                b       loc_5B0E0
# ---------------------------------------------------------------------------
loc_5AFF8:                              # CODE XREF: ROM:0005AF18↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100028A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aDiffuse:       .asciz "DIFFUSE "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     4, r3
                b       loc_5B0E0
# ---------------------------------------------------------------------------
loc_5B034:                              # CODE XREF: ROM:0005AF1C↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100028A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aDistance:      .asciz "DISTANCE"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     5, r3
                b       loc_5B0E0
# ---------------------------------------------------------------------------
loc_5B070:                              # CODE XREF: ROM:0005AF20↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100028A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aConst:         .asciz "CONST   "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     6, r3
                b       loc_5B0E0
# ---------------------------------------------------------------------------
loc_5B0AC:                              # CODE XREF: ROM:0005AF38↑j
                ldib    material_num, r15
                lda     1(r15), r15
                stib    r15, material_num
                b       loc_5B33C
# ---------------------------------------------------------------------------
loc_5B0C4:                              # CODE XREF: ROM:0005AF3C↑j
                ldib    material_num, r15
                lda     -1(r15), r15
                stib    r15, material_num
                b       loc_5B33C
# ---------------------------------------------------------------------------
loc_5B0E0:                              # CODE XREF: ROM:0005AF7C↑j
                bbs     0x17, r9, loc_5B0F4
                bbs     0x16, r9, loc_5B0F4
                bbs     0x15, r8, loc_5B100
                bbs     0x14, r8, loc_5B218
                b       loc_5B33C
# ---------------------------------------------------------------------------
loc_5B0F4:                              # CODE XREF: ROM:loc_5B0E0↑j
                bbs     0x15, r9, loc_5B100
                bbs     0x14, r9, loc_5B218
                b       loc_5B33C
# ---------------------------------------------------------------------------
loc_5B100:                              # CODE XREF: ROM:0005B0E8↑j
                cmpibne 1, r3, loc_5B11C
                ldib    0x530001, r15
                lda     1(r15), r15
                stib    r15, 0x530001
                b       loc_5B210
# ---------------------------------------------------------------------------
loc_5B11C:                              # CODE XREF: ROM:loc_5B100↑j
                cmpibne 2, r3, loc_5B138
                ldib    0x530002, r15
                lda     1(r15), r15
                stib    r15, 0x530002
                b       loc_5B210
# ---------------------------------------------------------------------------
loc_5B138:                              # CODE XREF: ROM:loc_5B11C↑j
                cmpibne 3, r3, loc_5B154
                ldib    0x530003, r15
                lda     1(r15), r15
                stib    r15, 0x530003
                b       loc_5B210
# ---------------------------------------------------------------------------
loc_5B154:                              # CODE XREF: ROM:loc_5B138↑j
                cmpibne 4, r3, loc_5B170
                ldib    0x530004, r15
                lda     1(r15), r15
                stib    r15, 0x530004
                b       loc_5B210
# ---------------------------------------------------------------------------
loc_5B170:                              # CODE XREF: ROM:loc_5B154↑j
                cmpibne 5, r3, loc_5B1A8
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                lda     0x3C23D70A, r15
                st      r15, (g11)[g12*1]
                ld      0x5010C4, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x5010C4
                b       loc_5B210
# ---------------------------------------------------------------------------
loc_5B1A8:                              # CODE XREF: ROM:loc_5B170↑j
                bbs     0x16, r9, loc_5B1E0
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                lda     0x38D1B717, r15
                st      r15, (g11)[g12*1]
                ld      0x530104, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x530104
                b       loc_5B210
# ---------------------------------------------------------------------------
loc_5B1E0:                              # CODE XREF: ROM:loc_5B1A8↑j
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                lda     0x3C23D70A, r15
                st      r15, (g11)[g12*1]
                ld      0x530104, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x530104
loc_5B210:                              # CODE XREF: ROM:0005B118↑j
                call    sub_5B454
                b       loc_5B33C
# ---------------------------------------------------------------------------
loc_5B218:                              # CODE XREF: ROM:0005B0EC↑j
                cmpibne 1, r3, loc_5B238
                ldib    0x530001, r15
                lda     -1(r15), r15
                stib    r15, 0x530001
                b       loc_5B210
# ---------------------------------------------------------------------------
loc_5B238:                              # CODE XREF: ROM:loc_5B218↑j
                cmpibne 2, r3, loc_5B258
                ldib    0x530002, r15
                lda     -1(r15), r15
                stib    r15, 0x530002
                b       loc_5B338
# ---------------------------------------------------------------------------
loc_5B258:                              # CODE XREF: ROM:loc_5B238↑j
                cmpibne 3, r3, loc_5B278
                ldib    0x530003, r15
                lda     -1(r15), r15
                stib    r15, 0x530003
                b       loc_5B338
# ---------------------------------------------------------------------------
loc_5B278:                              # CODE XREF: ROM:loc_5B258↑j
                cmpibne 4, r3, loc_5B298
                ldib    0x530004, r15
                lda     -1(r15), r15
                stib    r15, 0x530004
                b       loc_5B338
# ---------------------------------------------------------------------------
loc_5B298:                              # CODE XREF: ROM:loc_5B278↑j
                cmpibne 5, r3, loc_5B2D0
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0x5010C4, r15
                st      r15, (g11)[g12*1]
                lda     0x3C23D70A, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x5010C4
                b       loc_5B338
# ---------------------------------------------------------------------------
loc_5B2D0:                              # CODE XREF: ROM:loc_5B298↑j
                bbs     0x16, r9, loc_5B308
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0x530104, r15
                st      r15, (g11)[g12*1]
                lda     0x38D1B717, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x530104
                b       loc_5B338
# ---------------------------------------------------------------------------
loc_5B308:                              # CODE XREF: ROM:loc_5B2D0↑j
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0x530104, r15
                st      r15, (g11)[g12*1]
                lda     0x3C23D70A, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x530104
loc_5B338:                              # CODE XREF: ROM:0005B254↑j
                call    sub_5B454
loc_5B33C:                              # CODE XREF: ROM:0005AF08↑j
                lda     0x100038A, g9
                ldob    material_num, r3
                mov     r3, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aMaterialNum_0: .asciz "material num"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ldob    0x530001, r3
                mov     r3, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aMirror_2:      .asciz "mirror      "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ldob    0x530002, r3
                mov     r3, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aSpeculer_1:    .asciz "speculer    "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ldob    0x530003, r3
                mov     r3, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aAnbient_0:     .asciz "anbient     "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ldob    0x530004, r3
                mov     r3, g0
                balx    debug_disp_hex, r14
# ---------------------------------------------------------------------------
aDeffuse_0:     .asciz "deffuse     "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      0x5010C4, g0
                lda     0x447A0000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
aDistance_0:    .asciz "distance    "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      0x530104, g0
                lda     0x461C4000, r15
                mulr    r15, g0, g0
                balx    debug_disp_float, r14
# ---------------------------------------------------------------------------
aConst_0:       .asciz "const       "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                bx      (g14)
# =============== S U B R O U T I N E =======================================
sub_5B454:                              # CODE XREF: ROM:loc_5B210↑p
                mov     0, r3
                st      g14, mmode
                lda     0x606, g14
                st      g14, 0x60(g10)
                ld      mmode, g14
                ldob    material_num, r5
                cmpibe  0, r5, loc_5B47C
loc_5B47C:                              # CODE XREF: sub_5B454+24↑j
                st      r5, (g10)[g12*1]
                mov     1, r5
                st      r5, (g10)[g12*1]
                ldob    0x530001, r5
                shlo    0x18, 1, r4
                mulo    r5, r4, r5
                addo    r5, r3, r3
                ldob    0x530002, r5
                shlo    0x10, 1, r4
                mulo    r5, r4, r5
                addo    r5, r3, r3
                ldob    0x530003, r5
                shlo    8, 1, r4
                mulo    r5, r4, r5
                addo    r5, r3, r3
                ldob    0x530004, r5
                addo    r5, r3, r3
                st      r3, (g10)[g12*1]
                ld      0x530104, r15
                st      r15, (g10)[g12*1]
                ret
# End of function sub_5B454
# ---------------------------------------------------------------------------
TEXTURE:                                # DATA XREF: ROM:000593FC↑o
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000186, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aTexture:       .asciz "TEXTURE"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     0, r15
                st      r15, 0x509800
                lda     displacement, r15
                st      r15, 0x509804
                lda     0xBF07AE14, r15
                st      r15, 0x509808
                lda     0x3FA28F5C, r15
                st      r15, 0x50980C
TEXTURE_sub:                            # DATA XREF: ROM:00059400↑o
                bbc     5, r9, loc_5B580
                ld      debug_flag, r15
                clrbit  9, r15, r15
                st      r15, debug_flag
                ld      not_scr_bg_move, r15
                clrbit  0x10, r15, r15
                st      r15, not_scr_bg_move
                b       loc_5B954
# ---------------------------------------------------------------------------
loc_5B580:                              # CODE XREF: ROM:TEXTURE_sub↑j
                ld      debug_flag, r15
                setbit  9, r15, r15
                st      r15, debug_flag
                ld      not_scr_bg_move, r15
                setbit  16, r15, r15
                st      r15, not_scr_bg_move
                ld      INTERUPT_FLAGS_HELD, r15
                bbs     0xA, r15, loc_5B720
                ld      0x509800, r5
                bbc     0xE, r8, loc_5B5C4
                addo    1, r5, r5
loc_5B5C4:                              # CODE XREF: ROM:0005B5BC↑j
                bbc     0xF, r8, loc_5B5CC
                subo    1, r5, r5
loc_5B5CC:                              # CODE XREF: ROM:loc_5B5C4↑j
                ld      frame_counter, r15
                bbc     0, r15, loc_5B5E8
                bbc     0xC, r9, loc_5B5E0
                addo    1, r5, r5
loc_5B5E0:                              # CODE XREF: ROM:0005B5D8↑j
                bbc     0xD, r9, loc_5B5E8
                subo    1, r5, r5
loc_5B5E8:                              # CODE XREF: ROM:0005B5D4↑j
                mov     0x11, r3
                addo    r3, r5, r5
                remo    r3, r5, r5
                st      r5, 0x509800
                bbc     8, r8, loc_5B608
                mov     r5, g0
                call    send_tex_debug
loc_5B608:                              # CODE XREF: ROM:0005B5FC↑j
                bbc     9, r8, loc_5B610
                call    sub_4C8CC
loc_5B610:                              # CODE XREF: ROM:loc_5B608↑j
                lda     0x3BA3D70A, r6
                bbc     0x16, r9, loc_5B644
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      0x509804, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x509804
loc_5B644:                              # CODE XREF: ROM:0005B618↑j
                bbc     0x17, r9, loc_5B670
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0x509804, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x509804
loc_5B670:                              # CODE XREF: ROM:loc_5B644↑j
                bbc     0x15, r9, loc_5B69C
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      0x509808, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x509808
loc_5B69C:                              # CODE XREF: ROM:loc_5B670↑j
                bbc     0x14, r9, loc_5B6C8
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0x509808, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x509808
loc_5B6C8:                              # CODE XREF: ROM:loc_5B69C↑j
                bbc     0x10, r9, loc_5B6F4
                lda     0x9801313, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      0x50980C, r15
                st      r15, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x50980C
loc_5B6F4:                              # CODE XREF: ROM:loc_5B6C8↑j
                bbc     0x12, r9, loc_5B720
                lda     0xA001414, r15
                st      r15, (g11)[g12*1]
                ld      0x50980C, r15
                st      r15, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                ld      (g11)[g12*1], r15
                st      r15, 0x50980C
loc_5B720:                              # CODE XREF: ROM:0005B5B0↑j
                mov     0, r3
                lda     0x10802121, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r4
                lda     0x11002222, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                ld      (g11)[g12*1], r6
                lda     displacement, r5
                stt     r4, 0x50E000
                lda     0x50E000, r14
                st      g14, mmode
                lda     0xA0A, g14
                st      g14, 0xA0(g10)
                ld      mmode, g14
                ld      (r14), r15
                st      r15, (g10)[g12*1]
                ld      4(r14), r15
                st      r15, (g10)[g12*1]
                ld      8(r14), r15
                st      r15, (g10)[g12*1]
                lda     win_down, g0    # Window down
                call    set_window      # g0 = two shorts
                ld      0x5010C4, r3
                ld      0x5010C8, r4
                mulr    r3, r4, r4
                mov     0, r3
                st      g14, mmode
                lda     0x1616, g14
                st      g14, 0x160(g10)
                ld      mmode, g14
                st      r4, (g10)[g12*1]
                ldt     0x509804, r4
                mulr    r6, r6, r6
                lda     0x800101, r15
                st      r15, (g11)[g12*1]
                lda     0x1800303, r15 # 0x000000
                st      r15, (g11)[g12*1]
                lda     0x3000606, r15
                st      r15, (g11)[g12*1]
                st      r4, (g11)[g12*1]
                st      r5, (g11)[g12*1]
                st      r6, (g11)[g12*1]
                lda     0x3DCCCCCD, r3
                lda     0x3800707, r15
                st      r15, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                st      r3, (g11)[g12*1]
                mov     0, g1
                lda     1, g0
                call    set_obj
                lda     0x1000202, r15
                st      r15, (g11)[g12*1]
                ld      0x509800, g0
                call    dsp_send_msg
                lda     0x100028A, g9
                ldis    0x509800, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aTexNum:        .asciz "TEX NUM"
# ---------------------------------------------------------------------------
                ld      busy_signal_flag, r14
                cmpobe  1, r14, loc_5B898
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "      "
                .byte 0
# ---------------------------------------------------------------------------
                b       loc_5B8A8
# ---------------------------------------------------------------------------
loc_5B898:                              # CODE XREF: ROM:0005B880↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aBusy:          .asciz "BUSY!!"
                .byte 0
# ---------------------------------------------------------------------------
loc_5B8A8:                              # CODE XREF: ROM:0005B894↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPl1LeverSelect:.asciz "PL1 LEVER --> select"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPl1PunchSend:  .asciz "PL1 PUNCH --> SEND"
                .byte 0
# ---------------------------------------------------------------------------
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPl1KickClear:  .asciz "PL1 KICK  --> CLEAR"
# ---------------------------------------------------------------------------
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPl2LeverXmove: .asciz "PL2 LEVER --> Xmove"
# ---------------------------------------------------------------------------
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPl2LeverYmove: .asciz "PL2 LEVER --> Ymove"
# ---------------------------------------------------------------------------
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPl2PGZmove:    .asciz "PL2 P & G --> Zmove"
# ---------------------------------------------------------------------------
loc_5B954:                              # CODE XREF: ROM:0005B57C↑j
                bx      (g14)
# ---------------------------------------------------------------------------
loc_5B958:                              # DATA XREF: ROM:000460C8↑o
                lda     LUMA2_START, r12 # luma_ram
                ldob    TRANS_MAP, r11
                shlo    7, 1, r3
                mulo    r3, r11, r11
                lda     0x20D000C(r11), r9
                shlo    7, 1, r10
loc_5B97C:                              # CODE XREF: ROM:0005B990↓j
                ldob    (r9), r3
                stos    r3, (r12)
                addo    1, r9, r9
                addo    2, r12, r12
                cmpdeco 1, r10, r10
                bl      loc_5B97C
                ret
# ---------------------------------------------------------------------------
loc_5B998:                              # DATA XREF: ROM:000460EC↑o
                lda     0x501500, r3
                ld      0x530140, r6
                ld      0x530144, r7
                ld      0x530148, r8
                st      r6, 0xC(r3)
                st      r7, 0x10(r3)
                st      r8, 0x14(r3)
                ret
# ---------------------------------------------------------------------------
unused_debug_time_round_set:
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000186, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aTimeRoundSet:  .asciz "TIME , ROUND  SET       "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ldib    time, g4
                ldib    start_stage, g5
                call    sub_5BAC8
                b       loc_5BAC4
# ---------------------------------------------------------------------------
                ld      INTERUPT_FLAGS_MOMENTARY, r3
                ld      INTERUPT_FLAGS_HELD, r4
                ldib    time, r5
                ldib    start_stage, r9
                mov     r5, g4
                mov     r9, g5
                call    sub_5BAC8
unused_debug_time_round_set_sub:        # P1 Barrier
                bbc     10, r4, loc_5BA58
                mov     r4, r3
loc_5BA58:                              # CODE XREF: ROM:unused_debug_time_round_set_sub↑j
                bbc     18, r4, loc_5BA60 # P2 Left
                mov     r4, r3
loc_5BA60:                              # CODE XREF: ROM:loc_5BA58↑j
                bbc     15, r3, loc_5BA68 # P2 Down
                subi    1, r5, r5
loc_5BA68:                              # CODE XREF: ROM:loc_5BA60↑j
                bbc     14, r3, loc_5BA70
                addi    1, r5, r5
loc_5BA70:                              # CODE XREF: ROM:loc_5BA68↑j
                bbc     0x17, r3, loc_5BA78
                subi    1, r9, r9
loc_5BA78:                              # CODE XREF: ROM:loc_5BA70↑j
                bbc     0x16, r3, loc_5BA80
                addi    1, r9, r9
loc_5BA80:                              # CODE XREF: ROM:loc_5BA78↑j
                bbc     8, r3, loc_5BA88
                mov     0x1E, r5
loc_5BA88:                              # CODE XREF: ROM:loc_5BA80↑j
                bbc     0x10, r3, loc_5BA90
                mov     1, r9
loc_5BA90:                              # CODE XREF: ROM:loc_5BA88↑j
                lda     0x63, r7
                cmpible 0, r5, loc_5BA9C
                mov     r7, r5
loc_5BA9C:                              # CODE XREF: ROM:0005BA94↑j
                cmpibge r7, r5, loc_5BAA4
                mov     0, r5
loc_5BAA4:                              # CODE XREF: ROM:loc_5BA9C↑j
                cmpobl  0, r9, loc_5BAAC
                mov     0xA, r9
loc_5BAAC:                              # CODE XREF: ROM:loc_5BAA4↑j
                cmpobge 0xA, r9, loc_5BAB4
                mov     1, r9
loc_5BAB4:                              # CODE XREF: ROM:loc_5BAAC↑j
                stib    r5, time
                stib    r9, start_stage
loc_5BAC4:                              # CODE XREF: ROM:0005BA20↑j
                bx      (g14)
# =============== S U B R O U T I N E =======================================
sub_5BAC8:                              # CODE XREF: ROM:0005BA1C↑p
                lda     0x100028A, g9
                mov     g4, g0
                balx    debug_disp_int, r14
# End of function sub_5BAC8
# ---------------------------------------------------------------------------
aTime_0:        .asciz "time"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                mov     g5, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
aRound_0:       .asciz "round"
                .short 0
# ---------------------------------------------------------------------------
                ret
# ---------------------------------------------------------------------------
floating_reset_code:
                call    write_str_stf
                call    init_game_assignments
                call    init_some_backup_stuff
                call    sram_clear_for_coin_assign
                call    rank_init
                call    sub_62328
                call    set_game_assign_byte_flag
                call    write_stats_to_backup_ram
                ret
# =============== S U B R O U T I N E =======================================
sub_5BB20:                              # CODE XREF: TEST_INT+394↑p
                addo    4, sp, sp
                st      g4, -4(sp)
                ld      add_BACKUP_RAM_TO_RAM, g4
                lda     0xA00001, g0
                call    sound_request_u
                ld      mod_fa_control0, r3
                ld      0x0(r3), r15
                setbit  0, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                setbit  1, r15, r15
                st      r15, 0x0(r3)
                mov     1, r4
                ld      mod_fa_osage0_1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_osage0_2, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      fa_rob0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      fa_rob1, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_control0, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_user, r3
                ld      0x0(r3), r5
                setbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                lda     fa_user, r5     # return
                st      r5, 0xC(r3)
                mov     1, r4
                ld      mod_fa_game_disp, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                mov     1, r4
                ld      mod_fa_sound, r3
                ld      0x0(r3), r5
                clrbit  0x1F, r5, r5
                st      r5, 0x0(r3)
                ldib    mode, r15
                lda     1(r15), r15
                stib    r15, mode
                xor     r3, r3, r3
                stob    r3, MENU_ITEM_SELECT
                mov     0xB, r15
                stib    r15, MENU_SELECT
                lda     0x1008000, r14
                mov     0, r15
                shlo    0xA, 1, r13
loc_5BC68:                              # CODE XREF: sub_5BB20+154↓j
                st      r15, (r14)
                lda     4(r14), r14
                cmpdeco 1, r13, r13
                bl      loc_5BC68
                lda     0x100C000, r4
                mov     0, r5
                shlo    0xC, 1, r6
loc_5BC88:                              # CODE XREF: sub_5BB20+174↓j
                stos    r5, (r4)
                addo    2, r4, r4
                cmpdeco 1, r6, r6
                bl      loc_5BC88
                call    sub_63514
                ld      -4(sp), g4
                subo    4, sp, sp
                ret
# End of function sub_5BB20
# =============== S U B R O U T I N E =======================================
DISP_TEST_MENU:                         # CODE XREF: TEST_DSP+18↑p
                ld      add_BACKUP_RAM_TO_RAM, g4
                ld      fa_rob0, g7
                ld      fa_rob1, g8
                ld      INTERUPT_FLAGS_HELD, r9
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                ldob    MENU_SELECT, r3
                bbs     7, r3, loc_5BE1C
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                lda     0x8001008, r14
                and     r14, r15, r15
                cmpo    0, r15
                be      loc_5BD4C
                ld      TEST_MENU_list[r3*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                addi    1, r3, r3
                cmpibge 0xB, r3, loc_5BD24
                mov     0, r3
loc_5BD24:                              # CODE XREF: DISP_TEST_MENU+70↑j
                stob    r3, MENU_SELECT
                ld      TEST_MENU_list[r3*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r14
                stos    r14, (g9)
                b       loc_5BD9C
# ---------------------------------------------------------------------------
loc_5BD4C:                              # CODE XREF: DISP_TEST_MENU+4C↑j
                bbc     0xD, r8, loc_5BD9C
                ld      TEST_MENU_list[r3*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                subi    1, r3, r3
                cmpible 0, r3, loc_5BD78
                mov     0xB, r3
loc_5BD78:                              # CODE XREF: DISP_TEST_MENU+C4↑j
                stob    r3, MENU_SELECT
                ld      TEST_MENU_list[r3*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r14
                stos    r14, (g9)
loc_5BD9C:                              # CODE XREF: DISP_TEST_MENU+9C↑j
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                lda     0x4000104, r14
                and     r14, r15, r15
                cmpo    0, r15
                be      loc_5BE18       # branch if button pressed
                ldob    MENU_SELECT, r3
                setbit  7, r3, r4
                stob    r4, MENU_SELECT
                mov     0, r15
                stib    r15, MENU_ITEM_SELECT
                lda     0xFF, r15
                stib    r15, 0x5000A7
                ld      mod_fa_sound, r14
                mov     0, r15
                stos    r15, 0x80(r14)
                lda     0x1000000, g9
                shlo    6, 1, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                ld      TEST_MENU_list[r3*8], r4
                addo    4, r4, g0
                call    sub_62820
loc_5BE18:                              # CODE XREF: DISP_TEST_MENU+108↑j
                ret
# ---------------------------------------------------------------------------
loc_5BE1C:                              # CODE XREF: DISP_TEST_MENU+30↑j
                clrbit  7, r3, r3
                ld      TEXT_MENU_SELECT[r3*8], r3
                bx      (r3)
# End of function DISP_TEST_MENU
# =============== S U B R O U T I N E =======================================
MEMORY_TEST:                            # DATA XREF: ROM:TEXT_MENU_SELECT↓o
                ldob    MENU_ITEM_SELECT, r3
                ld      MEMORY_TEST_list[r3*4], r3
                bx      (r3)
# End of function MEMORY_TEST
# ---------------------------------------------------------------------------
MEMORY_TEST_list:.long MEMORY_TEST_TEST # DATA XREF: MEMORY_TEST+8↑r
                .long MEMORY_TEST_EXIT
# ---------------------------------------------------------------------------
MEMORY_TEST_TEST:                       # DATA XREF: ROM:MEMORY_TEST_list↑o
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100052C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aRom:           .asciz "* * *  ROM  * * *"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     7, r4
                xor     r5, r5, r5
display_memtest_ic:                     # CODE XREF: ROM:0005BEA8↓j
                ld      rom_memtest_text_placements[r5*1], g9
                ld      rom_memtest_text[r5*1], g0
                call    print_mes
                cmpdeci 0, r4, r4
                addo    24, r5, r5
                bl      display_memtest_ic
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000A2C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aRam:           .asciz "* * *  RAM  * * *"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     0xE, r4
                xor     r5, r5, r5
loc_5BEF0:                              # CODE XREF: ROM:0005BF0C↓j
                ld      ram_memtest_text_placements[r5*1], g9
                ld      ram_memtest_text[r5*1], g0
                call    print_mes
                cmpdeci 0, r4, r4
                addo    20, r5, r5
                bl      loc_5BEF0
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10016B2, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aTestingNow:    .asciz "TESTING NOW"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     7, r4           # Run ROM test for 8 ROMs (Zero indexed)
                xor     r5, r5, r5
loc_5BF4C:                              # CODE XREF: ROM:0005BFA0↓j
                ldq     rom_memtest_checksum[r5*1], g0 # Maybe checksums Gotta look into this!
                call    calc_crc        # For program_rom1:
                cmpobe  g3, g0, loc_5BF7C
                ld      rom_memtest_text_placements[r5*1], g9
                addo    0xE, g9, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aBad_0:         .asciz "BAD "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                b       loc_5BF98
# ---------------------------------------------------------------------------
loc_5BF7C:                              # CODE XREF: ROM:0005BF58↑j
                ld      rom_memtest_text_placements[r5*1], g9
                addo    0xE, g9, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aGood_0:        .asciz "GOOD"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_5BF98:                              # CODE XREF: ROM:0005BF78↑j
                cmpdeci 0, r4, r4
                addo    24, r5, r5
                bl      loc_5BF4C
                mov     14, r4
                xor     r5, r5, r5
loc_5BFAC:                              # CODE XREF: ROM:0005C000↓j
                ldt     RAM_TEST[r5*1], g0
                call    PARSE_RAM
                cmpobe  0, g0, loc_5BFDC
                ld      ram_memtest_text_placements[r5*1], g9
                addo    14, g9, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aBad_1:         .asciz "BAD "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                b       loc_5BFF8
# ---------------------------------------------------------------------------
loc_5BFDC:                              # CODE XREF: ROM:0005BFB8↑j
                ld      ram_memtest_text_placements[r5*1], g9
                addo    0xE, g9, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aGood_1:        .asciz "GOOD"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_5BFF8:                              # CODE XREF: ROM:0005BFD8↑j
                cmpdeci 0, r4, r4
                addo    0x14, r5, r5
                bl      loc_5BFAC
                ldib    MENU_ITEM_SELECT, r15
                lda     1(r15), r15
                stib    r15, MENU_ITEM_SELECT
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10016A6, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPressTestButto:.asciz "PRESS TEST BUTTON TO EXIT"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
MEMORY_TEST_EXIT:                       # DATA XREF: ROM:0005BE44↑o
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                lda     0x4000104, r14
                and     r14, r15, r15
                cmpo    0, r15
                bne     TEST_MENU_init
                ret
# =============== S U B R O U T I N E =======================================
# For program_rom1:
# g0 = (0x5902C) 0x00000000 start offset
# g1 = (0x59030) 0x00080000 size
# g2 = (0x59034) 0x00000000 alignment 0 or 1
# g3 = (0x59038) 0x0000C988 checksum
calc_crc:                               # CODE XREF: ROM:0005BF54↑p
                mov     g0, r3
                mov     g1, r4
                lda     program_rom_1, r9
                lda     program_rom_2, r10
                lda     0xFFFF, r5
                cmpobe  0, g2, loc_5C0A8
                addo    2, r3, r3
loc_5C0A8:                              # CODE XREF: calc_crc+20↑j
                shro    1, r4, r4
                xor     g0, g0, g0
loc_5C0B0:                              # CODE XREF: calc_crc+54↓j
                clrbit  1, r3, r15
                cmpobe  r9, r15, loc_5C0CC # Skip reading the bytes if they are the checksum values
                cmpobe  r10, r15, loc_5C0CC
                ldob    (r3), r6        # Read bytes, one at a time
                addo    g0, r6, g0      # We add that byte to g0
                ldob    1(r3), r6       # Do it again for the second byte...
                addo    g0, r6, g0
loc_5C0CC:                              # CODE XREF: calc_crc+34↑j
                addo    4, r3, r3
                cmpdeci 1, r4, r4
                bl      loc_5C0B0
                and     r5, g0, g0
                ret
# End of function calc_crc
# =============== S U B R O U T I N E =======================================
PARSE_RAM:                              # CODE XREF: ROM:0005BFB4↑p
                mov     g0, r3          # IC ADDRESS
                mov     g1, r4          # IC SIZE
                mov     g2, r5
loc_5C0EC:                              # CODE XREF: PARSE_RAM+60↓j
                bbc     0, r5, loc_5C0FC
                mov     r3, g0
                call    sub_5C154
                cmpobne 0, g1, loc_5C14C
loc_5C0FC:                              # CODE XREF: PARSE_RAM:loc_5C0EC↑j
                addo    1, r3, r3
                bbc     1, r5, loc_5C110
                mov     r3, g0
                call    sub_5C154
                cmpobne 0, g1, loc_5C14C
loc_5C110:                              # CODE XREF: PARSE_RAM+20↑j
                addo    1, r3, r3
                bbc     2, r5, loc_5C124
                mov     r3, g0
                call    sub_5C154
                cmpobne 0, g1, loc_5C14C
loc_5C124:                              # CODE XREF: PARSE_RAM+34↑j
                addo    1, r3, r3
                bbc     3, r5, loc_5C138
                mov     r3, g0
                call    sub_5C154
                cmpobne 0, g1, loc_5C14C
loc_5C138:                              # CODE XREF: PARSE_RAM+48↑j
                addo    1, r3, r3
                cmpdeci 1, r4, r4
                bl      loc_5C0EC
                mov     0, g0
                ret
# ---------------------------------------------------------------------------
loc_5C14C:                              # CODE XREF: PARSE_RAM+18↑j
                subo    1, 0, g0
                ret
# End of function PARSE_RAM
# =============== S U B R O U T I N E =======================================
sub_5C154:                              # CODE XREF: PARSE_RAM+14↑p
                lda     0x55, r3
                ldob    (g0), r11
                stob    r3, (g0)
                ldob    (g0), r4
                stob    r11, (g0)
                cmpobne r3, r4, loc_5C1B4
                lda     0xAA, r3
                ldob    (g0), r11
                stob    r3, (g0)
                ldob    (g0), r4
                stob    r11, (g0)
                cmpobne r3, r4, loc_5C1B4
                mov     1, r3
                mov     8, r9
loc_5C18C:                              # CODE XREF: sub_5C154+54↓j
                ldob    (g0), r11
                stob    r3, (g0)
                ldob    (g0), r4
                stob    r11, (g0)
                cmpobne r3, r4, loc_5C1B4
                addo    r3, r3, r3
                cmpdeci 1, r9, r9
                bl      loc_5C18C
                mov     0, g1
                ret
# ---------------------------------------------------------------------------
loc_5C1B4:                              # CODE XREF: sub_5C154+14↑j
                subo    1, 0, g1
                ret
# End of function sub_5C154
# =============== S U B R O U T I N E =======================================
INPUT_TEST:                             # DATA XREF: ROM:000DC93C↓o
                ldob    MENU_ITEM_SELECT, r3
                ld      INPUT_TEST_FUNCS[r3*4], r3
                bx      (r3)
# End of function INPUT_TEST
# ---------------------------------------------------------------------------
INPUT_TEST_FUNCS:.long loc_5C1DC        # DATA XREF: INPUT_TEST+8↑r
                .long loc_5C220
                .long loc_5C24C
# ---------------------------------------------------------------------------
loc_5C1DC:                              # DATA XREF: ROM:INPUT_TEST_FUNCS↑o
                ld      mi_PressTestButtonToExit, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                mov     0, r6
                lda     INPUT_TEST_SW, r5
loc_5C1FC:                              # CODE XREF: ROM:0005C210↓j
                ld      (r5)[r6*4], r7
                ld      (r7), g9
                lda     4(r7), g0
                call    print_mes
                addo    1, r6, r6
                cmpobg  0xD, r6, loc_5C1FC
                mov     1, r15
                stib    r15, MENU_ITEM_SELECT
loc_5C220:                              # DATA XREF: ROM:0005C1D4↑o
                call    loc_62CCC
                ld      INTERUPT_FLAGS_MOMEN_ON_REL, r9
                lda     0x4000104, r8
                and     r8, r9, r9
                cmpobe  0, r9, loc_5C248
                mov     2, r15
                stib    r15, MENU_ITEM_SELECT
loc_5C248:                              # CODE XREF: ROM:0005C238↑j
                ret
# ---------------------------------------------------------------------------
loc_5C24C:                              # DATA XREF: ROM:0005C1D8↑o
                call    loc_62CCC
                ld      INTERUPT_FLAGS_MOMEN_ON_REL, r9
                lda     0x4000004, r8
                and     r8, r9, r9
                cmpobe  0, r9, loc_5C26C
                b       TEST_MENU_init
# ---------------------------------------------------------------------------
loc_5C26C:                              # CODE XREF: ROM:0005C264↑j
                ret
# ---------------------------------------------------------------------------
INPUT_TEST_SW:  .long aPLAYER______1P_______2P
                .long aUP_______
                .long aDOWN_____
                .long aRIGHT____
                .long aLEFT_____
                .long aPUNCH____
                .long aKICK_____
                .long aBARRIER__
                .long aSTART____
                .long a___COIN_CHUTE_1__
                .long a___COIN_CHUTE_2__
                .long a___SERVICE_SW____
                .long a__TEST_SW_______
# ---------------------------------------------------------------------------
OUTPUT_TEST:                            # DATA XREF: ROM:000DC944↓o
                addo    4, sp, sp
                st      r3, -4(sp)
                addo    0x10, sp, sp
                stq     r4, -0x10(sp)
                addo    0x10, sp, sp
                stq     r8, -0x10(sp)
                addo    0x10, sp, sp
                stq     r12, -0x10(sp)
                addo    0x10, sp, sp
                stq     g0, -0x10(sp)
                addo    0x10, sp, sp
                stq     g4, -0x10(sp)
                addo    0x10, sp, sp
                stq     g8, -0x10(sp)
                addo    4, sp, sp
                st      g12, -4(sp)
                addo    4, sp, sp
                st      g13, -4(sp)
                addo    4, sp, sp
                st      g14, -4(sp)
                ldob    MENU_ITEM_SELECT, r3
                ld      OUTPUT_TEST_list[r3*4], r3
                bx      (r3)
# ---------------------------------------------------------------------------
OUTPUT_TEST_list:.long loc_5C340        # DATA XREF: ROM:0005C324↑r
                .long loc_5C3B4
                .long loc_5C474
                .long loc_5C650
# ---------------------------------------------------------------------------
loc_5C340:                              # DATA XREF: ROM:OUTPUT_TEST_list↑o
                ld      mi_PressTestButtonToExit, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                mov     0, r6
                lda     VersusCityBillboard, r5
loc_5C360:                              # CODE XREF: ROM:0005C374↓j
                ld      (r5)[r6*4], r7
                ld      (r7), g9
                lda     4(r7), g0
                call    print_mes
                addo    1, r6, r6
                cmpobg  2, r6, loc_5C360
                mov     0, r15
                stis    r15, billboard_test_loop_counter
                mov     0, r15
                stis    r15, billboard_active_frame_counter
                mov     0, r15
                stib    r15, billboard_test_flag
                mov     0, r15
                stib    r15, billboard_test_flag_0
                mov     1, r15
                stib    r15, MENU_ITEM_SELECT
loc_5C3B4:                              # DATA XREF: ROM:0005C334↑o
                ldos    billboard_test_loop_counter, r4
                ldob    init_lamp_data[r4], r3
                stob    r3, IO_BILLBOARD
                ldos    billboard_test_loop_counter, r14
                addi    1, r14, r15
                stos    r15, billboard_test_loop_counter
                ldos    billboard_test_loop_counter, r14
                cmpobne 10, r14, loc_5C3F8
                mov     2, r15
                stib    r15, MENU_ITEM_SELECT
loc_5C3F8:                              # CODE XREF: ROM:0005C3E8↑j
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
loc_5C474:                              # DATA XREF: ROM:0005C338↑o
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                lda     0x4000104, r14
                and     r14, r15, r15
                cmpo    0, r15
                be      loc_5C4AC
                mov     0, r15
                stis    r15, billboard_test_loop_counter
                mov     3, r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5C4AC:                              # CODE XREF: ROM:0005C48C↑j
                ldob    billboard_test_flag, r4
                ldob    billboard_test_flag_0, r5
                ldos    billboard_active_frame_counter, r14
                cmpobne 0, r14, loc_5C508
                lda     0x1000480, g9
                addo    31, 31, g0      # 62 aka 0x3E
                mov     1, g1
                call    clr_pattern_s
                lda     WinnerLamps, r6
                ld      (r6)[r4*4], r7
                ld      (r7), g9
                lda     4(r7), g0
                call    print_mes
                ldob    billboard_lamp_in_use[r4], r8
                stob    r8, IO_BILLBOARD
                b       increment_billboard_frame_counter
# ---------------------------------------------------------------------------
loc_5C508:                              # CODE XREF: ROM:0005C4C4↑j
                lda     300, r13
                ldos    billboard_active_frame_counter, r14
                cmpobne r13, r14, loc_5C52C
                ldob    start_blink[r4], r8
                stob    r8, IO_BILLBOARD
                b       increment_billboard_frame_counter
# ---------------------------------------------------------------------------
loc_5C52C:                              # CODE XREF: ROM:0005C514↑j
                lda     301, r13
                ldos    billboard_active_frame_counter, r14
                cmpobge r13, r14, increment_billboard_frame_counter
                ldob    winner_lamp_blink[r5], r8
                stob    r8, IO_BILLBOARD
                shlo    4, 0x13, r13    # r13 = 0x130
                ldos    billboard_active_frame_counter, r14
                cmpobne r13, r14, loc_5C598 # if billboard_frame_counter not equal to r13
                ldob    billboard_test_flag, r14
                cmpobe  3, r14, loc_5C7B0
                mov     0, r15
                stis    r15, billboard_active_frame_counter
                ldob    billboard_test_flag, r14
                addi    1, r14, r15
                stob    r15, billboard_test_flag
                mov     0, r15
                stib    r15, billboard_test_flag_0
                b       loc_5C5C0
# ---------------------------------------------------------------------------
loc_5C598:                              # CODE XREF: ROM:0005C558↑j
                ldob    billboard_test_flag_0, r14
                addi    1, r14, r15
                stob    r15, billboard_test_flag_0
increment_billboard_frame_counter:      # CODE XREF: ROM:0005C504↑j
                ldos    billboard_active_frame_counter, r14
                addi    1, r14, r15
                stos    r15, billboard_active_frame_counter
loc_5C5C0:                              # CODE XREF: ROM:0005C594↑j
                ldos    billboard_test_loop_counter, r14
                addi    1, r14, r15
                stos    r15, billboard_test_loop_counter
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
loc_5C650:                              # DATA XREF: ROM:0005C33C↑o
                ldos    billboard_test_loop_counter, r4
                ldob    init_lamp_data[r4], r3
                stob    r3, IO_BILLBOARD
                ldos    billboard_test_loop_counter, r14
                addi    1, r14, r15
                stos    r15, billboard_test_loop_counter
                ldos    billboard_test_loop_counter, r14
                cmpobe  0xA, r14, loc_5C704
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
loc_5C704:                              # CODE XREF: ROM:0005C684↑j
                mov     0, r15
                stis    r15, billboard_test_loop_counter
                mov     0, r15
                stis    r15, billboard_active_frame_counter
                mov     0, r15
                stib    r15, billboard_test_flag
                mov     0, r15
                stib    r15, billboard_test_flag_0
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                b       TEST_MENU_init
# ---------------------------------------------------------------------------
loc_5C7B0:                              # CODE XREF: ROM:0005C564↑j
                mov     10, r15
                stis    r15, billboard_test_loop_counter
                mov     0, r15
                stis    r15, billboard_active_frame_counter
                mov     0, r15
                stib    r15, billboard_test_flag
                mov     0, r15
                stib    r15, billboard_test_flag_0
                ld      -4(sp), g14
                subo    4, sp, sp
                ld      -4(sp), g13
                subo    4, sp, sp
                ld      -4(sp), g12
                subo    4, sp, sp
                ldq     -0x10(sp), g8
                subo    0x10, sp, sp
                ldq     -0x10(sp), g4
                subo    0x10, sp, sp
                ldq     -0x10(sp), g0
                subo    0x10, sp, sp
                ldq     -0x10(sp), r12
                subo    0x10, sp, sp
                ldq     -0x10(sp), r8
                subo    0x10, sp, sp
                ldq     -0x10(sp), r4
                subo    0x10, sp, sp
                ld      -4(sp), r3
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
VersusCityBillboard:.long lVersusCityBillboard
NowTesting:     .long lNowTesting
WinnerLamps:    .long l1pWinnerLamp     # DATA XREF: ROM:0005C4DC↑o
                .long l2pWinnerLamp
_7Segs:         .long l1p7Seg
                .long l2p7Seg
start_blink:    .byte 0x97              # DATA XREF: ROM:0005C518↑r
                .byte 0x9F              # 2p winner lamp
                .byte 0xF3              # 1p 7-SEG
                .byte 0xFB              # 2p 7-SEG
winner_lamp_blink:.byte 0x1F            # DATA XREF: ROM:0005C53C↑r
                .byte 0x3F
                .byte 0x5F
                .byte 0x7F
billboard_lamp_in_use:.byte 0x93, 0x9B, 0xF0, 0xF9
init_lamp_data: .byte 0xF7,0xFE,0x1F,0x3F,0x5F
                .byte 0x7F,0x87,0x8F,0x97,0x9F
                .byte 0xFF,0xFF,0xFF,0xFF,0xFF # not used by billboard test
                .byte 0
# ---------------------------------------------------------------------------
SOUND_TEST:                             # DATA XREF: ROM:000DC94C↓o
                call    loc_5C98C
                bne     TEST_MENU_init
                call    loc_5CAE0
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001598, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSelectWithPlay:.asciz "SELECT WITH PLAYER-1 SIDE LEVER UP/DOWN"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001610, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPressPlayer1Si:.asciz "PRESS PLAYER-1 SIDE PUNCH BUTTON TO MAKE SOUND"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10016A4, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPressTestButto_0:.asciz "PRESS TEST BUTTON TO EXIT"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
loc_5C98C:                              # CODE XREF: ROM:SOUND_TEST↑p
                ld      mod_fa_sound, r11
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                ld      INTERUPT_FLAGS_HELD, r9
                mov     r8, r7
                bbc     10, r9, loc_5C9B0 # P1 Barrier
                mov     r9, r7
loc_5C9B0:                              # CODE XREF: ROM:0005C9A8↑j
                bbs     2, r8, loc_5CAD8 # Test Menu
                bbs     26, r8, loc_5CAD8 # 0x4000000
                bbs     3, r8, loc_5C9C4 # Service Coin
                bbs     27, r8, loc_5C9C4
                b       loc_5C9D4
# ---------------------------------------------------------------------------
loc_5C9C4:                              # CODE XREF: ROM:0005C9B8↑j
                lda     loc_1110, r9    # Simulates P1 Start+Punch+Down
                mov     r9, r8
                mov     r9, r7
loc_5C9D4:                              # CODE XREF: ROM:0005C9C0↑j
                ldos    0x80(r11), r3
                bbc     0xD, r7, loc_5CA38
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000BAA, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "                                  "
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                subi    1, r3, r3
                cmpible 0, r3, loc_5CA38
                lda     displacement333, r3
loc_5CA38:                              # CODE XREF: ROM:0005C9D8↑j
                bbc     0xC, r7, loc_5CA9C
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000BAA, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "                                  "
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addi    1, r3, r3
                lda     displacement333, r15
                cmpibge r15, r3, loc_5CA9C
                mov     0, r3
loc_5CA9C:                              # CODE XREF: ROM:loc_5CA38↑j
                stos    r3, 0x80(r11)
                ldos    0x80(r11), r3
                bbs     8, r8, loc_5CAB0
                bbs     4, r8, loc_5CAB0
                b       loc_5CAC0
# ---------------------------------------------------------------------------
loc_5CAB0:                              # CODE XREF: ROM:0005CAA4↑j
                ld      AUDIO_LIST[r3*4], r4
                ld      (r4), g0
                call    sound_request_u
loc_5CAC0:                              # CODE XREF: ROM:0005CAAC↑j
                bbc     9, r8, loc_5CAD0
                lda     0xA00001, g0
                call    sound_request_u
loc_5CAD0:                              # CODE XREF: ROM:loc_5CAC0↑j
                cmpo    0, 0
                ret
# ---------------------------------------------------------------------------
loc_5CAD8:                              # CODE XREF: ROM:loc_5C9B0↑j
                cmpo    1, 0
                ret
# ---------------------------------------------------------------------------
loc_5CAE0:                              # CODE XREF: ROM:0005C898↑p
                ld      mod_fa_sound, r11
                ldos    0x80(r11), r3
                lda     0x1000B9E, g9
                mov     r3, g0
                call    print_dec       # Print g0 as decimal
                lda     0x1000B9E, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aNo:            .asciz "No."
# ---------------------------------------------------------------------------
                lda     0x1000BB0, g9
                ld      AUDIO_LIST[r3*4], r4
                addo    4, r4, g0
                call    print_mes
                ret
# ---------------------------------------------------------------------------
C_R_T__TEST:                            # DATA XREF: ROM:000DC954↓o
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                ld      INTERUPT_FLAGS_HELD, r9
                ldob    MENU_ITEM_SELECT, r3
                ld      C_R_T__TEST_list[r3*4], r3
                bx      (r3)
# ---------------------------------------------------------------------------
C_R_T__TEST_list:.long draw_C_R_T__TEST_menu # DATA XREF: ROM:0005CB44↑r
                .long draw_arrow_EXIT
                .long draw_arrow_RED
                .long crt_test_RED
                .long draw_arrow_GREEN
                .long crt_test_GREEN
                .long draw_arrow_BLUE
                .long crt_test_BLUE
                .long draw_arrow_EXIT
                .long loc_5CBD4
                .long loc_5CDF4
                .long loc_5CE08
# ---------------------------------------------------------------------------
draw_C_R_T__TEST_menu:                  # DATA XREF: ROM:C_R_T__TEST_list↑o
                call    display_C_R_T_TEST_1
                mov     8, r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
draw_arrow_EXIT:                        # DATA XREF: ROM:0005CB54↑o
                lda     0x100152C, g9
                mov     1, g0
                mov     4, g1
                call    clr_pattern_s
                ldib    MENU_ITEM_SELECT, r15
                lda     1(r15), r15
                stib    r15, MENU_ITEM_SELECT
                lda     0x10016AC, g9
                mov     0x1C, g0
                call    print_char
                ret
# ---------------------------------------------------------------------------
loc_5CBD0:                              # CODE XREF: ROM:0005CBD8↓j
                ret
# ---------------------------------------------------------------------------
loc_5CBD4:                              # DATA XREF: ROM:0005CB74↑o
                call    sub_5CEA4
                cmpobne 0, g0, loc_5CBD0
                bbs     0x1A, r8, loc_5CDE4
                bbs     2, r8, loc_5CDE4
                bbs     4, r8, loc_5CDE4
                bbs     8, r8, loc_5CDE4
                bbs     9, r8, loc_5CDE4
                call    sub_5D108
                ret
# ---------------------------------------------------------------------------
draw_arrow_RED:                         # DATA XREF: ROM:0005CB58↑o
                lda     0x100152C, g9
                mov     1, g0
                mov     4, g1
                call    clr_pattern_s
                ldib    MENU_ITEM_SELECT, r15
                lda     1(r15), r15
                stib    r15, MENU_ITEM_SELECT
                lda     0x100152C, g9
                mov     0x1C, g0
                call    print_char
                ret
# ---------------------------------------------------------------------------
crt_test_RED:                           # DATA XREF: ROM:0005CB5C↑o
                call    sub_5CEA4
                call    sub_5D108
                ld      add_BACKUP_RAM_TO_RAM, g0
                ldob    0x3359(g0), g0
                ld      add_BACKUP_RAM_TO_RAM, g1
                ldob    0x335C(g1), g1
                call    sub_5CF08
                cmpobe  0, g2, loc_5CC88
                stob    g0, TST_RED_ADD_bk
                stob    g0, TST_RED_ADD_bk_ram
                stob    g1, TST_RED_MUL_bk
                stob    g1, TST_RED_MUL_bk_ram
                call    load_COLORS_to_RAM
loc_5CC88:                              # CODE XREF: ROM:0005CC60↑j
                call    set_game_assign_byte_flag
                bbs     0x1A, r8, loc_5CDE4
                bbs     2, r8, loc_5CDE4
                bbs     4, r8, loc_5CDE4
                ret
# ---------------------------------------------------------------------------
draw_arrow_GREEN:                       # DATA XREF: ROM:0005CB60↑o
                lda     0x100152C, g9
                mov     1, g0
                mov     4, g1
                call    clr_pattern_s
                ldib    MENU_ITEM_SELECT, r15
                lda     1(r15), r15
                stib    r15, MENU_ITEM_SELECT
                lda     0x10015AC, g9
                mov     0x1C, g0
                call    print_char
                ret
# ---------------------------------------------------------------------------
crt_test_GREEN:                         # DATA XREF: ROM:0005CB64↑o
                call    sub_5CEA4
                call    sub_5D108
                ld      add_BACKUP_RAM_TO_RAM, g0
                ldob    0x335A(g0), g0
                ld      add_BACKUP_RAM_TO_RAM, g1
                ldob    0x335D(g1), g1
                call    sub_5CF08
                cmpobe  0, g2, loc_5CD2C
                stob    g0, TST_GRN_ADD_bk
                stob    g0, TST_GRN_ADD_bk_ram
                stob    g1, TST_GRN_MUL_bk
                stob    g1, TST_GRN_MUL_bk_ram
                call    load_COLORS_to_RAM
loc_5CD2C:                              # CODE XREF: ROM:0005CD04↑j
                call    set_game_assign_byte_flag
                bbs     0x1A, r8, loc_5CDE4
                bbs     2, r8, loc_5CDE4
                bbs     4, r8, loc_5CDE4
                ret
# ---------------------------------------------------------------------------
draw_arrow_BLUE:                        # DATA XREF: ROM:0005CB68↑o
                lda     0x100152C, g9
                mov     1, g0
                mov     4, g1
                call    clr_pattern_s
                ldib    MENU_ITEM_SELECT, r15
                lda     1(r15), r15
                stib    r15, MENU_ITEM_SELECT
                lda     0x100162C, g9
                mov     0x1C, g0
                call    print_char
                ret
# ---------------------------------------------------------------------------
crt_test_BLUE:                          # DATA XREF: ROM:0005CB6C↑o
                call    sub_5CEA4
                call    sub_5D108
                ld      add_BACKUP_RAM_TO_RAM, g0
                ldob    0x335B(g0), g0
                ld      add_BACKUP_RAM_TO_RAM, g1
                ldob    0x335E(g1), g1
                call    sub_5CF08
                cmpobe  0, g2, loc_5CDD0
                stob    g0, TST_BLUE_ADD_bk
                stob    g0, TST_BLUE_ADD_bk_ram
                stob    g1, TST_BLUE_MUL_bk
                stob    g1, TST_BLUE_MUL_bk_ram
                call    load_COLORS_to_RAM
loc_5CDD0:                              # CODE XREF: ROM:0005CDA8↑j
                call    set_game_assign_byte_flag
                bbs     0x1A, r8, loc_5CDE4
                bbs     2, r8, loc_5CDE4
                bbs     4, r8, loc_5CDE4
                ret
# ---------------------------------------------------------------------------
loc_5CDE4:                              # CODE XREF: ROM:0005CBDC↑j
                mov     0xA, r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5CDF4:                              # DATA XREF: ROM:0005CB78↑o
                call    loc_6286C
                mov     0xB, r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5CE08:                              # DATA XREF: ROM:0005CB7C↑o
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                lda     0x4000104, r14
                and     r14, r15, r15
                cmpo    0, r15
                bne     loc_5CE34
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                bbs     4, r8, loc_5CE34
                ret
# ---------------------------------------------------------------------------
loc_5CE34:                              # CODE XREF: ROM:0005CE20↑j
                mov     0, r12
                mov     r12, r13
                mov     r12, r14
                mov     r12, r15
                lda     0x100D000, r9
                xor     r11, r11, r11
                shlo    7, 1, r10
loc_5CE54:                              # CODE XREF: ROM:0005CE9C↓j
                stq     r12, 0x0(r9)[r11*16]
                stq     r12, 0x180(r9)[r11*16]
                stq     r12, 0x300(r9)[r11*16]
                stq     r12, 0x480(r9)[r11*16]
                stq     r12, 0x600(r9)[r11*16]
                stq     r12, 0x780(r9)[r11*16]
                stq     r12, 0x900(r9)[r11*16]
                stq     r12, 0xA80(r9)[r11*16]
                cmpo    0x17, r11
                addo    1, r11, r11
                bg      loc_5CE54
                b       TEST_MENU_init
# =============== S U B R O U T I N E =======================================
sub_5CEA4:                              # CODE XREF: ROM:loc_5CBD4↑p
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                ldob    MENU_ITEM_SELECT, r3
                mov     r3, r4
                bbs     0xC, r8, loc_5CEC0
                b       loc_5CED0
# ---------------------------------------------------------------------------
loc_5CEC0:                              # CODE XREF: sub_5CEA4+14↑j
                addo    1, r3, r4
                cmpobge 8, r4, loc_5CECC
                mov     2, r4
loc_5CECC:                              # CODE XREF: sub_5CEA4+20↑j
                b       loc_5CEEC
# ---------------------------------------------------------------------------
loc_5CED0:                              # CODE XREF: sub_5CEA4+18↑j
                stob    r4, MENU_ITEM_SELECT
                bbs     0xD, r8, loc_5CEE0
                b       loc_5CEEC
# ---------------------------------------------------------------------------
loc_5CEE0:                              # CODE XREF: sub_5CEA4+34↑j
                subo    3, r3, r4
                cmpoble 2, r4, loc_5CEEC
                mov     8, r4
loc_5CEEC:                              # CODE XREF: sub_5CEA4:loc_5CECC↑j
                stob    r4, MENU_ITEM_SELECT
                cmpobne r3, r4, loc_5CF00
                mov     0, g0
                ret
# ---------------------------------------------------------------------------
loc_5CF00:                              # CODE XREF: sub_5CEA4+50↑j
                mov     1, g0
                ret
# End of function sub_5CEA4
# =============== S U B R O U T I N E =======================================
sub_5CF08:                              # CODE XREF: ROM:0005CC5C↑p
                xor     g2, g2, g2
                ld      INTERUPT_FLAGS_MOMENTARY, r8
                ld      INTERUPT_FLAGS_HELD, r9
                bbc     0xA, r9, loc_5CF24
                mov     r9, r8
loc_5CF24:                              # CODE XREF: sub_5CF08+14↑j
                bbc     0x12, r9, loc_5CF2C
                mov     r9, r8
loc_5CF2C:                              # CODE XREF: sub_5CF08:loc_5CF24↑j
                mov     1, r3
                bbc     9, r8, loc_5CF48
                addo    r3, g0, g0
                lda     0xFF, r15
                cmpibge r15, g0, loc_5CF44
                mov     r15, g0
loc_5CF44:                              # CODE XREF: sub_5CF08+34↑j
                mov     1, g2
loc_5CF48:                              # CODE XREF: sub_5CF08+28↑j
                bbc     8, r8, loc_5CF60
                subo    r3, g0, g0
                mov     0, r15
                cmpible r15, g0, loc_5CF5C
                mov     r15, g0
loc_5CF5C:                              # CODE XREF: sub_5CF08+4C↑j
                mov     1, g2
loc_5CF60:                              # CODE XREF: sub_5CF08:loc_5CF48↑j
                bbc     0x11, r8, loc_5CF78
                addo    r3, g1, g1
                lda     0xFF, r15
                cmpibge r15, g1, loc_5CF74
                mov     r15, g1
loc_5CF74:                              # CODE XREF: sub_5CF08+64↑j
                mov     1, g2
loc_5CF78:                              # CODE XREF: sub_5CF08:loc_5CF60↑j
                bbc     0x10, r8, loc_5CF90
                subo    r3, g1, g1
                mov     0x10, r15
                cmpible r15, g1, loc_5CF8C
                mov     r15, g1
loc_5CF8C:                              # CODE XREF: sub_5CF08+7C↑j
                mov     1, g2
loc_5CF90:                              # CODE XREF: sub_5CF08:loc_5CF78↑j
                mov     0x1F, r15
                stob    r15, TST_B_BRIGHT_bk
                stob    r15, TST_B_BRIGHT_bk_ram
                addo    4, sp, sp
                st      g0, -4(sp)
                addo    4, sp, sp
                st      g1, -4(sp)
                addo    4, sp, sp
                st      g2, -4(sp)
                call    set_game_assign_byte_flag
                ld      -4(sp), g2
                subo    4, sp, sp
                ld      -4(sp), g1
                subo    4, sp, sp
                ld      -4(sp), g0
                subo    4, sp, sp
                b       loc_5D054
# ---------------------------------------------------------------------------
                ld      add_BACKUP_RAM_TO_RAM, r7
                ldob    0x335F(r7), r7
                bbc     0x15, r8, loc_5D02C
                addo    r3, r7, r7
                mov     0x1F, r15
                cmpibge r15, r7, loc_5D018
                mov     r15, r7
loc_5D018:                              # CODE XREF: sub_5CF08+108↑j
                stob    r7, TST_B_BRIGHT_bk
                stob    r7, TST_B_BRIGHT_bk_ram
                mov     1, g2
loc_5D02C:                              # CODE XREF: sub_5CF08+FC↑j
                bbc     0x14, r8, loc_5D054
                subo    r3, r7, r7
                mov     0x1F, r15
                cmpible r15, r7, loc_5D040
                mov     r15, r7
loc_5D040:                              # CODE XREF: sub_5CF08+130↑j
                stob    r7, TST_B_BRIGHT_bk
                stob    r7, TST_B_BRIGHT_bk_ram
                mov     1, g2
loc_5D054:                              # CODE XREF: sub_5CF08+E8↑j
                ret
# End of function sub_5CF08
# =============== S U B R O U T I N E =======================================
load_COLORS_to_RAM:                     # CODE XREF: ROM:0005CC84↑p
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3359(r3), r3  # r3 = BACKUP_RAM_START+0x3359 and BACKUP_RAM_TO_RAM+0x3359
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x335C(r4), r4  # r4 = BACKUP_RAM_START+0x335C and BACKUP_RAM_TO_RAM+0x335C
                ld      add_BACKUP_RAM_TO_RAM, r5
                ldob    0x335A(r5), r5  # r5 = BACKUP_RAM_START+0x335A and BACKUP_RAM_TO_RAM+0x335A
                ld      add_BACKUP_RAM_TO_RAM, r6
                ldob    0x335D(r6), r6  # r6 = BACKUP_RAM_START+0x335D and BACKUP_RAM_TO_RAM+0x335D
                ld      add_BACKUP_RAM_TO_RAM, r7
                ldob    0x335B(r7), r7  # r7 = BACKUP_RAM_START+0x335B and BACKUP_RAM_TO_RAM+0x335B
                ld      add_BACKUP_RAM_TO_RAM, r8
                ldob    0x335E(r8), r8  # r8 = BACKUP_RAM_START+0x335E and BACKUP_RAM_TO_RAM+0x335E
                ld      add_BACKUP_RAM_TO_RAM, r9
                ldob    0x335F(r9), r9  # r9 = BACKUP_RAM_START+0x335F and BACKUP_RAM_TO_RAM+0x335F
                stob    r3, TST_RED_ADD
                stob    r4, TST_RED_MUL
                stob    r5, TST_GRN_ADD
                stob    r6, TST_GRN_MUL
                stob    r7, TST_BLUE_ADD
                stob    r8, TST_BLUE_MUL
                stob    r9, TST_B_BRIGHT
                call    chg_scr_color_req
                ret
# End of function load_COLORS_to_RAM
# =============== S U B R O U T I N E =======================================
sub_5D108:                              # CODE XREF: ROM:0005CBF0↑p
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3359(r3), r3  # TST_RED_ADD_bk_ram
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x335A(r4), r4  # TST_BLUE_ADD_bk_ram
                ld      add_BACKUP_RAM_TO_RAM, r5
                ldob    0x335B(r5), r5  # TST_BLUE_ADD_bk_ram
                ld      add_BACKUP_RAM_TO_RAM, r6
                ldob    0x335C(r6), r6  # TST_RED_MUL_bk_ram
                ld      add_BACKUP_RAM_TO_RAM, r7
                ldob    0x335D(r7), r7  # TST_GRN_MUL_bk_ram
                ld      add_BACKUP_RAM_TO_RAM, r8
                ldob    0x335E(r8), r8  # TST_BLUE_MUL_bk_ram
                ld      add_BACKUP_RAM_TO_RAM, r9
                ldob    0x335F(r9), r9  # TST_B_BRIGHT_bk_ram
                mov     0x1D, r15
                addo    0x1F, 0xB, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r3, g0
                call    print_dec       # Print g0 as decimal
                mov     0x1D, r15
                addo    0x1F, 0xC, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r4, g0
                call    print_dec       # Print g0 as decimal
                mov     0x1D, r15
                addo    0x1F, 0xD, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r5, g0
                call    print_dec       # Print g0 as decimal
                addo    0x1F, 4, r15
                addo    0x1F, 0xB, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r6, g0
                call    print_dec       # Print g0 as decimal
                addo    0x1F, 4, r15
                addo    0x1F, 0xC, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r7, g0
                call    print_dec       # Print g0 as decimal
                addo    0x1F, 4, r15
                addo    0x1F, 0xD, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r8, g0
                call    print_dec       # Print g0 as decimal
                addo    0x1F, 0x12, r15
                addo    0x1F, 0xA, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r9, g0
                call    print_dec       # Print g0 as decimal
                ret
# End of function sub_5D108
# =============== S U B R O U T I N E =======================================
GAME_ASSIGNMENTS:                       # DATA XREF: ROM:000DC95C↓o
                addo    4, sp, sp
                st      g0, -4(sp)
                addo    4, sp, sp
                st      g1, -4(sp)
                lda     GAME_ASSIGNMENTS_LIST, g0
                mov     17, g1          # GAME_ASSIGNMENT_ITEMS item count
                call    sub_637A0
                ld      -4(sp), g1
                subo    4, sp, sp
                ld      -4(sp), g0
                subo    4, sp, sp
                ld      mi_SelectWithServiceButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_AndPressTestButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                addo    4, sp, sp
                st      g0, -4(sp)
                addo    4, sp, sp
                st      g1, -4(sp)
                lda     GAME_ASSIGNMENTS_LIST, g0
                mov     17, g1          # GAME_ASSIGNMENT_ITEMS item count
                call    game_assign_bk_ram_thing
                ld      -4(sp), g1
                subo    4, sp, sp
                ld      -4(sp), g0
                subo    4, sp, sp
                ldob    MENU_ITEM_SELECT, r3
                mov     17, r15
                cmpobge r15, r3, loc_5D334
                mov     17, r3
loc_5D334:                              # CODE XREF: GAME_ASSIGNMENTS+B4↑j
                ld      GAME_ASSIGNMENT_ITEMS[r3*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r15
                stos    r15, (g9)
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5D3C4
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    MENU_ITEM_SELECT, r13
                ld      GAME_ASSIGNMENT_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
loc_5D394:                              # CODE XREF: GAME_ASSIGNMENTS+13C↓j
                addi    g0, r13, r13
                cmpible 0, r13, loc_5D3A0
                mov     0x11, r13
loc_5D3A0:                              # CODE XREF: GAME_ASSIGNMENTS+120↑j
                cmpibge 0x11, r13, loc_5D3A8
                mov     0, r13
loc_5D3A8:                              # CODE XREF: GAME_ASSIGNMENTS:loc_5D3A0↑j
                ld      GAME_ASSIGNMENT_ITEMS[r13*8], r15
                ld      0xC(r15), r15
                bbs     9, r15, loc_5D394
                stob    r13, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5D3C4:                              # CODE XREF: GAME_ASSIGNMENTS+DC↑j
                ld      GAME_ASSIGNMENTS_LIST[r3*8], r4
                bx      (r4)
# End of function GAME_ASSIGNMENTS
# ---------------------------------------------------------------------------
debug_GAME_ASSIGNMENTS:
                addo    4, sp, sp
                st      g0, -4(sp)
                addo    4, sp, sp
                st      g1, -4(sp)
                lda     debug_GAME_ASSIGN_LIST, g0
                mov     22, g1
                call    sub_637A0
                ld      -4(sp), g1
                subo    4, sp, sp
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10002B8, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
db_GAME_ASSIGNMENTS_debug:.asciz "(DEBUG)"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ld      mi_SelectWithServiceButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_AndPressTestButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                addo    4, sp, sp
                st      g0, -4(sp)
                addo    4, sp, sp
                st      g1, -4(sp)
                lda     debug_GAME_ASSIGN_LIST, g0
                mov     0x16, g1
                call    game_assign_bk_ram_thing
                ld      -4(sp), g1
                subo    4, sp, sp
                ld      -4(sp), g0
                subo    4, sp, sp
                ldob    MENU_ITEM_SELECT, r3
                ld      debug_GAME_ASSN_ITEMS[r3*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r15
                stos    r15, (g9)
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5D540
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    MENU_ITEM_SELECT, r13
                ld      debug_GAME_ASSN_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
loc_5D510:                              # CODE XREF: ROM:0005D530↓j
                addi    g0, r13, r13
                cmpible 0, r13, loc_5D51C
                mov     0x16, r13
loc_5D51C:                              # CODE XREF: ROM:0005D514↑j
                cmpibge 0x16, r13, loc_5D524
                mov     0, r13
loc_5D524:                              # CODE XREF: ROM:loc_5D51C↑j
                ld      debug_GAME_ASSN_ITEMS[r13*8], r15
                ld      0xC(r15), r15
                bbs     9, r15, loc_5D510
                stob    r13, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5D540:                              # CODE XREF: ROM:0005D4D0↑j
                ld      debug_GAME_ASSIGN_LIST[r3*8], r4
                bx      (r4)
# ---------------------------------------------------------------------------
ga_MATCH_COUNT_1P_sub:                  # DATA XREF: ROM:000DC198↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D598 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3340(r15), r15 # r15 = BACKUP_RAM_START+0x3340
                mov     g0, r14
                addi    r14, r15, r15
                mov     2, r14
                cmpible r14, r15, loc_5D578
                mov     5, r15
loc_5D578:                              # CODE XREF: ROM:0005D570↑j
                mov     5, r14
                cmpibge r14, r15, loc_5D584
                mov     2, r15
loc_5D584:                              # CODE XREF: ROM:0005D57C↑j
                stob    r15, p1_match_count_bk
                stob    r15, p1_match_count
                call    set_game_assign_byte_flag
loc_5D598:                              # CODE XREF: ROM:0005D550↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_MATCH_COUNT_VS_sub:                  # DATA XREF: ROM:000DC1A0↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D5EC # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3341(r15), r15 # r15 = BACKUP_RAM_START+0x3341
                mov     g0, r14
                addi    r14, r15, r15
                mov     2, r14
                cmpible r14, r15, loc_5D5CC
                mov     5, r15
loc_5D5CC:                              # CODE XREF: ROM:0005D5C4↑j
                mov     5, r14
                cmpibge r14, r15, loc_5D5D8
                mov     2, r15
loc_5D5D8:                              # CODE XREF: ROM:0005D5D0↑j
                stob    r15, vs_match_count_bk
                stob    r15, vs_match_count
                call    set_game_assign_byte_flag
loc_5D5EC:                              # CODE XREF: ROM:0005D5A4↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_MATCH_ENEMY_RANK_sub:                # DATA XREF: ROM:000DC1A8↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D640 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3342(r15), r15 # r15 = BACKUP_RAM_TO_RAM+0x3342
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D620
                mov     3, r15
loc_5D620:                              # CODE XREF: ROM:0005D618↑j
                mov     3, r14
                cmpibge r14, r15, loc_5D62C
                mov     0, r15
loc_5D62C:                              # CODE XREF: ROM:0005D624↑j
                stob    r15, match_enemy_rank_bk
                stob    r15, match_enemy_rank
                call    set_game_assign_byte_flag
loc_5D640:                              # CODE XREF: ROM:0005D5F8↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_TIME_sub:                            # DATA XREF: ROM:000DC1B0↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D694 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3351(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D674
                mov     9, r15
loc_5D674:                              # CODE XREF: ROM:0005D66C↑j
                mov     9, r14
                cmpibge r14, r15, loc_5D680
                mov     0, r15
loc_5D680:                              # CODE XREF: ROM:0005D678↑j
                stob    r15, time_var_array_num_bk
                stob    r15, time_var_array_num
                call    set_game_assign_byte_flag
loc_5D694:                              # CODE XREF: ROM:0005D64C↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_ENERGY_1P_sub:                       # DATA XREF: ROM:000DC1B8↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D6E8 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3343(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D6C8
                mov     3, r15
loc_5D6C8:                              # CODE XREF: ROM:0005D6C0↑j
                mov     3, r14
                cmpibge r14, r15, loc_5D6D4
                mov     0, r15
loc_5D6D4:                              # CODE XREF: ROM:0005D6CC↑j
                stob    r15, max_energy_1p_bk
                stob    r15, max_energy_1p
                call    set_max_energy_1p
loc_5D6E8:                              # CODE XREF: ROM:0005D6A0↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_ENERGY_VS_sub:                       # DATA XREF: ROM:000DC1C0↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D73C # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3344(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D71C
                mov     3, r15
loc_5D71C:                              # CODE XREF: ROM:0005D714↑j
                mov     3, r14
                cmpibge r14, r15, loc_5D728
                mov     0, r15
loc_5D728:                              # CODE XREF: ROM:0005D720↑j
                stob    r15, max_energy_vs_bk
                stob    r15, max_energy_vs
                call    set_max_energy_vs_mode
loc_5D73C:                              # CODE XREF: ROM:0005D6F4↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_BARRIER_sub:                         # DATA XREF: ROM:000DC1C8↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D790 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3358(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     1, r14
                cmpible r14, r15, loc_5D770
                mov     0xA, r15
loc_5D770:                              # CODE XREF: ROM:0005D768↑j
                mov     0xA, r14
                cmpibge r14, r15, loc_5D77C
                mov     1, r15
loc_5D77C:                              # CODE XREF: ROM:0005D774↑j
                stob    r15, barrier_count_bk
                stob    r15, barrier_count
                call    set_game_assign_byte_flag
loc_5D790:                              # CODE XREF: ROM:0005D748↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R1_sub:                       # DATA XREF: ROM:000DC240↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D7E4 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3346(r15), r15 # r15 = BACKUP_RAM_START+0x3346
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D7C4
                mov     3, r15
loc_5D7C4:                              # CODE XREF: ROM:0005D7BC↑j
                mov     3, r14
                cmpibge r14, r15, loc_5D7D0
                mov     0, r15
loc_5D7D0:                              # CODE XREF: ROM:0005D7C8↑j
                stob    r15, unused_enemy_r1_diff_bak
                stob    r15, unused_enemy_r1_diff
                call    set_game_assign_byte_flag
loc_5D7E4:                              # CODE XREF: ROM:0005D79C↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R2_sub:                       # DATA XREF: ROM:000DC248↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D838 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3347(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D818
                mov     3, r15
loc_5D818:                              # CODE XREF: ROM:0005D810↑j
                mov     3, r14
                cmpibge r14, r15, loc_5D824
                mov     0, r15
loc_5D824:                              # CODE XREF: ROM:0005D81C↑j
                stob    r15, unused_enemy_r2_diff_bak
                stob    r15, unused_enemy_r2_diff
                call    set_game_assign_byte_flag
loc_5D838:                              # CODE XREF: ROM:0005D7F0↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R3_sub:                       # DATA XREF: ROM:000DC250↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D88C # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3348(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D86C
                mov     3, r15
loc_5D86C:                              # CODE XREF: ROM:0005D864↑j
                mov     3, r14
                cmpibge r14, r15, loc_5D878
                mov     0, r15
loc_5D878:                              # CODE XREF: ROM:0005D870↑j
                stob    r15, unused_enemy_r3_diff_bak
                stob    r15, unused_enemy_r3_diff
                call    set_game_assign_byte_flag
loc_5D88C:                              # CODE XREF: ROM:0005D844↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R4_sub:                       # DATA XREF: ROM:000DC258↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D8E0 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3349(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D8C0
                mov     3, r15
loc_5D8C0:                              # CODE XREF: ROM:0005D8B8↑j
                mov     3, r14
                cmpibge r14, r15, loc_5D8CC
                mov     0, r15
loc_5D8CC:                              # CODE XREF: ROM:0005D8C4↑j
                stob    r15, unused_enemy_r4_diff_bak
                stob    r15, unused_enemy_r4_diff
                call    set_game_assign_byte_flag
loc_5D8E0:                              # CODE XREF: ROM:0005D898↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R5_sub:                       # DATA XREF: ROM:000DC260↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D934 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x334A(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D914
                mov     3, r15
loc_5D914:                              # CODE XREF: ROM:0005D90C↑j
                mov     3, r14
                cmpibge r14, r15, loc_5D920
                mov     0, r15
loc_5D920:                              # CODE XREF: ROM:0005D918↑j
                stob    r15, unused_enemy_r5_diff_bak
                stob    r15, unused_enemy_r5_diff
                call    set_game_assign_byte_flag
loc_5D934:                              # CODE XREF: ROM:0005D8EC↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R6_sub:                       # DATA XREF: ROM:000DC268↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D988 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x334B(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D968
                mov     3, r15
loc_5D968:                              # CODE XREF: ROM:0005D960↑j
                mov     3, r14
                cmpibge r14, r15, loc_5D974
                mov     0, r15
loc_5D974:                              # CODE XREF: ROM:0005D96C↑j
                stob    r15, unused_enemy_r6_diff_bak
                stob    r15, unused_enemy_r6_diff
                call    set_game_assign_byte_flag
loc_5D988:                              # CODE XREF: ROM:0005D940↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R7_sub:                       # DATA XREF: ROM:000DC270↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5D9DC # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x334C(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5D9BC
                mov     3, r15
loc_5D9BC:                              # CODE XREF: ROM:0005D9B4↑j
                mov     3, r14
                cmpibge r14, r15, loc_5D9C8
                mov     0, r15
loc_5D9C8:                              # CODE XREF: ROM:0005D9C0↑j
                stob    r15, unused_enemy_r7_diff_bak
                stob    r15, unused_enemy_r7_diff
                call    set_game_assign_byte_flag
loc_5D9DC:                              # CODE XREF: ROM:0005D994↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R8_sub:                       # DATA XREF: ROM:000DC278↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DA30 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x334D(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5DA10
                mov     3, r15
loc_5DA10:                              # CODE XREF: ROM:0005DA08↑j
                mov     3, r14
                cmpibge r14, r15, loc_5DA1C
                mov     0, r15
loc_5DA1C:                              # CODE XREF: ROM:0005DA14↑j
                stob    r15, unused_enemy_r8_diff_bak
                stob    r15, unused_enemy_r8_diff
                call    set_game_assign_byte_flag
loc_5DA30:                              # CODE XREF: ROM:0005D9E8↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R9_sub:                       # DATA XREF: ROM:000DC280↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DA84 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x334E(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5DA64
                mov     3, r15
loc_5DA64:                              # CODE XREF: ROM:0005DA5C↑j
                mov     3, r14
                cmpibge r14, r15, loc_5DA70
                mov     0, r15
loc_5DA70:                              # CODE XREF: ROM:0005DA68↑j
                stob    r15, unused_enemy_r9_diff_bak
                stob    r15, unused_enemy_r9_diff
                call    set_game_assign_byte_flag
loc_5DA84:                              # CODE XREF: ROM:0005DA3C↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R10_sub:                      # DATA XREF: ROM:000DC288↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DAD8 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x334F(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5DAB8
                mov     3, r15
loc_5DAB8:                              # CODE XREF: ROM:0005DAB0↑j
                mov     3, r14
                cmpibge r14, r15, loc_5DAC4
                mov     0, r15
loc_5DAC4:                              # CODE XREF: ROM:0005DABC↑j
                stob    r15, unused_enemy_r10_diff_bak
                stob    r15, unused_enemy_r10_diff
                call    set_game_assign_byte_flag
loc_5DAD8:                              # CODE XREF: ROM:0005DA90↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
dga_ENEMY_R11_sub:                      # DATA XREF: ROM:000DC290↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DB2C # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3350(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5DB0C
                mov     3, r15
loc_5DB0C:                              # CODE XREF: ROM:0005DB04↑j
                mov     3, r14
                cmpibge r14, r15, loc_5DB18
                mov     0, r15
loc_5DB18:                              # CODE XREF: ROM:0005DB10↑j
                stob    r15, unused_enemy_r11_diff_bak
                stob    r15, unused_enemy_r11_diff
                call    set_game_assign_byte_flag
loc_5DB2C:                              # CODE XREF: ROM:0005DAE4↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
unused_db_max_energy_vs_sub:
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DB80 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldos    0x3354(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                shlo    2, 0x19, r14
                cmpible r14, r15, loc_5DB60
                lda     0x12C, r15
loc_5DB60:                              # CODE XREF: ROM:0005DB58↑j
                lda     0x12C, r14
                cmpibge r14, r15, loc_5DB6C
                shlo    2, 0x19, r15
loc_5DB6C:                              # CODE XREF: ROM:0005DB64↑j
                stos    r15, max_energy_vs_array_bak
                stos    r15, max_energy_vs_ram
                call    set_game_assign_byte_flag
loc_5DB80:                              # CODE XREF: ROM:0005DB38↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
un_stage_width_sub:
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DBD4 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldos    0x3356(r15), r15 # r15 = BACKUP_RAM_TO_RAM+0x3356
                mov     g0, r14
                addi    r14, r15, r15
                shlo    2, 0x19, r14
                cmpible r14, r15, loc_5DBB4
                lda     300, r15
loc_5DBB4:                              # CODE XREF: ROM:0005DBAC↑j
                lda     300, r14
                cmpibge r14, r15, loc_5DBC0
                shlo    2, 0x19, r15
loc_5DBC0:                              # CODE XREF: ROM:0005DBB8↑j
                stos    r15, un_stage_width_bk
                stos    r15, un_stage_width
                call    set_game_assign_byte_flag
loc_5DBD4:                              # CODE XREF: ROM:0005DB8C↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_ADVERTISE_SOUND_sub:                 # DATA XREF: ROM:000DC1F0↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DC0C # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3353(r15), r15
                notbit  0, r15, r15
                stob    r15, game_assign_byte_flag_bk
                stob    r15, game_assign_byte_flag
                call    set_game_assign_byte_flag
loc_5DC0C:                              # CODE XREF: ROM:0005DBE0↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_BARRIER_RESET_sub:                   # DATA XREF: ROM:000DC1D0↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DC44 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3353(r15), r15
                notbit  3, r15, r15
                stob    r15, game_assign_byte_flag_bk
                stob    r15, game_assign_byte_flag
                call    set_game_assign_byte_flag
loc_5DC44:                              # CODE XREF: ROM:0005DC18↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_AUTOMATIC_sub:                       # DATA XREF: ROM:000DC1D8↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DC7C # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3353(r15), r15
                notbit  4, r15, r15
                stob    r15, game_assign_byte_flag_bk
                stob    r15, game_assign_byte_flag
                call    set_game_assign_byte_flag
loc_5DC7C:                              # CODE XREF: ROM:0005DC50↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_HYPER_MODE_sub:                      # DATA XREF: ROM:000DC1E0↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DCB4 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3353(r15), r15
                notbit  6, r15, r15
                stob    r15, game_assign_byte_flag_bk
                stob    r15, game_assign_byte_flag
                call    set_game_assign_byte_flag
loc_5DCB4:                              # CODE XREF: ROM:0005DC88↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_DAMAGE_sub:                          # DATA XREF: ROM:000DC1E8↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DCEC # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3353(r15), r15 # BACKUP_RAM_TO_RAM+0x3353
                notbit  7, r15, r15
                stob    r15, game_assign_byte_flag_bk
                stob    r15, game_assign_byte_flag
                call    set_game_assign_byte_flag
loc_5DCEC:                              # CODE XREF: ROM:0005DCC0↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_CONTINUE_sub:                        # DATA XREF: ROM:000DC1F8↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DD24 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3353(r15), r15 # r15 = BACKUP_RAM_START+0x3353
                notbit  1, r15, r15
                stob    r15, game_assign_byte_flag_bk
                stob    r15, game_assign_byte_flag
                call    set_game_assign_byte_flag
loc_5DD24:                              # CODE XREF: ROM:0005DCF8↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_COUNTRY_sub:                         # DATA XREF: ROM:000DC200↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DD78 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3352(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5DD58
                mov     2, r15
loc_5DD58:                              # CODE XREF: ROM:0005DD50↑j
                mov     2, r14
                cmpibge r14, r15, loc_5DD64
                mov     0, r15
loc_5DD64:                              # CODE XREF: ROM:0005DD5C↑j
                stob    r15, country_val_bk
                stob    r15, country_val
                call    set_country
loc_5DD78:                              # CODE XREF: ROM:0005DD30↑j
                cmpi    0, g0
                ret
# ---------------------------------------------------------------------------
ga_DISPLAY_TYPE_sub:                    # DATA XREF: ROM:000DC208↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DDB0 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3353(r15), r15
                notbit  2, r15, r15
                stob    r15, game_assign_byte_flag_bk
                stob    r15, game_assign_byte_flag
                call    set_display_type_projector
loc_5DDB0:                              # CODE XREF: ROM:0005DD84↑j
                cmpi    0, g0           # Compare 0 to g0
                ret
# ---------------------------------------------------------------------------
ga_VS_FINISH_sub:                       # DATA XREF: ROM:000DC210↓o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DDE8 # if g0 = 0 branch
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3353(r15), r15
                notbit  5, r15, r15
                stob    r15, game_assign_byte_flag_bk
                stob    r15, game_assign_byte_flag
                call    set_game_assign_byte_flag
loc_5DDE8:                              # CODE XREF: ROM:0005DDBC↑j
                cmpi    0, g0
                ret
# =============== S U B R O U T I N E =======================================
set_country:                            # CODE XREF: ROM:0005DD74↑p
                call    set_game_assign_byte_flag
                ret
# End of function set_country
# =============== S U B R O U T I N E =======================================
ga_INITIALIZE_sub:                      # DATA XREF: ROM:000DC218↓o
# FUNCTION CHUNK AT 00062210 SIZE 000000F0 BYTES
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5DE18 # if g0 = 0 branch
                call    init_game_assignments
                call    set_game_assign_byte_flag
                ret
# ---------------------------------------------------------------------------
ga_EXIT_sub:                            # DATA XREF: ROM:GAME_ASSIGNMENTS_LIST↓o
                call    wait_for_inputs_service_menu_1
                cmpibne 1, g0, loc_5DE18 # return
                b       TEST_MENU_init
# ---------------------------------------------------------------------------
loc_5DE18:                              # CODE XREF: ga_INITIALIZE_sub+4↑j
                ret                     # return
# End of function ga_INITIALIZE_sub
# =============== S U B R O U T I N E =======================================
set_display_type_projector:             # CODE XREF: ROM:0005DDAC↑p
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3353(r3), r3  # r3 = BACKUP_RAM_TO_RAM+0x3353 or BACKUP_RAM_START+0x3353
                bbc     2, r3, set_display_type_crt
                shlo    6, 1, r3        # r3 = 0x40
                stob    r3, TST_RED_ADD_bk
                stob    r3, TST_RED_ADD_bk_ram
                shlo    6, 1, r4        # r4 = 0x40
                stob    r4, TST_GRN_ADD_bk
                stob    r4, TST_GRN_ADD_bk_ram
                shlo    6, 1, r5        # r5 = 0x40
                stob    r5, TST_BLUE_ADD_bk
                stob    r5, TST_BLUE_ADD_bk_ram
                addo    0x1F, 6, r3     # r3 = 0x25
                stob    r3, TST_RED_MUL_bk
                stob    r3, TST_RED_MUL_bk_ram
                addo    0x1F, 6, r4     # r4 = 0x25
                stob    r4, TST_GRN_MUL_bk
                stob    r4, TST_GRN_MUL_bk_ram
                addo    0x1F, 6, r5     # r5 = 0x25
                stob    r5, TST_BLUE_MUL_bk
                stob    r5, TST_BLUE_MUL_bk_ram
                mov     0x1F, r6
                stob    r6, TST_B_BRIGHT_bk
                stob    r6, TST_B_BRIGHT_bk_ram
                b       loc_5DF4C
# ---------------------------------------------------------------------------
set_display_type_crt:                   # CODE XREF: set_display_type_projector+10↑j
                mov     0x16, r3
                stob    r3, TST_RED_ADD_bk
                stob    r3, TST_RED_ADD_bk_ram
                mov     0x16, r4
                stob    r4, TST_GRN_ADD_bk
                stob    r4, TST_GRN_ADD_bk_ram
                mov     0x16, r5
                stob    r5, TST_BLUE_ADD_bk
                stob    r5, TST_BLUE_ADD_bk_ram
                addo    0x1F, 0x17, r3  # r3 = 0x36
                stob    r3, TST_RED_MUL_bk
                stob    r3, TST_RED_MUL_bk_ram
                addo    0x1F, 0x17, r4  # r4 = 0x36
                stob    r4, TST_GRN_MUL_bk
                stob    r4, TST_GRN_MUL_bk_ram
                addo    0x1F, 0x17, r5  # r5 = 0x36
                stob    r5, TST_BLUE_MUL_bk
                stob    r5, TST_BLUE_MUL_bk_ram
                mov     0x1F, r6
                stob    r6, TST_B_BRIGHT_bk
                stob    r6, TST_B_BRIGHT_bk_ram
loc_5DF4C:                              # CODE XREF: set_display_type_projector+A0↑j
                call    load_COLORS_to_RAM
                call    set_game_assign_byte_flag
                ret
# End of function set_display_type_projector
# =============== S U B R O U T I N E =======================================
set_max_energy_1p:                      # CODE XREF: ROM:0005D6E4↑p
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3343(r3), r3
                ldos    max_energy_1p_vars[r3*2], r4
                stos    r4, max_energy_vs_array_bak # Is this a bug
                stos    r4, max_energy_vs_ram # Is this a bug
                call    set_game_assign_byte_flag
                ret
# End of function set_max_energy_1p
# =============== S U B R O U T I N E =======================================
set_max_energy_vs_mode:                 # CODE XREF: ROM:0005D738↑p
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3344(r3), r3  # Offset for max_energy
                ldos    max_energy_vs_vars[r3*2], r4
                stos    r4, max_energy_vs_array_bak
                stos    r4, max_energy_vs_ram
                call    set_game_assign_byte_flag
                ret
# End of function set_max_energy_vs_mode
# ---------------------------------------------------------------------------
max_energy_1p_vars:.short 176           # DATA XREF: set_max_energy_1p+10↑r
                .short 160
                .short 144
                .short 128
max_energy_vs_vars:.short 220           # DATA XREF: set_max_energy_vs_mode+10↑r
                .short 200
                .short 180
                .short 160
ga_easy_normal_hard:.long aEasy         # DATA XREF: ROM:00099C9C↓o
                .long aNormal_0         # "NORMAL "
                .long aHard             # "HARD   "
                .long aHardest          # "HARDEST"
un_ga_stage_width:.long a130            # Stage Width is a carryover from VF2's mode difficulties
                .long a150              # " 150"
                .long a200              # " 200"
                .long a300              # " 300"
                .long a400              # " 400"
                .long a500              # " 500"
                .long a600              # " 600"
                .long a700              # " 700"
                .long a800              # " 800"
                .long a900              # " 900"
                .long a1000             # "1000"
                .long a1100             # "1100"
                .long a1200             # "1200"
                .long a1300             # "1300"
                .long a1400             # "1400"
                .long a1500             # "1500"
                .long a1600             # "1600"
                .long a1700             # "1700"
                .long a1800             # "1800"
                .long a1900             # "1900"
                .long a2000             # "2000"
                .long a2100             # "2100"
                .long a2200             # "2200"
                .long a2300             # "2300"
                .long a2400             # "2400"
                .long a2500             # "2500"
                .long a2600             # "2600"
                .long a2700             # "2700"
                .long a2800             # "2800"
                .long a2900             # "2900"
                .long a3000             # "3000"
                .long a3100             # "3100"
game_assign_on_off:.long aOn_2          # DATA XREF: ROM:00099D78↓o
game_assign_off_on:.long aOff_2         # DATA XREF: ROM:00099D34↓o
                .long aOn_3             # "ON "
                .long aOk               # "OK"
                .long aNg               # "NG"
COUNTRY_TYPE:   .long aJapan            # DATA XREF: ROM:00099DF8↓o
                .long aUsa              # "USA   "
                .long aExport           # "EXPORT"
DISPLAY_TYPE:   .long aCRT              # DATA XREF: ROM:00099E14↓o
                .long aProjector        # "PROJECTOR"
DAMAGE_TYPE:    .long aNormal_1         # DATA XREF: ROM:00099D98↓o
                .long aReal             # "REAL  "
TIME_LENGTH:    .long a10_0             # DATA XREF: ROM:00099CBC↓o
                .long a20_1             # "20"
                .long a30               # "30"
                .long a40_0             # "40"
                .long a50               # "50"
                .long a60               # "60"
                .long a70               # "70"
                .long a80               # "80"
                .long a90               # "90"
                .long a99               # "99"
# ---------------------------------------------------------------------------
COIN_ASSIGNMENTS:                       # DATA XREF: ROM:000DC964↓o
                ld      mi_SelectWithServiceButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_AndPressTestButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ldob    0x5000A7, r3
                lda     0xFF, r4
                cmpobne r4, r3, loc_5EB64
                ldob    MENU_ITEM_SELECT, r3
                ld      0xDC164[r3*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r14
                stos    r14, (g9)
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                mov     0, r15
                mov     5, r14
loc_5E138:                              # CODE XREF: ROM:0005E150↓j
                ld      COIN_MENU2_ITEMS[r15*8], r13
                ld      (r13), g9
                lda     4(r13), g0
                call    print_mes
                addo    1, r15, r15
                cmpobge r14, r15, loc_5E138
                call    loc_5E7A0
                ld      COIN_MENU2[r3*8], r4
                bx      (r4)
# ---------------------------------------------------------------------------
coin_CHUTE_TYPE_sub:                    # DATA XREF: ROM:000DC168↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5E1CC
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    MENU_ITEM_SELECT, r13
                ld      COIN_MENU2_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5E1B8
                mov     5, r13
loc_5E1B8:                              # CODE XREF: ROM:0005E1B0↑j
                cmpibge 5, r13, loc_5E1C0
                mov     0, r13
loc_5E1C0:                              # CODE XREF: ROM:loc_5E1B8↑j
                stob    r13, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5E1CC:                              # CODE XREF: ROM:0005E168↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5E684
                ld      add_BACKUP_RAM_TO_RAM, r14
                ld      0x3320(r14), r14
                clrbit  1, r14, r14
                st      r14, 0x1D03320
                st      r14, 0x59C320
                ld      add_BACKUP_RAM_TO_RAM, r3
                ld      0x3320(r3), r3
                bbs     0, r3, loc_5E210
                call    sub_5E710
loc_5E210:                              # CODE XREF: ROM:0005E208↑j
                notbit  0, r3, r3
                st      r3, 0x1D03320
                st      r3, 0x59C320
                b       loc_5E680
# ---------------------------------------------------------------------------
coin_COIN_CREDIT_SET_sub:               # DATA XREF: ROM:000DC180↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5E290
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    MENU_ITEM_SELECT, r13
                ld      COIN_MENU2_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5E27C
                mov     5, r13
loc_5E27C:                              # CODE XREF: ROM:0005E274↑j
                cmpibge 5, r13, loc_5E284
                mov     0, r13
loc_5E284:                              # CODE XREF: ROM:loc_5E27C↑j
                stob    r13, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5E290:                              # CODE XREF: ROM:0005E22C↑j
                ld      add_BACKUP_RAM_TO_RAM, r3
                ld      0x3320(r3), r3
                bbs     0, r3, loc_5E31C
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5E2EC
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3324(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5E2D0
                mov     0x1A, r15
loc_5E2D0:                              # CODE XREF: ROM:0005E2C8↑j
                mov     0x1A, r14
                cmpibge r14, r15, loc_5E2DC
                mov     0, r15
loc_5E2DC:                              # CODE XREF: ROM:0005E2D4↑j
                stob    r15, CREDITS_REQUIRED
                stob    r15, credits_required_bk_ram
loc_5E2EC:                              # CODE XREF: ROM:0005E2A8↑j
                cmpi    0, g0
                be      loc_5E684
                ld      add_BACKUP_RAM_TO_RAM, r14
                ld      0x3320(r14), r14
                clrbit  1, r14, r14
                st      r14, 0x1D03320
                st      r14, 0x59C320
                b       loc_5E680
# ---------------------------------------------------------------------------
loc_5E31C:                              # CODE XREF: ROM:0005E2A0↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5E684
                ld      add_BACKUP_RAM_TO_RAM, r14
                ld      0x3320(r14), r14
                clrbit  1, r14, r14
                st      r14, 0x1D03320
                st      r14, 0x59C320
                cmpibe  1, g0, loc_5E378
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3324(r4), r4
                ldob    byte_63A5F[r4], r4
                stob    r4, CREDITS_REQUIRED
                stob    r4, credits_required_bk_ram
                b       loc_5E680
# ---------------------------------------------------------------------------
loc_5E378:                              # CODE XREF: ROM:0005E348↑j
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3324(r4), r4
                ldob    byte_63A7A[r4], r4
                stob    r4, CREDITS_REQUIRED
                stob    r4, credits_required_bk_ram
                b       loc_5E680
# ---------------------------------------------------------------------------
coin_CRED_1P_START_sub:                 # DATA XREF: ROM:000DC170↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5E40C
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    MENU_ITEM_SELECT, r13
                ld      COIN_MENU2_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5E3F8
                mov     5, r13
loc_5E3F8:                              # CODE XREF: ROM:0005E3F0↑j
                cmpibge 5, r13, loc_5E400
                mov     0, r13
loc_5E400:                              # CODE XREF: ROM:loc_5E3F8↑j
                stob    r13, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5E40C:                              # CODE XREF: ROM:0005E3A8↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5E454
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3329(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5E438
                mov     0xE, r15
loc_5E438:                              # CODE XREF: ROM:0005E430↑j
                mov     0xE, r14
                cmpibge r14, r15, loc_5E444
                mov     0, r15
loc_5E444:                              # CODE XREF: ROM:0005E43C↑j
                stob    r15, 0x1D03329
                stob    r15, 0x59C329
loc_5E454:                              # CODE XREF: ROM:0005E410↑j
                cmpi    0, g0
                be      loc_5E684
                call    sub_5E688
                b       loc_5E680
# ---------------------------------------------------------------------------
coin_CRED_VS_START_sub:                 # DATA XREF: ROM:000DC178↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5E4CC
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    MENU_ITEM_SELECT, r13
                ld      COIN_MENU2_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5E4B8
                mov     5, r13
loc_5E4B8:                              # CODE XREF: ROM:0005E4B0↑j
                cmpibge 5, r13, loc_5E4C0
                mov     0, r13
loc_5E4C0:                              # CODE XREF: ROM:loc_5E4B8↑j
                stob    r13, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5E4CC:                              # CODE XREF: ROM:0005E468↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5E514
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x332C(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5E4F8
                mov     0xE, r15
loc_5E4F8:                              # CODE XREF: ROM:0005E4F0↑j
                mov     0xE, r14
                cmpibge r14, r15, loc_5E504
                mov     0, r15
loc_5E504:                              # CODE XREF: ROM:0005E4FC↑j
                stob    r15, 0x1D0332C
                stob    r15, 0x59C32C
loc_5E514:                              # CODE XREF: ROM:0005E4D0↑j
                cmpi    0, g0
                be      loc_5E684
                call    sub_5E6CC
                b       loc_5E680
# ---------------------------------------------------------------------------
                ret
# ---------------------------------------------------------------------------
coin_MANUAL_SET_sub:                    # DATA XREF: ROM:000DC188↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5E590
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    MENU_ITEM_SELECT, r13
                ld      COIN_MENU2_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5E57C
                mov     5, r13
loc_5E57C:                              # CODE XREF: ROM:0005E574↑j
                cmpibge 5, r13, loc_5E584
                mov     0, r13
loc_5E584:                              # CODE XREF: ROM:loc_5E57C↑j
                stob    r13, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5E590:                              # CODE XREF: ROM:0005E52C↑j
                call    wait_for_inputs_service_menu_1
                cmpobe  0, g0, loc_5E684
                mov     0, r15
                stib    r15, 0x5000A7
                lda     0x1000200, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 8, g1
                call    clr_pattern_s
                ret
# ---------------------------------------------------------------------------
coin_EXIT_2_sub:                        # DATA XREF: ROM:COIN_MENU2↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5E624
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    MENU_ITEM_SELECT, r13
                ld      COIN_MENU2_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5E610
                mov     5, r13
loc_5E610:                              # CODE XREF: ROM:0005E608↑j
                cmpibge 5, r13, loc_5E618
                mov     0, r13
loc_5E618:                              # CODE XREF: ROM:loc_5E610↑j
                stob    r13, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5E624:                              # CODE XREF: ROM:0005E5C0↑j
                call    wait_for_inputs_service_menu_1
                cmpibne 1, g0, loc_5E684
                ld      add_BACKUP_RAM_TO_RAM, r15
                ld      0x3320(r15), r15
                bbs     1, r15, loc_5E654
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3324(r15), r15
                cmpobe  0x1A, r15, loc_5E678
loc_5E654:                              # CODE XREF: ROM:0005E63C↑j
                addo    4, sp, sp
                st      g9, -4(sp)
                ld      add_BACKUP_RAM_TO_RAM, g9
                call    sub_26C8
                ld      -4(sp), g9
                subo    4, sp, sp
loc_5E678:                              # CODE XREF: ROM:0005E650↑j
                call    sub_62328
                b       TEST_MENU_init
# ---------------------------------------------------------------------------
loc_5E680:                              # CODE XREF: ROM:0005E224↑j
                call    sub_62328
loc_5E684:                              # CODE XREF: ROM:0005E1D0↑j
                ret
# =============== S U B R O U T I N E =======================================
sub_5E688:                              # CODE XREF: ROM:0005E45C↑p
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3329(r4), r4  # r4 = BACKUP_RAM_TO_RAM+0x3329
                ldob    byte_5E780[r4], r5
                ldob    byte_5E790[r4], r6
                stob    r5, 0x1D0332A
                stob    r5, 0x59C32A
                stob    r6, 0x1D0332B
                stob    r6, 0x59C32B
                ret
# End of function sub_5E688
# =============== S U B R O U T I N E =======================================
sub_5E6CC:                              # CODE XREF: ROM:0005E51C↑p
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x332C(r4), r4  # r4 = BACKUP_RAM_TO_RAM+0x332C
                ldob    byte_5E780[r4], r5
                ldob    byte_5E790[r4], r6
                stob    r5, 0x1D0332D
                stob    r5, 0x59C32D
                stob    r6, 0x1D0332E
                stob    r6, 0x59C32E
                ret
# End of function sub_5E6CC
# =============== S U B R O U T I N E =======================================
sub_5E710:                              # CODE XREF: ROM:0005E20C↑p
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3324(r4), r4  # r4 = BACKUP_RAM_TO_RAM+0x3324
                ldob    byte_63A44[r4], r4
                stob    r4, CREDITS_REQUIRED
                stob    r4, credits_required_bk_ram
                ld      add_BACKUP_RAM_TO_RAM, r4
                ldob    0x3327(r4), r4  # r4 = BACKUP_RAM_TO_RAM+0x3327
                stob    r4, 0x1D03328
                stob    r4, 0x59C328
                ret
# End of function sub_5E710
# ---------------------------------------------------------------------------
item_Common:    .long lCommon           # DATA XREF: ROM:0005E9C4↓r
item_Individual:.long lIndividual       # DATA XREF: ROM:loc_5E9F0↓r
item_CoinChute1:.long lCoinChute1       # DATA XREF: ROM:loc_5E99C↓r
item_CoinChute2:.long lCoinChute2       # DATA XREF: ROM:0005E9D8↓r
item_Blank:     .long lBlank            # DATA XREF: ROM:0005EA04↓r
item_FreePlay:  .long lFreePlay         # DATA XREF: ROM:0005EABC↓r
item_FreePlay2: .long lFreePlay2        # DATA XREF: ROM:0005EAE4↓r
item_ManualSetting:.long lManualSetting # DATA XREF: ROM:loc_5EB38↓r
item_ManualSetting_0:.long lManualSetting_0 # DATA XREF: ROM:0005EB10↓r
byte_5E780:     .byte 1, 2, 2, 3, 3, 3, 4, 4 # DATA XREF: sub_5E688+10↑r
                .byte 4, 4, 5, 5, 5, 5, 5, 0
byte_5E790:     .byte 1, 1, 2, 1, 2, 3, 1, 2 # DATA XREF: sub_5E688+18↑r
                .byte 3, 4, 1, 2, 3, 4, 5, 0
# ---------------------------------------------------------------------------
loc_5E7A0:                              # CODE XREF: ROM:0005E154↑p
                call    loc_630B0
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10003B8, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a1pContinue:    .asciz "1P CONTINUE"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10004B8, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aVsContinue:    .asciz "VS CONTINUE"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                lda     0x1000350, g9
                ldob    0x332A(g4), r15
                cmpo    1, r15
                lda     0x8030, r14
                ldis    0x500082, r13
                shro    7, r13, r13
                shlo    7, r13, r13
                or      r14, r13, r14
                or      r14, r15, r15
                stos    r15, (g9)
                addo    4, g9, g9
                be      loc_5E860
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCredits_0:     .asciz "CREDITS"
# ---------------------------------------------------------------------------
                b       loc_5E870
# ---------------------------------------------------------------------------
loc_5E860:                              # CODE XREF: ROM:0005E848↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCredit_0:      .asciz "CREDIT "
# ---------------------------------------------------------------------------
loc_5E870:                              # CODE XREF: ROM:0005E85C↑j
                lda     0x10003D0, g9
                ldob    0x332B(g4), r15
                cmpo    1, r15
                lda     0x8030, r14
                ldis    0x500082, r13
                shro    7, r13, r13
                shlo    7, r13, r13
                or      r14, r13, r14
                or      r14, r15, r15
                stos    r15, (g9)
                addo    4, g9, g9
                be      loc_5E8C4
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCredits_1:     .asciz "CREDITS"
# ---------------------------------------------------------------------------
                b       loc_5E8D4
# ---------------------------------------------------------------------------
loc_5E8C4:                              # CODE XREF: ROM:0005E8AC↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCredit_1:      .asciz "CREDIT "
# ---------------------------------------------------------------------------
loc_5E8D4:                              # CODE XREF: ROM:0005E8C0↑j
                lda     0x1000450, g9
                ldob    0x332D(g4), r15
                cmpo    1, r15
                lda     0x8030, r14
                ldis    0x500082, r13
                shro    7, r13, r13
                shlo    7, r13, r13
                or      r14, r13, r14
                or      r14, r15, r15
                stos    r15, (g9)
                addo    4, g9, g9
                be      loc_5E928
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCredits_2:     .asciz "CREDITS"
# ---------------------------------------------------------------------------
                b       loc_5E938
# ---------------------------------------------------------------------------
loc_5E928:                              # CODE XREF: ROM:0005E910↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCredit_2:      .asciz "CREDIT "
# ---------------------------------------------------------------------------
loc_5E938:                              # CODE XREF: ROM:0005E924↑j
                lda     0x10004D0, g9
                ldob    0x332E(g4), r15
                cmpo    1, r15
                lda     0x8030, r14
                ldis    0x500082, r13
                shro    7, r13, r13
                shlo    7, r13, r13
                or      r14, r13, r14
                or      r14, r15, r15
                stos    r15, (g9)
                addo    4, g9, g9
                be      loc_5E98C
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCredits_3:     .asciz "CREDITS"
# ---------------------------------------------------------------------------
                b       loc_5E99C
# ---------------------------------------------------------------------------
loc_5E98C:                              # CODE XREF: ROM:0005E974↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCredit_3:      .asciz "CREDIT "
# ---------------------------------------------------------------------------
loc_5E99C:                              # CODE XREF: ROM:0005E988↑j
                ld      item_CoinChute1, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      add_BACKUP_RAM_TO_RAM, r3
                ld      0x3320(r3), r3
                bbs     0, r3, loc_5E9F0
                ld      item_Common, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      item_CoinChute2, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                b       loc_5EA44
# ---------------------------------------------------------------------------
loc_5E9F0:                              # CODE XREF: ROM:0005E9C0↑j
                ld      item_Individual, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      item_Blank, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10006B6, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "  "
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
loc_5EA44:                              # CODE XREF: ROM:0005E9EC↑j
                ld      add_BACKUP_RAM_TO_RAM, r3
                ld      0x3320(r3), r3
                bbs     1, r3, loc_5EA98
                mov     0xA, r4
                ldob    0x3324(g4), r3
                addo    1, r3, r4
                lda     0x10005D0, g9
                mov     r4, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
                .asciz " "
                .short 0
# ---------------------------------------------------------------------------
                lda     0x10005D4, g9
                lda     0x8023, r5
                stos    r5, (g9)
                b       loc_5EAB8
# ---------------------------------------------------------------------------
loc_5EA98:                              # CODE XREF: ROM:0005EA54↑j
                lda     0x10005D0, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "            "
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
loc_5EAB8:                              # CODE XREF: ROM:0005EA94↑j
                cmpobne 0x1A, r3, loc_5EAF8
                ld      item_FreePlay, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      add_BACKUP_RAM_TO_RAM, r3
                ld      0x3320(r3), r3
                bbs     0, r3, loc_5EAF8
                ld      item_FreePlay2, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
loc_5EAF8:                              # CODE XREF: ROM:loc_5EAB8↑j
                ld      add_BACKUP_RAM_TO_RAM, r3
                ld      0x3320(r3), r3
                bbc     1, r3, loc_5EB60
                bbs     0, r3, loc_5EB38
                ld      item_ManualSetting_0, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                lda     0x100073C, g9
                mov     0x14, g0
                mov     9, g1
                call    clr_pattern_s
loc_5EB38:                              # CODE XREF: ROM:0005EB0C↑j
                ld      item_ManualSetting, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                lda     0x1000CBC, g9
                mov     0x14, g0
                mov     9, g1
                call    clr_pattern_s
loc_5EB60:                              # CODE XREF: ROM:0005EB08↑j
                ret
# ---------------------------------------------------------------------------
loc_5EB64:                              # CODE XREF: ROM:0005E0E4↑j
                ld      add_BACKUP_RAM_TO_RAM, r3
                ld      0x3320(r3), r3
                bbs     0, r3, loc_5EF78
                ldob    0x5000A7, r3
                ld      COIN_MENU1_ITEMS[r3*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r14
                stos    r14, (g9)
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                mov     0, r15
                mov     4, r14
loc_5EBC8:                              # CODE XREF: ROM:0005EBE0↓j
                ld      COIN_MENU1_ITEMS[r15*8], r13
                ld      (r13), g9
                lda     4(r13), g0
                call    print_mes
                addo    1, r15, r15
                cmpobge r14, r15, loc_5EBC8
                call    sub_5F308
                ld      COIN_MENU1[r3*8], r4
                bx      (r4)
# ---------------------------------------------------------------------------
coin_TO_CREDIT_sub:                     # DATA XREF: ROM:000DC140↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5EC5C
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    0x5000A7, r13
                ld      COIN_MENU1_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5EC48
                mov     4, r13
loc_5EC48:                              # CODE XREF: ROM:0005EC40↑j
                cmpibge 4, r13, loc_5EC50
                mov     0, r13
loc_5EC50:                              # CODE XREF: ROM:loc_5EC48↑j
                stob    r13, 0x5000A7
                ret
# ---------------------------------------------------------------------------
loc_5EC5C:                              # CODE XREF: ROM:0005EBF8↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5ECA4
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3325(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5EC88
                mov     8, r15
loc_5EC88:                              # CODE XREF: ROM:0005EC80↑j
                mov     8, r14
                cmpibge r14, r15, loc_5EC94
                mov     0, r15
loc_5EC94:                              # CODE XREF: ROM:0005EC8C↑j
                stob    r15, 0x1D03325
                stob    r15, 0x59C325
loc_5ECA4:                              # CODE XREF: ROM:0005EC60↑j
                cmpi    0, g0
                bne     loc_5F2DC
                ret
# ---------------------------------------------------------------------------
coin_BONUS_ADDER_sub:                   # DATA XREF: ROM:000DC148↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5ED18
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    0x5000A7, r13
                ld      COIN_MENU1_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5ED04
                mov     4, r13
loc_5ED04:                              # CODE XREF: ROM:0005ECFC↑j
                cmpibge 4, r13, loc_5ED0C
                mov     0, r13
loc_5ED0C:                              # CODE XREF: ROM:loc_5ED04↑j
                stob    r13, 0x5000A7
                ret
# ---------------------------------------------------------------------------
loc_5ED18:                              # CODE XREF: ROM:0005ECB4↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5ED60
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3326(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5ED44
                mov     8, r15
loc_5ED44:                              # CODE XREF: ROM:0005ED3C↑j
                mov     8, r14
                cmpibge r14, r15, loc_5ED50
                mov     0, r15
loc_5ED50:                              # CODE XREF: ROM:0005ED48↑j
                stob    r15, 0x1D03326
                stob    r15, 0x59C326
loc_5ED60:                              # CODE XREF: ROM:0005ED1C↑j
                cmpi    0, g0
                bne     loc_5F2DC
                ret
# ---------------------------------------------------------------------------
coin_CHUTE1_MULTI_sub:                  # DATA XREF: ROM:000DC150↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5EDD4
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    0x5000A7, r13
                ld      COIN_MENU1_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5EDC0
                mov     4, r13
loc_5EDC0:                              # CODE XREF: ROM:0005EDB8↑j
                cmpibge 4, r13, loc_5EDC8
                mov     0, r13
loc_5EDC8:                              # CODE XREF: ROM:loc_5EDC0↑j
                stob    r13, 0x5000A7
                ret
# ---------------------------------------------------------------------------
loc_5EDD4:                              # CODE XREF: ROM:0005ED70↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5EE1C
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3327(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5EE00
                mov     8, r15
loc_5EE00:                              # CODE XREF: ROM:0005EDF8↑j
                mov     8, r14
                cmpibge r14, r15, loc_5EE0C
                mov     0, r15
loc_5EE0C:                              # CODE XREF: ROM:0005EE04↑j
                stob    r15, 0x1D03327
                stob    r15, 0x59C327
loc_5EE1C:                              # CODE XREF: ROM:0005EDD8↑j
                cmpi    0, g0
                bne     loc_5F2DC
                ret
# ---------------------------------------------------------------------------
coin_CHUTE2_MULTI_sub:                  # DATA XREF: ROM:000DC158↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5EE90
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    0x5000A7, r13
                ld      COIN_MENU1_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5EE7C
                mov     4, r13
loc_5EE7C:                              # CODE XREF: ROM:0005EE74↑j
                cmpibge 4, r13, loc_5EE84
                mov     0, r13
loc_5EE84:                              # CODE XREF: ROM:loc_5EE7C↑j
                stob    r13, 0x5000A7
                ret
# ---------------------------------------------------------------------------
loc_5EE90:                              # CODE XREF: ROM:0005EE2C↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5EED8
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3328(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5EEBC
                mov     8, r15
loc_5EEBC:                              # CODE XREF: ROM:0005EEB4↑j
                mov     8, r14
                cmpibge r14, r15, loc_5EEC8
                mov     0, r15
loc_5EEC8:                              # CODE XREF: ROM:0005EEC0↑j
                stob    r15, 0x1D03328
                stob    r15, 0x59C328
loc_5EED8:                              # CODE XREF: ROM:0005EE94↑j
                cmpi    0, g0
                bne     loc_5F2DC
                ret
# ---------------------------------------------------------------------------
coin_EXIT_1_sub:                        # DATA XREF: ROM:COIN_MENU1↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5EF4C
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    0x5000A7, r13
                ld      COIN_MENU1_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5EF38
                mov     4, r13
loc_5EF38:                              # CODE XREF: ROM:0005EF30↑j
                cmpibge 4, r13, loc_5EF40
                mov     0, r13
loc_5EF40:                              # CODE XREF: ROM:loc_5EF38↑j
                stob    r13, 0x5000A7
                ret
# ---------------------------------------------------------------------------
loc_5EF4C:                              # CODE XREF: ROM:0005EEE8↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5EF74
                lda     0xFF, r15
                stib    r15, 0x5000A7
                lda     0x1000200, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 9, g1
                call    clr_pattern_s
loc_5EF74:                              # CODE XREF: ROM:0005EF50↑j
                ret
# ---------------------------------------------------------------------------
loc_5EF78:                              # CODE XREF: ROM:0005EB74↑j
                ldob    0x5000A7, r3
                ld      COIN_MENU0_ITEMS[r3*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r14
                stos    r14, (g9)
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                mov     0, r15
                mov     3, r14
loc_5EFC8:                              # CODE XREF: ROM:0005EFE0↓j
                ld      COIN_MENU0_ITEMS[r15*8], r13
                ld      (r13), g9
                lda     4(r13), g0
                call    print_mes
                addo    1, r15, r15
                cmpobge r14, r15, loc_5EFC8
                call    sub_5F308
                ld      COIN_MENU0[r3*8], r4
                bx      (r4)
# ---------------------------------------------------------------------------
coin_COINTOCREDIT:                      # DATA XREF: ROM:000DC120↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5F05C
                addo    4, sp, sp
# =============== S U B R O U T I N E =======================================
sub_5F000:                              # DATA XREF: MAIN_DATA:030C0144↓o
                st      g0, -4(sp)
                ldob    0x5000A7, r13
                ld      COIN_MENU0_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5F048
                mov     3, r13
loc_5F048:                              # CODE XREF: sub_5F000+40↑j
                cmpibge 3, r13, loc_5F050
                mov     0, r13
loc_5F050:                              # CODE XREF: sub_5F000:loc_5F048↑j
                stob    r13, 0x5000A7
                ret
# End of function sub_5F000
# ---------------------------------------------------------------------------
loc_5F05C:                              # CODE XREF: ROM:0005EFF8↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5F0A4
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3325(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5F088
                mov     8, r15
loc_5F088:                              # CODE XREF: ROM:0005F080↑j
                mov     8, r14
                cmpibge r14, r15, loc_5F094
                mov     0, r15
loc_5F094:                              # CODE XREF: ROM:0005F08C↑j
                stob    r15, 0x1D03325
                stob    r15, 0x59C325
loc_5F0A4:                              # CODE XREF: ROM:0005F060↑j
                cmpi    0, g0
                bne     loc_5F2DC
                ret
# ---------------------------------------------------------------------------
coin_BONUSADDER:                        # DATA XREF: ROM:000DC128↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5F118
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    0x5000A7, r13
                ld      COIN_MENU0_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5F104
                mov     3, r13
loc_5F104:                              # CODE XREF: ROM:0005F0FC↑j
                cmpibge 3, r13, loc_5F10C
                mov     0, r13
loc_5F10C:                              # CODE XREF: ROM:loc_5F104↑j
                stob    r13, 0x5000A7
                ret
# ---------------------------------------------------------------------------
loc_5F118:                              # CODE XREF: ROM:0005F0B4↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5F160
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3326(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5F144
                mov     8, r15
loc_5F144:                              # CODE XREF: ROM:0005F13C↑j
                mov     8, r14
                cmpibge r14, r15, loc_5F150
                mov     0, r15
loc_5F150:                              # CODE XREF: ROM:0005F148↑j
                stob    r15, 0x1D03326
                stob    r15, 0x59C326
loc_5F160:                              # CODE XREF: ROM:0005F11C↑j
                cmpi    0, g0
                bne     loc_5F2DC
                ret
# ---------------------------------------------------------------------------
coin_CHUTEMULTI:                        # DATA XREF: ROM:000DC130↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5F1D4
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    0x5000A7, r13
                ld      COIN_MENU0_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5F1C0
                mov     3, r13
loc_5F1C0:                              # CODE XREF: ROM:0005F1B8↑j
                cmpibge 3, r13, loc_5F1C8
                mov     0, r13
loc_5F1C8:                              # CODE XREF: ROM:loc_5F1C0↑j
                stob    r13, 0x5000A7
                ret
# ---------------------------------------------------------------------------
loc_5F1D4:                              # CODE XREF: ROM:0005F170↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5F21C
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3327(r15), r15
                mov     g0, r14
                addi    r14, r15, r15
                mov     0, r14
                cmpible r14, r15, loc_5F200
                mov     8, r15
loc_5F200:                              # CODE XREF: ROM:0005F1F8↑j
                mov     8, r14
                cmpibge r14, r15, loc_5F20C
                mov     0, r15
loc_5F20C:                              # CODE XREF: ROM:0005F204↑j
                stob    r15, 0x1D03327
                stob    r15, 0x59C327
loc_5F21C:                              # CODE XREF: ROM:0005F1D8↑j
                cmpi    0, g0
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldob    0x3327(r15), r15
                stob    r15, 0x1D03328
                stob    r15, 0x59C328
                bne     loc_5F2DC
                ret
# ---------------------------------------------------------------------------
coin_EXIT_0:                            # DATA XREF: ROM:COIN_MENU0↓o
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_5F2B0
                addo    4, sp, sp
                st      g0, -4(sp)
                ldob    0x5000A7, r13
                ld      COIN_MENU0_ITEMS[r13*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r14
                stos    r14, (g9)
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     g0, r15
                addi    r15, r13, r13
                cmpible 0, r13, loc_5F29C
                mov     3, r13
loc_5F29C:                              # CODE XREF: ROM:0005F294↑j
                cmpibge 3, r13, loc_5F2A4
                mov     0, r13
loc_5F2A4:                              # CODE XREF: ROM:loc_5F29C↑j
                stob    r13, 0x5000A7
                ret
# ---------------------------------------------------------------------------
loc_5F2B0:                              # CODE XREF: ROM:0005F24C↑j
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_5F2D8
                lda     0xFF, r15
                stib    r15, 0x5000A7
                lda     0x1000200, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 9, g1
                call    clr_pattern_s
loc_5F2D8:                              # CODE XREF: ROM:0005F2B4↑j
                ret
# ---------------------------------------------------------------------------
loc_5F2DC:                              # CODE XREF: ROM:0005ECA8↑j
                ld      add_BACKUP_RAM_TO_RAM, r14
                ld      0x3320(r14), r14
                setbit  1, r14, r14
                st      r14, 0x1D03320
                st      r14, 0x59C320
                call    sub_62328
                ret
# =============== S U B R O U T I N E =======================================
sub_5F308:                              # CODE XREF: ROM:0005EBE4↑p
                ld      off_5F494, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      off_5F480, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ldob    0x3325(g4), r3
                cmpibne 0, r3, loc_5F350
                lda     0x10006CA, g9
                lda     loc_8020, r15
                stis    r15, (g9)
loc_5F350:                              # CODE XREF: sub_5F308+30↑j
                lda     0x10006BE, g9
loc_5F358:                              # CODE XREF: ROM:00060238↓j
                lda     0x8031, r15
                addo    r15, r3, r3
                stos    r3, (g9)
                ld      off_5F488, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3326(r3), r3
                cmpibne 0, r3, loc_5F3A8
                ld      off_5F484, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                b       loc_5F3C0
# ---------------------------------------------------------------------------
loc_5F3A8:                              # CODE XREF: sub_5F308+84↑j
                lda     0x1000A2C, g9
                lda     0x8031, r15
                addo    r15, r3, r3
                stos    r3, (g9)
loc_5F3C0:                              # CODE XREF: sub_5F308+9C↑j
                ld      off_5F48C, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3327(r3), r3
                cmpibne 0, r3, loc_5F3FC
                lda     0x1000DDC, g9
                lda     loc_8020, r15
                stis    r15, (g9)
loc_5F3FC:                              # CODE XREF: sub_5F308+DC↑j
                lda     0x1000DD0, g9
                lda     0x8031, r15
                addo    r15, r3, r3
                stos    r3, (g9)
                ld      add_BACKUP_RAM_TO_RAM, r3
                ld      0x3320(r3), r3
                bbs     0, r3, loc_5F47C
                ld      off_5F490, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3328(r3), r3
                cmpibne 0, r3, loc_5F464
                lda     0x100115C, g9
                lda     loc_8020, r15
                stis    r15, (g9)
loc_5F464:                              # CODE XREF: sub_5F308+144↑j
                lda     0x1001150, g9
                lda     0x8031, r15
                addo    r15, r3, r3
                stos    r3, (g9)
loc_5F47C:                              # CODE XREF: sub_5F308+11C↑j
                ret
# End of function sub_5F308
# ---------------------------------------------------------------------------
off_5F480:      .long lCoins1Credit     # DATA XREF: sub_5F308+14↑r
off_5F484:      .long lNoBonusAdder     # DATA XREF: sub_5F308+88↑r
off_5F488:      .long lCoinsGive1Extra  # DATA XREF: sub_5F308+60↑r
off_5F48C:      .long l1CoinCountsAsCoins
off_5F490:      .long l1CoinCountsAsCoins2 # DATA XREF: sub_5F308+120↑r
off_5F494:      .long lManualSetting_1  # DATA XREF: sub_5F308↑r
# ---------------------------------------------------------------------------
BOOKKEEPING:                            # DATA XREF: ROM:000DC96C↓o
                ldob    MENU_ITEM_SELECT, r3
                ld      BOOKKEEPING_list[r3*4], r3
                bx      (r3)
# ---------------------------------------------------------------------------
BOOKKEEPING_list:.long loc_5F6E8        # DATA XREF: ROM:0005F4A0↑r
                .long loc_5F72C
                .long loc_5F994
                .long loc_5F9D8
                .long loc_5FD6C
                .long loc_5FDB0
                .long loc_60100
                .long loc_60250
                .long loc_603AC
                .long loc_60738
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
                .long BOOKKEEPING_unused
                .long loc_61320
# ---------------------------------------------------------------------------
loc_5F564:                              # CODE XREF: ROM:0005F728↓j
                ldob    MENU_ITEM_SELECT, r3
                addo    1, r3, r3
                stob    r3, MENU_ITEM_SELECT
                lda     0x100014C, g9
                shro    1, r3, r4
                ld      add_1_5_to_5_5[r4*4], g0
                call    print_mes
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100161E, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPressServiceBu:.asciz "PRESS SERVICE BUTTON TO CONTINUE"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10016A4, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPressTestButto_1:.asciz "PRESS TEST BUTTON TO EXIT"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
add_1_5_to_5_5: .long a15_0             # DATA XREF: ROM:0005F584↑r
                .long a25_0             # "2/5    "
                .long a35               # "3/5    "
                .long a45               # "4/5    "
                .long a55_0             # "5/5    "
unused_BOOOKKEEPING_CHARS:.long aSonic_2 # "SONIC  "
                .long aTails_2          # "TAILS  "
                .long aAmy_2            # "AMY  "
                .long aMetal_0          # "METAL  "
                .long aFang_2           # "FANG    "
                .long aPiky             # "PIKY "
                .long aKnuckles_2       # "KNUCKLES   "
                .long aSan              # "SAN   "
                .long aShun             # "SHUN   "
                .long aDum1             # "DUM1  "
                .long aLion             # "LION   "
                .long aDum3_0           # "DUM3    "
                .long aKotails          # "KOTAILS"
                .long asc_9BFB4         # "-------"
                .long asc_9BFBC         # "-------"
                .long asc_9BFC4         # "-------"
                .long asc_9BFCC         # "-------"
                .long asc_9BFD4         # "-------"
# ---------------------------------------------------------------------------
loc_5F680:                              # CODE XREF: ROM:loc_5F7D8↓j
                ld      INTERUPT_FLAGS_MOMENTARY, r9
                ldob    MENU_ITEM_SELECT, r3
                lda     0x4000014, r11
                and     r9, r11, r15
                cmpobne 0, r15, BOOKKEEPING_exit
                lda     0x8000108, r11
                and     r9, r11, r15
                cmpobne 0, r15, loc_5F6BC
                bbs     9, r9, loc_5F6D0
                ret
# ---------------------------------------------------------------------------
BOOKKEEPING_exit:                       # CODE XREF: ROM:0005F69C↑j
                b       TEST_MENU_init
# ---------------------------------------------------------------------------
loc_5F6BC:                              # CODE XREF: ROM:0005F6AC↑j
                addi    1, r3, r3
                mov     9, r4
                cmpibge r4, r3, loc_5F6CC
                mov     0, r3
loc_5F6CC:                              # CODE XREF: ROM:0005F6C4↑j
                b       loc_5F6DC
# ---------------------------------------------------------------------------
loc_5F6D0:                              # CODE XREF: ROM:0005F6B0↑j
                subi    3, r3, r3
                cmpible 0, r3, loc_5F6DC
                mov     8, r3
loc_5F6DC:                              # CODE XREF: ROM:loc_5F6CC↑j
                stob    r3, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_5F6E8:                              # DATA XREF: ROM:BOOKKEEPING_list↑o
                lda     0x1000200, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0xD, g1
                call    clr_pattern_s
                lda     BOOKEEPING_pg1, r15
                subo    4, r15, r15
                ld      (r15), r14
                addo    4, r15, r15
loc_5F710:                              # CODE XREF: ROM:0005F724↓j
                ld      (r15), g9
                ld      4(r15), g0
                call    print_mes
                addo    0x14, r15, r15
                cmpdeco 1, r14, r14
                bl      loc_5F710
                b       loc_5F564
# ---------------------------------------------------------------------------
loc_5F72C:                              # DATA XREF: ROM:0005F4B0↑o
                lda     BOOKEEPING_pg1, r15
                subo    4, r15, r15
                ld      (r15), r14
                addo    4, r15, r15
loc_5F740:                              # CODE XREF: ROM:0005F758↓j
                ld      8(r15), g9
                ld      0xC(r15), g0
                ld      0x10(r15), g1
                call    loc_6386C
                addo    0x14, r15, r15
                cmpdeco 1, r14, r14
                bl      loc_5F740
                ld      add_BACKUP_RAM_TO_RAM, r3
                ld      0x33B0(r3), r3
                ld      add_BACKUP_RAM_TO_RAM, r4
                ld      0x33B4(r4), r4
                addo    r3, r4, r5
                ldl     0x33B8(g4), r6
                ldl     0x33C0(g4), r8
                cmpo    1, 0
                addc    r8, r8, r10
                addc    r9, r9, r11
                cmpo    1, 0
                addc    r8, r6, g0
                addc    r9, r7, g1
                cmpobe  0, r5, loc_5F7DC
                ediv    r5, g0, r4
                addo    0x1F, 2, r15
                addo    0x1F, 7, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     0, g1
                mov     r5, g0
                call    print_book_time2_s
loc_5F7D8:                              # CODE XREF: ROM:0005F810↓j
                b       loc_5F680
# ---------------------------------------------------------------------------
loc_5F7DC:                              # CODE XREF: ROM:0005F7A8↑j
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001342, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMS:            .asciz "    --M --S"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                b       loc_5F7D8
# ---------------------------------------------------------------------------
                .long 19
BOOKEEPING_pg1: .long 0x10002B4         # DATA XREF: ROM:0005F6FC↑o
                .long aGlobalData       # "GLOBAL DATA"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000414
                .long aCoinChute1_0     # "         COIN CHUTE #1"
                .long 0x1000442
                .long 0x404
                .long bk_chute_1
                .long 0x1000514
                .long aCoinChute2_0     # "         COIN CHUTE #2"
                .long 0x1000542
                .long 0x404
                .long bk_chute_2
                .long 0x1000614
                .long aTotalCoins       # "           TOTAL COINS"
                .long 0x1000642
                .long 0x20000
                .long bk_total_coins    # an array of bk_chute_1 and bk_chute_2
                .long 0x1000794
                .long aCoinCredits      # "          COIN CREDITS"
                .long 0x10007C2
                .long 0x404
                .long bk_coin_credits
                .long 0x1000894
                .long aServiceCredits   # "       SERVICE CREDITS"
                .long 0x10008C2
                .long 0x404
                .long bk_service_credits
                .long 0x1000994
                .long aTotalCredits     # "         TOTAL CREDITS"
                .long 0x10009C2
                .long 0x20000
                .long total_credits     # an array of bk_coin_credits and bk_service_credits
                .long 0x1000B14
                .long aTotalTime        # "            TOTAL TIME"
                .long 0x1000B42
                .long 0x210
                .long total_game_time_bk
                .long 0x1000C14
                .long aPlayTime         # "             PLAY TIME"
                .long 0x1000C42
                .long 0x210
                .long play_time_bk
                .long 0x1000D14
                .long aPlayTimeRatio1   # "PLAY TIME RATIO(*1000)"
                .long 0x1000D42
                .long 0x40000
                .long play_time_ratio
                .long 0x1000E94
                .long aTotalGameCount   # "      TOTAL GAME COUNT"
                .long 0x1000EC2
                .long 0x20000
                .long total_game_count
                .long 0x1000F94
                .long a1p               # "                    1P"
                .long 0x1000FC2
                .long 0x404
                .long bk_1P_COUNT_A
                .long 0x1001094
                .long aVs               # "                    VS"
                .long 0x10010C2
                .long 0x404
                .long VS_COUNT_A_bk
                .long 0x1001194
                .long a1pGameTimeA      # "        1P GAME TIME A"
                .long 0x10011C2
                .long 0x210
                .long game_time_1p_bk
                .long 0x1001214
                .long aWaitGameTimeA    # "      WAIT GAME TIME A"
                .long 0x1001242
                .long 0x210
                .long wait_game_time_bk
                .long 0x1001294
                .long aVsGameTimeA      # "        VS GAME TIME A"
                .long 0x10012C2
                .long 0x210
                .long bk_vs_game_time
                .long 0x1001314
                .long aTotalAverageTi   # "    TOTAL AVERAGE TIME"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1001394
                .long a1p_0             # "                    1P"
                .long 0x10013C2
                .long 0x80000
                .long game_count_time_1p
                .long 0x1001414
                .long aVs_0             # "                    VS"
                .long 0x1001442
                .long 0x80000
                .long game_count_time_vs
# ---------------------------------------------------------------------------
loc_5F994:                              # DATA XREF: ROM:0005F4B4↑o
                lda     0x1000200, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0xD, g1
                call    clr_pattern_s
                lda     BOOKEEPING_pg2, r15
                subo    4, r15, r15
                ld      (r15), r14
                addo    4, r15, r15
loc_5F9BC:                              # CODE XREF: ROM:0005F9D0↓j
                ld      (r15), g9
                ld      4(r15), g0
                call    print_mes
                addo    0x14, r15, r15
                cmpdeco 1, r14, r14
                bl      loc_5F9BC
                b       loc_5F564
# ---------------------------------------------------------------------------
loc_5F9D8:                              # DATA XREF: ROM:0005F4B8↑o
                lda     BOOKEEPING_pg2, r15
                subo    4, r15, r15
                ld      (r15), r14
                addo    4, r15, r15
loc_5F9EC:                              # CODE XREF: ROM:0005FA04↓j
                ld      8(r15), g9
                ld      0xC(r15), g0
                ld      0x10(r15), g1
                call    loc_6386C
                addo    0x14, r15, r15
                cmpdeco 1, r14, r14
                bl      loc_5F9EC
                mov     0x15, r3
                xor     r4, r4, r4
loc_5FA10:                              # CODE XREF: ROM:0005FAB8↓j
                addo    r3, r4, r5
                mov     0x10, r15
                mov     r5, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x1D03520[r4*4], g0
                call    print_dec       # Print g0 as decimal
                mov     0x1C, r15
                mov     r5, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x1D03948[r4*4], g0
                call    print_dec       # Print g0 as decimal
                addo    0x1F, 9, r15
                mov     r5, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x1D039F8[r4*4], g0
                call    print_dec       # Print g0 as decimal
                addo    0x1F, 0x14, r15
                mov     r5, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x1D039A0[r4*4], g0
                call    print_dec       # Print g0 as decimal
                addo    1, r4, r4
                cmpobge 0x14, r4, loc_5FA10
                b       loc_5F680
# ---------------------------------------------------------------------------
                .long 34
BOOKEEPING_pg2: .long 0x10002B2         # DATA XREF: ROM:0005F9A8↑o
                .long aGlobalData2      # "GLOBAL DATA 2"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000332
                .long aTypeBData        # "-TYPE-B DATA-"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000414
                .long aStartContinue    # "                          START     CON"...
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000514
                .long a1pPlayCount      # "    1P PLAY COUNT"
                .long 0x1000546
                .long 0x404
                .long bk_1P_COUNT_B
                .long 0x1000514
                .long dword_9C22C
                .long 0x1000560
                .long 0x404
                .long bk_P1_CONTI_B
                .long 0x1000614
                .long aVsPlayCount      # "    VS PLAY COUNT"
                .long 0x1000646
                .long 0x404
                .long bk_VS_COUNT_B
                .long 0x1000614
                .long asc_9C244         # " "
                .long 0x1000660
                .long 0x404
                .long bk_VS_CONTI_B
                .long 0x1000714
                .long a1pAvgPlayTime    # "1P AVG. PLAY TIME"
                .long 0x100073C
                .long 0x80000
                .long avg_play_time_1p
                .long 0x1000714
                .long dword_9C264
                .long 0x1000756
                .long 0x80000
                .long off_9C268
                .long 0x1000814
                .long aVsAvgPlayTime    # "VS AVG. PLAY TIME"
                .long 0x100083C
                .long 0x80000
                .long off_9C284
                .long 0x1000814
                .long aV_15             # "V"
                .long 0x1000856
                .long 0x80000
                .long off_9C290
                .long 0x100098A
                .long aTimeCount        # "  TIME                        COUNT"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000A0A
                .long a1pStartVsStart   # "         -1P START-  -VS START-  -1P CO"...
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000A8A
                .long a030s             # "0~   30S"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000B0A
                .long a1m               # " ~ 1M"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000B8A
                .long a1m30s            # " ~ 1M30S"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000C0A
                .long a2m               # " ~ 2M"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000C8A
                .long a2m30s            # " ~ 2M30S"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000D0A
                .long a3m               # " ~ 3M"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000D8A
                .long a3m30s            # " ~ 3M30S"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000E0A
                .long a4m               # " ~ 4M"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000E8A
                .long a4m30s            # " ~ 4M30S"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000F0A
                .long a5m               # " ~ 5M"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000F8A
                .long a5m30s            # " ~ 5M30S"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x100100A
                .long a6m               # " ~ 6M"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x100108A
                .long a6m30s            # " ~ 6M30S"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x100110A
                .long a7m               # " ~ 7M"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x100118A
                .long a7m30s            # " ~ 7M30S"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x100120A
                .long a8m               # " ~ 8M"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x100128A
                .long a8m30s            # " ~ 8M30S"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x100130A
                .long a9m               # " ~ 9M"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x100138A
                .long a9m30s            # " ~ 9M30S"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x100140A
                .long a10m              # " ~10M"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x100148A
                .long a10m_0            # "10M~"
                .long 0x1000000
                .long 0x10000
                .long 0
# ---------------------------------------------------------------------------
loc_5FD6C:                              # DATA XREF: ROM:0005F4BC↑o
                lda     0x1000200, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0xD, g1
                call    clr_pattern_s
                lda     BOOKEEPING_pg3, r15
                subo    4, r15, r15
                ld      (r15), r14
                addo    4, r15, r15
loc_5FD94:                              # CODE XREF: ROM:0005FDA8↓j
                ld      (r15), g9
                ld      4(r15), g0
                call    print_mes
                addo    0x14, r15, r15
                cmpdeco 1, r14, r14
                bl      loc_5FD94
                b       loc_5F564
# ---------------------------------------------------------------------------
loc_5FDB0:                              # DATA XREF: ROM:0005F4C0↑o
                lda     BOOKEEPING_pg3, r15
                subo    4, r15, r15
                ld      (r15), r14
                addo    4, r15, r15
loc_5FDC4:                              # CODE XREF: ROM:0005FDDC↓j
                ld      8(r15), g9
                ld      0xC(r15), g0
                ld      0x10(r15), g1
                call    loc_6386C
                addo    0x14, r15, r15
                cmpdeco 1, r14, r14
                bl      loc_5FDC4
                ld      add_BACKUP_RAM_TO_RAM, r3
                lda     0x3420(r3), r3
                mov     0x1C, r8
                mov     0, r4
                mov     0, r5
loc_5FDFC:                              # CODE XREF: ROM:0005FF14↓j
                ld      (r3)[r5*16], r9
                mov     0x10, r15
                mov     r8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r9, g0
                call    print_dec       # Print g0 as decimal
                ld      4(r3)[r5*16], r10
                mov     0x17, r15
                mov     r8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r10, g0
                call    print_dec       # Print g0 as decimal
                ldl     8(r3)[r5*16], r10
                shro    6, r10, r10
                shlo    0x1A, r11, r11
                or      r10, r11, r10
                mov     0x1E, r15
                mov     r8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r10, g0
                call    print_dec       # Print g0 as decimal
                addo    0x1F, 6, r15
                mov     r8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r9, r13
                mov     r10, r14
                mov     r11, r15
                cmpobe  0, r13, loc_5FEC4
                ediv    r13, r14, g0
                mov     g1, g0
                call    print_dec       # Print g0 as decimal
                b       loc_5FED4
# ---------------------------------------------------------------------------
loc_5FEC4:                              # CODE XREF: ROM:0005FEB0↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "  ----"
                .byte 0
# ---------------------------------------------------------------------------
loc_5FED4:                              # CODE XREF: ROM:0005FEC0↑j
                addo    0x1F, 0xF, r10
                shlo    7, r8, r15
                addo    r10, r10, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                ld      4(r3)[r5*16], r13
                cmpobe  0, r9, loc_5FF08
                lda     0x3E8, r14
                mulo    r14, r13, r13
                divo    r9, r13, g0
                call    print_dec       # Print g0 as decimal
loc_5FF08:                              # CODE XREF: ROM:0005FEF4↑j
                addo    1, r8, r8
                addo    1, r4, r4
                addo    1, r5, r5
                cmpobg  0xA, r4, loc_5FDFC
                b       loc_5F680
# ---------------------------------------------------------------------------
                .long 24
BOOKEEPING_pg3: .long 0x10002B4         # DATA XREF: ROM:0005FD80↑o
                .long a1pGameData       # "1P GAME DATA"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000414
                .long aGameCount        # "          GAME COUNT"
                .long 0x1000440
                .long 0x404
                .long bk_1P_COUNT_A
                .long 0x100050E
                .long aTotalTime_0      # "TOTAL TIME"
                .long 0x1000526
                .long 0x210
                .long game_time_1p_bk
                .long 0x1000592
                .long aAvgTime          # "AVG TIME"
                .long 0x10005B6
                .long 0x80000
                .long avg_time_1p
                .long 0x1000612
                .long aMinTime          # "MIN TIME"
                .long 0x1000636
                .long 0x104
                .long min_time_1p_bk
                .long 0x1000692
                .long aMaxTime          # "MAX TIME"
                .long 0x10006B6
                .long 0x104
                .long max_time_1p_bk
                .long 0x1000814
                .long aContinueCount    # "      CONTINUE COUNT"
                .long 0x1000840
                .long 0x404
                .long continue_count_1p_bk
                .long 0x1000894
                .long aSetCount         # "           SET COUNT"
                .long 0x10008C0
                .long 0x404
                .long set_count_bk
                .long 0x1000914
                .long aDrawCount        # "          DRAW COUNT"
                .long 0x1000940
                .long 0x404
                .long draw_count_bk
                .long 0x1000994
                .long aWinByKOCount     # "   WIN BY K.O. COUNT"
                .long 0x10009C0
                .long 0x404
                .long win_by_ko_count_bk
                .long 0x1000A14
                .long aWinByJudgeCoun_1 # "  WIN BY JUDGE COUNT"
                .long 0x1000A40
                .long 0x404
                .long win_by_judge_count_bk
                .long 0x1000C94
                .long aCountTime        # "      ----COUNT---- ----TIME----       "...
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000D14
                .long aRoundTotalWinT   # "ROUND TOTAL   WIN   TOTAL  AVG.   WIN R"...
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000D94
                .long aThTimesTimesSe   # " (th) (times)(times) (sec)  (sec)  (*10"...
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000E14
                .long a1_8              # "  1"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000E94
                .long a2_11             # "  2"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000F14
                .long a3_1              # "  3"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000F94
                .long a4_0              # "  4"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1001014
                .long a5_1              # "  5"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1001094
                .long a6                # "  6"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1001114
                .long a7                # "  7"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1001194
                .long a8                # "  8"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1001214
                .long a9                # "  9"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1001294
                .long a10_1             # " 10"
                .long 0x1000000
                .long 0x10000
                .long 0
# ---------------------------------------------------------------------------
loc_60100:                              # DATA XREF: ROM:0005F4C4↑o
                lda     0x1000200, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0xD, g1
                call    clr_pattern_s
                lda     BOOKEEPING_pg4, r15
                subo    4, r15, r15
                ld      (r15), r14
                addo    4, r15, r15
loc_60128:                              # CODE XREF: ROM:0006013C↓j
                ld      (r15), g9
                ld      4(r15), g0
                call    print_mes
                addo    0x14, r15, r15
                cmpdeco 1, r14, r14
                bl      loc_60128
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000454, g9 # " "
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aGametimeCount_0:.asciz "GAMETIME   COUNT"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10004D4, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSecTimes:      .asciz "   (sec)  (times)"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     0xA, r8
                mov     0xA, r9
                lda     0x67, r10
loc_601C4:                              # CODE XREF: ROM:00060218↓j
                addo    0x1F, 0xA, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                mov     r9, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
                .asciz " "
                .short 0
# ---------------------------------------------------------------------------
                addo    0x1F, 0xB, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz " ~"
                .byte 0
# ---------------------------------------------------------------------------
                addo    3, r9, r9
                addo    1, r8, r8
                cmpibge r10, r9, loc_601C4
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001554, g9
                balx    debug_disp_mes, r14
                cmpobl  6, pfp, loc_5F358
# ---------------------------------------------------------------------------
                .asciz "~"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                b       loc_5F564
# ---------------------------------------------------------------------------
loc_60250:                              # DATA XREF: ROM:0005F4C8↑o
                lda     BOOKEEPING_pg4, r15
                subo    4, r15, r15
                ld      (r15), r14
                addo    4, r15, r15
loc_60264:                              # CODE XREF: ROM:0006027C↓j
                ld      8(r15), g9
                ld      0xC(r15), g0
                ld      0x10(r15), g1
                call    loc_6386C
                addo    0x14, r15, r15
                cmpdeco 1, r14, r14
                bl      loc_60264
                lda     0x1D03620, r3
                mov     0xA, r8
                addo    0x1F, 2, r7
                mov     0, r4
loc_60294:                              # CODE XREF: ROM:000602C4↓j
                ld      (r3)[r4*4], r9
                addo    0x1F, 0x15, r15
                mov     r8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r9, g0
                call    print_dec       # Print g0 as decimal
                addo    1, r8, r8
                addo    1, r4, r4
                cmpobg  r7, r4, loc_60294
                b       loc_5F680
# ---------------------------------------------------------------------------
                .long 0xB
BOOKEEPING_pg4: .long 0x10002B4         # DATA XREF: ROM:00060114↑o
                .long aVsGameData       # "VS GAME DATA"
                .long 0x1000000
                .long 0x10000
                .long 0
                .long 0x1000414
                .long aGameCount_0      # "          GAME COUNT"
                .long 0x1000440
                .long 0x404
                .long VS_COUNT_A_bk
                .long 0x100050E
                .long aTotalTime_1      # "TOTAL TIME"
                .long 0x1000526
                .long 0x210
                .long bk_vs_game_time
                .long 0x100058E
                .long aAvgTime_0        # "  AVG TIME"
                .long 0x10005B6
                .long 0x80000
                .long avg_vs_time
                .long 0x100060E
                .long aMinTime_0        # "  MIN TIME"
                .long 0x1000636
                .long 0x104
                .long min_vs_time_bk
                .long 0x100068E
                .long aMaxTime_0        # "  MAX TIME"
                .long 0x10006B6
                .long 0x104
                .long max_vs_time_bk
                .long 0x1000814
                .long aContinueCount_0  # "      CONTINUE COUNT"
                .long 0x1000840
                .long 0x404
                .long continue_count_vs_bk
                .long 0x1000894
                .long aSetCount_0       # "           SET COUNT"
                .long 0x10008C0
                .long 0x404
                .long set_count_vs_bk
                .long 0x1000914
                .long aDrawCount_0      # "          DRAW COUNT"
                .long 0x1000940
                .long 0x404
                .long draw_count_vs_bk
                .long 0x1000994
                .long aWinByKOCount_0   # "   WIN BY K.O. COUNT"
                .long 0x10009C0
                .long 0x404
                .long win_by_ko_count_vs_bk
                .long 0x1000A14
                .long aWinByJudgeCoun_2 # "  WIN BY JUDGE COUNT"
                .long 0x1000A40
                .long 0x404
                .long win_by_judge_count_vs_bk
# ---------------------------------------------------------------------------
loc_603AC:                              # DATA XREF: ROM:0005F4CC↑o
                lda     0x1000200, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0xD, g1
                call    clr_pattern_s
                mov     0, r15
                stib    r15, 0x5000A7
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10002B2, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aVsGameData2:   .asciz "VS GAME DATA 2" # CODE XREF: ROM:000612C8↓j
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000436, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aVsDiagram:     .asciz "VS DIAGRAM"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000528, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMyChar:        .asciz "MY CHAR : "
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100060C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aVSCharWinLose0:.asciz "V.S. CHAR.        WIN.    LOSE. 0%     RATE.    100%"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100070C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSonic_3:       .asciz "SONIC"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100080C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aTails_3:       .asciz "TAILS"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100090C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aAmy_3:         .asciz "AMY"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000A0C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aBean_2:        .asciz "BEAN"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000B0C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aFang_3:        .asciz "FANG"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000C0C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aBark_2:        .asciz "BARK"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000D0C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aKnuckles_3:    .asciz "KNUCKLES"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000E0C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aEspio_1:       .asciz "ESPIO"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000F0C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100100C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .long 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100120C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aAVictoryStreak:.asciz "A VICTORY STREAK"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001598, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSelectWithPlay_0:.asciz "SELECT WITH PLAYER 1 SIDE LEVER UP/DOWN."
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                b       loc_5F564
# ---------------------------------------------------------------------------
loc_60738:                              # DATA XREF: ROM:0005F4D0↑o
                ldob    0x5000A7, r3
                mov     r3, r4
                addo    0x1F, 0x15, r5
                mulo    r5, r4, r5
                lda     0x1D036A4, r6
                addo    r6, r5, r5
                lda     0x100053C, g9
                ld      bk_char_list[r4*4], g0
                call    print_mes
                ld      add_BACKUP_RAM_TO_RAM, r15
                ldos    0x3A50(r15)[r4*2], r12
                mov     0x17, r15
                addo    0x1F, 5, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r12, g0
                call    print_dec       # Print g0 as decimal
                xor     r12, r12, r12
loc_607A4:                              # CODE XREF: ROM:00060848↓j
                ldos    displacement(r5)[r12*2], r10
                ldos    (displacement2)(r5)[r12*2], r11
                addo    0xE, r12, r9
                mov     0x17, r15
                mov     r9, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r10, g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     r9, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r11, g0
                call    print_dec       # Print g0 as decimal
                addo    0x1F, 7, r8
                shlo    7, r9, r15
                addo    r8, r8, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                addo    r10, r11, r9
                cmpobe  0, r9, loc_60830
                cvtir   r9, r9
                cvtir   r10, r10
                divr    r9, r10, g0
                b       loc_60838
# ---------------------------------------------------------------------------
loc_60830:                              # CODE XREF: ROM:0006081C↑j
                lda     0xBF800000, g0
loc_60838:                              # CODE XREF: ROM:0006082C↑j
                mov     0x14, g1
                call    sub_60878
                cmpinci 0xE, r12, r12
                addo    1, r12, r12
                bg      loc_607A4
                call    wait_for_inputs_service_menu
                cmpibe  0, g0, loc_60874
                addi    r3, g0, r3
                cmpible 0, r3, loc_60864
                mov     7, r3
                b       loc_6086C
# ---------------------------------------------------------------------------
loc_60864:                              # CODE XREF: ROM:00060858↑j
                cmpibge 7, r3, loc_6086C
                xor     r3, r3, r3
loc_6086C:                              # CODE XREF: ROM:00060860↑j
                stob    r3, 0x5000A7
loc_60874:                              # CODE XREF: ROM:00060850↑j
                b       loc_5F680
# =============== S U B R O U T I N E =======================================
sub_60878:                              # CODE XREF: ROM:0006083C↑p
                lda     0xBF800000, r15
                cmpr    r15, g0
                be      loc_608D8
                shlo    3, g1, r3
                cvtir   r3, r3
                mulr    r3, g0, r3
                cvtri   r3, r3
                and     7, r3, r4
                shro    3, r3, r5
                cmpobe  0, r5, loc_608BC
loc_608A4:                              # CODE XREF: sub_60878+40↓j
                mov     7, g0
                call    print_char
                addo    2, g9, g9
                subo    1, g1, g1
                cmpdeci 1, r5, r5
                bl      loc_608A4
loc_608BC:                              # CODE XREF: sub_60878+28↑j
                cmpobe  0, r4, loc_608D0
                addo    7, r4, g0
                call    print_char
                addo    2, g9, g9
                subo    1, g1, g1
loc_608D0:                              # CODE XREF: sub_60878:loc_608BC↑j
                cmpobe  0, g1, loc_60908
                b       loc_608F0
# ---------------------------------------------------------------------------
loc_608D8:                              # CODE XREF: sub_60878+C↑j
                lda     loc_802C+1, r15
                stis    r15, (g9)
                addo    2, g9, g9
                subo    1, g1, g1
                cmpobe  0, g1, loc_60908
loc_608F0:                              # CODE XREF: sub_60878+5C↑j
                lda     loc_8020, r15
                stis    r15, (g9)
                addo    2, g9, g9
                cmpdeci 1, g1, g1
                bl      loc_608F0
loc_60908:                              # CODE XREF: sub_60878:loc_608D0↑j
                ret
# End of function sub_60878
# ---------------------------------------------------------------------------
bk_char_list:   .long bk_Sonic          # DATA XREF: ROM:00060760↑r
                .long bk_Tails          # "TAILS     "
                .long bk_Amy            # "AMY       "
                .long bk_Bean           # "BEAN      "
                .long bk_aFang          # "FANG      "
                .long bk_Bark           # "BARK      "
                .long bk_Knuckles       # "KNUCKLES  "
                .long bk_Espio          # "ESPIO     "
                .long bk_blank0         # "          "
                .long bk_blank1         # "          "
                .long bk_blank2         # "          "
                .long bk_blank3         # "          "
unused_bk_char_list:.long aSonic_0      # "SONIC     "
                .long aTails_0          # "TAILS     "
                .long aAmy_0            # "AMY       "
                .long aBean_0           # "BEAN      "
                .long aFang_0           # "FANG      "
                .long aBark_0           # "BARK      "
                .long aKnuckles_0       # "KNUCKLES  "
                .long aEspio_0          # "ESPIO     "
                .long asc_9C6FC         # "          "
                .long asc_9C707         # "          "
                .long asc_9C712         # "          "
                .long asc_9C71D         # "          "
# ---------------------------------------------------------------------------
BOOKKEEPING_unused:                     # DATA XREF: ROM:0005F4D4↑o
                ldob    MENU_ITEM_SELECT, g0
                subo    0xA, g0, g0
                shro    1, g0, g0
                mov     g0, r4
                lda     0x1000200, g9
                addo    0x1F, 0x1F, g0
                addo    0x1F, 0xD, g1
                call    clr_pattern_s
                ld      bk_char_list_unused[r4*4], g0
                lda     0x1000244, g9
                call    print_mes
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100022C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aGameData:      .asciz "GAME DATA"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000322, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aGameCount1p:   .asciz "GAME COUNT 1P"
                .short 0
# ---------------------------------------------------------------------------
loc_60A08:                              # DATA XREF: MAIN_DATA:02615CA0↓o
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10003A2, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aGameCountVs:   .asciz "GAME COUNT VS"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000408, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aTotalTime1p:   .asciz "TOTAL TIME 1P"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000488, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aTotalTimeVs:   .asciz "TOTAL TIME VS"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100050C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aAvgTime1p:     .asciz "AVG TIME 1P"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100058C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aAvgTimeVs:     .asciz "AVG TIME VS"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100060C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMinTime1p:     .asciz "MIN TIME 1P"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100068C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMinTimeVs:     .asciz "MIN TIME VS"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100070C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMaxTime1p:     .asciz "MAX TIME 1P"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100078C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMaxTimeVs:     .asciz "MAX TIME VS"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100081A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aContinueCount1:.asciz "CONTINUE COUNT 1P"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100089A, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aContinueCountV:.asciz "CONTINUE COUNT VS"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000924, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSetCount1p:    .asciz "SET COUNT 1P"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10009A4, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSetCountVs:    .asciz "SET COUNT VS"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000A22, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aDrawCount1p:   .asciz "DRAW COUNT 1P"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000AA2, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aDrawCountVs:   .asciz "DRAW COUNT VS"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000B14, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aWinByKOCount1p:.asciz "WIN BY K.O. COUNT 1P"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000B94, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aWinByKOCountVs:.asciz "WIN BY K.O. COUNT VS"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000C0E, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aWinByRingoutCo:.asciz "WIN BY RINGOUT COUNT 1P"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000C8E, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aWinByRingoutCo_0:.asciz "WIN BY RINGOUT COUNT VS"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000D12, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aWinByJudgeCoun:.asciz "WIN BY JUDGE COUNT 1P"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000D92, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aWinByJudgeCoun_0:.asciz "WIN BY JUDGE COUNT VS"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000E06, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a1pData:        .asciz "--------------1P DATA-------------"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000E86, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aRndTotalWinTot:.asciz "RND.TOTAL WIN.  TOTAL AVG. WINRATE"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000F06, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aThTimesSecond1:.asciz "(th)  (times)     (second) (*1000)"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000F88, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a1_9:           .asciz " 1"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001008, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a2_12:          .asciz " 2"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001088, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a3_2:           .asciz " 3"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001108, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a4_1:           .asciz " 4"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001188, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a5_2:           .asciz " 5"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001208, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a6_0:           .asciz " 6"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001288, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a7_0:           .asciz " 7"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001308, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a8_0:           .asciz " 8"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001388, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a9_0:           .asciz " 9"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001408, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a10_2:          .asciz "10"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001488, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
a11_0:          .asciz "11"
                .byte 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000454, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aVsData:        .asciz "-----VS DATA-----"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10004D4, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aGametimeCount: .asciz "GAMETIME    COUNT"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000554, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSecTimes_0:    .asciz "   (sec)  (times)"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     0xB, r8
                mov     0xA, r9
                lda     0x67, r10
loc_61254:                              # CODE XREF: ROM:000612A8↓j
                addo    0x1F, 0xA, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                mov     r9, g0
                balx    debug_disp_int, r14
# ---------------------------------------------------------------------------
                .asciz " "
                .short 0
# ---------------------------------------------------------------------------
                addo    0x1F, 0xB, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz " ~"
                .byte 0
# ---------------------------------------------------------------------------
                addo    3, r9, r9
                addo    1, r8, r8
                cmpibge r10, r9, loc_61254
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10015D4, g9
                balx    debug_disp_mes, r14
                cmpobl  6, pfp, aVsGameData2 # "VS GAME DATA 2"
# ---------------------------------------------------------------------------
                .asciz "~"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                b       loc_5F564
# ---------------------------------------------------------------------------
bk_char_list_unused:.long aSonic_1      # DATA XREF: ROM:00060994↑r
                .long aTails_1          # "TAILS"
                .long aAmy_1            # "AMY"
                .long aMetal            # "METAL"
                .long aFang_1           # "FANG"
                .long aBark_1           # "BARK"
                .long aKnuckles_1       # "KNUCKLES"
                .long aSespio           # "SESPIO"
                .long aEggman           # "EGGMAN"
                .long aEggmanb          # "EGGMANB"
                .long aBean_1           # "BEAN"
                .long aDum3             # "DUM3"
                .long aDum4             # "DUM4"
                .long asc_9C776         # "-----"
                .long asc_9C77C         # "-----"
                .long asc_9C782         # "-----"
# ---------------------------------------------------------------------------
loc_61320:                              # DATA XREF: ROM:0005F4D8↑o
                shlo    0x14, 0x1D, r9
                ldob    MENU_ITEM_SELECT, r3
                subo    0xA, r3, r3
                shro    1, r3, r3
                shlo    9, 1, r4
                mulo    r4, r3, r3
                addo    r3, r9, r9
                mov     0x1F, r15
                mov     6, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x0(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     7, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      4(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x12, r15
                mov     8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     0, g1
                ldl     8(r9), g0
                call    print_book_time2
                mov     0x12, r15
                mov     9, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     0, g1
                ldl     0x10(r9), g0
                call    print_book_time2
                mov     0x12, r15
                mov     0xA, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     0, r15
                ld      0x0(r9), r14
                cmpobne 0, r15, loc_6141C
                cmpobe  0, r14, loc_61438
                mov     r14, r13
                mov     0, r15
                ldl     8(r9), r14
                ediv    r13, r14, r14
                mov     r15, g0
                b       loc_61450
# ---------------------------------------------------------------------------
loc_6141C:                              # CODE XREF: ROM:000613FC↑j
                cvtilr  r14, r13
                mov     0, r15
                ldl     8(r9), r14
                cvtilr  r14, r14
                divr    r13, r14, r14
                cvtri   r14, g0
                b       loc_61450
# ---------------------------------------------------------------------------
loc_61438:                              # CODE XREF: ROM:00061400↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMS_0:          .asciz "    --M --S"
# ---------------------------------------------------------------------------
                b       loc_61454
# ---------------------------------------------------------------------------
loc_61450:                              # CODE XREF: ROM:00061418↑j
                call    print_book_time_s
loc_61454:                              # CODE XREF: ROM:0006144C↑j
                mov     0x12, r15
                mov     0xB, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     0, r15
                ld      4(r9), r14
                cmpobne 0, r15, loc_61498
                cmpobe  0, r14, loc_614B4
                mov     r14, r13
                mov     0, r15
                ldl     0x10(r9), r14
                ediv    r13, r14, r14
                mov     r15, g0
                b       loc_614CC
# ---------------------------------------------------------------------------
loc_61498:                              # CODE XREF: ROM:00061478↑j
                cvtilr  r14, r13
                mov     0, r15
                ldl     0x10(r9), r14
                cvtilr  r14, r14
                divr    r13, r14, r14
                cvtri   r14, g0
                b       loc_614CC
# ---------------------------------------------------------------------------
loc_614B4:                              # CODE XREF: ROM:0006147C↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aMS_1:          .asciz "    --M --S"
# ---------------------------------------------------------------------------
                b       loc_614D0
# ---------------------------------------------------------------------------
loc_614CC:                              # CODE XREF: ROM:00061494↑j
                call    print_book_time_s
loc_614D0:                              # CODE XREF: ROM:000614C8↑j
                mov     0x12, r15
                mov     0xC, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     0, g1
                ld      0x18(r9), g0
                call    print_book_time2_s
                mov     0x12, r15
                mov     0xD, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     0, g1
                ld      0x138(r9), g0
                call    print_book_time2_s
                mov     0x12, r15
                mov     0xE, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     0, g1
                ld      0x1C(r9), g0
                call    print_book_time2_s
                mov     0x12, r15
                mov     0xF, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     0, g1
                ld      0x13C(r9), g0
                call    print_book_time2_s
                mov     0x1F, r15
                mov     0x10, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x20(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x11, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x140(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x12, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x24(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x13, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x144(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x14, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x28(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x15, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x148(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x16, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x2C(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x17, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x14C(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x18, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x30(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x19, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x150(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x1A, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x34(r9), g0
                call    print_dec       # Print g0 as decimal
                mov     0x1F, r15
                mov     0x1B, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                ld      0x154(r9), g0
                call    print_dec       # Print g0 as decimal
                lda     0x38(r9), r3
                addo    4, sp, sp
                st      r9, -4(sp)
                mov     0x1F, r8
                mov     0, r4
                mov     0, r9
loc_6173C:                              # CODE XREF: ROM:00061854↓j
                ld      (r3)[r9*16], r5
                mov     6, r15
                mov     r8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r5, g0
                call    print_dec       # Print g0 as decimal
                ld      4(r3)[r9*16], r10
                mov     0xC, r15
                mov     r8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r10, g0
                call    print_dec       # Print g0 as decimal
                ldl     8(r3)[r9*16], r10
                shro    6, r10, r10
                shlo    0x1A, r11, r11
                or      r11, r10, r10
                mov     0x12, r15
                mov     r8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r10, g0
                call    print_dec       # Print g0 as decimal
                mov     0x18, r15
                mov     r8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r5, r13
                mov     r10, r14
                mov     r11, r15
                cmpobe  0, r13, loc_61804
                ediv    r13, r14, g0
                mov     g1, g0
                call    print_dec       # Print g0 as decimal
                b       loc_61814
# ---------------------------------------------------------------------------
loc_61804:                              # CODE XREF: ROM:000617F0↑j
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "  ----"
                .byte 0
# ---------------------------------------------------------------------------
loc_61814:                              # CODE XREF: ROM:00061800↑j
                mov     0x1E, r10
                shlo    7, r8, r15
                addo    r10, r10, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                ld      4(r3)[r9*16], r13
                cmpobe  0, r5, loc_61848
                lda     0x3E8, r14
                mulo    r14, r13, r13
                divo    r5, r13, g0
                call    print_dec       # Print g0 as decimal
loc_61848:                              # CODE XREF: ROM:00061834↑j
                addo    1, r8, r8
                addo    1, r4, r4
                addo    1, r9, r9
                cmpobg  0xB, r4, loc_6173C
                ld      -4(sp), r9
                subo    4, sp, sp
                lda     0x158(r9), r3
                mov     0xB, r8
                addo    0x1F, 2, r7
                mov     0, r4
loc_61874:                              # CODE XREF: ROM:000618A4↓j
                ld      (r3)[r4*4], r9
                addo    0x1F, 0x15, r15
                mov     r8, r14
                shlo    0x18, 1, g9
                shlo    1, r15, r15
                shlo    7, r14, r14
                addo    r15, r14, r15
                addo    r15, g9, g9
                mov     r9, g0
                call    print_dec       # Print g0 as decimal
                addo    1, r8, r8
                addo    1, r4, r4
                cmpobg  r7, r4, loc_61874
                b       loc_5F680
# ---------------------------------------------------------------------------
BACKUP_DATA_CLEAR:                      # DATA XREF: ROM:000DC974↓o
                ldob    MENU_ITEM_SELECT, r3
                ld      BACKUP_DATA_CLEAR_list[r3*4], r3
                bx      (r3)
# ---------------------------------------------------------------------------
BACKUP_DATA_CLEAR_list:.long BACKUP_DATA_CLEAR_prompt
                .long BACKUP_DATA_CLEAR_wait_for_input
                .long loc_619C4
                .long loc_61A0C
                .long BACKUP_DATA_CLEAR_countdown_exit
# ---------------------------------------------------------------------------
BACKUP_DATA_CLEAR_prompt:               # DATA XREF: ROM:BACKUP_DATA_CLEAR_list↑o
                mov     1, r15
                stib    r15, MENU_ITEM_SELECT
                ld      mi_YesClear, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_NoCancel, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_YesClear, r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r15
                stis    r15, (g9)
                ld      mi_NoCancel, r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r15
                stis    r15, (g9)
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000DB6, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "         "
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ld      mi_SelectWithServiceButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_AndPressTestButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ret
# ---------------------------------------------------------------------------
BACKUP_DATA_CLEAR_wait_for_input:       # DATA XREF: ROM:000618C4↑o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_619AC
                b       TEST_MENU_init
# ---------------------------------------------------------------------------
loc_619AC:                              # CODE XREF: ROM:000619A4↑j
                call    wait_for_inputs_service_menu
                cmpobe  0, g0, BACKUP_DATA_CLEAR_return
                mov     2, r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_619C4:                              # DATA XREF: ROM:000618C8↑o
                mov     3, r15
                stib    r15, MENU_ITEM_SELECT
                ld      mi_NoCancel, r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r15
                stis    r15, (g9)
                ld      mi_YesClear, r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r15
                stis    r15, (g9)
                ret
# ---------------------------------------------------------------------------
loc_61A0C:                              # DATA XREF: ROM:000618CC↑o
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                lda     0x8001008, r14
                and     r14, r15, r15
                cmpo    0, r15
                be      loc_61A38
                mov     0, r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_61A38:                              # CODE XREF: ROM:00061A24↑j
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                lda     0x4000104, r14
                and     r14, r15, r15
                cmpo    0, r15
                be      BACKUP_DATA_CLEAR_return
                call    init_some_backup_stuff
                call    rank_init
                call    write_stats_to_backup_ram
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000DB6, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCompleted:     .asciz "COMPLETED"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                lda     0x1000DB6, g9
                mov     9, g0
                mov     1, g1
                lda     0x8180, g2
                call    color_disp_mes
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                shlo    2, 0x19, r15
                st      r15, CTRL_TIMER
                mov     4, r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
BACKUP_DATA_CLEAR_countdown_exit:       # DATA XREF: ROM:000618D0↑o
                ld      CTRL_TIMER, r15
                subi    1, r15, r15
                st      r15, CTRL_TIMER
                cmpibl  0, r15, BACKUP_DATA_CLEAR_return
                b       TEST_MENU_init
# ---------------------------------------------------------------------------
BACKUP_DATA_CLEAR_return:               # CODE XREF: ROM:000619B0↑j
                ret
# ---------------------------------------------------------------------------
ALL_INITIALIZE:                         # DATA XREF: ROM:000DC97C↓o
                ldob    MENU_ITEM_SELECT, r3
                ld      ALL_INITIALIZE_list[r3*4], r3
                bx      (r3)
# ---------------------------------------------------------------------------
ALL_INITIALIZE_list:.long ALL_INITIALIZE_prompt
                .long ALL_INITIALIZE_wait_for_input
                .long loc_61C4C
                .long loc_61C94
                .long ALL_INITIALIZE_countdown_exit
# ---------------------------------------------------------------------------
ALL_INITIALIZE_prompt:                  # DATA XREF: ROM:ALL_INITIALIZE_list↑o
                mov     1, r15
                stib    r15, MENU_ITEM_SELECT
                ld      mi_YesInitialize, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_NoCancel, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_YesClear, r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r15
                stis    r15, (g9)
                ld      mi_NoCancel, r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r15
                stis    r15, (g9)
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000DB6, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "         "
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ld      mi_SelectWithServiceButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_AndPressTestButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ret
# ---------------------------------------------------------------------------
ALL_INITIALIZE_wait_for_input:          # DATA XREF: ROM:00061B4C↑o
                call    wait_for_inputs_service_menu_1
                cmpibe  0, g0, loc_61C34
                b       TEST_MENU_init
# ---------------------------------------------------------------------------
loc_61C34:                              # CODE XREF: ROM:00061C2C↑j
                call    wait_for_inputs_service_menu
                cmpobe  0, g0, BACKUP_DATA_CLEAR_return
                mov     2, r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_61C4C:                              # DATA XREF: ROM:00061B50↑o
                mov     3, r15
                stib    r15, MENU_ITEM_SELECT
                ld      mi_NoCancel, r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     loc_8020, r15
                stis    r15, (g9)
                ld      mi_YesClear, r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r15
                stis    r15, (g9)
                ret
# ---------------------------------------------------------------------------
loc_61C94:                              # DATA XREF: ROM:00061B54↑o
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                lda     0x8001008, r14
                and     r14, r15, r15
                cmpo    0, r15
                be      loc_61CC0
                mov     0, r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
loc_61CC0:                              # CODE XREF: ROM:00061CAC↑j
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                lda     0x4000104, r14  # 0x104 = P1 Punch + Service
                and     r14, r15, r15
                cmpo    0, r15
                be      ALL_INITIALIZE_ret # return
                call    init_game_assignments
                call    sram_clear_for_coin_assign
                call    init_some_backup_stuff
                call    rank_init
                call    set_game_assign_byte_flag
                call    sub_62328
                call    write_stats_to_backup_ram
                call    write_str_stf
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000DB6, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCompleted_0:   .asciz "COMPLETED"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                lda     0x1000DB6, g9
                mov     9, g0
                mov     1, g1
                lda     0x8180, g2
                call    color_disp_mes
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                shlo    2, 0x19, r15
                st      r15, CTRL_TIMER
                mov     4, r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
ALL_INITIALIZE_countdown_exit:          # DATA XREF: ROM:00061B58↑o
                ld      CTRL_TIMER, r15
                subi    1, r15, r15
                st      r15, CTRL_TIMER
                cmpibl  0, r15, ALL_INITIALIZE_ret # return
                b       TEST_MENU_init
# ---------------------------------------------------------------------------
ALL_INITIALIZE_ret:                     # CODE XREF: ROM:00061CD8↑j
                ret                     # return
# ---------------------------------------------------------------------------
T_G_P__TEST:                            # DATA XREF: ROM:000DC934↓o
                ldob    MENU_ITEM_SELECT, r3
                ld      T_G_P__TEST_list[r3*4], r3
                bx      (r3)
# ---------------------------------------------------------------------------
T_G_P__TEST_list:.long T_G_P__TEST_TEST # DATA XREF: ROM:00061DD8↑r
                .long T_G_P__TEST_countdown
                .long T_G_P_TEST_test
                .long T_G_P__TEST_EXIT
# ---------------------------------------------------------------------------
T_G_P__TEST_TEST:                       # DATA XREF: ROM:T_G_P__TEST_list↑o
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10007A4, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aIc31:          .asciz "IC.31"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10016B2, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aTestingNow_0:  .asciz "TESTING NOW"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                mov     0, r3
                st      g14, mmode
                lda     0xE0E, g14
                st      g14, 0xE0(g10)
                ld      mmode, g14
                mov     1, r5
                addo    0x1F, 1, r4
loc_61E7C:                              # CODE XREF: ROM:00061E88↓j
                st      r5, (g10)[g12*1]
                addo    r5, r5, r5
                cmpdeci 1, r4, r4
                bl      loc_61E7C
                st      r3, (g10)[g12*1]
                ld      BUFF_ADD, r3
                st      g14, mmode
                lda     0xF0F, g14
                st      g14, 0xF0(g10)
                ld      mmode, g14
                ldib    MENU_ITEM_SELECT, r15
                lda     1(r15), r15
                stib    r15, MENU_ITEM_SELECT
                shlo    6, 1, r15
                st      r15, CTRL_TIMER
                ret
# ---------------------------------------------------------------------------
T_G_P__TEST_countdown:                  # DATA XREF: ROM:00061DE8↑o
                ld      CTRL_TIMER, r3
                subi    1, r3, r3
                cmpobe  0, r3, MENU_ITEM_SELECT_next_item
                st      r3, CTRL_TIMER
                ret
# ---------------------------------------------------------------------------
MENU_ITEM_SELECT_next_item:             # CODE XREF: ROM:00061EE0↑j
                ldib    MENU_ITEM_SELECT, r15
                lda     1(r15), r15
                stib    r15, MENU_ITEM_SELECT
                ret
# ---------------------------------------------------------------------------
T_G_P_TEST_test:                        # DATA XREF: ROM:00061DEC↑o
                shlo    0x13, 0x13, r11 # r11 = 0x980000 aka COPRO_CONTROL1_START
                ld      0x10(r11), r10  # Reads from 0x980010 which is not mapped in MAME
                ld      0x14(r11), r11  # Reads from 0x980014 which is not mapped in MAME
                mov     0x1B, r8
                mov     0xF, r9
                mov     3, r6
                mov     r9, r5
                mov     2, r7
                mov     1, r4
loc_61F2C:                              # CODE XREF: ROM:00061F54↓j
                shlo    7, r5, r15
                addo    r8, r8, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                and     r7, r10, g0
                call    tgp_test_result
                shlo    1, r7, r7
                addo    r6, r5, r5
                cmpdeci 1, r4, r4
                bl      loc_61F2C
                ldib    MENU_ITEM_SELECT, r15
                lda     1(r15), r15
                stib    r15, MENU_ITEM_SELECT
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10016A6, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aPressTestButto_2:.asciz "PRESS TEST BUTTON TO EXIT"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
T_G_P__TEST_EXIT:                       # DATA XREF: ROM:00061DF0↑o
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                lda     0x4000104, r14
                and     r14, r15, r15
                cmpo    0, r15
                bne     TEST_MENU_init
                ret
# =============== S U B R O U T I N E =======================================
tgp_test_result:                        # CODE XREF: ROM:00061F44↑p
                mov     g0, r3
                cmpobe  0, r3, loc_61FE0 # r3 = 0 = Good
                mov     1, r3           # r3 = 1 = Bad
loc_61FE0:                              # CODE XREF: tgp_test_result+4↑j
                mov     g0, r11
                ld      tgp_test_Good_Bad[r3*4], g0
                call    print_mes
                mov     r11, g0
                ret
# End of function tgp_test_result
# ---------------------------------------------------------------------------
tgp_test_Good_Bad:.long aGood           # DATA XREF: tgp_test_result+10↑r
                .long aBad              # "BAD "
# ---------------------------------------------------------------------------
TEST_MENU_EXIT:                         # DATA XREF: ROM:000DC984↓o
                addo    4, sp, sp
                st      g9, -4(sp)
                ld      add_BACKUP_RAM_TO_RAM, g9
                ldob    0x3324(g9), r15 # r15 = BACKUP_RAM_TO_RAM+0x3324
                cmpobne 26, r15, loc_6202C # if credits_required_bk_ram != 26 then branch
                ld      0x3320(g9), r15 # r15 = BACKUP_RAM_TO_RAM+0x3320
                bbc     1, r15, loc_62030
loc_6202C:                              # CODE XREF: ROM:0006201C↑j
                call    sub_26C8
loc_62030:                              # CODE XREF: ROM:00062028↑j
                ld      -4(sp), g9
                subo    4, sp, sp
                call    sub_62328
                lda     0xFF, r3
                ldob    MENU_ITEM_SELECT, r4
                cmpobe  r3, r4, loc_62130
                lda     0x1000000, g9
                shlo    6, 1, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                ld      mi_ExitTestMode, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                shlo    6, 5, r15
                st      r15, CTRL_TIMER
                lda     0xFF, r15
                stib    r15, MENU_ITEM_SELECT
                ldob    0x500171, r6
                bbs     0, r6, loc_6212C
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1000F26, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .long 0x54415453
                .long 0x52204349
                .long 0x49204D41
                .long 0x42272053
                .long 0x2D4B4341
                .long 0x4D205055
                .long 0x2745444F
                .long 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10010A4, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aAndYourChanges:.asciz "AND YOUR CHANGES ARE INVALID !!"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
loc_6212C:                              # CODE XREF: ROM:00062098↑j
                ret
# ---------------------------------------------------------------------------
loc_62130:                              # CODE XREF: ROM:0006204C↑j
                ld      CTRL_TIMER, r3
                subi    1, r3, r3
                st      r3, CTRL_TIMER
                cmpibge 0, r3, loc_6214C
                ret
# ---------------------------------------------------------------------------
loc_6214C:                              # CODE XREF: ROM:00062144↑j
                shlo    0xF, 1, r15
                stis    r15, 0x500082
                lda     scrB_V_page, r3
                ldos    (r3), r4
                clrbit  0xF, r4, r4
                stos    r4, (r3)
                ldos    2(r3), r4
                clrbit  0xF, r4, r4
                stos    r4, 2(r3)
                mov     0, r4
                stob    r4, POLYGON_DISP
                lda     0x1000000, g9
                shlo    6, 1, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                ld      mod_fa_control0, r3
                ld      0x0(r3), r15
                clrbit  0, r15, r15
                st      r15, 0x0(r3)
                ld      0x0(r3), r15
                clrbit  1, r15, r15
                st      r15, 0x0(r3)
                mov     0, r15
                st      r15, INTERUPT_FLAGS_MOMEN_ON_REL
                mov     0, r15
                st      r15, INTERUPT_FLAGS_MOMENTARY
                mov     0, r15
                st      r15, INTERUPT_FLAGS_HELD
                mov     0, r15
                st      r15, INTERUPT_FLAGS_HELD_PREV_FRAME
                ld      -4(sp), g4
                subo    4, sp, sp
                lda     IRQ_ENABLE_START, r3
                mov     0, r4
                st      r4, (r3)
                call    warn_screen_no_show_write
                b       start_ip
# ---------------------------------------------------------------------------
                ret                     # unreachable code
# ---------------------------------------------------------------------------
# START OF FUNCTION CHUNK FOR ga_INITIALIZE_sub
TEST_MENU_init:                         # CODE XREF: ROM:0005C078↑j
                lda     0x1000000, g9
                shlo    6, 1, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                ldob    MENU_SELECT, r4
                clrbit  7, r4, r4
                stob    r4, MENU_SELECT
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                ld      TEST_MENU_list[r4*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r14
                stos    r14, (g9)
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                mov     0, r15
                mov     0xB, r14
loc_622A4:                              # CODE XREF: ga_INITIALIZE_sub+44C4↓j
                ld      TEST_MENU_list[r15*8], r13
                ld      (r13), g9
                lda     4(r13), g0
                call    print_mes
                addo    1, r15, r15
                cmpobge r14, r15, loc_622A4
                ld      TestMenu, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_SelectWithServiceButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_AndPressTestButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ret
# END OF FUNCTION CHUNK FOR ga_INITIALIZE_sub
# =============== S U B R O U T I N E =======================================
set_game_assign_byte_flag:              # CODE XREF: ROM:00003848↑p
                ld      add_BACKUP_RAM_TO_RAM, r15
                lda     0x3340(r15), g0 # g0 = BACKUP_RAM_TO_RAM+0x3340
                addo    31, 1, g2       # g2 = 32
                mov     0, g1
                call    make_crc        # crc value stored to g0
                stos    g0, crc_value_bk
                ret
# End of function set_game_assign_byte_flag
# =============== S U B R O U T I N E =======================================
sub_62328:                              # CODE XREF: ROM:0000384C↑p
                ld      add_BACKUP_RAM_TO_RAM, r15
                lda     0x3320(r15), g0 # g0 = BACKUP_RAM_TO_RAM+0x3320
                mov     15, g2
                mov     0, g1
                call    make_crc        # crc value stored to g0
                stos    g0, 0x1D03300
                ret
# End of function sub_62328
# =============== S U B R O U T I N E =======================================
write_stats_to_backup_ram:              # CODE XREF: ROM:00003850↑p
                ld      add_BACKUP_RAM_TO_RAM, r15
                lda     0x33A8(r15), g0 # g0 = BACKUP_RAM_TO_RAM+0x33A8
                lda     0x6D0, g2
                mov     0, g1
                call    make_crc        # crc value stored to g0
                stos    g0, play_time_bak # hit after 0x66AC
                ret
# End of function write_stats_to_backup_ram
# =============== S U B R O U T I N E =======================================
write_str_stf:                          # CODE XREF: ROM:floating_reset_code↑p
                lda     0x534F4E49, r3      # Used for checking the Backup Ram to see if it's for the correct game.
                lda     0x43544845, r4
                lda     0x46494748, r5
                lda     0x54455220, r6
                st      r3, aInosehtchgifRe_0 # "INOSEHTCHGIF RET"
                st      r3, aInosehtchgifRe # "INOSEHTCHGIF RET"
                st      r4, aInosehtchgifRe_0+4 # "EHTCHGIF RET"
                st      r4, aInosehtchgifRe+4 # "EHTCHGIF RET"
                st      r5, aInosehtchgifRe_0+8 # "HGIF RET"
                st      r5, aInosehtchgifRe+8 # "HGIF RET"
                st      r6, aInosehtchgifRe_0+0xC # " RET"
                st      r6, aInosehtchgifRe+0xC # " RET"
                mov     0x12, r4
                stos    r4, short_0x12
                stos    r4, backup_ram_check_0x12
                ret
# End of function write_str_stf
# =============== S U B R O U T I N E =======================================
init_some_backup_stuff:                 # CODE XREF: ROM:00003840↑p
                mov     0, r3
                st      r3, total_game_time_bk
                st      r3, total_game_time
                st      r3, 0x1D0331C
                st      r3, 0x59C31C
                st      r3, bk_chute_2
                st      r3, chute_2
                st      r3, bk_chute_1
                st      r3, chute_1
                st      r3, bk_coin_credits
                st      r3, coin_credits
                st      r3, bk_service_credits
                st      r3, service_credits
                st      r3, 0x1D03380
                st      r3, 0x59C380
                st      r3, 0x1D03384
                st      r3, 0x59C384
                st      r3, CREDIT_01_bk
                st      r3, CREDIT_01
                st      r3, CREDIT_02_bk
                st      r3, CREDIT_02
                stob    r3, save_working_bk
                stob    r3, save_working
                lda     0x1D03380, r3
                lda     3199, r4
                mov     0, r5
loc_624B4:                              # CODE XREF: init_some_backup_stuff+CC↓j
                stob    r5, (r3)[r4]    # Writes 0 at 0x1D03FFF
                cmpdeci 0, r4, r4       # and loops until it reaches 0x1D03380
                bl      loc_624B4
                lda     0x59C380, r3
                lda     3167, r4
                mov     0, r5
loc_624D0:                              # CODE XREF: init_some_backup_stuff+E8↓j
                stob    r5, (r3)[r4]    # Writes 0 at 0x59CFDF
                cmpdeci 0, r4, r4       # and loops until it reaches 0x59C380
                bl      loc_624D0
                ret
# End of function init_some_backup_stuff
# =============== S U B R O U T I N E =======================================
init_game_assignments:                  # CODE XREF: ROM:00003728↑p
                mov     2, r15
                stob    r15, p1_match_count_bk
                stob    r15, p1_match_count
                mov     2, r15
                stob    r15, vs_match_count_bk
                stob    r15, vs_match_count
                mov     5, r15
                stob    r15, barrier_count_bk
                stob    r15, barrier_count
                mov     1, r15
                stob    r15, match_enemy_rank_bk
                stob    r15, match_enemy_rank
                mov     1, r15
                stob    r15, max_energy_1p_bk
                stob    r15, max_energy_1p
                mov     1, r15
                stob    r15, max_energy_vs_bk
                stob    r15, max_energy_vs
                mov     1, r15
                stob    r15, unused_unknown0_bk
                stob    r15, unused_unknown0
                mov     1, r15
                stob    r15, unused_enemy_r1_diff_bak
                stob    r15, unused_enemy_r1_diff
                mov     1, r15
                stob    r15, unused_enemy_r2_diff_bak
                stob    r15, unused_enemy_r2_diff
                mov     1, r15
                stob    r15, unused_enemy_r3_diff_bak
                stob    r15, unused_enemy_r3_diff
                mov     1, r15
                stob    r15, unused_enemy_r4_diff_bak
                stob    r15, unused_enemy_r4_diff
                mov     1, r15
                stob    r15, unused_enemy_r5_diff_bak
                stob    r15, unused_enemy_r5_diff
                mov     1, r15
                stob    r15, unused_enemy_r6_diff_bak
                stob    r15, unused_enemy_r6_diff
                mov     1, r15
                stob    r15, unused_enemy_r7_diff_bak
                stob    r15, unused_enemy_r7_diff
                mov     1, r15
                stob    r15, unused_enemy_r8_diff_bak
                stob    r15, unused_enemy_r8_diff
                mov     1, r15
                stob    r15, unused_enemy_r9_diff_bak
                stob    r15, unused_enemy_r9_diff
                mov     1, r15
                stob    r15, unused_enemy_r10_diff_bak
                stob    r15, unused_enemy_r10_diff
                mov     1, r15
                stob    r15, unused_enemy_r11_diff_bak
                stob    r15, unused_enemy_r11_diff
                shlo    5, 5, r15
                stos    r15, max_energy_vs_array_bak
                stos    r15, max_energy_vs_ram
                shlo    3, 0x19, r15    # Store 200 to unused variable
                stos    r15, un_stage_width_bk
                stos    r15, un_stage_width
                mov     0, r15
                stob    r15, game_assign_byte_flag_bk
                stob    r15, game_assign_byte_flag
                mov     0, r15
                stob    r15, country_val_bk
                stob    r15, country_val
                mov     2, r15
                stob    r15, time_var_array_num_bk
                stob    r15, time_var_array_num
                mov     0x16, r15
                stob    r15, TST_RED_ADD_bk
                stob    r15, TST_RED_ADD_bk_ram
                mov     0x16, r15
                stob    r15, TST_GRN_ADD_bk
                stob    r15, TST_GRN_ADD_bk_ram
                mov     0x16, r15
                stob    r15, TST_BLUE_ADD_bk
                stob    r15, TST_BLUE_ADD_bk_ram
                addo    0x1F, 0x17, r15
                stob    r15, TST_RED_MUL_bk
                stob    r15, TST_RED_MUL_bk_ram
                addo    0x1F, 0x17, r15
                stob    r15, TST_GRN_MUL_bk
                stob    r15, TST_GRN_MUL_bk_ram
                addo    0x1F, 0x17, r15
                stob    r15, TST_BLUE_MUL_bk
                stob    r15, TST_BLUE_MUL_bk_ram
                mov     0x1F, r15
                stob    r15, TST_B_BRIGHT_bk
                stob    r15, TST_B_BRIGHT_bk_ram
                call    load_COLORS_to_RAM
                ret
# End of function init_game_assignments
# =============== S U B R O U T I N E =======================================
sram_clear_for_coin_assign:             # CODE XREF: ROM:0000377C↑p
                xor     r3, r3, r3      # Label from Virtua Fighter 2 source
                st      r3, 0x1D03320
                st      r3, 0x59C320
                stob    r3, CREDITS_REQUIRED
                stob    r3, credits_required_bk_ram
                stob    r3, 0x1D03325
                stob    r3, 0x59C325
                stob    r3, 0x1D03326
                stob    r3, 0x59C326
                stob    r3, 0x1D03327
                stob    r3, 0x59C327
                stob    r3, 0x1D03328
                stob    r3, 0x59C328
                mov     r3, r15
                stob    r15, 0x1D03329
                stob    r15, 0x59C329
                mov     1, r15
                stob    r15, 0x1D0332A
                stob    r15, 0x59C32A
                mov     1, r15
                stob    r15, 0x1D0332B
                stob    r15, 0x59C32B
                mov     r3, r15
                stob    r15, 0x1D0332C
                stob    r15, 0x59C32C
                mov     1, r15
                stob    r15, 0x1D0332D
                stob    r15, 0x59C32D
                mov     1, r15
                stob    r15, 0x1D0332E
                stob    r15, 0x59C32E
                ret
# End of function sram_clear_for_coin_assign
# =============== S U B R O U T I N E =======================================
sub_62820:                              # CODE XREF: DISP_TEST_MENU+168↑p
                lda     0x1000100, g9
                mov     0, r15
loc_6282C:                              # CODE XREF: sub_62820+18↓j
                ldob    (g0)[r15], r14
                cmpo    0, r14
                addo    1, r15, r15
                bne     loc_6282C
                subo    1, r15, r15
                addo    1, r15, r3
                shro    1, r3, r3
                addo    0x1F, 1, r15
                subi    r3, r15, r3
                addo    r3, r3, r3
                lda     0x7F, r15
                not     r15, r15
                and     r15, g9, g9
                addo    r3, g9, g9
                call    print_mes
                ret
# End of function sub_62820
# ---------------------------------------------------------------------------
loc_6286C:                              # CODE XREF: ROM:loc_5CDF4↑p
                shlo    0x18, 1, g9
                lda     0x800F, r4
                lda     0xBFF, r3
loc_6287C:                              # CODE XREF: ROM:00062888↓j
                stos    r4, (g9)
                addo    2, g9, g9
                cmpdeco 0, r3, r3
                bl      loc_6287C
                shlo    0x18, 1, g9
                lda     0x8018, r15
                stis    r15, (g9)
                lda     0x8019, r15
                stis    r15, 0x7A(g9)
                lda     0x801A, r15
                stis    r15, 0x1780(g9)
                lda     0x801B, r15
                stis    r15, 0x17FA(g9)
                lda     0x1000002, g9
                lda     0x8011, r4
                addo    0x1F, 0x1C, r3
loc_628DC:                              # CODE XREF: ROM:000628E8↓j
                stos    r4, (g9)
                addo    2, g9, g9
                cmpdeco 0, r3, r3
                bl      loc_628DC
                lda     0x1001782, g9
                lda     0x8010, r4
                addo    0x1F, 0x1C, r3
loc_62900:                              # CODE XREF: ROM:0006290C↓j
                stos    r4, (g9)
                addo    2, g9, g9
                cmpdeco 0, r3, r3
                bl      loc_62900
                lda     0x1000080, g9
                shlo    7, 1, r6
                lda     0x8013, r4
                addo    0x1F, 0xE, r3
loc_62928:                              # CODE XREF: ROM:00062934↓j
                stos    r4, (g9)
                addo    r6, g9, g9
                cmpdeco 0, r3, r3
                bl      loc_62928
                lda     0x10000FA, g9
                lda     0x8012, r4
                lda     loc_8020, r5
                addo    0x1F, 0xE, r3
loc_62954:                              # CODE XREF: ROM:00062968↓j
                stos    r4, (g9)
                stos    r5, 2(g9)
                stos    r5, 4(g9)
                addo    r6, g9, g9
                cmpdeco 0, r3, r3
                bl      loc_62954
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100012E, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCRTTest22:     .asciz "C.R.T. TEST 2/2"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ld      mi_PressTestButtonToExit, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                subo    1, 0, r12
                mov     r12, r13
                mov     r12, r14
                mov     r12, r15
                lda     0x100D000, r9
                xor     r11, r11, r11
loc_629D4:                              # CODE XREF: ROM:00062A1C↓j
                stq     r12, 0x0(r9)[r11*16]
                stq     r12, 0x180(r9)[r11*16]
                stq     r12, 0x300(r9)[r11*16]
                stq     r12, 0x480(r9)[r11*16]
                stq     r12, 0x600(r9)[r11*16]
                stq     r12, 0x780(r9)[r11*16]
                stq     r12, 0x900(r9)[r11*16]
                stq     r12, 0xA80(r9)[r11*16]
                cmpo    0x17, r11
                addo    1, r11, r11
                bg      loc_629D4
                ret
# ---------------------------------------------------------------------------
display_C_R_T_TEST_1:                   # CODE XREF: ROM:draw_C_R_T__TEST_menu↑p
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x100012E, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCRTTest12:     .asciz "C.R.T. TEST 1/2"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                lda     18, g0
                call    _ScrollCG_Initialize
                lda     19, g0
                call    _ScrollColor_Initialize
                lda     0x100020E, g9
                lda     125, g0
                call    dsp_pattern_new
                lda     0x100068E, g9
                lda     126, g0
                call    dsp_pattern_new
                lda     0x1000B0E, g9
                lda     127, g0
                call    dsp_pattern_new
                lda     0x1000F8E, g9
                lda     128, g0
                call    dsp_pattern_new
                lda     0x100140E, g9
                addo    0x1F, 0x13, g0
                mov     8, g1
                call    clr_pattern_s
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10014A2, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aColor:         .asciz "COLOR"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10014BE, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aBias:          .asciz "BIAS"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10014CA, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aGainScroll:    .asciz "GAIN SCROLL:"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001530, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aRed:           .asciz "RED"
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10015B0, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aGreen:         .asciz "GREEN"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001630, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aBlue:          .asciz "BLUE"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x10016B0, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aExit_3:        .asciz "EXIT"
                .fill 3, 1, 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001700, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aSelect1pLeverU:.asciz "                  SELECT:1P LEVER UP/DOWN"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                addo    4, sp, sp
                st      g0, -4(sp)
                lda     0x1001780, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aBiasSet1pPunch:.asciz "   BIAS SET:1P PUNCH/KICK      GAIN SET:2P PUNCH/KICK"
                .short 0
# ---------------------------------------------------------------------------
                ld      -4(sp), g0
                subo    4, sp, sp
                ret
# ---------------------------------------------------------------------------
loc_62CCC:                              # CODE XREF: ROM:loc_5C220↑p
                ld      INTERUPT_FLAGS_HELD, r9
                lda     0x1000440, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_4:         .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0xD, r9, loc_62D00
                lda     0x1000440, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_5:          .asciz "ON "
# ---------------------------------------------------------------------------
loc_62D00:                              # CODE XREF: ROM:00062CE8↑j
                lda     0x1000540, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_5:         .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0xC, r9, loc_62D2C
                lda     0x1000540, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_6:          .asciz "ON "
# ---------------------------------------------------------------------------
loc_62D2C:                              # CODE XREF: ROM:00062D14↑j
                lda     0x1000640, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_6:         .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0xE, r9, loc_62D58
                lda     0x1000640, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_7:          .asciz "ON "
# ---------------------------------------------------------------------------
loc_62D58:                              # CODE XREF: ROM:00062D40↑j
                lda     0x1000740, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_7:         .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0xF, r9, loc_62D84
                lda     0x1000740, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_8:          .asciz "ON "
# ---------------------------------------------------------------------------
loc_62D84:                              # CODE XREF: ROM:00062D6C↑j
                lda     0x1000940, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_8:         .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     8, r9, loc_62DB0
                lda     0x1000940, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_9:          .asciz "ON "
# ---------------------------------------------------------------------------
loc_62DB0:                              # CODE XREF: ROM:00062D98↑j
                lda     0x1000A40, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_9:         .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     9, r9, loc_62DDC
                lda     0x1000A40, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_10:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62DDC:                              # CODE XREF: ROM:00062DC4↑j
                lda     0x1000B40, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_10:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0xA, r9, loc_62E08
                lda     0x1000B40, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_11:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62E08:                              # CODE XREF: ROM:00062DF0↑j
                lda     0x1000D40, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_11:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     4, r9, loc_62E34
                lda     0x1000D40, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_12:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62E34:                              # CODE XREF: ROM:00062E1C↑j
                lda     0x1000452, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_12:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0x15, r9, loc_62E60
                lda     0x1000452, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_13:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62E60:                              # CODE XREF: ROM:00062E48↑j
                lda     0x1000552, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_13:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0x14, r9, loc_62E8C
                lda     0x1000552, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_14:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62E8C:                              # CODE XREF: ROM:00062E74↑j
                lda     0x1000652, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_14:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0x16, r9, loc_62EB8
                lda     0x1000652, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_15:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62EB8:                              # CODE XREF: ROM:00062EA0↑j
                lda     0x1000752, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_15:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0x17, r9, loc_62EE4
                lda     0x1000752, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_16:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62EE4:                              # CODE XREF: ROM:00062ECC↑j
                lda     0x1000952, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_16:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0x10, r9, loc_62F10
                lda     0x1000952, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_17:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62F10:                              # CODE XREF: ROM:00062EF8↑j
                lda     0x1000A52, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_17:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0x11, r9, loc_62F3C
                lda     0x1000A52, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_18:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62F3C:                              # CODE XREF: ROM:00062F24↑j
                lda     0x1000B52, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_18:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0x12, r9, loc_62F68
                lda     0x1000B52, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_19:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62F68:                              # CODE XREF: ROM:00062F50↑j
                lda     0x1000D52, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_19:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     5, r9, loc_62F94
                lda     0x1000D52, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_20:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62F94:                              # CODE XREF: ROM:00062F7C↑j
                lda     0x1000F4C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_20:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     0, r9, loc_62FC0
                lda     0x1000F4C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_21:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62FC0:                              # CODE XREF: ROM:00062FA8↑j
                lda     0x100104C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_21:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     1, r9, loc_62FEC
                lda     0x100104C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_22:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_62FEC:                              # CODE XREF: ROM:00062FD4↑j
                lda     0x100114C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_22:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     3, r9, loc_63018
                lda     0x100114C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_23:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_63018:                              # CODE XREF: ROM:00063000↑j
                lda     0x100124C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOff_23:        .asciz "OFF"
# ---------------------------------------------------------------------------
                bbc     2, r9, loc_63044
                lda     0x100124C, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aOn_24:         .asciz "ON "
# ---------------------------------------------------------------------------
loc_63044:                              # CODE XREF: ROM:0006302C↑j
                ret
# =============== S U B R O U T I N E =======================================
wait_for_inputs_service_menu:           # CODE XREF: GAME_ASSIGNMENTS+D8↑p
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                bbs     13, r15, loc_6306C
                lda     0x8001008, r14
                and     r14, r15, r15
                cmpibne 0, r15, loc_63074
                mov     0, g0
                ret
# ---------------------------------------------------------------------------
loc_6306C:                              # CODE XREF: wait_for_inputs_service_menu+8↑j
                subo    1, 0, g0
                ret
# ---------------------------------------------------------------------------
loc_63074:                              # CODE XREF: wait_for_inputs_service_menu+18↑j
                mov     1, g0
                ret
# End of function wait_for_inputs_service_menu
# =============== S U B R O U T I N E =======================================
wait_for_inputs_service_menu_1:         # CODE XREF: ROM:ga_MATCH_COUNT_1P_sub↑p
                ld      INTERUPT_FLAGS_MOMENTARY, r15
                bbs     9, r15, loc_630A0
                lda     0x4000104, r14
                and     r14, r15, r15
                cmpibne 0, r15, loc_630A8
                mov     0, g0
                ret
# ---------------------------------------------------------------------------
loc_630A0:                              # CODE XREF: wait_for_inputs_service_menu_1+8↑j
                subo    1, 0, g0
                ret
# ---------------------------------------------------------------------------
loc_630A8:                              # CODE XREF: wait_for_inputs_service_menu_1+18↑j
                mov     1, g0
                ret
# End of function wait_for_inputs_service_menu_1
# ---------------------------------------------------------------------------
loc_630B0:                              # CODE XREF: ROM:loc_5E7A0↑p
                ld      add_BACKUP_RAM_TO_RAM, r3
                ldob    0x3324(r3), r3  # r3 = BACKUP_RAM_START+0x3324
                ldob    credits_required_array[r3], r3
                lda     0x8030, r12
                lda     loc_8020, r10
                mov     0, r11
                shro    4, r3, r4
                and     0xF, r4, r4
                ld      off_63A04[r4*4], r5
                mov     0xD, r8
loc_630F0:                              # CODE XREF: ROM:000631FC↓j
                ldob    (r5), r6
                cmpibe  0, r6, loc_631C0
                addo    1, r5, r5
                mov     0x1F, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCoinsCredits:  .asciz "  COINS   CREDITS"
                .short 0
# ---------------------------------------------------------------------------
                shro    4, r6, r9
                and     0xF, r9, r9
                cmpibne 1, r9, loc_63158
                addo    0x1F, 6, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                stos    r10, (g9)
loc_63158:                              # CODE XREF: ROM:00063138↑j
                addo    r12, r9, r9
                mov     0x1F, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                stos    r9, (g9)
                and     0xF, r6, r9
                cmpibne 1, r9, loc_6319C
                addo    0x1F, 0x10, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                stos    r10, (g9)
loc_6319C:                              # CODE XREF: ROM:0006317C↑j
                addo    r12, r9, r9
                addo    0x1F, 8, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                stos    r9, (g9)
                b       loc_631F4
# ---------------------------------------------------------------------------
loc_631C0:                              # CODE XREF: ROM:000630F4↑j
                mov     0x1F, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "                 "
                .short 0
# ---------------------------------------------------------------------------
loc_631F4:                              # CODE XREF: ROM:000631BC↑j
                addo    2, r8, r8
                addo    1, r11, r11
                cmpobg  5, r11, loc_630F0
                ld      add_BACKUP_RAM_TO_RAM, r15
                ld      0x3320(r15), r15 # r15 = BACKUP_RAM_START+0x3320
                bbs     0, r15, loc_6333C
                mov     0, r11
                and     0xF, r3, r4
                ld      off_63A04[r4*4], r5
                mov     0x18, r8
loc_63228:                              # CODE XREF: ROM:00063334↓j
                ldob    (r5), r6
                cmpibe  0, r6, loc_632F8
                addo    1, r5, r5
                mov     0x1F, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
aCoinsCredits_0:.asciz "  COINS   CREDITS"
                .short 0
# ---------------------------------------------------------------------------
                shro    4, r6, r9
                and     0xF, r9, r9
                cmpibne 1, r9, loc_63290
                addo    0x1F, 6, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                stos    r10, (g9)
loc_63290:                              # CODE XREF: ROM:00063270↑j
                addo    r12, r9, r9
                mov     0x1F, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                stos    r9, (g9)
                and     0xF, r6, r9
                cmpibne 1, r9, loc_632D4
                addo    0x1F, 0x10, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                stos    r10, (g9)
loc_632D4:                              # CODE XREF: ROM:000632B4↑j
                addo    r12, r9, r9
                addo    0x1F, 8, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                stos    r9, (g9)
                b       loc_6332C
# ---------------------------------------------------------------------------
loc_632F8:                              # CODE XREF: ROM:0006322C↑j
                mov     0x1F, r7
                shlo    7, r8, r15
                addo    r7, r7, r14
                addo    r15, r14, r15
                shlo    0x18, 1, r14
                addo    r15, r14, g9
                balx    debug_disp_mes, r14
# ---------------------------------------------------------------------------
                .asciz "                 "
                .short 0
# ---------------------------------------------------------------------------
loc_6332C:                              # CODE XREF: ROM:000632F4↑j
                addo    2, r8, r8
                addo    1, r11, r11
                cmpobg  5, r11, loc_63228
                ret
# ---------------------------------------------------------------------------
loc_6333C:                              # CODE XREF: ROM:00063210↑j
                lda     0x1000C3C, g9
                mov     0x12, g0
                mov     0xA, g1
                call    clr_pattern_s
                ret
# =============== S U B R O U T I N E =======================================
sub_63354:                              # CODE XREF: sub_63514+58↓p
                lda     0x1080FA0, r15
                subo    1, 0, r4
                mov     r4, r5
                mov     r5, r6
                mov     r6, r7
                stq     r4, (r15)
                stq     r4, 0x10(r15)
                mov     0, r8
                lda     0x180001E, r9 # 0x000000
                stos    r8, (r9)
                lda     0x807D807D, r15
                mov     r15, r14
                mov     r14, r13
                mov     r13, r12
                lda     CG_DATA_START, g9
                shlo    7, 1, r11
                shlo    7, 1, r10
loc_633A8:                              # CODE XREF: sub_63354+7C↓j
                stq     r12, (g9)
                stq     r12, 0x10(g9)
                stq     r12, 0x20(g9)
                stq     r12, 0x30(g9)
                stq     r12, 0x40(g9)
                stq     r12, 0x50(g9)
                stq     r12, 0x60(g9)
                stq     r12, 0x70(g9)
                addo    r11, g9, g9
                cmpdeci 1, r10, r10
                bl      loc_633A8
                ret
# End of function sub_63354
# =============== S U B R O U T I N E =======================================
sub_633D8:                              # CODE XREF: sub_63514+5C↓p
                lda     TMAPGFXBASE_START, r3
                shlo    8, 1, r8
loc_633E4:                              # CODE XREF: sub_633D8+90↓j
                ldq     (r3), r4
                stq     r4, 0x1000(r3)
                stq     r4, 0x2000(r3)
                stq     r4, 0x3000(r3)
                stq     r4, 0x4000(r3)
                stq     r4, 0x5000(r3)
                stq     r4, 0x6000(r3)
                stq     r4, 0x7000(r3)
                stq     r4, 0x8000(r3)
                stq     r4, 0x9000(r3)
                stq     r4, 0xA000(r3)
                stq     r4, 0xB000(r3)
                stq     r4, 0xC000(r3)
                stq     r4, 0xD000(r3)
                stq     r4, 0xE000(r3)
                stq     r4, 0xF000(r3)
                addo    0x10, r3, r3
                cmpdeci 1, r8, r8
                bl      loc_633E4
                shlo    0x17, 3, r3
                lda     0xFC00, r4
                stos    r4, 0x22(r3)
                lda     0x83E0, r4
                stos    r4, 0x42(r3)
                lda     0x801F, r4
                stos    r4, 0x62(r3)
                lda     0xFFE0, r4
                stos    r4, 0x82(r3)
                lda     0xFC1F, r4
                stos    r4, 0xA2(r3)
                lda     0x83FF, r4
                stos    r4, 0xC2(r3)
                lda     0x7FFF, r4
                stos    r4, 0xE2(r3)
                lda     0xBDEF, r4
                stos    r4, 0x102(r3)
                shlo    0xA, 0xF, r4
                stos    r4, 0x122(r3)
                shlo    5, 0xF, r4
                stos    r4, 0x142(r3)
                mov     0xF, r4
                stos    r4, 0x162(r3)
                lda     0x3DE0, r4
                stos    r4, 0x182(r3)
                lda     0x3C0F, r4
                stos    r4, 0x1A2(r3)
                lda     0x1EF, r4
                stos    r4, 0x1C2(r3)
                mov     0, r4
                stos    r4, 0x1E2(r3)
                ret
# End of function sub_633D8
# =============== S U B R O U T I N E =======================================
sub_63514:                              # CODE XREF: sub_5BB20+178↑p
                shlo    0xF, 1, r15     # 0x8000 or 32,768
                stis    r15, 0x500082
                ld      not_scr_bg_move, r15
                setbit  0xE, r15, r15
                st      r15, not_scr_bg_move
                lda     0x1004000, g9
                shlo    6, 1, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                xor     r3, r3, r3
                stos    r3, scrB_H_page
                stos    r3, scrB_V_page
                stos    r3, 0x100A006
                stos    r3, 0x100A00E
                call    sub_63354
                call    sub_633D8
                mov     1, r4
                stob    r4, POLYGON_DISP
                lda     0x1000000, g9
                shlo    6, 1, g0
                addo    0x1F, 0x11, g1
                call    clr_pattern_s
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                ldob    MENU_SELECT, r4
                ld      TEST_MENU_list[r4*8], r15
                ld      (r15), g9
                subo    4, g9, g9
                lda     0x801C, r14
                stos    r14, (g9)
                ldos    0x500082, r15
                lda     0xFFFFFC7F, r14
                and     r14, r15, r15
                mov     0, r14
                or      r14, r15, r15
                stos    r15, 0x500082
                mov     0, r15
                mov     0xB, r14
loc_63608:                              # CODE XREF: sub_63514+10C↓j
                ld      TEST_MENU_list[r15*8], r13
                ld      (r13), g9
                lda     4(r13), g0
                call    print_mes
                addo    1, r15, r15
                cmpobge r14, r15, loc_63608
                ld      TestMenu, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_SelectWithServiceButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ld      mi_AndPressTestButton, r15
                ld      (r15), g9
                addo    4, r15, g0
                call    print_mes
                ret
# End of function sub_63514
# =============== S U B R O U T I N E =======================================
warn_screen_no_show_write:              # CODE XREF: test_sw_chk+B0↑p
                lda     0x52455320, r8
                lda     0x4E4C2053, r9
                lda     0x4E204544, r10
                lda     0x20514555, r11
                stq     r8, warn_screen_check_str
                ret
# End of function warn_screen_no_show_write
